
L431_USART1_MDA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bac  08003bac  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000044  08003bf8  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003bf8  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7fc  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e0d  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002eff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002112f  00000000  00000000  0002f868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009629  00000000  00000000  00050997  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4727  00000000  00000000  00059fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e6e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ac  00000000  00000000  0011e764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000044 	.word	0x20000044
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b44 	.word	0x08003b44

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000048 	.word	0x20000048
 80001c8:	08003b44 	.word	0x08003b44

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f95a 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 f80d 	bl	800050c <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f003 f921 	bl	8003744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <HAL_InitTick+0x68>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d022      	beq.n	8000566 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_InitTick+0x6c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_InitTick+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800052c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000530:	fbb2 f3f3 	udiv	r3, r2, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f968 	bl	800080a <HAL_SYSTICK_Config>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10f      	bne.n	8000560 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d809      	bhi.n	800055a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000546:	2200      	movs	r2, #0
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	f04f 30ff 	mov.w	r0, #4294967295
 800054e:	f000 f932 	bl	80007b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <HAL_InitTick+0x70>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	e007      	b.n	800056a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
 800055e:	e004      	b.n	800056a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e001      	b.n	800056a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800056a:	7bfb      	ldrb	r3, [r7, #15]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000004 	.word	0x20000004
 8000578:	20000040 	.word	0x20000040
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x1c>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_IncTick+0x20>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4413      	add	r3, r2
 800058e:	4a03      	ldr	r2, [pc, #12]	; (800059c <HAL_IncTick+0x1c>)
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	20000060 	.word	0x20000060
 80005a0:	20000004 	.word	0x20000004

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000060 	.word	0x20000060

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d004      	beq.n	80005e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e0:	bf00      	nop
 80005e2:	f7ff ffdf 	bl	80005a4 <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d8f7      	bhi.n	80005e2 <HAL_Delay+0x26>
  {
  }
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e098      	b.n	8000968 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <HAL_DMA_Init+0x150>)
 800083e:	429a      	cmp	r2, r3
 8000840:	d80f      	bhi.n	8000862 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <HAL_DMA_Init+0x154>)
 800084a:	4413      	add	r3, r2
 800084c:	4a4b      	ldr	r2, [pc, #300]	; (800097c <HAL_DMA_Init+0x158>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	009a      	lsls	r2, r3, #2
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a48      	ldr	r2, [pc, #288]	; (8000980 <HAL_DMA_Init+0x15c>)
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b46      	ldr	r3, [pc, #280]	; (8000984 <HAL_DMA_Init+0x160>)
 800086a:	4413      	add	r3, r2
 800086c:	4a43      	ldr	r2, [pc, #268]	; (800097c <HAL_DMA_Init+0x158>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a42      	ldr	r2, [pc, #264]	; (8000988 <HAL_DMA_Init+0x164>)
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2202      	movs	r2, #2
 8000884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800089a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a1b      	ldr	r3, [r3, #32]
 80008c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008da:	d039      	beq.n	8000950 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a27      	ldr	r2, [pc, #156]	; (8000980 <HAL_DMA_Init+0x15c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d11a      	bne.n	800091c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <HAL_DMA_Init+0x168>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f003 031c 	and.w	r3, r3, #28
 80008f2:	210f      	movs	r1, #15
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	4924      	ldr	r1, [pc, #144]	; (800098c <HAL_DMA_Init+0x168>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <HAL_DMA_Init+0x168>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6859      	ldr	r1, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	f003 031c 	and.w	r3, r3, #28
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	491d      	ldr	r1, [pc, #116]	; (800098c <HAL_DMA_Init+0x168>)
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
 800091a:	e019      	b.n	8000950 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_DMA_Init+0x16c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000924:	f003 031c 	and.w	r3, r3, #28
 8000928:	210f      	movs	r1, #15
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4917      	ldr	r1, [pc, #92]	; (8000990 <HAL_DMA_Init+0x16c>)
 8000932:	4013      	ands	r3, r2
 8000934:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_DMA_Init+0x16c>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6859      	ldr	r1, [r3, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f003 031c 	and.w	r3, r3, #28
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	4911      	ldr	r1, [pc, #68]	; (8000990 <HAL_DMA_Init+0x16c>)
 800094c:	4313      	orrs	r3, r2
 800094e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40020407 	.word	0x40020407
 8000978:	bffdfff8 	.word	0xbffdfff8
 800097c:	cccccccd 	.word	0xcccccccd
 8000980:	40020000 	.word	0x40020000
 8000984:	bffdfbf8 	.word	0xbffdfbf8
 8000988:	40020400 	.word	0x40020400
 800098c:	400200a8 	.word	0x400200a8
 8000990:	400204a8 	.word	0x400204a8

08000994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d101      	bne.n	80009b4 <HAL_DMA_Start_IT+0x20>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e04b      	b.n	8000a4c <HAL_DMA_Start_IT+0xb8>
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d13a      	bne.n	8000a3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2202      	movs	r2, #2
 80009cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f96b 	bl	8000cc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d008      	beq.n	8000a0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 020e 	orr.w	r2, r2, #14
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e00f      	b.n	8000a2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0204 	bic.w	r2, r2, #4
 8000a1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 020a 	orr.w	r2, r2, #10
 8000a2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e005      	b.n	8000a4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a46:	2302      	movs	r3, #2
 8000a48:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d008      	beq.n	8000a7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2204      	movs	r2, #4
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e022      	b.n	8000ac4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 020e 	bic.w	r2, r2, #14
 8000a8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0201 	bic.w	r2, r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f003 021c 	and.w	r2, r3, #28
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d005      	beq.n	8000af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2204      	movs	r2, #4
 8000aec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e029      	b.n	8000b48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 020e 	bic.w	r2, r2, #14
 8000b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0201 	bic.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b18:	f003 021c 	and.w	r2, r3, #28
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	4798      	blx	r3
    }
  }
  return status;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f003 031c 	and.w	r3, r3, #28
 8000b72:	2204      	movs	r2, #4
 8000b74:	409a      	lsls	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d026      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x7a>
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d021      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d107      	bne.n	8000ba6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0204 	bic.w	r2, r2, #4
 8000ba4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f003 021c 	and.w	r2, r3, #28
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d071      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000bca:	e06c      	b.n	8000ca6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	f003 031c 	and.w	r3, r3, #28
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d02e      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xec>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d029      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10b      	bne.n	8000c10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 020a 	bic.w	r2, r2, #10
 8000c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c14:	f003 021c 	and.w	r2, r3, #28
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d038      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c3c:	e033      	b.n	8000ca6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f003 031c 	and.w	r3, r3, #28
 8000c46:	2208      	movs	r2, #8
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d02a      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0x156>
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d025      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 020e 	bic.w	r2, r2, #14
 8000c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	f003 021c 	and.w	r2, r3, #28
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2201      	movs	r2, #1
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
}
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f003 021c 	and.w	r2, r3, #28
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b10      	cmp	r3, #16
 8000cf8:	d108      	bne.n	8000d0c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d0a:	e007      	b.n	8000d1c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e154      	b.n	8000fe2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8146 	beq.w	8000fdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x38>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b12      	cmp	r3, #18
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d00b      	beq.n	8000dfc <HAL_GPIO_Init+0xd4>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df0:	2b11      	cmp	r3, #17
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b12      	cmp	r3, #18
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 0201 	and.w	r2, r3, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 80a0 	beq.w	8000fdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	4a57      	ldr	r2, [pc, #348]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea8:	4b55      	ldr	r3, [pc, #340]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb4:	4a53      	ldr	r2, [pc, #332]	; (8001004 <HAL_GPIO_Init+0x2dc>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ede:	d019      	beq.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x2e0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d013      	beq.n	8000f10 <HAL_GPIO_Init+0x1e8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_Init+0x1e4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1e0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_Init+0x1dc>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e008      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f04:	2307      	movs	r3, #7
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e004      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f14:	2300      	movs	r3, #0
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	f002 0203 	and.w	r2, r2, #3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f26:	4937      	ldr	r1, [pc, #220]	; (8001004 <HAL_GPIO_Init+0x2dc>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f aea3 	bne.w	8000d38 <HAL_GPIO_Init+0x10>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800
 8001010:	48000c00 	.word	0x48000c00
 8001014:	48001000 	.word	0x48001000
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001038:	e002      	b.n	8001040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_PWREx_GetVoltageRange+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40007000 	.word	0x40007000

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001076:	d130      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001084:	d038      	beq.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2232      	movs	r2, #50	; 0x32
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	3301      	adds	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ac:	e002      	b.n	80010b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c0:	d102      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f2      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d4:	d110      	bne.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e00f      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e6:	d007      	beq.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000
 800110c:	20000040 	.word	0x20000040
 8001110:	431bde83 	.word	0x431bde83

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e3db      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4ba4      	ldr	r3, [pc, #656]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001130:	4ba1      	ldr	r3, [pc, #644]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80e1 	beq.w	800130a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_RCC_OscConfig+0x4a>
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b0c      	cmp	r3, #12
 8001152:	f040 8088 	bne.w	8001266 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b01      	cmp	r3, #1
 800115a:	f040 8084 	bne.w	8001266 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800115e:	4b96      	ldr	r3, [pc, #600]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_RCC_OscConfig+0x62>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e3b3      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1a      	ldr	r2, [r3, #32]
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <HAL_RCC_OscConfig+0x7c>
 8001186:	4b8c      	ldr	r3, [pc, #560]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800118e:	e005      	b.n	800119c <HAL_RCC_OscConfig+0x88>
 8001190:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119c:	4293      	cmp	r3, r2
 800119e:	d223      	bcs.n	80011e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd47 	bl	8001c38 <RCC_SetFlashLatencyFromMSIRange>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e394      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b4:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a7f      	ldr	r2, [pc, #508]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b7d      	ldr	r3, [pc, #500]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	497a      	ldr	r1, [pc, #488]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4975      	ldr	r1, [pc, #468]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
 80011e6:	e022      	b.n	800122e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a72      	ldr	r2, [pc, #456]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	496d      	ldr	r1, [pc, #436]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001206:	4b6c      	ldr	r3, [pc, #432]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4968      	ldr	r1, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd0a 	bl	8001c38 <RCC_SetFlashLatencyFromMSIRange>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e357      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800122e:	f000 fc41 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001232:	4601      	mov	r1, r0
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	4a5f      	ldr	r2, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x2a8>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	fa21 f303 	lsr.w	r3, r1, r3
 800124a:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_RCC_OscConfig+0x2b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f95a 	bl	800050c <HAL_InitTick>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d052      	beq.n	8001308 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	e33b      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d032      	beq.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800126e:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800127a:	f7ff f993 	bl	80005a4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001282:	f7ff f98f 	bl	80005a4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e324      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	493f      	ldr	r1, [pc, #252]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	493a      	ldr	r1, [pc, #232]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
 80012d2:	e01a      	b.n	800130a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e0:	f7ff f960 	bl	80005a4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e8:	f7ff f95c 	bl	80005a4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e2f1      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1d4>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d074      	beq.n	8001400 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d005      	beq.n	8001328 <HAL_RCC_OscConfig+0x214>
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b0c      	cmp	r3, #12
 8001320:	d10e      	bne.n	8001340 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d064      	beq.n	80013fe <HAL_RCC_OscConfig+0x2ea>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d160      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e2ce      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x244>
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0x280>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x268>
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x280>
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01c      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff f902 	bl	80005a4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a2:	e011      	b.n	80013c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff f8fe 	bl	80005a4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d90a      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e293      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08003b5c 	.word	0x08003b5c
 80013c0:	20000040 	.word	0x20000040
 80013c4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c8:	4bae      	ldr	r3, [pc, #696]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0e7      	beq.n	80013a4 <HAL_RCC_OscConfig+0x290>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff f8e5 	bl	80005a4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff f8e1 	bl	80005a4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e276      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f0:	4ba4      	ldr	r3, [pc, #656]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x2ca>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d060      	beq.n	80014ce <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x30a>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d119      	bne.n	800144c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800141e:	4b99      	ldr	r3, [pc, #612]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x322>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e253      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b93      	ldr	r3, [pc, #588]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	498f      	ldr	r1, [pc, #572]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144a:	e040      	b.n	80014ce <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a8a      	ldr	r2, [pc, #552]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff f8a0 	bl	80005a4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff f89c 	bl	80005a4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e231      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147a:	4b82      	ldr	r3, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b7f      	ldr	r3, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	061b      	lsls	r3, r3, #24
 8001494:	497b      	ldr	r1, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149c:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80014a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff f87c 	bl	80005a4 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff f878 	bl	80005a4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e20d      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c2:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d03c      	beq.n	8001554 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01c      	beq.n	800151c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	4a66      	ldr	r2, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff f857 	bl	80005a4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff f853 	bl	80005a4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1e8      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ef      	beq.n	80014fa <HAL_RCC_OscConfig+0x3e6>
 800151a:	e01b      	b.n	8001554 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 800151e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff f83a 	bl	80005a4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff f836 	bl	80005a4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1cb      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ef      	bne.n	8001534 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a5 	beq.w	80016ac <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a43      	ldr	r2, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158e:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_RCC_OscConfig+0x574>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_RCC_OscConfig+0x574>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <HAL_RCC_OscConfig+0x574>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7fe fffd 	bl	80005a4 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7fe fff9 	bl	80005a4 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e18e      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_RCC_OscConfig+0x574>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4d2>
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e4:	e024      	b.n	8001630 <HAL_RCC_OscConfig+0x51c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d110      	bne.n	8001610 <HAL_RCC_OscConfig+0x4fc>
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80015f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160e:	e00f      	b.n	8001630 <HAL_RCC_OscConfig+0x51c>
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d016      	beq.n	8001666 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7fe ffb4 	bl	80005a4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7fe ffb0 	bl	80005a4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e143      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x570>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ed      	beq.n	8001640 <HAL_RCC_OscConfig+0x52c>
 8001664:	e019      	b.n	800169a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7fe ff9d 	bl	80005a4 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166c:	e00e      	b.n	800168c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7fe ff99 	bl	80005a4 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d905      	bls.n	800168c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e12c      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800168c:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1e9      	bne.n	800166e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b91      	ldr	r3, [pc, #580]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c0:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c6:	4a88      	ldr	r2, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7fe ff68 	bl	80005a4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d8:	f7fe ff64 	bl	80005a4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0f9      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x5c4>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016fa:	4b7b      	ldr	r3, [pc, #492]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80016fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001700:	4a79      	ldr	r2, [pc, #484]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7fe ff4b 	bl	80005a4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001712:	f7fe ff47 	bl	80005a4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0dc      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001724:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80d0 	beq.w	80018dc <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	f000 808d 	beq.w	800185e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2b02      	cmp	r3, #2
 800174a:	d15a      	bne.n	8001802 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7fe ff24 	bl	80005a4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7fe ff20 	bl	80005a4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0b5      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001772:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x7d8>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800178e:	3a01      	subs	r2, #1
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001798:	0212      	lsls	r2, r2, #8
 800179a:	4311      	orrs	r1, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017a0:	0852      	lsrs	r2, r2, #1
 80017a2:	3a01      	subs	r2, #1
 80017a4:	0552      	lsls	r2, r2, #21
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ac:	0852      	lsrs	r2, r2, #1
 80017ae:	3a01      	subs	r2, #1
 80017b0:	0652      	lsls	r2, r2, #25
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b8:	06d2      	lsls	r2, r2, #27
 80017ba:	430a      	orrs	r2, r1
 80017bc:	494a      	ldr	r1, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7fe fee3 	bl	80005a4 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7fe fedf 	bl	80005a4 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e074      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x6ce>
 8001800:	e06c      	b.n	80018dc <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 800182c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7fe feb5 	bl	80005a4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe feb1 	bl	80005a4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e046      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x72a>
 800185c:	e03e      	b.n	80018dc <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e039      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_RCC_OscConfig+0x7d4>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0203 	and.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	429a      	cmp	r2, r3
 800187c:	d12c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	3b01      	subs	r3, #1
 800188a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d123      	bne.n	80018d8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d11b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d113      	bne.n	80018d8 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d109      	bne.n	80018d8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	019d808c 	.word	0x019d808c

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0c8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d910      	bls.n	8001934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	4961      	ldr	r1, [pc, #388]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b0      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d04c      	beq.n	80019da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d121      	bne.n	8001998 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e09e      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d107      	bne.n	8001970 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d115      	bne.n	8001998 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e092      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001978:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e086      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001988:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e07e      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001998:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 0203 	bic.w	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	493f      	ldr	r1, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019aa:	f7fe fdfb 	bl	80005a4 <HAL_GetTick>
 80019ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b2:	f7fe fdf7 	bl	80005a4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e066      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 020c 	and.w	r2, r3, #12
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d1eb      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d210      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4924      	ldr	r1, [pc, #144]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e036      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4910      	ldr	r1, [pc, #64]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a66:	f000 f825 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd3e 	bl	800050c <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08003b5c 	.word	0x08003b5c
 8001aac:	20000040 	.word	0x20000040
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d121      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d11e      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b10:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	e004      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d133      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0xaa>
 8001b56:	e005      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b5a:	617b      	str	r3, [r7, #20]
      break;
 8001b5c:	e005      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b60:	617b      	str	r3, [r7, #20]
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	617b      	str	r3, [r7, #20]
      break;
 8001b68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	3301      	adds	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	fb02 f203 	mul.w	r2, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0e5b      	lsrs	r3, r3, #25
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001baa:	69bb      	ldr	r3, [r7, #24]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3724      	adds	r7, #36	; 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003b74 	.word	0x08003b74
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	017d7840 	.word	0x017d7840

08001bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000040 	.word	0x20000040

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be8:	4601      	mov	r1, r0
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003b6c 	.word	0x08003b6c

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c10:	f7ff ffda 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4601      	mov	r1, r0
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08003b6c 	.word	0x08003b6c

08001c38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c50:	f7ff f9fc 	bl	800104c <HAL_PWREx_GetVoltageRange>
 8001c54:	6178      	str	r0, [r7, #20]
 8001c56:	e014      	b.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c70:	f7ff f9ec 	bl	800104c <HAL_PWREx_GetVoltageRange>
 8001c74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d10b      	bne.n	8001ca2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b80      	cmp	r3, #128	; 0x80
 8001c8e:	d919      	bls.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2ba0      	cmp	r3, #160	; 0xa0
 8001c94:	d902      	bls.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c96:	2302      	movs	r3, #2
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e013      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e010      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d902      	bls.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ca8:	2303      	movs	r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e00a      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d102      	bne.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e004      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b70      	cmp	r3, #112	; 0x70
 8001cbe:	d101      	bne.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d00:	2300      	movs	r3, #0
 8001d02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d04:	2300      	movs	r3, #0
 8001d06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d02f      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d22:	d015      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d28:	e00f      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d36:	e00c      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f9f0 	bl	8002124 <RCCEx_PLLSAI1_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d48:	e003      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d4e:	e000      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d52:	7cfb      	ldrb	r3, [r7, #19]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	494e      	ldr	r1, [pc, #312]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d6e:	e001      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 809e 	beq.w	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6593      	str	r3, [r2, #88]	; 0x58
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db4:	2301      	movs	r3, #1
 8001db6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a39      	ldr	r2, [pc, #228]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc4:	f7fe fbee 	bl	80005a4 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dca:	e009      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7fe fbea 	bl	80005a4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d902      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	74fb      	strb	r3, [r7, #19]
        break;
 8001dde:	e005      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d15a      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01e      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d019      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d016      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fbaa 	bl	80005a4 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e52:	e00b      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe fba6 	bl	80005a4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d902      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	74fb      	strb	r3, [r7, #19]
            break;
 8001e6a:	e006      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ec      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4904      	ldr	r1, [pc, #16]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e96:	e009      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	74bb      	strb	r3, [r7, #18]
 8001e9c:	e006      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eac:	7c7b      	ldrb	r3, [r7, #17]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eca:	4b95      	ldr	r3, [pc, #596]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed0:	f023 0203 	bic.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4991      	ldr	r1, [pc, #580]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eec:	4b8c      	ldr	r3, [pc, #560]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f023 020c 	bic.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	4989      	ldr	r1, [pc, #548]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f0e:	4b84      	ldr	r3, [pc, #528]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	4980      	ldr	r1, [pc, #512]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4978      	ldr	r1, [pc, #480]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	496f      	ldr	r1, [pc, #444]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4967      	ldr	r1, [pc, #412]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f96:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	495e      	ldr	r1, [pc, #376]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	4956      	ldr	r1, [pc, #344]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fda:	4b51      	ldr	r3, [pc, #324]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	494d      	ldr	r1, [pc, #308]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d028      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	4945      	ldr	r1, [pc, #276]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800201a:	d106      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800201c:	4b40      	ldr	r3, [pc, #256]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002026:	60d3      	str	r3, [r2, #12]
 8002028:	e011      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002032:	d10c      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f872 	bl	8002124 <RCCEx_PLLSAI1_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d028      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002078:	d106      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002084:	60d3      	str	r3, [r2, #12]
 8002086:	e011      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002090:	d10c      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	2101      	movs	r1, #1
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f843 	bl	8002124 <RCCEx_PLLSAI1_Config>
 800209e:	4603      	mov	r3, r0
 80020a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	4916      	ldr	r1, [pc, #88]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f820 	bl	8002124 <RCCEx_PLLSAI1_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	4904      	ldr	r1, [pc, #16]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002114:	7cbb      	ldrb	r3, [r7, #18]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d018      	beq.n	8002170 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800213e:	4b70      	ldr	r3, [pc, #448]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d10d      	bne.n	800216a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
       ||
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
       ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d044      	beq.n	80021f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e041      	b.n	80021f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d00c      	beq.n	8002192 <RCCEx_PLLSAI1_Config+0x6e>
 8002178:	2b03      	cmp	r3, #3
 800217a:	d013      	beq.n	80021a4 <RCCEx_PLLSAI1_Config+0x80>
 800217c:	2b01      	cmp	r3, #1
 800217e:	d120      	bne.n	80021c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11d      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e01a      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a2:	e013      	b.n	80021cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021a4:	4b56      	ldr	r3, [pc, #344]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10f      	bne.n	80021d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021c0:	e006      	b.n	80021d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      break;
 80021c6:	e004      	b.n	80021d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021c8:	bf00      	nop
 80021ca:	e002      	b.n	80021d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021cc:	bf00      	nop
 80021ce:	e000      	b.n	80021d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	430b      	orrs	r3, r1
 80021ee:	4944      	ldr	r1, [pc, #272]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d17c      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a40      	ldr	r2, [pc, #256]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002206:	f7fe f9cd 	bl	80005a4 <HAL_GetTick>
 800220a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800220c:	e009      	b.n	8002222 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800220e:	f7fe f9c9 	bl	80005a4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d902      	bls.n	8002222 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	73fb      	strb	r3, [r7, #15]
        break;
 8002220:	e005      	b.n	800222e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d15f      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d110      	bne.n	800225c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002242:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6892      	ldr	r2, [r2, #8]
 800224a:	0211      	lsls	r1, r2, #8
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68d2      	ldr	r2, [r2, #12]
 8002250:	06d2      	lsls	r2, r2, #27
 8002252:	430a      	orrs	r2, r1
 8002254:	492a      	ldr	r1, [pc, #168]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	610b      	str	r3, [r1, #16]
 800225a:	e027      	b.n	80022ac <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d112      	bne.n	8002288 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800226a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6892      	ldr	r2, [r2, #8]
 8002272:	0211      	lsls	r1, r2, #8
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6912      	ldr	r2, [r2, #16]
 8002278:	0852      	lsrs	r2, r2, #1
 800227a:	3a01      	subs	r2, #1
 800227c:	0552      	lsls	r2, r2, #21
 800227e:	430a      	orrs	r2, r1
 8002280:	491f      	ldr	r1, [pc, #124]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	610b      	str	r3, [r1, #16]
 8002286:	e011      	b.n	80022ac <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6892      	ldr	r2, [r2, #8]
 8002298:	0211      	lsls	r1, r2, #8
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6952      	ldr	r2, [r2, #20]
 800229e:	0852      	lsrs	r2, r2, #1
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0652      	lsls	r2, r2, #25
 80022a4:	430a      	orrs	r2, r1
 80022a6:	4916      	ldr	r1, [pc, #88]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe f974 	bl	80005a4 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022be:	e009      	b.n	80022d4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022c0:	f7fe f970 	bl	80005a4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d902      	bls.n	80022d4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	73fb      	strb	r3, [r7, #15]
          break;
 80022d2:	e005      	b.n	80022e0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ef      	beq.n	80022c0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	4904      	ldr	r1, [pc, #16]	; (8002300 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e040      	b.n	8002398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f001 fb10 	bl	800394c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb8e 	bl	8002a64 <UART_SetConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fe74 	bl	8003048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800236e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800237e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fefb 	bl	800318c <UART_CheckIdleState>
 8002396:	4603      	mov	r3, r0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 8081 	bne.w	80024bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_UART_Transmit+0x26>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e079      	b.n	80024be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit+0x38>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e072      	b.n	80024be <HAL_UART_Transmit+0x11e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe f8da 	bl	80005a4 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240a:	d108      	bne.n	800241e <HAL_UART_Transmit+0x7e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e003      	b.n	8002426 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002426:	e02d      	b.n	8002484 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2200      	movs	r2, #0
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 feef 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e03d      	b.n	80024be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002454:	b292      	uxth	r2, r2
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	3302      	adds	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e008      	b.n	8002472 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b292      	uxth	r2, r2
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3301      	adds	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1cb      	bne.n	8002428 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 febb 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e009      	b.n	80024be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d164      	bne.n	80025a8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_UART_Transmit_DMA+0x22>
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e05d      	b.n	80025aa <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_UART_Transmit_DMA+0x34>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e056      	b.n	80025aa <HAL_UART_Transmit_DMA+0xe2>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	; 0x21
 8002524:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02a      	beq.n	8002584 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002532:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_UART_Transmit_DMA+0xec>)
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_UART_Transmit_DMA+0xf0>)
 800253c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_UART_Transmit_DMA+0xf4>)
 8002544:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4619      	mov	r1, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3328      	adds	r3, #40	; 0x28
 800255e:	461a      	mov	r2, r3
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f7fe fa17 	bl	8000994 <HAL_DMA_Start_IT>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2210      	movs	r2, #16
 8002570:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e012      	b.n	80025aa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	08003311 	.word	0x08003311
 80025b8:	08003365 	.word	0x08003365
 80025bc:	08003405 	.word	0x08003405

080025c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d16c      	bne.n	80026b0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_UART_Receive_DMA+0x22>
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e065      	b.n	80026b2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Receive_DMA+0x34>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e05e      	b.n	80026b2 <HAL_UART_Receive_DMA+0xf2>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2222      	movs	r2, #34	; 0x22
 8002614:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02a      	beq.n	8002674 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002622:	4a26      	ldr	r2, [pc, #152]	; (80026bc <HAL_UART_Receive_DMA+0xfc>)
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <HAL_UART_Receive_DMA+0x100>)
 800262c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_UART_Receive_DMA+0x104>)
 8002634:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	2200      	movs	r2, #0
 800263c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3324      	adds	r3, #36	; 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	461a      	mov	r2, r3
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	f7fe f99f 	bl	8000994 <HAL_DMA_Start_IT>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2210      	movs	r2, #16
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e01e      	b.n	80026b2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026aa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	08003381 	.word	0x08003381
 80026c0:	080033e9 	.word	0x080033e9
 80026c4:	08003405 	.word	0x08003405

080026c8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d126      	bne.n	8002738 <HAL_UART_DMAStop+0x70>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b21      	cmp	r3, #33	; 0x21
 80026ee:	d123      	bne.n	8002738 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026fe:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe f9a1 	bl	8000a54 <HAL_DMA_Abort>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fac7 	bl	8000cb0 <HAL_DMA_GetError>
 8002722:	4603      	mov	r3, r0
 8002724:	2b20      	cmp	r3, #32
 8002726:	d104      	bne.n	8002732 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2210      	movs	r2, #16
 800272c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e031      	b.n	8002796 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fdb7 	bl	80032a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d126      	bne.n	8002794 <HAL_UART_DMAStop+0xcc>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b22      	cmp	r3, #34	; 0x22
 800274a:	d123      	bne.n	8002794 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe f973 	bl	8000a54 <HAL_DMA_Abort>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fa99 	bl	8000cb0 <HAL_DMA_GetError>
 800277e:	4603      	mov	r3, r0
 8002780:	2b20      	cmp	r3, #32
 8002782:	d104      	bne.n	800278e <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2210      	movs	r2, #16
 8002788:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e003      	b.n	8002796 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fd9e 	bl	80032d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d113      	bne.n	80027f6 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80ff 	beq.w	80029ea <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
      }
      return;
 80027f4:	e0f9      	b.n	80029ea <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80c1 	beq.w	8002980 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80b6 	beq.w	8002980 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <HAL_UART_IRQHandler+0x9c>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <HAL_UART_IRQHandler+0xc4>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2202      	movs	r2, #2
 8002856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285c:	f043 0204 	orr.w	r2, r3, #4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <HAL_UART_IRQHandler+0xec>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2204      	movs	r2, #4
 800287e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2208      	movs	r2, #8
 80028b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8093 	beq.w	80029ee <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d004      	beq.n	800290a <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002906:	2b00      	cmp	r3, #0
 8002908:	d031      	beq.n	800296e <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fce0 	bl	80032d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d123      	bne.n	8002966 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d013      	beq.n	800295e <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293a:	4a30      	ldr	r2, [pc, #192]	; (80029fc <HAL_UART_IRQHandler+0x25c>)
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe f8c4 	bl	8000ad0 <HAL_DMA_Abort_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002958:	4610      	mov	r0, r2
 800295a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	e00e      	b.n	800297c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f876 	bl	8002a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	e00a      	b.n	800297c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f872 	bl	8002a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	e006      	b.n	800297c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f86e 	bl	8002a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800297a:	e038      	b.n	80029ee <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	bf00      	nop
    return;
 800297e:	e036      	b.n	80029ee <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <HAL_UART_IRQHandler+0x206>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800299c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fd9b 	bl	80034da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029a4:	e026      	b.n	80029f4 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d017      	beq.n	80029f2 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
    }
    return;
 80029ca:	e012      	b.n	80029f2 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <HAL_UART_IRQHandler+0x254>
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fd61 	bl	80034a8 <UART_EndTransmit_IT>
    return;
 80029e6:	bf00      	nop
 80029e8:	e004      	b.n	80029f4 <HAL_UART_IRQHandler+0x254>
      return;
 80029ea:	bf00      	nop
 80029ec:	e002      	b.n	80029f4 <HAL_UART_IRQHandler+0x254>
    return;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_UART_IRQHandler+0x254>
    return;
 80029f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	0800347d 	.word	0x0800347d

08002a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002a68:	b088      	sub	sp, #32
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4baf      	ldr	r3, [pc, #700]	; (8002d58 <UART_SetConfig+0x2f4>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	69f9      	ldr	r1, [r7, #28]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4aa5      	ldr	r2, [pc, #660]	; (8002d5c <UART_SetConfig+0x2f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a9c      	ldr	r2, [pc, #624]	; (8002d60 <UART_SetConfig+0x2fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d121      	bne.n	8002b38 <UART_SetConfig+0xd4>
 8002af4:	4b9b      	ldr	r3, [pc, #620]	; (8002d64 <UART_SetConfig+0x300>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d816      	bhi.n	8002b30 <UART_SetConfig+0xcc>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_SetConfig+0xa4>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b1f 	.word	0x08002b1f
 8002b14:	08002b2b 	.word	0x08002b2b
 8002b18:	2301      	movs	r3, #1
 8002b1a:	76fb      	strb	r3, [r7, #27]
 8002b1c:	e098      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	76fb      	strb	r3, [r7, #27]
 8002b22:	e095      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b24:	2304      	movs	r3, #4
 8002b26:	76fb      	strb	r3, [r7, #27]
 8002b28:	e092      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	76fb      	strb	r3, [r7, #27]
 8002b2e:	e08f      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b30:	2310      	movs	r3, #16
 8002b32:	76fb      	strb	r3, [r7, #27]
 8002b34:	bf00      	nop
 8002b36:	e08b      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <UART_SetConfig+0x304>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d134      	bne.n	8002bac <UART_SetConfig+0x148>
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <UART_SetConfig+0x300>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d829      	bhi.n	8002ba4 <UART_SetConfig+0x140>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0xf4>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b8d 	.word	0x08002b8d
 8002b5c:	08002ba5 	.word	0x08002ba5
 8002b60:	08002ba5 	.word	0x08002ba5
 8002b64:	08002ba5 	.word	0x08002ba5
 8002b68:	08002b99 	.word	0x08002b99
 8002b6c:	08002ba5 	.word	0x08002ba5
 8002b70:	08002ba5 	.word	0x08002ba5
 8002b74:	08002ba5 	.word	0x08002ba5
 8002b78:	08002b93 	.word	0x08002b93
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	08002ba5 	.word	0x08002ba5
 8002b84:	08002ba5 	.word	0x08002ba5
 8002b88:	08002b9f 	.word	0x08002b9f
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	76fb      	strb	r3, [r7, #27]
 8002b90:	e05e      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b92:	2302      	movs	r3, #2
 8002b94:	76fb      	strb	r3, [r7, #27]
 8002b96:	e05b      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	76fb      	strb	r3, [r7, #27]
 8002b9c:	e058      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	76fb      	strb	r3, [r7, #27]
 8002ba2:	e055      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	76fb      	strb	r3, [r7, #27]
 8002ba8:	bf00      	nop
 8002baa:	e051      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6e      	ldr	r2, [pc, #440]	; (8002d6c <UART_SetConfig+0x308>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d120      	bne.n	8002bf8 <UART_SetConfig+0x194>
 8002bb6:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <UART_SetConfig+0x300>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d00f      	beq.n	8002be4 <UART_SetConfig+0x180>
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d802      	bhi.n	8002bce <UART_SetConfig+0x16a>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <UART_SetConfig+0x174>
 8002bcc:	e010      	b.n	8002bf0 <UART_SetConfig+0x18c>
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d005      	beq.n	8002bde <UART_SetConfig+0x17a>
 8002bd2:	2b30      	cmp	r3, #48	; 0x30
 8002bd4:	d009      	beq.n	8002bea <UART_SetConfig+0x186>
 8002bd6:	e00b      	b.n	8002bf0 <UART_SetConfig+0x18c>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	76fb      	strb	r3, [r7, #27]
 8002bdc:	e038      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002bde:	2302      	movs	r3, #2
 8002be0:	76fb      	strb	r3, [r7, #27]
 8002be2:	e035      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002be4:	2304      	movs	r3, #4
 8002be6:	76fb      	strb	r3, [r7, #27]
 8002be8:	e032      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002bea:	2308      	movs	r3, #8
 8002bec:	76fb      	strb	r3, [r7, #27]
 8002bee:	e02f      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	76fb      	strb	r3, [r7, #27]
 8002bf4:	bf00      	nop
 8002bf6:	e02b      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <UART_SetConfig+0x2f8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d124      	bne.n	8002c4c <UART_SetConfig+0x1e8>
 8002c02:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <UART_SetConfig+0x300>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d012      	beq.n	8002c38 <UART_SetConfig+0x1d4>
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d802      	bhi.n	8002c1e <UART_SetConfig+0x1ba>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <UART_SetConfig+0x1c8>
 8002c1c:	e012      	b.n	8002c44 <UART_SetConfig+0x1e0>
 8002c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c22:	d006      	beq.n	8002c32 <UART_SetConfig+0x1ce>
 8002c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c28:	d009      	beq.n	8002c3e <UART_SetConfig+0x1da>
 8002c2a:	e00b      	b.n	8002c44 <UART_SetConfig+0x1e0>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	76fb      	strb	r3, [r7, #27]
 8002c30:	e00e      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002c32:	2302      	movs	r3, #2
 8002c34:	76fb      	strb	r3, [r7, #27]
 8002c36:	e00b      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	76fb      	strb	r3, [r7, #27]
 8002c3c:	e008      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	76fb      	strb	r3, [r7, #27]
 8002c42:	e005      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002c44:	2310      	movs	r3, #16
 8002c46:	76fb      	strb	r3, [r7, #27]
 8002c48:	bf00      	nop
 8002c4a:	e001      	b.n	8002c50 <UART_SetConfig+0x1ec>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <UART_SetConfig+0x2f8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f040 80f4 	bne.w	8002e44 <UART_SetConfig+0x3e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c5c:	7efb      	ldrb	r3, [r7, #27]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d823      	bhi.n	8002caa <UART_SetConfig+0x246>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <UART_SetConfig+0x204>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002cab 	.word	0x08002cab
 8002c70:	08002c95 	.word	0x08002c95
 8002c74:	08002cab 	.word	0x08002cab
 8002c78:	08002c9b 	.word	0x08002c9b
 8002c7c:	08002cab 	.word	0x08002cab
 8002c80:	08002cab 	.word	0x08002cab
 8002c84:	08002cab 	.word	0x08002cab
 8002c88:	08002ca3 	.word	0x08002ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f7fe ffa8 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002c90:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c92:	e00d      	b.n	8002cb0 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <UART_SetConfig+0x30c>)
 8002c96:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c98:	e00a      	b.n	8002cb0 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002c9a:	f7fe ff0b 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8002c9e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ca0:	e006      	b.n	8002cb0 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ca8:	e002      	b.n	8002cb0 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	74fb      	strb	r3, [r7, #19]
        break;
 8002cae:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 81b9 	beq.w	800302a <UART_SetConfig+0x5c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d305      	bcc.n	8002cd4 <UART_SetConfig+0x270>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d902      	bls.n	8002cda <UART_SetConfig+0x276>
      {
        ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	74fb      	strb	r3, [r7, #19]
 8002cd8:	e1a7      	b.n	800302a <UART_SetConfig+0x5c6>
      }
      else
      {
        switch (clocksource)
 8002cda:	7efb      	ldrb	r3, [r7, #27]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	f200 809e 	bhi.w	8002e1e <UART_SetConfig+0x3ba>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0x284>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d0d 	.word	0x08002d0d
 8002cec:	08002e1f 	.word	0x08002e1f
 8002cf0:	08002d75 	.word	0x08002d75
 8002cf4:	08002e1f 	.word	0x08002e1f
 8002cf8:	08002da9 	.word	0x08002da9
 8002cfc:	08002e1f 	.word	0x08002e1f
 8002d00:	08002e1f 	.word	0x08002e1f
 8002d04:	08002e1f 	.word	0x08002e1f
 8002d08:	08002df5 	.word	0x08002df5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d0c:	f7fe ff68 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f04f 0400 	mov.w	r4, #0
 8002d20:	0214      	lsls	r4, r2, #8
 8002d22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d26:	020b      	lsls	r3, r1, #8
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6852      	ldr	r2, [r2, #4]
 8002d2c:	0852      	lsrs	r2, r2, #1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	eb13 0b01 	adds.w	fp, r3, r1
 8002d38:	eb44 0c02 	adc.w	ip, r4, r2
 8002d3c:	4658      	mov	r0, fp
 8002d3e:	4661      	mov	r1, ip
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f04f 0400 	mov.w	r4, #0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	f7fd fa46 	bl	80001dc <__aeabi_uldivmod>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002d56:	e065      	b.n	8002e24 <UART_SetConfig+0x3c0>
 8002d58:	efff69f3 	.word	0xefff69f3
 8002d5c:	40008000 	.word	0x40008000
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40004400 	.word	0x40004400
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	49b1      	ldr	r1, [pc, #708]	; (8003044 <UART_SetConfig+0x5e0>)
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	eb13 0b01 	adds.w	fp, r3, r1
 8002d88:	eb44 0c02 	adc.w	ip, r4, r2
 8002d8c:	4658      	mov	r0, fp
 8002d8e:	4661      	mov	r1, ip
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f04f 0400 	mov.w	r4, #0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	f7fd fa1e 	bl	80001dc <__aeabi_uldivmod>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002da6:	e03d      	b.n	8002e24 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002da8:	f7fe fe84 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4619      	mov	r1, r3
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f04f 0400 	mov.w	r4, #0
 8002dbc:	0214      	lsls	r4, r2, #8
 8002dbe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002dc2:	020b      	lsls	r3, r1, #8
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	0852      	lsrs	r2, r2, #1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	eb13 0b01 	adds.w	fp, r3, r1
 8002dd4:	eb44 0c02 	adc.w	ip, r4, r2
 8002dd8:	4658      	mov	r0, fp
 8002dda:	4661      	mov	r1, ip
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f04f 0400 	mov.w	r4, #0
 8002de4:	461a      	mov	r2, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	f7fd f9f8 	bl	80001dc <__aeabi_uldivmod>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002df2:	e017      	b.n	8002e24 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002e02:	f144 0100 	adc.w	r1, r4, #0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd f9e3 	bl	80001dc <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e1c:	e002      	b.n	8002e24 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	74fb      	strb	r3, [r7, #19]
            break;
 8002e22:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2a:	d308      	bcc.n	8002e3e <UART_SetConfig+0x3da>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e32:	d204      	bcs.n	8002e3e <UART_SetConfig+0x3da>
        {
          huart->Instance->BRR = usartdiv;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	e0f5      	b.n	800302a <UART_SetConfig+0x5c6>
        }
        else
        {
          ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	74fb      	strb	r3, [r7, #19]
 8002e42:	e0f2      	b.n	800302a <UART_SetConfig+0x5c6>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	d17f      	bne.n	8002f4e <UART_SetConfig+0x4ea>
  {
    switch (clocksource)
 8002e4e:	7efb      	ldrb	r3, [r7, #27]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d85c      	bhi.n	8002f0e <UART_SetConfig+0x4aa>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <UART_SetConfig+0x3f8>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e81 	.word	0x08002e81
 8002e60:	08002e9f 	.word	0x08002e9f
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002f0f 	.word	0x08002f0f
 8002e6c:	08002ed9 	.word	0x08002ed9
 8002e70:	08002f0f 	.word	0x08002f0f
 8002e74:	08002f0f 	.word	0x08002f0f
 8002e78:	08002f0f 	.word	0x08002f0f
 8002e7c:	08002ef7 	.word	0x08002ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e80:	f7fe feae 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002e84:	4603      	mov	r3, r0
 8002e86:	005a      	lsls	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	441a      	add	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e9c:	e03a      	b.n	8002f14 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e9e:	f7fe feb5 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	005a      	lsls	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002eba:	e02b      	b.n	8002f14 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002ec6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6852      	ldr	r2, [r2, #4]
 8002ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ed6:	e01d      	b.n	8002f14 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ed8:	f7fe fdec 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8002edc:	4603      	mov	r3, r0
 8002ede:	005a      	lsls	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	441a      	add	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ef4:	e00e      	b.n	8002f14 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f0c:	e002      	b.n	8002f14 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	74fb      	strb	r3, [r7, #19]
        break;
 8002f12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d916      	bls.n	8002f48 <UART_SetConfig+0x4e4>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d212      	bcs.n	8002f48 <UART_SetConfig+0x4e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	897a      	ldrh	r2, [r7, #10]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	e070      	b.n	800302a <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	74fb      	strb	r3, [r7, #19]
 8002f4c:	e06d      	b.n	800302a <UART_SetConfig+0x5c6>
    }
  }
  else
  {
    switch (clocksource)
 8002f4e:	7efb      	ldrb	r3, [r7, #27]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d859      	bhi.n	8003008 <UART_SetConfig+0x5a4>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <UART_SetConfig+0x4f8>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08003009 	.word	0x08003009
 8002f6c:	08002fd5 	.word	0x08002fd5
 8002f70:	08003009 	.word	0x08003009
 8002f74:	08003009 	.word	0x08003009
 8002f78:	08003009 	.word	0x08003009
 8002f7c:	08002ff1 	.word	0x08002ff1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f80:	f7fe fe2e 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f9a:	e038      	b.n	800300e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f9c:	f7fe fe36 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fb6:	e02a      	b.n	800300e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fc2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6852      	ldr	r2, [r2, #4]
 8002fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fd2:	e01c      	b.n	800300e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fd4:	f7fe fd6e 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fee:	e00e      	b.n	800300e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003006:	e002      	b.n	800300e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	74fb      	strb	r3, [r7, #19]
        break;
 800300c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d908      	bls.n	8003026 <UART_SetConfig+0x5c2>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d204      	bcs.n	8003026 <UART_SetConfig+0x5c2>
    {
      huart->Instance->BRR = usartdiv;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	e001      	b.n	800302a <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003042:	bf00      	nop
 8003044:	f4240000 	.word	0xf4240000

08003048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01a      	beq.n	800315e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d10a      	bne.n	800315e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800319a:	f7fd fa03 	bl	80005a4 <HAL_GetTick>
 800319e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d10e      	bne.n	80031cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f82a 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e020      	b.n	800320e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d10e      	bne.n	80031f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f814 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00a      	b.n	800320e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	e02a      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d026      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7fd f9b8 	bl	80005a4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <UART_WaitOnFlagUntilTimeout+0x30>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11b      	bne.n	800327e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003254:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d0c5      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80032bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d114      	bne.n	8003356 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003342:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003352:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003354:	e002      	b.n	800335c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fb52 	bl	8002a00 <HAL_UART_TxCpltCallback>
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fb4e 	bl	8002a14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11e      	bne.n	80033da <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fb24 	bl	8002a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fb20 	bl	8002a3c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b80      	cmp	r3, #128	; 0x80
 800342a:	d109      	bne.n	8003440 <UART_DMAError+0x3c>
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b21      	cmp	r3, #33	; 0x21
 8003430:	d106      	bne.n	8003440 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff ff33 	bl	80032a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d109      	bne.n	8003462 <UART_DMAError+0x5e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b22      	cmp	r3, #34	; 0x22
 8003452:	d106      	bne.n	8003462 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800345c:	6978      	ldr	r0, [r7, #20]
 800345e:	f7ff ff37 	bl	80032d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff faee 	bl	8002a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fad8 	bl	8002a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fa97 	bl	8002a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <MX_DMA_Init+0x48>)
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <MX_DMA_Init+0x48>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6493      	str	r3, [r2, #72]	; 0x48
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <MX_DMA_Init+0x48>)
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	200e      	movs	r0, #14
 8003514:	f7fd f94f 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003518:	200e      	movs	r0, #14
 800351a:	f7fd f968 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	200f      	movs	r0, #15
 8003524:	f7fd f947 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003528:	200f      	movs	r0, #15
 800352a:	f7fd f960 	bl	80007ee <HAL_NVIC_EnableIRQ>

}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000

0800353c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <MX_GPIO_Init+0x90>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <MX_GPIO_Init+0x90>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <MX_GPIO_Init+0x90>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <MX_GPIO_Init+0x90>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <MX_GPIO_Init+0x90>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <MX_GPIO_Init+0x90>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <MX_GPIO_Init+0x90>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <MX_GPIO_Init+0x90>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <MX_GPIO_Init+0x90>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = SW_12V_Pin|SW_5V_Pin;
 800359a:	2303      	movs	r3, #3
 800359c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035a2:	2302      	movs	r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	4619      	mov	r1, r3
 80035b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b4:	f7fd fbb8 	bl	8000d28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, SW_12V_Pin|SW_5V_Pin, GPIO_PIN_SET);
 80035b8:	2201      	movs	r2, #1
 80035ba:	2103      	movs	r1, #3
 80035bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c0:	f7fd fd2c 	bl	800101c <HAL_GPIO_WritePin>
}
 80035c4:	bf00      	nop
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d4:	f7fc ff82 	bl	80004dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d8:	f000 f842 	bl	8003660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035dc:	f7ff ffae 	bl	800353c <MX_GPIO_Init>
  MX_DMA_Init();
 80035e0:	f7ff ff86 	bl	80034f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80035e4:	f000 f982 	bl	80038ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)aTxBuffer, strlen(aTxBuffer));
 80035e8:	4819      	ldr	r0, [pc, #100]	; (8003650 <main+0x80>)
 80035ea:	f7fc fdef 	bl	80001cc <strlen>
 80035ee:	4603      	mov	r3, r0
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <main+0x80>)
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <main+0x84>)
 80035f8:	f7fe ff66 	bl	80024c8 <HAL_UART_Transmit_DMA>
  HAL_Delay(100);
 80035fc:	2064      	movs	r0, #100	; 0x64
 80035fe:	f7fc ffdd 	bl	80005bc <HAL_Delay>
  /* USER CODE END 2 */
  HAL_UART_Receive_DMA(&huart1, Receive_t.Receive_pData , RECEIVE_LEN);
 8003602:	2264      	movs	r2, #100	; 0x64
 8003604:	4914      	ldr	r1, [pc, #80]	; (8003658 <main+0x88>)
 8003606:	4813      	ldr	r0, [pc, #76]	; (8003654 <main+0x84>)
 8003608:	f7fe ffda 	bl	80025c0 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <main+0x84>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <main+0x84>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0210 	orr.w	r2, r2, #16
 800361a:	601a      	str	r2, [r3, #0]
  Receive_t.Receive_Flag = 0;
 800361c:	4a0f      	ldr	r2, [pc, #60]	; (800365c <main+0x8c>)
 800361e:	7813      	ldrb	r3, [r2, #0]
 8003620:	f36f 0300 	bfc	r3, #0, #1
 8003624:	7013      	strb	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if(Receive_t.Receive_Flag)
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <main+0x8c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f8      	beq.n	8003626 <main+0x56>
      {
          Receive_t.Receive_Flag = 0;
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <main+0x8c>)
 8003636:	7813      	ldrb	r3, [r2, #0]
 8003638:	f36f 0300 	bfc	r3, #0, #1
 800363c:	7013      	strb	r3, [r2, #0]
//          HAL_UART_Transmit_DMA(&huart1, Receive_t.Receive_pData, Receive_t.Receive_Len);
          HAL_UART_Transmit(&huart1, Receive_t.Receive_pData, Receive_t.Receive_Len, 1000);
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <main+0x8c>)
 8003640:	885a      	ldrh	r2, [r3, #2]
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <main+0x88>)
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <main+0x84>)
 800364a:	f7fe fea9 	bl	80023a0 <HAL_UART_Transmit>
      if(Receive_t.Receive_Flag)
 800364e:	e7ea      	b.n	8003626 <main+0x56>
 8003650:	20000008 	.word	0x20000008
 8003654:	20000168 	.word	0x20000168
 8003658:	20000068 	.word	0x20000068
 800365c:	20000064 	.word	0x20000064

08003660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0ae      	sub	sp, #184	; 0xb8
 8003664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003666:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800366a:	2244      	movs	r2, #68	; 0x44
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fa60 	bl	8003b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003674:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	225c      	movs	r2, #92	; 0x5c
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa52 	bl	8003b34 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003690:	2301      	movs	r3, #1
 8003692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003698:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80036a6:	2305      	movs	r3, #5
 80036a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80036ac:	2320      	movs	r3, #32
 80036ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036b2:	2307      	movs	r3, #7
 80036b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036b8:	2302      	movs	r3, #2
 80036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036be:	2302      	movs	r3, #2
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fd23 	bl	8001114 <HAL_RCC_OscConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80036d4:	f000 f82f 	bl	8003736 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d8:	230f      	movs	r3, #15
 80036da:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036dc:	2303      	movs	r3, #3
 80036de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e8:	2300      	movs	r3, #0
 80036ea:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80036f0:	2104      	movs	r1, #4
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f8fc 	bl	80018f0 <HAL_RCC_ClockConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80036fe:	f000 f81a 	bl	8003736 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003702:	2301      	movs	r3, #1
 8003704:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe faf3 	bl	8001cf8 <HAL_RCCEx_PeriphCLKConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003718:	f000 f80d 	bl	8003736 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800371c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003720:	f7fd fca2 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800372a:	f000 f804 	bl	8003736 <Error_Handler>
  }
}
 800372e:	bf00      	nop
 8003730:	37b8      	adds	r7, #184	; 0xb8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <HAL_MspInit+0x44>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_MspInit+0x44>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6613      	str	r3, [r2, #96]	; 0x60
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_MspInit+0x44>)
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_MspInit+0x44>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_MspInit+0x44>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6593      	str	r3, [r2, #88]	; 0x58
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_MspInit+0x44>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler+0x4>

080037a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <MemManage_Handler+0x4>

080037a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <BusFault_Handler+0x4>

080037ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <UsageFault_Handler+0x4>

080037b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e0:	f7fc fece 	bl	8000580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <DMA1_Channel4_IRQHandler+0x10>)
 80037ee:	f7fd f9b0 	bl	8000b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200000d8 	.word	0x200000d8

080037fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <DMA1_Channel5_IRQHandler+0x10>)
 8003802:	f7fd f9a6 	bl	8000b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000120 	.word	0x20000120

08003810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
    uint32_t Counter = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN USART1_IRQn 0 */
    if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <USART1_IRQHandler+0x60>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	d11b      	bne.n	8003860 <USART1_IRQHandler+0x50>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <USART1_IRQHandler+0x60>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	621a      	str	r2, [r3, #32]
        HAL_UART_DMAStop(&huart1);
 8003830:	480f      	ldr	r0, [pc, #60]	; (8003870 <USART1_IRQHandler+0x60>)
 8003832:	f7fe ff49 	bl	80026c8 <HAL_UART_DMAStop>
        Counter = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <USART1_IRQHandler+0x64>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	607b      	str	r3, [r7, #4]
        Receive_t.Receive_Len = RECEIVE_LEN - Counter;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <USART1_IRQHandler+0x68>)
 800384a:	805a      	strh	r2, [r3, #2]
        Receive_t.Receive_Flag = 1;
 800384c:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <USART1_IRQHandler+0x68>)
 800384e:	7813      	ldrb	r3, [r2, #0]
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	7013      	strb	r3, [r2, #0]
        HAL_UART_Receive_DMA(&huart1, Receive_t.Receive_pData, RECEIVE_LEN);
 8003856:	2264      	movs	r2, #100	; 0x64
 8003858:	4908      	ldr	r1, [pc, #32]	; (800387c <USART1_IRQHandler+0x6c>)
 800385a:	4805      	ldr	r0, [pc, #20]	; (8003870 <USART1_IRQHandler+0x60>)
 800385c:	f7fe feb0 	bl	80025c0 <HAL_UART_Receive_DMA>

    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003860:	4803      	ldr	r0, [pc, #12]	; (8003870 <USART1_IRQHandler+0x60>)
 8003862:	f7fe ff9d 	bl	80027a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000168 	.word	0x20000168
 8003874:	20000120 	.word	0x20000120
 8003878:	20000064 	.word	0x20000064
 800387c:	20000068 	.word	0x20000068

08003880 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <SystemInit+0x64>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <SystemInit+0x64>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <SystemInit+0x68>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <SystemInit+0x68>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <SystemInit+0x68>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <SystemInit+0x68>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <SystemInit+0x68>)
 80038ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80038b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80038b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <SystemInit+0x68>)
 80038b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <SystemInit+0x68>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <SystemInit+0x68>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <SystemInit+0x68>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SystemInit+0x64>)
 80038d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038d6:	609a      	str	r2, [r3, #8]
#endif
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	40021000 	.word	0x40021000

080038ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <MX_USART1_UART_Init+0x58>)
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <MX_USART1_UART_Init+0x5c>)
 80038f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <MX_USART1_UART_Init+0x58>)
 80038f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800390a:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <MX_USART1_UART_Init+0x58>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003912:	220c      	movs	r2, #12
 8003914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <MX_USART1_UART_Init+0x58>)
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003924:	2200      	movs	r2, #0
 8003926:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <MX_USART1_UART_Init+0x58>)
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800392e:	4805      	ldr	r0, [pc, #20]	; (8003944 <MX_USART1_UART_Init+0x58>)
 8003930:	f7fe fce8 	bl	8002304 <HAL_UART_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800393a:	f7ff fefc 	bl	8003736 <Error_Handler>
  }

}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000168 	.word	0x20000168
 8003948:	40013800 	.word	0x40013800

0800394c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <HAL_UART_MspInit+0x134>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f040 8084 	bne.w	8003a78 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003970:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_UART_MspInit+0x138>)
 8003972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003974:	4a43      	ldr	r2, [pc, #268]	; (8003a84 <HAL_UART_MspInit+0x138>)
 8003976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397a:	6613      	str	r3, [r2, #96]	; 0x60
 800397c:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_UART_MspInit+0x138>)
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <HAL_UART_MspInit+0x138>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	4a3d      	ldr	r2, [pc, #244]	; (8003a84 <HAL_UART_MspInit+0x138>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003994:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_UART_MspInit+0x138>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b2:	2307      	movs	r3, #7
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4619      	mov	r1, r3
 80039bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c0:	f7fd f9b2 	bl	8000d28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039c6:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <HAL_UART_MspInit+0x140>)
 80039c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039cc:	2202      	movs	r2, #2
 80039ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039fa:	4823      	ldr	r0, [pc, #140]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 80039fc:	f7fc ff12 	bl	8000824 <HAL_DMA_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8003a06:	f7ff fe96 	bl	8003736 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 8003a0e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_UART_MspInit+0x13c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a18:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_UART_MspInit+0x148>)
 8003a1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a1e:	2202      	movs	r2, #2
 8003a20:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a24:	2210      	movs	r2, #16
 8003a26:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a4c:	4810      	ldr	r0, [pc, #64]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a4e:	f7fc fee9 	bl	8000824 <HAL_DMA_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003a58:	f7ff fe6d 	bl	8003736 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a60:	669a      	str	r2, [r3, #104]	; 0x68
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_UART_MspInit+0x144>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2025      	movs	r0, #37	; 0x25
 8003a6e:	f7fc fea2 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a72:	2025      	movs	r0, #37	; 0x25
 8003a74:	f7fc febb 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	20000120 	.word	0x20000120
 8003a8c:	40020058 	.word	0x40020058
 8003a90:	200000d8 	.word	0x200000d8
 8003a94:	40020044 	.word	0x40020044

08003a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a9e:	e003      	b.n	8003aa8 <LoopCopyDataInit>

08003aa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003aa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003aa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003aa6:	3104      	adds	r1, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003aa8:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003aac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003aae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ab0:	d3f6      	bcc.n	8003aa0 <CopyDataInit>
	ldr	r2, =_sbss
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ab4:	e002      	b.n	8003abc <LoopFillZerobss>

08003ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ab6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ab8:	f842 3b04 	str.w	r3, [r2], #4

08003abc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <LoopForever+0x16>)
	cmp	r2, r3
 8003abe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ac0:	d3f9      	bcc.n	8003ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ac2:	f7ff fedd 	bl	8003880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac6:	f000 f811 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aca:	f7ff fd81 	bl	80035d0 <main>

08003ace <LoopForever>:

LoopForever:
    b LoopForever
 8003ace:	e7fe      	b.n	8003ace <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ad0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003ad4:	08003bb4 	.word	0x08003bb4
	ldr	r0, =_sdata
 8003ad8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003adc:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8003ae0:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8003ae4:	200001e8 	.word	0x200001e8

08003ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ae8:	e7fe      	b.n	8003ae8 <ADC1_IRQHandler>
	...

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4e0d      	ldr	r6, [pc, #52]	; (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	; (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1ba4      	subs	r4, r4, r6
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2500      	movs	r5, #0
 8003af8:	42a5      	cmp	r5, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4e0b      	ldr	r6, [pc, #44]	; (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 f820 	bl	8003b44 <_init>
 8003b04:	1ba4      	subs	r4, r4, r6
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2500      	movs	r5, #0
 8003b0a:	42a5      	cmp	r5, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b14:	4798      	blx	r3
 8003b16:	3501      	adds	r5, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b1e:	4798      	blx	r3
 8003b20:	3501      	adds	r5, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003bac 	.word	0x08003bac
 8003b28:	08003bac 	.word	0x08003bac
 8003b2c:	08003bac 	.word	0x08003bac
 8003b30:	08003bb0 	.word	0x08003bb0

08003b34 <memset>:
 8003b34:	4402      	add	r2, r0
 8003b36:	4603      	mov	r3, r0
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d100      	bne.n	8003b3e <memset+0xa>
 8003b3c:	4770      	bx	lr
 8003b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b42:	e7f9      	b.n	8003b38 <memset+0x4>

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
