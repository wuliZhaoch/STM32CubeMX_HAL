
06_H743_IIC_ADC_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f4  080096f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096fc  080096fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08009704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  24000074  08009778  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001ec  08009778  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002170e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003708  00000000  00000000  000417b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00044eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  000460a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038eb6  00000000  00000000  00047130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121d4  00000000  00000000  0007ffe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00168938  00000000  00000000  000921ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001faaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051dc  00000000  00000000  001fab70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080095e8 	.word	0x080095e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080095e8 	.word	0x080095e8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f001 f99d 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800068a:	f002 fe37 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 800068e:	4601      	mov	r1, r0
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <HAL_Init+0x60>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_Init+0x64>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	f003 031f 	and.w	r3, r3, #31
 80006a2:	fa21 f303 	lsr.w	r3, r1, r3
 80006a6:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <HAL_Init+0x68>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_Init+0x68>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_Init+0x60>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	490b      	ldr	r1, [pc, #44]	; (80006e4 <HAL_Init+0x64>)
 80006b8:	5ccb      	ldrb	r3, [r1, r3]
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	fa22 f303 	lsr.w	r3, r2, r3
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_Init+0x6c>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f812 	bl	80006f0 <HAL_InitTick>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e002      	b.n	80006dc <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006d6:	f007 fe5b 	bl	8008390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400
 80006e4:	0800964c 	.word	0x0800964c
 80006e8:	24000008 	.word	0x24000008
 80006ec:	2400000c 	.word	0x2400000c

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_InitTick+0x60>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	e021      	b.n	8000748 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_InitTick+0x64>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_InitTick+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f977 	bl	8001a0e <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f001 f94f 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_InitTick+0x68>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000004 	.word	0x24000004
 8000754:	24000008 	.word	0x24000008
 8000758:	24000000 	.word	0x24000000

0800075c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_IncTick+0x20>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_IncTick+0x24>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_IncTick+0x24>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	24000004 	.word	0x24000004
 8000780:	240000a0 	.word	0x240000a0

08000784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <HAL_GetTick+0x14>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	240000a0 	.word	0x240000a0

0800079c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a4:	f7ff ffee 	bl	8000784 <HAL_GetTick>
 80007a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b4:	d005      	beq.n	80007c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_Delay+0x40>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c2:	bf00      	nop
 80007c4:	f7ff ffde 	bl	8000784 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8f7      	bhi.n	80007c4 <HAL_Delay+0x28>
  {
  }
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000004 	.word	0x24000004

080007e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetREVID+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	0c1b      	lsrs	r3, r3, #16
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	5c001000 	.word	0x5c001000

080007f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	431a      	orrs	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000860:	b490      	push	{r4, r7}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3360      	adds	r3, #96	; 0x60
 8000872:	461a      	mov	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	430b      	orrs	r3, r1
 800088c:	4313      	orrs	r3, r2
 800088e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bc90      	pop	{r4, r7}
 8000898:	4770      	bx	lr

0800089a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	431a      	orrs	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	611a      	str	r2, [r3, #16]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80008cc:	b490      	push	{r4, r7}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	461a      	mov	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6023      	str	r3, [r4, #0]
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc90      	pop	{r4, r7}
 80008fa:	4770      	bx	lr

080008fc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008fc:	b490      	push	{r4, r7}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3330      	adds	r3, #48	; 0x30
 800090c:	461a      	mov	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	f003 030c 	and.w	r3, r3, #12
 8000918:	4413      	add	r3, r2
 800091a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800091c:	6822      	ldr	r2, [r4, #0]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f003 031f 	and.w	r3, r3, #31
 8000924:	211f      	movs	r1, #31
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	0e9b      	lsrs	r3, r3, #26
 8000932:	f003 011f 	and.w	r1, r3, #31
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bc90      	pop	{r4, r7}
 800094c:	4770      	bx	lr

0800094e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800094e:	b490      	push	{r4, r7}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3314      	adds	r3, #20
 800095e:	461a      	mov	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	0e5b      	lsrs	r3, r3, #25
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	4413      	add	r3, r2
 800096c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800096e:	6822      	ldr	r2, [r4, #0]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	0d1b      	lsrs	r3, r3, #20
 8000974:	f003 031f 	and.w	r3, r3, #31
 8000978:	2107      	movs	r1, #7
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	401a      	ands	r2, r3
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	0d1b      	lsrs	r3, r3, #20
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bc90      	pop	{r4, r7}
 800099c:	4770      	bx	lr
	...

080009a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0318 	and.w	r3, r3, #24
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80009c4:	40d9      	lsrs	r1, r3
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	400b      	ands	r3, r1
 80009ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009ce:	431a      	orrs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	000fffff 	.word	0x000fffff

080009e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <LL_ADC_DisableDeepPowerDown+0x20>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6093      	str	r3, [r2, #8]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	5fffffc0 	.word	0x5fffffc0

08000a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a20:	d101      	bne.n	8000a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	6fffffc0 	.word	0x6fffffc0

08000a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a70:	d101      	bne.n	8000a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d101      	bne.n	8000a9c <LL_ADC_IsEnabled+0x18>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <LL_ADC_IsEnabled+0x1a>
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d101      	bne.n	8000ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d101      	bne.n	8000ae8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e18e      	b.n	8000e30 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d109      	bne.n	8000b34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f007 f9ab 	bl	8007e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff67 	bl	8000a0c <LL_ADC_IsDeepPowerDownEnabled>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d004      	beq.n	8000b4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff4d 	bl	80009e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff82 	bl	8000a5c <LL_ADC_IsInternalRegulatorEnabled>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d113      	bne.n	8000b86 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff66 	bl	8000a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b68:	4b9a      	ldr	r3, [pc, #616]	; (8000dd4 <HAL_ADC_Init+0x2dc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	099b      	lsrs	r3, r3, #6
 8000b6e:	4a9a      	ldr	r2, [pc, #616]	; (8000dd8 <HAL_ADC_Init+0x2e0>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	099b      	lsrs	r3, r3, #6
 8000b76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b78:	e002      	b.n	8000b80 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f9      	bne.n	8000b7a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff66 	bl	8000a5c <LL_ADC_IsInternalRegulatorEnabled>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10d      	bne.n	8000bb2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9a:	f043 0210 	orr.w	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f043 0201 	orr.w	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff77 	bl	8000aaa <LL_ADC_REG_IsConversionOngoing>
 8000bbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8129 	bne.w	8000e1e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8125 	bne.w	8000e1e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000bdc:	f043 0202 	orr.w	r2, r3, #2
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff4b 	bl	8000a84 <LL_ADC_IsEnabled>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d136      	bne.n	8000c62 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a78      	ldr	r2, [pc, #480]	; (8000ddc <HAL_ADC_Init+0x2e4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d004      	beq.n	8000c08 <HAL_ADC_Init+0x110>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a77      	ldr	r2, [pc, #476]	; (8000de0 <HAL_ADC_Init+0x2e8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d10e      	bne.n	8000c26 <HAL_ADC_Init+0x12e>
 8000c08:	4874      	ldr	r0, [pc, #464]	; (8000ddc <HAL_ADC_Init+0x2e4>)
 8000c0a:	f7ff ff3b 	bl	8000a84 <LL_ADC_IsEnabled>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4873      	ldr	r0, [pc, #460]	; (8000de0 <HAL_ADC_Init+0x2e8>)
 8000c12:	f7ff ff37 	bl	8000a84 <LL_ADC_IsEnabled>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4323      	orrs	r3, r4
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	e008      	b.n	8000c38 <HAL_ADC_Init+0x140>
 8000c26:	486f      	ldr	r0, [pc, #444]	; (8000de4 <HAL_ADC_Init+0x2ec>)
 8000c28:	f7ff ff2c 	bl	8000a84 <LL_ADC_IsEnabled>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d012      	beq.n	8000c62 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a66      	ldr	r2, [pc, #408]	; (8000ddc <HAL_ADC_Init+0x2e4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d004      	beq.n	8000c50 <HAL_ADC_Init+0x158>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a65      	ldr	r2, [pc, #404]	; (8000de0 <HAL_ADC_Init+0x2e8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_Init+0x15c>
 8000c50:	4a65      	ldr	r2, [pc, #404]	; (8000de8 <HAL_ADC_Init+0x2f0>)
 8000c52:	e000      	b.n	8000c56 <HAL_ADC_Init+0x15e>
 8000c54:	4a65      	ldr	r2, [pc, #404]	; (8000dec <HAL_ADC_Init+0x2f4>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	f7ff fdcb 	bl	80007f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c62:	f7ff fdbd 	bl	80007e0 <HAL_GetREVID>
 8000c66:	4602      	mov	r2, r0
 8000c68:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d914      	bls.n	8000c9a <HAL_ADC_Init+0x1a2>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b10      	cmp	r3, #16
 8000c76:	d110      	bne.n	8000c9a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7d5b      	ldrb	r3, [r3, #21]
 8000c7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7f1b      	ldrb	r3, [r3, #28]
 8000c8e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000c90:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c92:	f043 030c 	orr.w	r3, r3, #12
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	e00d      	b.n	8000cb6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7d5b      	ldrb	r3, [r3, #21]
 8000c9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ca4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000caa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7f1b      	ldrb	r3, [r3, #28]
 8000cb0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7f1b      	ldrb	r3, [r3, #28]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	045b      	lsls	r3, r3, #17
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d009      	beq.n	8000ce8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <HAL_ADC_Init+0x2f8>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fed2 	bl	8000aaa <LL_ADC_REG_IsConversionOngoing>
 8000d06:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fedf 	bl	8000ad0 <LL_ADC_INJ_IsConversionOngoing>
 8000d12:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14a      	bne.n	8000db0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d147      	bne.n	8000db0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7d1b      	ldrb	r3, [r3, #20]
 8000d24:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <HAL_ADC_Init+0x2fc>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	69b9      	ldr	r1, [r7, #24]
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d11b      	bne.n	8000d84 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_ADC_Init+0x300>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000d60:	3a01      	subs	r2, #1
 8000d62:	0411      	lsls	r1, r2, #16
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d68:	4311      	orrs	r1, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d6e:	4311      	orrs	r1, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d74:	430a      	orrs	r2, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f042 0201 	orr.w	r2, r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	e007      	b.n	8000d94 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fb58 	bl	8001460 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d121      	bne.n	8000dfc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f023 010f 	bic.w	r1, r3, #15
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	1e5a      	subs	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd0:	e01c      	b.n	8000e0c <HAL_ADC_Init+0x314>
 8000dd2:	bf00      	nop
 8000dd4:	24000008 	.word	0x24000008
 8000dd8:	053e2d63 	.word	0x053e2d63
 8000ddc:	40022000 	.word	0x40022000
 8000de0:	40022100 	.word	0x40022100
 8000de4:	58026000 	.word	0x58026000
 8000de8:	40022300 	.word	0x40022300
 8000dec:	58026300 	.word	0x58026300
 8000df0:	fff0c003 	.word	0xfff0c003
 8000df4:	ffffbffc 	.word	0xffffbffc
 8000df8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 020f 	bic.w	r2, r2, #15
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e10:	f023 0303 	bic.w	r3, r3, #3
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	655a      	str	r2, [r3, #84]	; 0x54
 8000e1c:	e007      	b.n	8000e2e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e22:	f043 0210 	orr.w	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3724      	adds	r7, #36	; 0x24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}

08000e38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b099      	sub	sp, #100	; 0x64
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	4a99      	ldr	r2, [pc, #612]	; (80010b8 <HAL_ADC_ConfigChannel+0x280>)
 8000e52:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_ConfigChannel+0x2a>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e2e6      	b.n	8001430 <HAL_ADC_ConfigChannel+0x5f8>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fe1b 	bl	8000aaa <LL_ADC_REG_IsConversionOngoing>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 82cb 	bne.w	8001412 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d108      	bne.n	8000e9a <HAL_ADC_ConfigChannel+0x62>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0e9b      	lsrs	r3, r3, #26
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	e00f      	b.n	8000eba <HAL_ADC_ConfigChannel+0x82>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	69d1      	ldr	r1, [r2, #28]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f7ff fd11 	bl	80008fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fde3 	bl	8000aaa <LL_ADC_REG_IsConversionOngoing>
 8000ee4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fdf0 	bl	8000ad0 <LL_ADC_INJ_IsConversionOngoing>
 8000ef0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f040 80b3 	bne.w	8001060 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 80af 	bne.w	8001060 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f7ff fd1d 	bl	800094e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000f14:	4b69      	ldr	r3, [pc, #420]	; (80010bc <HAL_ADC_ConfigChannel+0x284>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f20:	d10b      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x102>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	e01d      	b.n	8000f76 <HAL_ADC_ConfigChannel+0x13e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10b      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x128>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	e00a      	b.n	8000f76 <HAL_ADC_ConfigChannel+0x13e>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d027      	beq.n	8000fd0 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	6919      	ldr	r1, [r3, #16]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f8e:	f7ff fc67 	bl	8000860 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	6919      	ldr	r1, [r3, #16]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	7e5b      	ldrb	r3, [r3, #25]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x170>
 8000fa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_ConfigChannel+0x172>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	461a      	mov	r2, r3
 8000fac:	f7ff fc8e 	bl	80008cc <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6919      	ldr	r1, [r3, #16]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <HAL_ADC_ConfigChannel+0x18e>
 8000fc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc4:	e000      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x190>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f7ff fc66 	bl	800089a <LL_ADC_SetDataRightShift>
 8000fce:	e047      	b.n	8001060 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	069b      	lsls	r3, r3, #26
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d107      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ff2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	069b      	lsls	r3, r3, #26
 8001004:	429a      	cmp	r2, r3
 8001006:	d107      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001016:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800101e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	069b      	lsls	r3, r3, #26
 8001028:	429a      	cmp	r2, r3
 800102a:	d107      	bne.n	800103c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800103a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	069b      	lsls	r3, r3, #26
 800104c:	429a      	cmp	r2, r3
 800104e:	d107      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800105e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd0d 	bl	8000a84 <LL_ADC_IsEnabled>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 81d9 	bne.w	8001424 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	461a      	mov	r2, r3
 8001080:	f7ff fc8e 	bl	80009a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_ADC_ConfigChannel+0x280>)
 800108a:	4293      	cmp	r3, r2
 800108c:	f040 8101 	bne.w	8001292 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x288>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0e9b      	lsrs	r3, r3, #26
 80010a6:	3301      	adds	r3, #1
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	bf94      	ite	ls
 80010b0:	2301      	movls	r3, #1
 80010b2:	2300      	movhi	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	e016      	b.n	80010e6 <HAL_ADC_ConfigChannel+0x2ae>
 80010b8:	47ff0000 	.word	0x47ff0000
 80010bc:	5c001000 	.word	0x5c001000
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80010ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2b09      	cmp	r3, #9
 80010de:	bf94      	ite	ls
 80010e0:	2301      	movls	r3, #1
 80010e2:	2300      	movhi	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d064      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x2ce>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	0e9b      	lsrs	r3, r3, #26
 80010fc:	3301      	adds	r3, #1
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001104:	e00e      	b.n	8001124 <HAL_ADC_ConfigChannel+0x2ec>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	069b      	lsls	r3, r3, #26
 8001120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800112c:	2b00      	cmp	r3, #0
 800112e:	d109      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x30c>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0e9b      	lsrs	r3, r3, #26
 8001136:	3301      	adds	r3, #1
 8001138:	f003 031f 	and.w	r3, r3, #31
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	e010      	b.n	8001166 <HAL_ADC_ConfigChannel+0x32e>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	ea42 0103 	orr.w	r1, r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10a      	bne.n	800118c <HAL_ADC_ConfigChannel+0x354>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0e9b      	lsrs	r3, r3, #26
 800117c:	3301      	adds	r3, #1
 800117e:	f003 021f 	and.w	r2, r3, #31
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	051b      	lsls	r3, r3, #20
 800118a:	e011      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x378>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011b0:	430b      	orrs	r3, r1
 80011b2:	e069      	b.n	8001288 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x398>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0e9b      	lsrs	r3, r3, #26
 80011c6:	3301      	adds	r3, #1
 80011c8:	069b      	lsls	r3, r3, #26
 80011ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ce:	e00e      	b.n	80011ee <HAL_ADC_ConfigChannel+0x3b6>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	61fb      	str	r3, [r7, #28]
  return result;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	069b      	lsls	r3, r3, #26
 80011ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_ConfigChannel+0x3d6>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0e9b      	lsrs	r3, r3, #26
 8001200:	3301      	adds	r3, #1
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	e010      	b.n	8001230 <HAL_ADC_ConfigChannel+0x3f8>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	617b      	str	r3, [r7, #20]
  return result;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	ea42 0103 	orr.w	r1, r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10d      	bne.n	800125c <HAL_ADC_ConfigChannel+0x424>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	3301      	adds	r3, #1
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	3b1e      	subs	r3, #30
 8001254:	051b      	lsls	r3, r3, #20
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125a:	e014      	b.n	8001286 <HAL_ADC_ConfigChannel+0x44e>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	60fb      	str	r3, [r7, #12]
  return result;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	3b1e      	subs	r3, #30
 8001280:	051b      	lsls	r3, r3, #20
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001286:	430b      	orrs	r3, r1
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6892      	ldr	r2, [r2, #8]
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fb5e 	bl	800094e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f280 80c4 	bge.w	8001424 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d004      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x478>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a64      	ldr	r2, [pc, #400]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x47c>
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_ADC_ConfigChannel+0x608>)
 80012b2:	e000      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x47e>
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_ADC_ConfigChannel+0x60c>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fac4 	bl	8000844 <LL_ADC_GetCommonPathInternalCh>
 80012bc:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a5d      	ldr	r2, [pc, #372]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_ConfigChannel+0x49a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a5b      	ldr	r2, [pc, #364]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10e      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x4b8>
 80012d2:	4859      	ldr	r0, [pc, #356]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 80012d4:	f7ff fbd6 	bl	8000a84 <LL_ADC_IsEnabled>
 80012d8:	4604      	mov	r4, r0
 80012da:	4858      	ldr	r0, [pc, #352]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 80012dc:	f7ff fbd2 	bl	8000a84 <LL_ADC_IsEnabled>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4323      	orrs	r3, r4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	e008      	b.n	8001302 <HAL_ADC_ConfigChannel+0x4ca>
 80012f0:	4855      	ldr	r0, [pc, #340]	; (8001448 <HAL_ADC_ConfigChannel+0x610>)
 80012f2:	f7ff fbc7 	bl	8000a84 <LL_ADC_IsEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d07b      	beq.n	80013fe <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_ADC_ConfigChannel+0x614>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d12e      	bne.n	800136e <HAL_ADC_ConfigChannel+0x536>
 8001310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d129      	bne.n	800136e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_ADC_ConfigChannel+0x610>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d17f      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a43      	ldr	r2, [pc, #268]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d004      	beq.n	8001338 <HAL_ADC_ConfigChannel+0x500>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a42      	ldr	r2, [pc, #264]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x504>
 8001338:	4a41      	ldr	r2, [pc, #260]	; (8001440 <HAL_ADC_ConfigChannel+0x608>)
 800133a:	e000      	b.n	800133e <HAL_ADC_ConfigChannel+0x506>
 800133c:	4a41      	ldr	r2, [pc, #260]	; (8001444 <HAL_ADC_ConfigChannel+0x60c>)
 800133e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f7ff fa69 	bl	800081e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_ADC_ConfigChannel+0x618>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_ADC_ConfigChannel+0x61c>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800135e:	e002      	b.n	8001366 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3b01      	subs	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f9      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800136c:	e05a      	b.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <HAL_ADC_ConfigChannel+0x620>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d11e      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x57e>
 8001378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d119      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a30      	ldr	r2, [pc, #192]	; (8001448 <HAL_ADC_ConfigChannel+0x610>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d14b      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d004      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x568>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x56c>
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_ADC_ConfigChannel+0x608>)
 80013a2:	e000      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x56e>
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_ADC_ConfigChannel+0x60c>)
 80013a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f7ff fa35 	bl	800081e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013b4:	e036      	b.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_ADC_ConfigChannel+0x624>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d131      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
 80013c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d12c      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_ADC_ConfigChannel+0x610>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d127      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_ADC_ConfigChannel+0x600>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d004      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x5b0>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_ADC_ConfigChannel+0x604>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x5b4>
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_ADC_ConfigChannel+0x608>)
 80013ea:	e000      	b.n	80013ee <HAL_ADC_ConfigChannel+0x5b6>
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_ADC_ConfigChannel+0x60c>)
 80013ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f7ff fa11 	bl	800081e <LL_ADC_SetCommonPathInternalCh>
 80013fc:	e012      	b.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f043 0220 	orr.w	r2, r3, #32
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001410:	e008      	b.n	8001424 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800142c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001430:	4618      	mov	r0, r3
 8001432:	3764      	adds	r7, #100	; 0x64
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	40022000 	.word	0x40022000
 800143c:	40022100 	.word	0x40022100
 8001440:	40022300 	.word	0x40022300
 8001444:	58026300 	.word	0x58026300
 8001448:	58026000 	.word	0x58026000
 800144c:	cb840000 	.word	0xcb840000
 8001450:	24000008 	.word	0x24000008
 8001454:	053e2d63 	.word	0x053e2d63
 8001458:	c7520000 	.word	0xc7520000
 800145c:	cfb80000 	.word	0xcfb80000

08001460 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a74      	ldr	r2, [pc, #464]	; (8001640 <ADC_ConfigureBoostMode+0x1e0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d004      	beq.n	800147c <ADC_ConfigureBoostMode+0x1c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	; (8001644 <ADC_ConfigureBoostMode+0x1e4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d109      	bne.n	8001490 <ADC_ConfigureBoostMode+0x30>
 800147c:	4b72      	ldr	r3, [pc, #456]	; (8001648 <ADC_ConfigureBoostMode+0x1e8>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	e008      	b.n	80014a2 <ADC_ConfigureBoostMode+0x42>
 8001490:	4b6e      	ldr	r3, [pc, #440]	; (800164c <ADC_ConfigureBoostMode+0x1ec>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01a      	beq.n	80014dc <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80014a6:	f002 f89b 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 80014aa:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014b4:	d006      	beq.n	80014c4 <ADC_ConfigureBoostMode+0x64>
 80014b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014ba:	d00b      	beq.n	80014d4 <ADC_ConfigureBoostMode+0x74>
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d000      	beq.n	80014c4 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80014c2:	e05d      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	60fb      	str	r3, [r7, #12]
        break;
 80014d2:	e055      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
        break;
 80014da:	e051      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80014dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014e0:	f002 ffb6 	bl	8004450 <HAL_RCCEx_GetPeriphCLKFreq>
 80014e4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80014ee:	d02a      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
 80014f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80014f4:	d813      	bhi.n	800151e <ADC_ConfigureBoostMode+0xbe>
 80014f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80014fa:	d024      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
 80014fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001500:	d806      	bhi.n	8001510 <ADC_ConfigureBoostMode+0xb0>
 8001502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001506:	d01e      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
 8001508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800150c:	d01b      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800150e:	e037      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001514:	d017      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
 8001516:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800151a:	d014      	beq.n	8001546 <ADC_ConfigureBoostMode+0xe6>
        break;
 800151c:	e030      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800151e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001522:	d021      	beq.n	8001568 <ADC_ConfigureBoostMode+0x108>
 8001524:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001528:	d806      	bhi.n	8001538 <ADC_ConfigureBoostMode+0xd8>
 800152a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800152e:	d013      	beq.n	8001558 <ADC_ConfigureBoostMode+0xf8>
 8001530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001534:	d014      	beq.n	8001560 <ADC_ConfigureBoostMode+0x100>
        break;
 8001536:	e023      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001538:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800153c:	d018      	beq.n	8001570 <ADC_ConfigureBoostMode+0x110>
 800153e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001542:	d019      	beq.n	8001578 <ADC_ConfigureBoostMode+0x118>
        break;
 8001544:	e01c      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	60fb      	str	r3, [r7, #12]
        break;
 8001556:	e013      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	60fb      	str	r3, [r7, #12]
      break;
 800155e:	e00f      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	60fb      	str	r3, [r7, #12]
        break;
 8001566:	e00b      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	099b      	lsrs	r3, r3, #6
 800156c:	60fb      	str	r3, [r7, #12]
        break;
 800156e:	e007      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	09db      	lsrs	r3, r3, #7
 8001574:	60fb      	str	r3, [r7, #12]
        break;
 8001576:	e003      	b.n	8001580 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	60fb      	str	r3, [r7, #12]
        break;
 800157e:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001580:	f7ff f92e 	bl	80007e0 <HAL_GetREVID>
 8001584:	4602      	mov	r2, r0
 8001586:	f241 0303 	movw	r3, #4099	; 0x1003
 800158a:	429a      	cmp	r2, r3
 800158c:	d815      	bhi.n	80015ba <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <ADC_ConfigureBoostMode+0x1f0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d908      	bls.n	80015a8 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a4:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 80015a6:	e047      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	e03e      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a24      	ldr	r2, [pc, #144]	; (8001654 <ADC_ConfigureBoostMode+0x1f4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d808      	bhi.n	80015da <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	e02e      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <ADC_ConfigureBoostMode+0x1f4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d90e      	bls.n	8001600 <ADC_ConfigureBoostMode+0x1a0>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <ADC_ConfigureBoostMode+0x1f8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d80a      	bhi.n	8001600 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	e01b      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <ADC_ConfigureBoostMode+0x1f8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d90e      	bls.n	8001626 <ADC_ConfigureBoostMode+0x1c6>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <ADC_ConfigureBoostMode+0x1fc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d80a      	bhi.n	8001626 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	e008      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001634:	609a      	str	r2, [r3, #8]
}
 8001636:	e7ff      	b.n	8001638 <ADC_ConfigureBoostMode+0x1d8>
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	40022100 	.word	0x40022100
 8001648:	40022300 	.word	0x40022300
 800164c:	58026300 	.word	0x58026300
 8001650:	01312d00 	.word	0x01312d00
 8001654:	005f5e10 	.word	0x005f5e10
 8001658:	00bebc20 	.word	0x00bebc20
 800165c:	017d7840 	.word	0x017d7840

08001660 <LL_ADC_IsEnabled>:
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <LL_ADC_IsEnabled+0x18>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <LL_ADC_IsEnabled+0x1a>
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_REG_IsConversionOngoing>:
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b04      	cmp	r3, #4
 8001698:	d101      	bne.n	800169e <LL_ADC_REG_IsConversionOngoing+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b09f      	sub	sp, #124	; 0x7c
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e0ba      	b.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d102      	bne.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80016dc:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	e001      	b.n	80016e6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e09d      	b.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ffbd 	bl	8001686 <LL_ADC_REG_IsConversionOngoing>
 800170c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffb7 	bl	8001686 <LL_ADC_REG_IsConversionOngoing>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d17f      	bne.n	800181e <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800171e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001720:	2b00      	cmp	r3, #0
 8001722:	d17c      	bne.n	800181e <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a47      	ldr	r2, [pc, #284]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d004      	beq.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800173a:	e000      	b.n	800173e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800173c:	4b45      	ldr	r3, [pc, #276]	; (8001854 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800173e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d039      	beq.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	431a      	orrs	r2, r3
 8001756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001758:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d004      	beq.n	800176e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a38      	ldr	r2, [pc, #224]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10e      	bne.n	800178c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800176e:	4836      	ldr	r0, [pc, #216]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001770:	f7ff ff76 	bl	8001660 <LL_ADC_IsEnabled>
 8001774:	4604      	mov	r4, r0
 8001776:	4835      	ldr	r0, [pc, #212]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001778:	f7ff ff72 	bl	8001660 <LL_ADC_IsEnabled>
 800177c:	4603      	mov	r3, r0
 800177e:	4323      	orrs	r3, r4
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e008      	b.n	800179e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800178c:	4832      	ldr	r0, [pc, #200]	; (8001858 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800178e:	f7ff ff67 	bl	8001660 <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d047      	beq.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80017a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	6811      	ldr	r1, [r2, #0]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6892      	ldr	r2, [r2, #8]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017ba:	e03a      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80017bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d004      	beq.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10e      	bne.n	80017fa <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80017dc:	481a      	ldr	r0, [pc, #104]	; (8001848 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80017de:	f7ff ff3f 	bl	8001660 <LL_ADC_IsEnabled>
 80017e2:	4604      	mov	r4, r0
 80017e4:	4819      	ldr	r0, [pc, #100]	; (800184c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80017e6:	f7ff ff3b 	bl	8001660 <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4323      	orrs	r3, r4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	e008      	b.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80017fa:	4817      	ldr	r0, [pc, #92]	; (8001858 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80017fc:	f7ff ff30 	bl	8001660 <LL_ADC_IsEnabled>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001816:	4013      	ands	r3, r2
 8001818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800181a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800181c:	e009      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	f043 0220 	orr.w	r2, r3, #32
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001830:	e000      	b.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001832:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800183c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001840:	4618      	mov	r0, r3
 8001842:	377c      	adds	r7, #124	; 0x7c
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	40022000 	.word	0x40022000
 800184c:	40022100 	.word	0x40022100
 8001850:	40022300 	.word	0x40022300
 8001854:	58026300 	.word	0x58026300
 8001858:	58026000 	.word	0x58026000
 800185c:	fffff0e0 	.word	0xfffff0e0

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	4313      	orrs	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	05fa0000 	.word	0x05fa0000

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff47 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff5e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff90 	bl	8001918 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffb2 	bl	8001980 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a36:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <HAL_GPIO_Init+0x234>)
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a3a:	e194      	b.n	8001d66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8186 	beq.w	8001d60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x3c>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d00b      	beq.n	8001b00 <HAL_GPIO_Init+0xd8>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d007      	beq.n	8001b00 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af4:	2b11      	cmp	r3, #17
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80e0 	beq.w	8001d60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x238>)
 8001ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x238>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_GPIO_Init+0x238>)
 8001bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_GPIO_Init+0x23c>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_GPIO_Init+0x240>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d052      	beq.n	8001c90 <HAL_GPIO_Init+0x268>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_GPIO_Init+0x244>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x22e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_GPIO_Init+0x248>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x22a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_GPIO_Init+0x24c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_GPIO_Init+0x250>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_GPIO_Init+0x254>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_GPIO_Init+0x258>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x25c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_GPIO_Init+0x260>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_GPIO_Init+0x264>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e02d      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e02b      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e029      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e027      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e025      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e023      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e021      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e01f      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e01d      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01b      	b.n	8001c92 <HAL_GPIO_Init+0x26a>
 8001c5a:	bf00      	nop
 8001c5c:	58000080 	.word	0x58000080
 8001c60:	58024400 	.word	0x58024400
 8001c64:	58000400 	.word	0x58000400
 8001c68:	58020000 	.word	0x58020000
 8001c6c:	58020400 	.word	0x58020400
 8001c70:	58020800 	.word	0x58020800
 8001c74:	58020c00 	.word	0x58020c00
 8001c78:	58021000 	.word	0x58021000
 8001c7c:	58021400 	.word	0x58021400
 8001c80:	58021800 	.word	0x58021800
 8001c84:	58021c00 	.word	0x58021c00
 8001c88:	58022000 	.word	0x58022000
 8001c8c:	58022400 	.word	0x58022400
 8001c90:	2300      	movs	r3, #0
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca2:	4938      	ldr	r1, [pc, #224]	; (8001d84 <HAL_GPIO_Init+0x35c>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f ae63 	bne.w	8001a3c <HAL_GPIO_Init+0x14>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	58000400 	.word	0x58000400

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	401a      	ands	r2, r3
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07f      	b.n	8001f02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f006 f928 	bl	800806c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d104      	bne.n	8001e8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_I2C_Init+0x11c>)
 8001e96:	430b      	orrs	r3, r1
 8001e98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	ea42 0103 	orr.w	r1, r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	021a      	lsls	r2, r3, #8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69d9      	ldr	r1, [r3, #28]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	02008000 	.word	0x02008000

08001f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
 8001f20:	4613      	mov	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	f040 80da 	bne.w	80020e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x30>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0d3      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f48:	f7fe fc1c 	bl	8000784 <HAL_GetTick>
 8001f4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2319      	movs	r3, #25
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f9e6 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0be      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2bff      	cmp	r3, #255	; 0xff
 8001f9a:	d90e      	bls.n	8001fba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fb48 	bl	8002648 <I2C_TransferConfig>
 8001fb8:	e06c      	b.n	8002094 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb37 	bl	8002648 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001fda:	e05b      	b.n	8002094 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	6a39      	ldr	r1, [r7, #32]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9e3 	bl	80023ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e07b      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d034      	beq.n	8002094 <HAL_I2C_Master_Transmit+0x184>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d130      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f975 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04d      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 faeb 	bl	8002648 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fada 	bl	8002648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d19e      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	6a39      	ldr	r1, [r7, #32]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f9c2 	bl	800242c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e01a      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	80002000 	.word	0x80002000
 80020f4:	fe00e800 	.word	0xfe00e800

080020f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	f040 80db 	bne.w	80022d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_I2C_Master_Receive+0x30>
 8002124:	2302      	movs	r3, #2
 8002126:	e0d4      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002130:	f7fe fb28 	bl	8000784 <HAL_GetTick>
 8002134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2319      	movs	r3, #25
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f8f2 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0bf      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2222      	movs	r2, #34	; 0x22
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2210      	movs	r2, #16
 800215e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	893a      	ldrh	r2, [r7, #8]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	d90e      	bls.n	80021a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	b2da      	uxtb	r2, r3
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <HAL_I2C_Master_Receive+0x1e4>)
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa54 	bl	8002648 <I2C_TransferConfig>
 80021a0:	e06d      	b.n	800227e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	4b49      	ldr	r3, [pc, #292]	; (80022dc <HAL_I2C_Master_Receive+0x1e4>)
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fa43 	bl	8002648 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021c2:	e05c      	b.n	800227e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	6a39      	ldr	r1, [r7, #32]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f96b 	bl	80024a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e07c      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d034      	beq.n	800227e <HAL_I2C_Master_Receive+0x186>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d130      	bne.n	800227e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2200      	movs	r2, #0
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f880 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e04d      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2bff      	cmp	r3, #255	; 0xff
 800223e:	d90e      	bls.n	800225e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f9f6 	bl	8002648 <I2C_TransferConfig>
 800225c:	e00f      	b.n	800227e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	b2da      	uxtb	r2, r3
 800226e:	8979      	ldrh	r1, [r7, #10]
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f9e5 	bl	8002648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d19d      	bne.n	80021c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f8cd 	bl	800242c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01a      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2220      	movs	r2, #32
 80022a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_I2C_Master_Receive+0x1e8>)
 80022b0:	400b      	ands	r3, r1
 80022b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	80002400 	.word	0x80002400
 80022e0:	fe00e800 	.word	0xfe00e800

080022e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d103      	bne.n	8002302 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d007      	beq.n	8002320 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	619a      	str	r2, [r3, #24]
  }
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233c:	e022      	b.n	8002384 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d01e      	beq.n	8002384 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe fa1d 	bl	8000784 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d113      	bne.n	8002384 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00f      	b.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d0cd      	beq.n	800233e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023b8:	e02c      	b.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8dc 	bl	800257c <I2C_IsAcknowledgeFailed>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02a      	b.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d01e      	beq.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe f9d5 	bl	8000784 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e007      	b.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d1cb      	bne.n	80023ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002438:	e028      	b.n	800248c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f89c 	bl	800257c <I2C_IsAcknowledgeFailed>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e026      	b.n	800249c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7fe f999 	bl	8000784 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e007      	b.n	800249c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d1cf      	bne.n	800243a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024b0:	e055      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f860 	bl	800257c <I2C_IsAcknowledgeFailed>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e053      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d129      	bne.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d105      	bne.n	80024ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e03f      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002502:	400b      	ands	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e022      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7fe f92c 	bl	8000784 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d1a2      	bne.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	fe00e800 	.word	0xfe00e800

0800257c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b10      	cmp	r3, #16
 8002594:	d151      	bne.n	800263a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	e022      	b.n	80025de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d01e      	beq.n	80025de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a0:	f7fe f8f0 	bl	8000784 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d302      	bcc.n	80025b6 <I2C_IsAcknowledgeFailed+0x3a>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d113      	bne.n	80025de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02e      	b.n	800263c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d1d5      	bne.n	8002598 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2210      	movs	r2, #16
 80025f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fe71 	bl	80022e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <I2C_IsAcknowledgeFailed+0xc8>)
 800260e:	400b      	ands	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	4613      	mov	r3, r2
 8002658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	0d5b      	lsrs	r3, r3, #21
 8002664:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <I2C_TransferConfig+0x58>)
 800266a:	430b      	orrs	r3, r1
 800266c:	43db      	mvns	r3, r3
 800266e:	ea02 0103 	and.w	r1, r2, r3
 8002672:	897b      	ldrh	r3, [r7, #10]
 8002674:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002678:	7a7b      	ldrb	r3, [r7, #9]
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	03ff63ff 	.word	0x03ff63ff

080026a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d138      	bne.n	800272c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e032      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	d139      	bne.n	80027c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275a:	2302      	movs	r3, #2
 800275c:	e033      	b.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2224      	movs	r2, #36	; 0x24
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800278c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_PWREx_ConfigSupply+0x6c>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d008      	beq.n	80027fa <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_PWREx_ConfigSupply+0x6c>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01d      	b.n	8002836 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_PWREx_ConfigSupply+0x6c>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	490f      	ldr	r1, [pc, #60]	; (8002840 <HAL_PWREx_ConfigSupply+0x6c>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800280a:	f7fd ffbb 	bl	8000784 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002810:	e009      	b.n	8002826 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002812:	f7fd ffb7 	bl	8000784 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002820:	d901      	bls.n	8002826 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e007      	b.n	8002836 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_PWREx_ConfigSupply+0x6c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002832:	d1ee      	bne.n	8002812 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	58024800 	.word	0x58024800

08002844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e3a4      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002864:	4b9a      	ldr	r3, [pc, #616]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800286e:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	2b10      	cmp	r3, #16
 8002878:	d007      	beq.n	800288a <HAL_RCC_OscConfig+0x46>
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2b18      	cmp	r3, #24
 800287e:	d110      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b91      	ldr	r3, [pc, #580]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x12c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e37e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x76>
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a87      	ldr	r2, [pc, #540]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b83      	ldr	r3, [pc, #524]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a82      	ldr	r2, [pc, #520]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xbc>
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a76      	ldr	r2, [pc, #472]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 8002900:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a72      	ldr	r2, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fd ff30 	bl	8000784 <HAL_GetTick>
 8002924:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fd ff2c 	bl	8000784 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e332      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe4>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fd ff1c 	bl	8000784 <HAL_GetTick>
 800294c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fd ff18 	bl	8000784 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e31e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x10c>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80b0 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002988:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_RCC_OscConfig+0x162>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b18      	cmp	r3, #24
 800299a:	d149      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1ec>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d144      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x17a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e2f0      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0219 	bic.w	r2, r3, #25
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4941      	ldr	r1, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fd fed8 	bl	8000784 <HAL_GetTick>
 80029d4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fd fed4 	bl	8000784 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e2da      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	f7fd fef3 	bl	80007e0 <HAL_GetREVID>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d80a      	bhi.n	8002a1a <HAL_RCC_OscConfig+0x1d6>
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	031b      	lsls	r3, r3, #12
 8002a12:	492f      	ldr	r1, [pc, #188]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a18:	e062      	b.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2e:	e057      	b.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d038      	beq.n	8002aaa <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0219 	bic.w	r2, r3, #25
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fd fe9b 	bl	8000784 <HAL_GetTick>
 8002a4e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fd fe97 	bl	8000784 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e29d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	f7fd feb6 	bl	80007e0 <HAL_GetREVID>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d80a      	bhi.n	8002a94 <HAL_RCC_OscConfig+0x250>
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	4910      	ldr	r1, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
 8002a92:	e025      	b.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	e01a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_RCC_OscConfig+0x28c>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fd fe65 	bl	8000784 <HAL_GetTick>
 8002aba:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fd fe61 	bl	8000784 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d903      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e267      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
 8002ad0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ad4:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ee      	bne.n	8002abe <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 808f 	beq.w	8002c0c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	4b9a      	ldr	r3, [pc, #616]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002af8:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d007      	beq.n	8002b14 <HAL_RCC_OscConfig+0x2d0>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b18      	cmp	r3, #24
 8002b08:	d12d      	bne.n	8002b66 <HAL_RCC_OscConfig+0x322>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d128      	bne.n	8002b66 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b14:	4b90      	ldr	r3, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2e8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e239      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2c:	f7fd fe58 	bl	80007e0 <HAL_GetREVID>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d80a      	bhi.n	8002b50 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b87      	ldr	r3, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	4983      	ldr	r1, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b4e:	e05d      	b.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	497e      	ldr	r1, [pc, #504]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b64:	e052      	b.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d035      	beq.n	8002bda <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b6e:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a79      	ldr	r2, [pc, #484]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fd fe03 	bl	8000784 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b82:	f7fd fdff 	bl	8000784 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e205      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ba0:	f7fd fe1e 	bl	80007e0 <HAL_GetREVID>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d80a      	bhi.n	8002bc4 <HAL_RCC_OscConfig+0x380>
 8002bae:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	4966      	ldr	r1, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
 8002bc2:	e023      	b.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
 8002bc4:	4b64      	ldr	r3, [pc, #400]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	4961      	ldr	r1, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5e      	ldr	r2, [pc, #376]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fd fdcd 	bl	8000784 <HAL_GetTick>
 8002bea:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bee:	f7fd fdc9 	bl	8000784 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1cf      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d036      	beq.n	8002c86 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fd fdaa 	bl	8000784 <HAL_GetTick>
 8002c30:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fd fda6 	bl	8000784 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1ac      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x3f0>
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fd fd90 	bl	8000784 <HAL_GetTick>
 8002c64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fd fd8c 	bl	8000784 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e192      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d036      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca6:	f7fd fd6d 	bl	8000784 <HAL_GetTick>
 8002caa:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cae:	f7fd fd69 	bl	8000784 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e16f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x46a>
 8002ccc:	e018      	b.n	8002d00 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cda:	f7fd fd53 	bl	8000784 <HAL_GetTick>
 8002cde:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ce2:	f7fd fd4f 	bl	8000784 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e155      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8086 	beq.w	8002e1a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RCC_OscConfig+0x518>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_RCC_OscConfig+0x518>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1a:	f7fd fd33 	bl	8000784 <HAL_GetTick>
 8002d1e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fd fd2f 	bl	8000784 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	; 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e135      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_OscConfig+0x518>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x51c>
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a02      	ldr	r2, [pc, #8]	; (8002d58 <HAL_RCC_OscConfig+0x514>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	e032      	b.n	8002dbc <HAL_RCC_OscConfig+0x578>
 8002d56:	bf00      	nop
 8002d58:	58024400 	.word	0x58024400
 8002d5c:	58024800 	.word	0x58024800
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x53e>
 8002d68:	4b8f      	ldr	r3, [pc, #572]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a8e      	ldr	r2, [pc, #568]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a8b      	ldr	r2, [pc, #556]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d7a:	f023 0304 	bic.w	r3, r3, #4
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x578>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x560>
 8002d8a:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a86      	ldr	r2, [pc, #536]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
 8002d96:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0x578>
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a7f      	ldr	r2, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	4b7d      	ldr	r3, [pc, #500]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a7c      	ldr	r2, [pc, #496]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002db6:	f023 0304 	bic.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fd fcde 	bl	8000784 <HAL_GetTick>
 8002dc8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fd fcda 	bl	8000784 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0de      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RCC_OscConfig+0x588>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd fcc8 	bl	8000784 <HAL_GetTick>
 8002df4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fd fcc4 	bl	8000784 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0c8      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ee      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80bd 	beq.w	8002f9e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e24:	4b60      	ldr	r3, [pc, #384]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	f000 80b4 	beq.w	8002f9a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 8095 	bne.w	8002f66 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fd fc9c 	bl	8000784 <HAL_GetTick>
 8002e4c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fd fc98 	bl	8000784 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e09e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6e:	4b4e      	ldr	r3, [pc, #312]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <HAL_RCC_OscConfig+0x768>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	430a      	orrs	r2, r1
 8002e82:	4949      	ldr	r1, [pc, #292]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	628b      	str	r3, [r1, #40]	; 0x28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	3b01      	subs	r3, #1
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002eb8:	493b      	ldr	r1, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ece:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ed6:	00d2      	lsls	r2, r2, #3
 8002ed8:	4933      	ldr	r1, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ede:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f023 020c 	bic.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	492f      	ldr	r1, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f023 0202 	bic.w	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	492a      	ldr	r1, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fd fc21 	bl	8000784 <HAL_GetTick>
 8002f42:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fd fc1d 	bl	8000784 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e023      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x702>
 8002f64:	e01b      	b.n	8002f9e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fd fc07 	bl	8000784 <HAL_GetTick>
 8002f76:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd fc03 	bl	8000784 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e009      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x764>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x736>
 8002f98:	e001      	b.n	8002f9e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	fffffc0c 	.word	0xfffffc0c
 8002fb0:	ffff0007 	.word	0xffff0007

08002fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e18d      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4985      	ldr	r1, [pc, #532]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b83      	ldr	r3, [pc, #524]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e175      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d010      	beq.n	8003026 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	4b7b      	ldr	r3, [pc, #492]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003010:	429a      	cmp	r2, r3
 8003012:	d908      	bls.n	8003026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003014:	4b78      	ldr	r3, [pc, #480]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	4975      	ldr	r1, [pc, #468]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003022:	4313      	orrs	r3, r2
 8003024:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	4b70      	ldr	r3, [pc, #448]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303e:	429a      	cmp	r2, r3
 8003040:	d908      	bls.n	8003054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003042:	4b6d      	ldr	r3, [pc, #436]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	496a      	ldr	r1, [pc, #424]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003050:	4313      	orrs	r3, r2
 8003052:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	495e      	ldr	r1, [pc, #376]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800307e:	4313      	orrs	r3, r2
 8003080:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800309a:	429a      	cmp	r2, r3
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800309e:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4953      	ldr	r1, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d908      	bls.n	80030de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f023 020f 	bic.w	r2, r3, #15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4947      	ldr	r1, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d055      	beq.n	8003196 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030ea:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4940      	ldr	r1, [pc, #256]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d107      	bne.n	8003114 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d121      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0e7      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0db      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0cf      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0c7      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003154:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4925      	ldr	r1, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003162:	4313      	orrs	r3, r2
 8003164:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fd fb0d 	bl	8000784 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316c:	e00a      	b.n	8003184 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316e:	f7fd fb09 	bl	8000784 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0af      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	429a      	cmp	r2, r3
 8003194:	d1eb      	bne.n	800316e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d208      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d214      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 020f 	bic.w	r2, r3, #15
 80031da:	4906      	ldr	r1, [pc, #24]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e077      	b.n	80032e4 <HAL_RCC_ClockConfig+0x330>
 80031f4:	52002000 	.word	0x52002000
 80031f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003214:	429a      	cmp	r2, r3
 8003216:	d208      	bcs.n	800322a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	4931      	ldr	r1, [pc, #196]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003226:	4313      	orrs	r3, r2
 8003228:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4926      	ldr	r1, [pc, #152]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003270:	429a      	cmp	r2, r3
 8003272:	d208      	bcs.n	8003286 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	491a      	ldr	r1, [pc, #104]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003282:	4313      	orrs	r3, r2
 8003284:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329e:	429a      	cmp	r2, r3
 80032a0:	d208      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	490f      	ldr	r1, [pc, #60]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032b4:	f000 f822 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032b8:	4601      	mov	r1, r0
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCC_ClockConfig+0x338>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x33c>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa21 f303 	lsr.w	r3, r1, r3
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_RCC_ClockConfig+0x340>)
 80032d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_ClockConfig+0x344>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fa09 	bl	80006f0 <HAL_InitTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	58024400 	.word	0x58024400
 80032f0:	0800964c 	.word	0x0800964c
 80032f4:	24000008 	.word	0x24000008
 80032f8:	24000000 	.word	0x24000000

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003302:	4baf      	ldr	r3, [pc, #700]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	2b18      	cmp	r3, #24
 800330c:	f200 814e 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x2b0>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	0800337d 	.word	0x0800337d
 800331c:	080035ad 	.word	0x080035ad
 8003320:	080035ad 	.word	0x080035ad
 8003324:	080035ad 	.word	0x080035ad
 8003328:	080035ad 	.word	0x080035ad
 800332c:	080035ad 	.word	0x080035ad
 8003330:	080035ad 	.word	0x080035ad
 8003334:	080035ad 	.word	0x080035ad
 8003338:	080033a3 	.word	0x080033a3
 800333c:	080035ad 	.word	0x080035ad
 8003340:	080035ad 	.word	0x080035ad
 8003344:	080035ad 	.word	0x080035ad
 8003348:	080035ad 	.word	0x080035ad
 800334c:	080035ad 	.word	0x080035ad
 8003350:	080035ad 	.word	0x080035ad
 8003354:	080035ad 	.word	0x080035ad
 8003358:	080033a9 	.word	0x080033a9
 800335c:	080035ad 	.word	0x080035ad
 8003360:	080035ad 	.word	0x080035ad
 8003364:	080035ad 	.word	0x080035ad
 8003368:	080035ad 	.word	0x080035ad
 800336c:	080035ad 	.word	0x080035ad
 8003370:	080035ad 	.word	0x080035ad
 8003374:	080035ad 	.word	0x080035ad
 8003378:	080033af 	.word	0x080033af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800337c:	4b90      	ldr	r3, [pc, #576]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003388:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	4a8c      	ldr	r2, [pc, #560]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800339a:	e10a      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800339c:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800339e:	61bb      	str	r3, [r7, #24]
    break;
 80033a0:	e107      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033a2:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80033a4:	61bb      	str	r3, [r7, #24]
    break;
 80033a6:	e104      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80033aa:	61bb      	str	r3, [r7, #24]
    break;
 80033ac:	e101      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ae:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033c4:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033ce:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	08db      	lsrs	r3, r3, #3
 80033d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80da 	beq.w	80035a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d05a      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x1b2>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d302      	bcc.n	8003402 <HAL_RCC_GetSysClockFreq+0x106>
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d078      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003400:	e099      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02d      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	4a6a      	ldr	r2, [pc, #424]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003448:	ed97 6a02 	vldr	s12, [r7, #8]
 800344c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003464:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003468:	e087      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003474:	eddf 6a57 	vldr	s13, [pc, #348]	; 80035d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003490:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ac:	e065      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80035d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80034bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c0:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80034d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034f0:	e043      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80035dc <HAL_RCC_GetSysClockFreq+0x2e0>
 8003500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003514:	ed97 6a02 	vldr	s12, [r7, #8]
 8003518:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800351c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003534:	e021      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003540:	eddf 6a25 	vldr	s13, [pc, #148]	; 80035d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003558:	ed97 6a02 	vldr	s12, [r7, #8]
 800355c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003578:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	0a5b      	lsrs	r3, r3, #9
 8003580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003584:	3301      	adds	r3, #1
 8003586:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003592:	edd7 6a07 	vldr	s13, [r7, #28]
 8003596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800359a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359e:	ee17 3a90 	vmov	r3, s15
 80035a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035a4:	e005      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
    break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80035ae:	61bb      	str	r3, [r7, #24]
    break;
 80035b0:	bf00      	nop
  }

  return sysclockfreq;
 80035b2:	69bb      	ldr	r3, [r7, #24]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3724      	adds	r7, #36	; 0x24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	58024400 	.word	0x58024400
 80035c4:	03d09000 	.word	0x03d09000
 80035c8:	003d0900 	.word	0x003d0900
 80035cc:	017d7840 	.word	0x017d7840
 80035d0:	46000000 	.word	0x46000000
 80035d4:	4c742400 	.word	0x4c742400
 80035d8:	4a742400 	.word	0x4a742400
 80035dc:	4bbebc20 	.word	0x4bbebc20

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035e4:	f001 fd64 	bl	80050b0 <HAL_RCCEx_GetD1SysClockFreq>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_RCC_GetHCLKFreq+0x2c>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_GetHCLKFreq+0x30>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	fa21 f303 	lsr.w	r3, r1, r3
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_RCC_GetHCLKFreq+0x34>)
 8003600:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_GetHCLKFreq+0x34>)
 8003604:	681b      	ldr	r3, [r3, #0]
}
 8003606:	4618      	mov	r0, r3
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
 8003610:	0800964c 	.word	0x0800964c
 8003614:	2400000c 	.word	0x2400000c

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800361c:	f7ff ffe0 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003620:	4601      	mov	r1, r0
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	58024400 	.word	0x58024400
 8003640:	0800964c 	.word	0x0800964c

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003648:	f7ff ffca 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 800364c:	4601      	mov	r1, r0
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_RCC_GetPCLK2Freq+0x28>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58024400 	.word	0x58024400
 800366c:	0800964c 	.word	0x0800964c

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2300      	movs	r3, #0
 800367e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003694:	d013      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d802      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036a0:	e01f      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80036a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a6:	d013      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80036a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ac:	d01c      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80036ae:	e018      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4baf      	ldr	r3, [pc, #700]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4aae      	ldr	r2, [pc, #696]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e015      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fd0f 	bl	80050e8 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fdb8 	bl	800524c <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80036e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036f0:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036fc:	499c      	ldr	r1, [pc, #624]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	650b      	str	r3, [r1, #80]	; 0x50
 8003702:	e001      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b04      	cmp	r3, #4
 800371a:	d826      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003739 	.word	0x08003739
 8003728:	08003747 	.word	0x08003747
 800372c:	08003759 	.word	0x08003759
 8003730:	08003771 	.word	0x08003771
 8003734:	08003771 	.word	0x08003771
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a8c      	ldr	r2, [pc, #560]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003744:	e015      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fccb 	bl	80050e8 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003756:	e00c      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3324      	adds	r3, #36	; 0x24
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fd74 	bl	800524c <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
      break;
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003778:	4b7d      	ldr	r3, [pc, #500]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	f023 0207 	bic.w	r2, r3, #7
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	497a      	ldr	r1, [pc, #488]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003786:	4313      	orrs	r3, r2
 8003788:	650b      	str	r3, [r1, #80]	; 0x50
 800378a:	e001      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03e      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d01c      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d804      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d00d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80037b0:	e01e      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80037b2:	2bc0      	cmp	r3, #192	; 0xc0
 80037b4:	d01f      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ba:	d01e      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80037bc:	e018      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	4a6b      	ldr	r2, [pc, #428]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ca:	e017      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fc88 	bl	80050e8 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037dc:	e00e      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3324      	adds	r3, #36	; 0x24
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fd31 	bl	800524c <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ee:	e005      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80037fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4958      	ldr	r1, [pc, #352]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003810:	4313      	orrs	r3, r2
 8003812:	650b      	str	r3, [r1, #80]	; 0x50
 8003814:	e001      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800382c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003830:	d01f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003836:	d805      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800383c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003840:	d00e      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003842:	e01f      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003844:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003848:	d01f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800384a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384e:	d01e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003850:	e018      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	4a46      	ldr	r2, [pc, #280]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800385e:	e017      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fc3e 	bl	80050e8 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003870:	e00e      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3324      	adds	r3, #36	; 0x24
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fce7 	bl	800524c <RCCEx_PLL3_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]
      break;
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800388e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038a4:	4932      	ldr	r1, [pc, #200]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	658b      	str	r3, [r1, #88]	; 0x58
 80038aa:	e001      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d044      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c6:	d01f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038cc:	d805      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80038d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d6:	d00e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80038d8:	e01f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80038da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038de:	d01f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e4:	d01e      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038e6:	e018      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038f4:	e017      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fbf3 	bl	80050e8 <RCCEx_PLL2_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003906:	e00e      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fc9c 	bl	800524c <RCCEx_PLL3_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003918:	e005      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800392c:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800393c:	4313      	orrs	r3, r2
 800393e:	658b      	str	r3, [r1, #88]	; 0x58
 8003940:	e001      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d035      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003956:	2b10      	cmp	r3, #16
 8003958:	d00c      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800395a:	2b10      	cmp	r3, #16
 800395c:	d802      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01b      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003962:	e017      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003964:	2b20      	cmp	r3, #32
 8003966:	d00c      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003968:	2b30      	cmp	r3, #48	; 0x30
 800396a:	d018      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800396c:	e012      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800396e:	bf00      	nop
 8003970:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003974:	4baf      	ldr	r3, [pc, #700]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4aae      	ldr	r2, [pc, #696]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fbad 	bl	80050e8 <RCCEx_PLL2_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800399e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039a6:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b2:	49a0      	ldr	r1, [pc, #640]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039b8:	e001      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d042      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d2:	d01f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d805      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d00e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80039e4:	e01f      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80039e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ea:	d01f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f0:	d01e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4b8f      	ldr	r3, [pc, #572]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4a8e      	ldr	r2, [pc, #568]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a00:	e017      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fb6d 	bl	80050e8 <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a12:	e00e      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3324      	adds	r3, #36	; 0x24
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fc16 	bl	800524c <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a24:	e005      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a38:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	497b      	ldr	r1, [pc, #492]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	650b      	str	r3, [r1, #80]	; 0x50
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d042      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a64:	d01b      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a6a:	d805      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d022      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a7c:	d01d      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a82:	d01c      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003a84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a88:	d01b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fb28 	bl	80050e8 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e012      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fbd1 	bl	800524c <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aae:	e009      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003aca:	4b5a      	ldr	r3, [pc, #360]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	4957      	ldr	r1, [pc, #348]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	650b      	str	r3, [r1, #80]	; 0x50
 8003adc:	e001      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af8:	d01b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d805      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d01d      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b16:	d01c      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003b18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b1c:	d01b      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b1e:	e011      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fade 	bl	80050e8 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b30:	e012      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fb87 	bl	800524c <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
      break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b6c:	4931      	ldr	r1, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	658b      	str	r3, [r1, #88]	; 0x58
 8003b72:	e001      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b92:	d009      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b98:	e00f      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ba6:	e00c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fa9a 	bl	80050e8 <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd4:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d035      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d81b      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c39 	.word	0x08003c39
 8003c00:	08003c0d 	.word	0x08003c0d
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	08003c39 	.word	0x08003c39
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fa61 	bl	80050e8 <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c2a:	e006      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
      break;
 8003c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c40:	4bba      	ldr	r3, [pc, #744]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	49b7      	ldr	r1, [pc, #732]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8086 	beq.w	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c66:	4bb2      	ldr	r3, [pc, #712]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4ab1      	ldr	r2, [pc, #708]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c72:	f7fc fd87 	bl	8000784 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c78:	e009      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fc fd83 	bl	8000784 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	; 0x64
 8003c86:	d902      	bls.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	75fb      	strb	r3, [r7, #23]
        break;
 8003c8c:	e005      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8e:	4ba8      	ldr	r3, [pc, #672]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ef      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d166      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ca0:	4ba2      	ldr	r3, [pc, #648]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003caa:	4053      	eors	r3, r2
 8003cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb4:	4b9d      	ldr	r3, [pc, #628]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cbe:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a9a      	ldr	r2, [pc, #616]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cca:	4b98      	ldr	r3, [pc, #608]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a97      	ldr	r2, [pc, #604]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cd6:	4a95      	ldr	r2, [pc, #596]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d115      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fc fd4c 	bl	8000784 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cee:	e00b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fc fd48 	bl	8000784 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d902      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	75fb      	strb	r3, [r7, #23]
            break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ed      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d126      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d28:	d10d      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003d2a:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d38:	0919      	lsrs	r1, r3, #4
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	497b      	ldr	r1, [pc, #492]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
 8003d44:	e005      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003d46:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4a78      	ldr	r2, [pc, #480]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d50:	6113      	str	r3, [r2, #16]
 8003d52:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	4972      	ldr	r1, [pc, #456]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	670b      	str	r3, [r1, #112]	; 0x70
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	75bb      	strb	r3, [r7, #22]
 8003d6c:	e001      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d07d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d82:	2b28      	cmp	r3, #40	; 0x28
 8003d84:	d866      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003e5b 	.word	0x08003e5b
 8003d90:	08003e55 	.word	0x08003e55
 8003d94:	08003e55 	.word	0x08003e55
 8003d98:	08003e55 	.word	0x08003e55
 8003d9c:	08003e55 	.word	0x08003e55
 8003da0:	08003e55 	.word	0x08003e55
 8003da4:	08003e55 	.word	0x08003e55
 8003da8:	08003e55 	.word	0x08003e55
 8003dac:	08003e31 	.word	0x08003e31
 8003db0:	08003e55 	.word	0x08003e55
 8003db4:	08003e55 	.word	0x08003e55
 8003db8:	08003e55 	.word	0x08003e55
 8003dbc:	08003e55 	.word	0x08003e55
 8003dc0:	08003e55 	.word	0x08003e55
 8003dc4:	08003e55 	.word	0x08003e55
 8003dc8:	08003e55 	.word	0x08003e55
 8003dcc:	08003e43 	.word	0x08003e43
 8003dd0:	08003e55 	.word	0x08003e55
 8003dd4:	08003e55 	.word	0x08003e55
 8003dd8:	08003e55 	.word	0x08003e55
 8003ddc:	08003e55 	.word	0x08003e55
 8003de0:	08003e55 	.word	0x08003e55
 8003de4:	08003e55 	.word	0x08003e55
 8003de8:	08003e55 	.word	0x08003e55
 8003dec:	08003e5b 	.word	0x08003e5b
 8003df0:	08003e55 	.word	0x08003e55
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	08003e55 	.word	0x08003e55
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e5b 	.word	0x08003e5b
 8003e10:	08003e55 	.word	0x08003e55
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e5b 	.word	0x08003e5b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f956 	bl	80050e8 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e40:	e00c      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f9ff 	bl	800524c <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e62:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6e:	492f      	ldr	r1, [pc, #188]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	654b      	str	r3, [r1, #84]	; 0x54
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d037      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003ebf 	.word	0x08003ebf
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f918 	bl	80050e8 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ebc:	e00c      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f9c1 	bl	800524c <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4910      	ldr	r1, [pc, #64]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	654b      	str	r3, [r1, #84]	; 0x54
 8003ef0:	e001      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d040      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d827      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f63 	.word	0x08003f63
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f63 	.word	0x08003f63
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f63 	.word	0x08003f63
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	58024800 	.word	0x58024800
 8003f34:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f8d2 	bl	80050e8 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f48:	e00c      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3324      	adds	r3, #36	; 0x24
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 f97b 	bl	800524c <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f6a:	4bb3      	ldr	r3, [pc, #716]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f023 0207 	bic.w	r2, r3, #7
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	49af      	ldr	r1, [pc, #700]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f7e:	e001      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d044      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa0:	d805      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d022      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003fac:	e01b      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb8:	d01c      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fbe:	d01b      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 f88d 	bl	80050e8 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fd2:	e012      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f936 	bl	800524c <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fe4:	e009      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	e006      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003fec:	bf00      	nop
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003ff0:	bf00      	nop
 8003ff2:	e002      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004000:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400e:	498a      	ldr	r1, [pc, #552]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	654b      	str	r3, [r1, #84]	; 0x54
 8004014:	e001      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d044      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d01b      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d805      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004042:	e01b      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d01d      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800404a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800404e:	d01c      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004054:	d01b      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f842 	bl	80050e8 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004068:	e012      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f8eb 	bl	800524c <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800408e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004096:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a4:	4964      	ldr	r1, [pc, #400]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	658b      	str	r3, [r1, #88]	; 0x58
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d044      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c6:	d01b      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80040c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040cc:	d805      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d022      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040d8:	e01b      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040de:	d01d      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80040e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040e4:	d01c      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80040e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ea:	d01b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80040ec:	e011      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fff7 	bl	80050e8 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040fe:	e012      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f8a0 	bl	800524c <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004110:	e009      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004118:	bf00      	nop
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413a:	493f      	ldr	r1, [pc, #252]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	658b      	str	r3, [r1, #88]	; 0x58
 8004140:	e001      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d10b      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	2102      	movs	r1, #2
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f871 	bl	800524c <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75bb      	strb	r3, [r7, #22]
 8004174:	e009      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004184:	492c      	ldr	r1, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01b      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a0:	d10b      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3324      	adds	r3, #36	; 0x24
 80041a6:	2102      	movs	r1, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f84f 	bl	800524c <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75bb      	strb	r3, [r7, #22]
 80041b8:	e009      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ba:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c8:	491b      	ldr	r1, [pc, #108]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d032      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d00d      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ea:	d016      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d111      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff76 	bl	80050e8 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004200:	e00c      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f81f 	bl	800524c <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004212:	e003      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004230:	4901      	ldr	r1, [pc, #4]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	658b      	str	r3, [r1, #88]	; 0x58
 8004236:	e003      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004256:	d00c      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425c:	d015      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004262:	d10f      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a78      	ldr	r2, [pc, #480]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004270:	e00c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3324      	adds	r3, #36	; 0x24
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f000 ffe7 	bl	800524c <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
      break;
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800428a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004292:	4b6e      	ldr	r3, [pc, #440]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a0:	496a      	ldr	r1, [pc, #424]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	654b      	str	r3, [r1, #84]	; 0x54
 80042a6:	e001      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d029      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c4:	d007      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80042c6:	e00f      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b60      	ldr	r3, [pc, #384]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a5f      	ldr	r2, [pc, #380]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042d4:	e00b      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 ff03 	bl	80050e8 <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042f4:	4b55      	ldr	r3, [pc, #340]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80042f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004300:	4952      	ldr	r1, [pc, #328]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004306:	e001      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ff94 	bl	800524c <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02f      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004342:	d00c      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d802      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d011      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800434e:	e00d      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004354:	d00f      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435a:	d00e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800436a:	e007      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	e004      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004372:	bf00      	nop
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800437a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004382:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438e:	492f      	ldr	r1, [pc, #188]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	654b      	str	r3, [r1, #84]	; 0x54
 8004394:	e001      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4926      	ldr	r1, [pc, #152]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043d2:	491e      	ldr	r1, [pc, #120]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	4a11      	ldr	r2, [pc, #68]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800440c:	6113      	str	r3, [r2, #16]
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004418:	490c      	ldr	r1, [pc, #48]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da08      	bge.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	4906      	ldr	r1, [pc, #24]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004438:	7dbb      	ldrb	r3, [r7, #22]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58024400 	.word	0x58024400

08004450 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b090      	sub	sp, #64	; 0x40
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445e:	d150      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004460:	4ba1      	ldr	r3, [pc, #644]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b04      	cmp	r3, #4
 800446e:	d844      	bhi.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800448d 	.word	0x0800448d
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044bd 	.word	0x080044bd
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800448c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fcc1 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800449a:	e200      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fa21 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044aa:	e1f8      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb65 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ba:	e1f0      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80044bc:	4b8a      	ldr	r3, [pc, #552]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80044be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80044cc:	4b87      	ldr	r3, [pc, #540]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80044d0:	e1e5      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d8:	d102      	bne.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80044da:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044de:	e1de      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e6:	d102      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80044e8:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ec:	e1d7      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044f2:	e1d4      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f4:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044f8:	e1d1      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044fe:	bf00      	nop
 8004500:	e1cd      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d14f      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800450a:	4b77      	ldr	r3, [pc, #476]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004512:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d01c      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d804      	bhi.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d00e      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004526:	e03c      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004528:	2bc0      	cmp	r3, #192	; 0xc0
 800452a:	d037      	beq.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800452c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004530:	d018      	beq.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004532:	e036      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fc6d 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004542:	e1ac      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004544:	f107 0318 	add.w	r3, r7, #24
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f9cd 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004552:	e1a4      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fb11 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004562:	e19c      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004564:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800456c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004574:	4b5d      	ldr	r3, [pc, #372]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004578:	e191      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004580:	d102      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004586:	e18a      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458e:	d102      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004594:	e183      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800459a:	e180      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800459c:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a0:	e17d      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a6:	bf00      	nop
 80045a8:	e179      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d153      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80045b2:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80045ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c2:	d01f      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80045c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c8:	d805      	bhi.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80045ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d2:	d00f      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80045d4:	e03d      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80045d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045da:	d037      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80045dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e0:	d018      	beq.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80045e2:	e036      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fc15 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f2:	e154      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045f4:	f107 0318 	add.w	r3, r7, #24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f975 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004602:	e14c      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fab9 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004612:	e144      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800461c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004624:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004628:	e139      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004630:	d102      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8004632:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004636:	e132      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463e:	d102      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004644:	e12b      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800464a:	e128      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004650:	e125      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004656:	bf00      	nop
 8004658:	e121      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004660:	d15d      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800466a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004672:	d01f      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004678:	d805      	bhi.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800467e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004682:	d00f      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004684:	e047      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800468a:	d041      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800468c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004690:	d018      	beq.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004692:	e040      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fbbd 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046a2:	e0fc      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a4:	f107 0318 	add.w	r3, r7, #24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f91d 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046b2:	e0f4      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fa61 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046c2:	e0ec      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80046ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80046d8:	e0e1      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046e6:	e0da      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	003d0900 	.word	0x003d0900
 80046f4:	017d7840 	.word	0x017d7840
 80046f8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004702:	d102      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004704:	4b68      	ldr	r3, [pc, #416]	; (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004708:	e0c9      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800470e:	e0c6      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004714:	e0c3      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800471a:	bf00      	nop
 800471c:	e0bf      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d153      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004736:	d01f      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d805      	bhi.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	d00f      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004748:	e03d      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800474a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800474e:	d037      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d018      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004756:	e036      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fb5b 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004766:	e09a      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004768:	f107 0318 	add.w	r3, r7, #24
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f8bb 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004776:	e092      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f9ff 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004786:	e08a      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004788:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004790:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004798:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800479c:	e07f      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a4:	d102      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047aa:	e078      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b2:	d102      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047b8:	e071      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047be:	e06e      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80047c0:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c4:	e06b      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047ca:	bf00      	nop
 80047cc:	e067      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047d4:	d13d      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e6:	d00c      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80047e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ec:	d011      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d12b      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f876 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004800:	e04d      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004802:	f107 030c 	add.w	r3, r7, #12
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f9ba 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004810:	e045      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800481a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004826:	e03a      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482e:	d102      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004834:	e033      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483c:	d102      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004842:	e02c      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004848:	e029      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800484e:	bf00      	nop
 8004850:	e025      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d11f      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486e:	d008      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004870:	e00f      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004876:	4618      	mov	r0, r3
 8004878:	f000 face 	bl	8004e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004880:	e00d      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004882:	f107 0318 	add.w	r3, r7, #24
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f82e 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004890:	e005      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004896:	bf00      	nop
 8004898:	e001      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3740      	adds	r7, #64	; 0x40
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	017d7840 	.word	0x017d7840
 80048ac:	00bb8000 	.word	0x00bb8000
 80048b0:	58024400 	.word	0x58024400
 80048b4:	03d09000 	.word	0x03d09000
 80048b8:	003d0900 	.word	0x003d0900

080048bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048c0:	f7fe fe8e 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 80048c4:	4601      	mov	r1, r0
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	58024400 	.word	0x58024400
 80048e4:	0800964c 	.word	0x0800964c

080048e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f0:	4b9d      	ldr	r3, [pc, #628]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80048fa:	4b9b      	ldr	r3, [pc, #620]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	0b1b      	lsrs	r3, r3, #12
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004906:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004910:	4b95      	ldr	r3, [pc, #596]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	fb02 f303 	mul.w	r3, r2, r3
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004928:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 810a 	beq.w	8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d05a      	beq.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800493a:	2b01      	cmp	r3, #1
 800493c:	d302      	bcc.n	8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800493e:	2b02      	cmp	r3, #2
 8004940:	d078      	beq.n	8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004942:	e099      	b.n	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004944:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02d      	beq.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004950:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	4a84      	ldr	r2, [pc, #528]	; (8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049aa:	e087      	b.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ee:	e065      	b.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a32:	e043      	b.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a76:	e021      	b.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae2:	ee17 2a90 	vmov	r2, s15
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004aea:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b10:	ee17 2a90 	vmov	r2, s15
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3e:	ee17 2a90 	vmov	r2, s15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b46:	e008      	b.n	8004b5a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]
}
 8004b5a:	bf00      	nop
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	46000000 	.word	0x46000000
 8004b74:	4c742400 	.word	0x4c742400
 8004b78:	4a742400 	.word	0x4a742400
 8004b7c:	4bbebc20 	.word	0x4bbebc20

08004b80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	; 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b88:	4b9d      	ldr	r3, [pc, #628]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b92:	4b9b      	ldr	r3, [pc, #620]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	0d1b      	lsrs	r3, r3, #20
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004b9e:	4b98      	ldr	r3, [pc, #608]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ba8:	4b95      	ldr	r3, [pc, #596]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 810a 	beq.w	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d05a      	beq.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d302      	bcc.n	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d078      	beq.n	8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004bda:	e099      	b.n	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02d      	beq.n	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be8:	4b85      	ldr	r3, [pc, #532]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	4a84      	ldr	r2, [pc, #528]	; (8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c42:	e087      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c86:	e065      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cca:	e043      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d0e:	e021      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	0a5b      	lsrs	r3, r3, #9
 8004d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7a:	ee17 2a90 	vmov	r2, s15
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d82:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da8:	ee17 2a90 	vmov	r2, s15
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd6:	ee17 2a90 	vmov	r2, s15
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
}
 8004df2:	bf00      	nop
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	03d09000 	.word	0x03d09000
 8004e08:	46000000 	.word	0x46000000
 8004e0c:	4c742400 	.word	0x4c742400
 8004e10:	4a742400 	.word	0x4a742400
 8004e14:	4bbebc20 	.word	0x4bbebc20

08004e18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e20:	4b9d      	ldr	r3, [pc, #628]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004e2a:	4b9b      	ldr	r3, [pc, #620]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004e36:	4b98      	ldr	r3, [pc, #608]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e40:	4b95      	ldr	r3, [pc, #596]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 810a 	beq.w	8005078 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d05a      	beq.n	8004f20 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d302      	bcc.n	8004e74 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d078      	beq.n	8004f64 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004e72:	e099      	b.n	8004fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e74:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02d      	beq.n	8004edc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e80:	4b85      	ldr	r3, [pc, #532]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	4a84      	ldr	r2, [pc, #528]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004eda:	e087      	b.n	8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b6a      	ldr	r3, [pc, #424]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f1e:	e065      	b.n	8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f62:	e043      	b.n	8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b48      	ldr	r3, [pc, #288]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fa6:	e021      	b.n	8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fea:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	0a5b      	lsrs	r3, r3, #9
 8004ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005006:	edd7 6a07 	vldr	s13, [r7, #28]
 800500a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005012:	ee17 2a90 	vmov	r2, s15
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800501a:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005034:	edd7 6a07 	vldr	s13, [r7, #28]
 8005038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005040:	ee17 2a90 	vmov	r2, s15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005048:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	0e1b      	lsrs	r3, r3, #24
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800505e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005062:	edd7 6a07 	vldr	s13, [r7, #28]
 8005066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506e:	ee17 2a90 	vmov	r2, s15
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005076:	e008      	b.n	800508a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
}
 800508a:	bf00      	nop
 800508c:	3724      	adds	r7, #36	; 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	58024400 	.word	0x58024400
 800509c:	03d09000 	.word	0x03d09000
 80050a0:	46000000 	.word	0x46000000
 80050a4:	4c742400 	.word	0x4c742400
 80050a8:	4a742400 	.word	0x4a742400
 80050ac:	4bbebc20 	.word	0x4bbebc20

080050b0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050b4:	f7fe f922 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80050b8:	4601      	mov	r1, r0
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	fa21 f303 	lsr.w	r3, r1, r3
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80050d2:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	58024400 	.word	0x58024400
 80050e0:	0800964c 	.word	0x0800964c
 80050e4:	24000008 	.word	0x24000008

080050e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050f6:	4b53      	ldr	r3, [pc, #332]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d101      	bne.n	8005106 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e099      	b.n	800523a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a4e      	ldr	r2, [pc, #312]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800510c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005112:	f7fb fb37 	bl	8000784 <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005118:	e008      	b.n	800512c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800511a:	f7fb fb33 	bl	8000784 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e086      	b.n	800523a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800512c:	4b45      	ldr	r3, [pc, #276]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	493f      	ldr	r1, [pc, #252]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	628b      	str	r3, [r1, #40]	; 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	3b01      	subs	r3, #1
 8005152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	3b01      	subs	r3, #1
 800515c:	025b      	lsls	r3, r3, #9
 800515e:	b29b      	uxth	r3, r3
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	3b01      	subs	r3, #1
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800517c:	4931      	ldr	r1, [pc, #196]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005182:	4b30      	ldr	r3, [pc, #192]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	492d      	ldr	r1, [pc, #180]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	f023 0220 	bic.w	r2, r3, #32
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4928      	ldr	r1, [pc, #160]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	4a26      	ldr	r2, [pc, #152]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	f023 0310 	bic.w	r3, r3, #16
 80051b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <RCCEx_PLL2_Config+0x160>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	69d2      	ldr	r2, [r2, #28]
 80051be:	00d2      	lsls	r2, r2, #3
 80051c0:	4920      	ldr	r1, [pc, #128]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	f043 0310 	orr.w	r3, r3, #16
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051d8:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a19      	ldr	r2, [pc, #100]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051e4:	e00f      	b.n	8005206 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051f8:	e005      	b.n	8005206 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005212:	f7fb fab7 	bl	8000784 <HAL_GetTick>
 8005216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005218:	e008      	b.n	800522c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800521a:	f7fb fab3 	bl	8000784 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e006      	b.n	800523a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <RCCEx_PLL2_Config+0x15c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	58024400 	.word	0x58024400
 8005248:	ffff0007 	.word	0xffff0007

0800524c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800525a:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d101      	bne.n	800526a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e099      	b.n	800539e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4e      	ldr	r2, [pc, #312]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005276:	f7fb fa85 	bl	8000784 <HAL_GetTick>
 800527a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800527c:	e008      	b.n	8005290 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800527e:	f7fb fa81 	bl	8000784 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e086      	b.n	800539e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005290:	4b45      	ldr	r3, [pc, #276]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800529c:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	051b      	lsls	r3, r3, #20
 80052aa:	493f      	ldr	r1, [pc, #252]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	628b      	str	r3, [r1, #40]	; 0x28
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	3b01      	subs	r3, #1
 80052c0:	025b      	lsls	r3, r3, #9
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	3b01      	subs	r3, #1
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052e0:	4931      	ldr	r1, [pc, #196]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052e6:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	492d      	ldr	r1, [pc, #180]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4928      	ldr	r1, [pc, #160]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <RCCEx_PLL3_Config+0x160>)
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	69d2      	ldr	r2, [r2, #28]
 8005322:	00d2      	lsls	r2, r2, #3
 8005324:	4920      	ldr	r1, [pc, #128]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800532a:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005348:	e00f      	b.n	800536a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005350:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800535c:	e005      	b.n	800536a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0e      	ldr	r2, [pc, #56]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005376:	f7fb fa05 	bl	8000784 <HAL_GetTick>
 800537a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800537c:	e008      	b.n	8005390 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800537e:	f7fb fa01 	bl	8000784 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <RCCEx_PLL3_Config+0x15c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	58024400 	.word	0x58024400
 80053ac:	ffff0007 	.word	0xffff0007

080053b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e042      	b.n	8005448 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f003 f96b 	bl	80086b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2224      	movs	r2, #36	; 0x24
 80053de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8c4 	bl	8005580 <UART_SetConfig>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e022      	b.n	8005448 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f002 fa36 	bl	800787c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800541e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800542e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f002 fabd 	bl	80079c0 <UART_CheckIdleState>
 8005446:	4603      	mov	r3, r0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005466:	2b20      	cmp	r3, #32
 8005468:	f040 8083 	bne.w	8005572 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Transmit+0x28>
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e07b      	b.n	8005574 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x3a>
 8005486:	2302      	movs	r3, #2
 8005488:	e074      	b.n	8005574 <HAL_UART_Transmit+0x124>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2221      	movs	r2, #33	; 0x21
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054a2:	f7fb f96f 	bl	8000784 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c0:	d108      	bne.n	80054d4 <HAL_UART_Transmit+0x84>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e003      	b.n	80054dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054dc:	e02c      	b.n	8005538 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2200      	movs	r2, #0
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f002 fab1 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e03d      	b.n	8005574 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	3302      	adds	r3, #2
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e007      	b.n	8005526 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	3301      	adds	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1cc      	bne.n	80054de <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f002 fa7e 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e00a      	b.n	8005574 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	0000      	movs	r0, r0
	...

08005580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005580:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005584:	b090      	sub	sp, #64	; 0x40
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800558a:	2300      	movs	r3, #0
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005594:	2300      	movs	r3, #0
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	4313      	orrs	r3, r2
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4bc1      	ldr	r3, [pc, #772]	; (80058c8 <UART_SetConfig+0x348>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4ab7      	ldr	r2, [pc, #732]	; (80058cc <UART_SetConfig+0x34c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055fa:	4313      	orrs	r3, r2
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	4bb2      	ldr	r3, [pc, #712]	; (80058d0 <UART_SetConfig+0x350>)
 8005606:	4013      	ands	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800560e:	430b      	orrs	r3, r1
 8005610:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	f023 010f 	bic.w	r1, r3, #15
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4aa9      	ldr	r2, [pc, #676]	; (80058d4 <UART_SetConfig+0x354>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d177      	bne.n	8005722 <UART_SetConfig+0x1a2>
 8005632:	4ba9      	ldr	r3, [pc, #676]	; (80058d8 <UART_SetConfig+0x358>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563a:	2b28      	cmp	r3, #40	; 0x28
 800563c:	d86c      	bhi.n	8005718 <UART_SetConfig+0x198>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0xc4>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	080056e9 	.word	0x080056e9
 8005648:	08005719 	.word	0x08005719
 800564c:	08005719 	.word	0x08005719
 8005650:	08005719 	.word	0x08005719
 8005654:	08005719 	.word	0x08005719
 8005658:	08005719 	.word	0x08005719
 800565c:	08005719 	.word	0x08005719
 8005660:	08005719 	.word	0x08005719
 8005664:	080056f1 	.word	0x080056f1
 8005668:	08005719 	.word	0x08005719
 800566c:	08005719 	.word	0x08005719
 8005670:	08005719 	.word	0x08005719
 8005674:	08005719 	.word	0x08005719
 8005678:	08005719 	.word	0x08005719
 800567c:	08005719 	.word	0x08005719
 8005680:	08005719 	.word	0x08005719
 8005684:	080056f9 	.word	0x080056f9
 8005688:	08005719 	.word	0x08005719
 800568c:	08005719 	.word	0x08005719
 8005690:	08005719 	.word	0x08005719
 8005694:	08005719 	.word	0x08005719
 8005698:	08005719 	.word	0x08005719
 800569c:	08005719 	.word	0x08005719
 80056a0:	08005719 	.word	0x08005719
 80056a4:	08005701 	.word	0x08005701
 80056a8:	08005719 	.word	0x08005719
 80056ac:	08005719 	.word	0x08005719
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005719 	.word	0x08005719
 80056b8:	08005719 	.word	0x08005719
 80056bc:	08005719 	.word	0x08005719
 80056c0:	08005719 	.word	0x08005719
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005719 	.word	0x08005719
 80056cc:	08005719 	.word	0x08005719
 80056d0:	08005719 	.word	0x08005719
 80056d4:	08005719 	.word	0x08005719
 80056d8:	08005719 	.word	0x08005719
 80056dc:	08005719 	.word	0x08005719
 80056e0:	08005719 	.word	0x08005719
 80056e4:	08005711 	.word	0x08005711
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056ee:	e233      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056f6:	e22f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056fe:	e22b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005706:	e227      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005708:	2320      	movs	r3, #32
 800570a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800570e:	e223      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005716:	e21f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800571e:	bf00      	nop
 8005720:	e21a      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6d      	ldr	r2, [pc, #436]	; (80058dc <UART_SetConfig+0x35c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d132      	bne.n	8005792 <UART_SetConfig+0x212>
 800572c:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <UART_SetConfig+0x358>)
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	2b05      	cmp	r3, #5
 8005736:	d827      	bhi.n	8005788 <UART_SetConfig+0x208>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <UART_SetConfig+0x1c0>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005759 	.word	0x08005759
 8005744:	08005761 	.word	0x08005761
 8005748:	08005769 	.word	0x08005769
 800574c:	08005771 	.word	0x08005771
 8005750:	08005779 	.word	0x08005779
 8005754:	08005781 	.word	0x08005781
 8005758:	2300      	movs	r3, #0
 800575a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800575e:	e1fb      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005760:	2304      	movs	r3, #4
 8005762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005766:	e1f7      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005768:	2308      	movs	r3, #8
 800576a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800576e:	e1f3      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005770:	2310      	movs	r3, #16
 8005772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005776:	e1ef      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005778:	2320      	movs	r3, #32
 800577a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800577e:	e1eb      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005780:	2340      	movs	r3, #64	; 0x40
 8005782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005786:	e1e7      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800578e:	bf00      	nop
 8005790:	e1e2      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a52      	ldr	r2, [pc, #328]	; (80058e0 <UART_SetConfig+0x360>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d132      	bne.n	8005802 <UART_SetConfig+0x282>
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <UART_SetConfig+0x358>)
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d827      	bhi.n	80057f8 <UART_SetConfig+0x278>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x230>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057c9 	.word	0x080057c9
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057d9 	.word	0x080057d9
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ce:	e1c3      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057d6:	e1bf      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057de:	e1bb      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057e6:	e1b7      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057e8:	2320      	movs	r3, #32
 80057ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ee:	e1b3      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057f6:	e1af      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057fe:	bf00      	nop
 8005800:	e1aa      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <UART_SetConfig+0x364>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d132      	bne.n	8005872 <UART_SetConfig+0x2f2>
 800580c:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <UART_SetConfig+0x358>)
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	2b05      	cmp	r3, #5
 8005816:	d827      	bhi.n	8005868 <UART_SetConfig+0x2e8>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x2a0>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005839 	.word	0x08005839
 8005824:	08005841 	.word	0x08005841
 8005828:	08005849 	.word	0x08005849
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	2300      	movs	r3, #0
 800583a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800583e:	e18b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005846:	e187      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800584e:	e183      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005856:	e17f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800585e:	e17b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005866:	e177      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800586e:	bf00      	nop
 8005870:	e172      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <UART_SetConfig+0x368>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d144      	bne.n	8005906 <UART_SetConfig+0x386>
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <UART_SetConfig+0x358>)
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	2b05      	cmp	r3, #5
 8005886:	d839      	bhi.n	80058fc <UART_SetConfig+0x37c>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x310>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058a9 	.word	0x080058a9
 8005894:	080058b1 	.word	0x080058b1
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058ed 	.word	0x080058ed
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058ae:	e153      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058b6:	e14f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058be:	e14b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058c6:	e147      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058c8:	cfff69f3 	.word	0xcfff69f3
 80058cc:	58000c00 	.word	0x58000c00
 80058d0:	11fff4ff 	.word	0x11fff4ff
 80058d4:	40011000 	.word	0x40011000
 80058d8:	58024400 	.word	0x58024400
 80058dc:	40004400 	.word	0x40004400
 80058e0:	40004800 	.word	0x40004800
 80058e4:	40004c00 	.word	0x40004c00
 80058e8:	40005000 	.word	0x40005000
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058f2:	e131      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058fa:	e12d      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005902:	bf00      	nop
 8005904:	e128      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4ac3      	ldr	r2, [pc, #780]	; (8005c18 <UART_SetConfig+0x698>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d178      	bne.n	8005a02 <UART_SetConfig+0x482>
 8005910:	4bc2      	ldr	r3, [pc, #776]	; (8005c1c <UART_SetConfig+0x69c>)
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005918:	2b28      	cmp	r3, #40	; 0x28
 800591a:	d86d      	bhi.n	80059f8 <UART_SetConfig+0x478>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x3a4>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	080059c9 	.word	0x080059c9
 8005928:	080059f9 	.word	0x080059f9
 800592c:	080059f9 	.word	0x080059f9
 8005930:	080059f9 	.word	0x080059f9
 8005934:	080059f9 	.word	0x080059f9
 8005938:	080059f9 	.word	0x080059f9
 800593c:	080059f9 	.word	0x080059f9
 8005940:	080059f9 	.word	0x080059f9
 8005944:	080059d1 	.word	0x080059d1
 8005948:	080059f9 	.word	0x080059f9
 800594c:	080059f9 	.word	0x080059f9
 8005950:	080059f9 	.word	0x080059f9
 8005954:	080059f9 	.word	0x080059f9
 8005958:	080059f9 	.word	0x080059f9
 800595c:	080059f9 	.word	0x080059f9
 8005960:	080059f9 	.word	0x080059f9
 8005964:	080059d9 	.word	0x080059d9
 8005968:	080059f9 	.word	0x080059f9
 800596c:	080059f9 	.word	0x080059f9
 8005970:	080059f9 	.word	0x080059f9
 8005974:	080059f9 	.word	0x080059f9
 8005978:	080059f9 	.word	0x080059f9
 800597c:	080059f9 	.word	0x080059f9
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059e1 	.word	0x080059e1
 8005988:	080059f9 	.word	0x080059f9
 800598c:	080059f9 	.word	0x080059f9
 8005990:	080059f9 	.word	0x080059f9
 8005994:	080059f9 	.word	0x080059f9
 8005998:	080059f9 	.word	0x080059f9
 800599c:	080059f9 	.word	0x080059f9
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	080059f9 	.word	0x080059f9
 80059b0:	080059f9 	.word	0x080059f9
 80059b4:	080059f9 	.word	0x080059f9
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	080059f9 	.word	0x080059f9
 80059c0:	080059f9 	.word	0x080059f9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059ce:	e0c3      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059d0:	2304      	movs	r3, #4
 80059d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059d6:	e0bf      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059d8:	2308      	movs	r3, #8
 80059da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059de:	e0bb      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059e6:	e0b7      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059e8:	2320      	movs	r3, #32
 80059ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059ee:	e0b3      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059f6:	e0af      	b.n	8005b58 <UART_SetConfig+0x5d8>
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059fe:	bf00      	nop
 8005a00:	e0aa      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a86      	ldr	r2, [pc, #536]	; (8005c20 <UART_SetConfig+0x6a0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d132      	bne.n	8005a72 <UART_SetConfig+0x4f2>
 8005a0c:	4b83      	ldr	r3, [pc, #524]	; (8005c1c <UART_SetConfig+0x69c>)
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d827      	bhi.n	8005a68 <UART_SetConfig+0x4e8>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x4a0>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a39 	.word	0x08005a39
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a3e:	e08b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a46:	e087      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a4e:	e083      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a56:	e07f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a5e:	e07b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a66:	e077      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a6e:	bf00      	nop
 8005a70:	e072      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6b      	ldr	r2, [pc, #428]	; (8005c24 <UART_SetConfig+0x6a4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d132      	bne.n	8005ae2 <UART_SetConfig+0x562>
 8005a7c:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <UART_SetConfig+0x69c>)
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d827      	bhi.n	8005ad8 <UART_SetConfig+0x558>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x510>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa9 	.word	0x08005aa9
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005aae:	e053      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ab6:	e04f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005abe:	e04b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ac6:	e047      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ace:	e043      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ad6:	e03f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ade:	bf00      	nop
 8005ae0:	e03a      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <UART_SetConfig+0x6a8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d132      	bne.n	8005b52 <UART_SetConfig+0x5d2>
 8005aec:	4b4b      	ldr	r3, [pc, #300]	; (8005c1c <UART_SetConfig+0x69c>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d827      	bhi.n	8005b48 <UART_SetConfig+0x5c8>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x580>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b19 	.word	0x08005b19
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b29 	.word	0x08005b29
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b1e:	e01b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b26:	e017      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b2e:	e013      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b3e:	e00b      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b40:	2340      	movs	r3, #64	; 0x40
 8005b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b46:	e007      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <UART_SetConfig+0x5d8>
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <UART_SetConfig+0x6a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f040 86f7 	bne.w	8006952 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	f000 80c0 	beq.w	8005cee <UART_SetConfig+0x76e>
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	dc04      	bgt.n	8005b7c <UART_SetConfig+0x5fc>
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d00c      	beq.n	8005b90 <UART_SetConfig+0x610>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d065      	beq.n	8005c46 <UART_SetConfig+0x6c6>
 8005b7a:	e27a      	b.n	8006072 <UART_SetConfig+0xaf2>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f000 81b0 	beq.w	8005ee2 <UART_SetConfig+0x962>
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	f000 821e 	beq.w	8005fc4 <UART_SetConfig+0xa44>
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	f000 8104 	beq.w	8005d96 <UART_SetConfig+0x816>
 8005b8e:	e270      	b.n	8006072 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005b90:	f7fe fe94 	bl	80048bc <HAL_RCCEx_GetD3PCLK1Freq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d04e      	beq.n	8005c3c <UART_SetConfig+0x6bc>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d048      	beq.n	8005c38 <UART_SetConfig+0x6b8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d042      	beq.n	8005c34 <UART_SetConfig+0x6b4>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d03c      	beq.n	8005c30 <UART_SetConfig+0x6b0>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d036      	beq.n	8005c2c <UART_SetConfig+0x6ac>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d026      	beq.n	8005c14 <UART_SetConfig+0x694>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d020      	beq.n	8005c10 <UART_SetConfig+0x690>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b07      	cmp	r3, #7
 8005bd4:	d01a      	beq.n	8005c0c <UART_SetConfig+0x68c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d014      	beq.n	8005c08 <UART_SetConfig+0x688>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d00e      	beq.n	8005c04 <UART_SetConfig+0x684>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b0a      	cmp	r3, #10
 8005bec:	d008      	beq.n	8005c00 <UART_SetConfig+0x680>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b0b      	cmp	r3, #11
 8005bf4:	d102      	bne.n	8005bfc <UART_SetConfig+0x67c>
 8005bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfa:	e020      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e01e      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	e01c      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	e01a      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	e018      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	e016      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c10:	230c      	movs	r3, #12
 8005c12:	e014      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c14:	230a      	movs	r3, #10
 8005c16:	e012      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c18:	40011400 	.word	0x40011400
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	40007800 	.word	0x40007800
 8005c24:	40007c00 	.word	0x40007c00
 8005c28:	58000c00 	.word	0x58000c00
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	e006      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c30:	2306      	movs	r3, #6
 8005c32:	e004      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c34:	2304      	movs	r3, #4
 8005c36:	e002      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e000      	b.n	8005c3e <UART_SetConfig+0x6be>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c44:	e219      	b.n	800607a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c46:	f107 0318 	add.w	r3, r7, #24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fe4c 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d044      	beq.n	8005ce4 <UART_SetConfig+0x764>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d03e      	beq.n	8005ce0 <UART_SetConfig+0x760>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d038      	beq.n	8005cdc <UART_SetConfig+0x75c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d032      	beq.n	8005cd8 <UART_SetConfig+0x758>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d02c      	beq.n	8005cd4 <UART_SetConfig+0x754>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d026      	beq.n	8005cd0 <UART_SetConfig+0x750>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d020      	beq.n	8005ccc <UART_SetConfig+0x74c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b07      	cmp	r3, #7
 8005c90:	d01a      	beq.n	8005cc8 <UART_SetConfig+0x748>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d014      	beq.n	8005cc4 <UART_SetConfig+0x744>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d00e      	beq.n	8005cc0 <UART_SetConfig+0x740>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b0a      	cmp	r3, #10
 8005ca8:	d008      	beq.n	8005cbc <UART_SetConfig+0x73c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b0b      	cmp	r3, #11
 8005cb0:	d102      	bne.n	8005cb8 <UART_SetConfig+0x738>
 8005cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cb6:	e016      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e014      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	e012      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	e010      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	e00e      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	e00c      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	e00a      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cd0:	230a      	movs	r3, #10
 8005cd2:	e008      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	e006      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cd8:	2306      	movs	r3, #6
 8005cda:	e004      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	e002      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e000      	b.n	8005ce6 <UART_SetConfig+0x766>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cec:	e1c5      	b.n	800607a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cee:	f107 030c 	add.w	r3, r7, #12
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe ff44 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d044      	beq.n	8005d8c <UART_SetConfig+0x80c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d03e      	beq.n	8005d88 <UART_SetConfig+0x808>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d038      	beq.n	8005d84 <UART_SetConfig+0x804>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d032      	beq.n	8005d80 <UART_SetConfig+0x800>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d02c      	beq.n	8005d7c <UART_SetConfig+0x7fc>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d026      	beq.n	8005d78 <UART_SetConfig+0x7f8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b06      	cmp	r3, #6
 8005d30:	d020      	beq.n	8005d74 <UART_SetConfig+0x7f4>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b07      	cmp	r3, #7
 8005d38:	d01a      	beq.n	8005d70 <UART_SetConfig+0x7f0>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d014      	beq.n	8005d6c <UART_SetConfig+0x7ec>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b09      	cmp	r3, #9
 8005d48:	d00e      	beq.n	8005d68 <UART_SetConfig+0x7e8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b0a      	cmp	r3, #10
 8005d50:	d008      	beq.n	8005d64 <UART_SetConfig+0x7e4>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b0b      	cmp	r3, #11
 8005d58:	d102      	bne.n	8005d60 <UART_SetConfig+0x7e0>
 8005d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d5e:	e016      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e014      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	e012      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	e010      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	e00e      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d70:	2310      	movs	r3, #16
 8005d72:	e00c      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d74:	230c      	movs	r3, #12
 8005d76:	e00a      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d78:	230a      	movs	r3, #10
 8005d7a:	e008      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	e006      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d80:	2306      	movs	r3, #6
 8005d82:	e004      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d84:	2304      	movs	r3, #4
 8005d86:	e002      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e000      	b.n	8005d8e <UART_SetConfig+0x80e>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d94:	e171      	b.n	800607a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d96:	4b7a      	ldr	r3, [pc, #488]	; (8005f80 <UART_SetConfig+0xa00>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d054      	beq.n	8005e4c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005da2:	4b77      	ldr	r3, [pc, #476]	; (8005f80 <UART_SetConfig+0xa00>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	08db      	lsrs	r3, r3, #3
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <UART_SetConfig+0xa04>)
 8005dae:	40da      	lsrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d044      	beq.n	8005e42 <UART_SetConfig+0x8c2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d03e      	beq.n	8005e3e <UART_SetConfig+0x8be>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d038      	beq.n	8005e3a <UART_SetConfig+0x8ba>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d032      	beq.n	8005e36 <UART_SetConfig+0x8b6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d02c      	beq.n	8005e32 <UART_SetConfig+0x8b2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	d026      	beq.n	8005e2e <UART_SetConfig+0x8ae>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d020      	beq.n	8005e2a <UART_SetConfig+0x8aa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b07      	cmp	r3, #7
 8005dee:	d01a      	beq.n	8005e26 <UART_SetConfig+0x8a6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d014      	beq.n	8005e22 <UART_SetConfig+0x8a2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d00e      	beq.n	8005e1e <UART_SetConfig+0x89e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b0a      	cmp	r3, #10
 8005e06:	d008      	beq.n	8005e1a <UART_SetConfig+0x89a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b0b      	cmp	r3, #11
 8005e0e:	d102      	bne.n	8005e16 <UART_SetConfig+0x896>
 8005e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e14:	e016      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e014      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	e012      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	e010      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e22:	2320      	movs	r3, #32
 8005e24:	e00e      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e26:	2310      	movs	r3, #16
 8005e28:	e00c      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	e00a      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e008      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e32:	2308      	movs	r3, #8
 8005e34:	e006      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e36:	2306      	movs	r3, #6
 8005e38:	e004      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	e002      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e000      	b.n	8005e44 <UART_SetConfig+0x8c4>
 8005e42:	2301      	movs	r3, #1
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005e4a:	e116      	b.n	800607a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d043      	beq.n	8005edc <UART_SetConfig+0x95c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d03d      	beq.n	8005ed8 <UART_SetConfig+0x958>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d037      	beq.n	8005ed4 <UART_SetConfig+0x954>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d031      	beq.n	8005ed0 <UART_SetConfig+0x950>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d02b      	beq.n	8005ecc <UART_SetConfig+0x94c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d025      	beq.n	8005ec8 <UART_SetConfig+0x948>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b06      	cmp	r3, #6
 8005e82:	d01f      	beq.n	8005ec4 <UART_SetConfig+0x944>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b07      	cmp	r3, #7
 8005e8a:	d019      	beq.n	8005ec0 <UART_SetConfig+0x940>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d013      	beq.n	8005ebc <UART_SetConfig+0x93c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d00d      	beq.n	8005eb8 <UART_SetConfig+0x938>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b0a      	cmp	r3, #10
 8005ea2:	d007      	beq.n	8005eb4 <UART_SetConfig+0x934>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b0b      	cmp	r3, #11
 8005eaa:	d101      	bne.n	8005eb0 <UART_SetConfig+0x930>
 8005eac:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <UART_SetConfig+0xa08>)
 8005eae:	e016      	b.n	8005ede <UART_SetConfig+0x95e>
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <UART_SetConfig+0xa04>)
 8005eb2:	e014      	b.n	8005ede <UART_SetConfig+0x95e>
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <UART_SetConfig+0xa0c>)
 8005eb6:	e012      	b.n	8005ede <UART_SetConfig+0x95e>
 8005eb8:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <UART_SetConfig+0xa10>)
 8005eba:	e010      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ebc:	4b35      	ldr	r3, [pc, #212]	; (8005f94 <UART_SetConfig+0xa14>)
 8005ebe:	e00e      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ec0:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <UART_SetConfig+0xa18>)
 8005ec2:	e00c      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <UART_SetConfig+0xa1c>)
 8005ec6:	e00a      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ec8:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <UART_SetConfig+0xa20>)
 8005eca:	e008      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ecc:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <UART_SetConfig+0xa24>)
 8005ece:	e006      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ed0:	4b35      	ldr	r3, [pc, #212]	; (8005fa8 <UART_SetConfig+0xa28>)
 8005ed2:	e004      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ed4:	4b35      	ldr	r3, [pc, #212]	; (8005fac <UART_SetConfig+0xa2c>)
 8005ed6:	e002      	b.n	8005ede <UART_SetConfig+0x95e>
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <UART_SetConfig+0xa30>)
 8005eda:	e000      	b.n	8005ede <UART_SetConfig+0x95e>
 8005edc:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <UART_SetConfig+0xa04>)
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ee0:	e0cb      	b.n	800607a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d046      	beq.n	8005f78 <UART_SetConfig+0x9f8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d040      	beq.n	8005f74 <UART_SetConfig+0x9f4>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d03a      	beq.n	8005f70 <UART_SetConfig+0x9f0>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d034      	beq.n	8005f6c <UART_SetConfig+0x9ec>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d02e      	beq.n	8005f68 <UART_SetConfig+0x9e8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d028      	beq.n	8005f64 <UART_SetConfig+0x9e4>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d022      	beq.n	8005f60 <UART_SetConfig+0x9e0>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	d01c      	beq.n	8005f5c <UART_SetConfig+0x9dc>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d016      	beq.n	8005f58 <UART_SetConfig+0x9d8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d00f      	beq.n	8005f52 <UART_SetConfig+0x9d2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b0a      	cmp	r3, #10
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x9cc>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b0b      	cmp	r3, #11
 8005f40:	d102      	bne.n	8005f48 <UART_SetConfig+0x9c8>
 8005f42:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005f46:	e018      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <UART_SetConfig+0xa18>)
 8005f4a:	e016      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f4c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005f50:	e013      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f52:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <UART_SetConfig+0xa34>)
 8005f5a:	e00e      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <UART_SetConfig+0xa08>)
 8005f5e:	e00c      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f60:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <UART_SetConfig+0xa38>)
 8005f62:	e00a      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <UART_SetConfig+0xa3c>)
 8005f66:	e008      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f68:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <UART_SetConfig+0xa0c>)
 8005f6a:	e006      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <UART_SetConfig+0xa40>)
 8005f6e:	e004      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <UART_SetConfig+0xa10>)
 8005f72:	e002      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <UART_SetConfig+0xa14>)
 8005f76:	e000      	b.n	8005f7a <UART_SetConfig+0x9fa>
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <UART_SetConfig+0xa18>)
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f7c:	e07d      	b.n	800607a <UART_SetConfig+0xafa>
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400
 8005f84:	03d09000 	.word	0x03d09000
 8005f88:	0003d090 	.word	0x0003d090
 8005f8c:	0007a120 	.word	0x0007a120
 8005f90:	000f4240 	.word	0x000f4240
 8005f94:	001e8480 	.word	0x001e8480
 8005f98:	003d0900 	.word	0x003d0900
 8005f9c:	00516155 	.word	0x00516155
 8005fa0:	0061a800 	.word	0x0061a800
 8005fa4:	007a1200 	.word	0x007a1200
 8005fa8:	00a2c2aa 	.word	0x00a2c2aa
 8005fac:	00f42400 	.word	0x00f42400
 8005fb0:	01e84800 	.word	0x01e84800
 8005fb4:	0001e848 	.word	0x0001e848
 8005fb8:	00051615 	.word	0x00051615
 8005fbc:	00061a80 	.word	0x00061a80
 8005fc0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d04e      	beq.n	800606a <UART_SetConfig+0xaea>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d047      	beq.n	8006064 <UART_SetConfig+0xae4>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d040      	beq.n	800605e <UART_SetConfig+0xade>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d039      	beq.n	8006058 <UART_SetConfig+0xad8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d032      	beq.n	8006052 <UART_SetConfig+0xad2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	d02b      	beq.n	800604c <UART_SetConfig+0xacc>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b06      	cmp	r3, #6
 8005ffa:	d024      	beq.n	8006046 <UART_SetConfig+0xac6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b07      	cmp	r3, #7
 8006002:	d01d      	beq.n	8006040 <UART_SetConfig+0xac0>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b08      	cmp	r3, #8
 800600a:	d016      	beq.n	800603a <UART_SetConfig+0xaba>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b09      	cmp	r3, #9
 8006012:	d00f      	beq.n	8006034 <UART_SetConfig+0xab4>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b0a      	cmp	r3, #10
 800601a:	d008      	beq.n	800602e <UART_SetConfig+0xaae>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b0b      	cmp	r3, #11
 8006022:	d101      	bne.n	8006028 <UART_SetConfig+0xaa8>
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	e022      	b.n	800606e <UART_SetConfig+0xaee>
 8006028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602c:	e01f      	b.n	800606e <UART_SetConfig+0xaee>
 800602e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006032:	e01c      	b.n	800606e <UART_SetConfig+0xaee>
 8006034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006038:	e019      	b.n	800606e <UART_SetConfig+0xaee>
 800603a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603e:	e016      	b.n	800606e <UART_SetConfig+0xaee>
 8006040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006044:	e013      	b.n	800606e <UART_SetConfig+0xaee>
 8006046:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800604a:	e010      	b.n	800606e <UART_SetConfig+0xaee>
 800604c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006050:	e00d      	b.n	800606e <UART_SetConfig+0xaee>
 8006052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006056:	e00a      	b.n	800606e <UART_SetConfig+0xaee>
 8006058:	f241 5355 	movw	r3, #5461	; 0x1555
 800605c:	e007      	b.n	800606e <UART_SetConfig+0xaee>
 800605e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006062:	e004      	b.n	800606e <UART_SetConfig+0xaee>
 8006064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006068:	e001      	b.n	800606e <UART_SetConfig+0xaee>
 800606a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006070:	e003      	b.n	800607a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006078:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	f001 83e8 	beq.w	8007852 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	4413      	add	r3, r2
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	429a      	cmp	r2, r3
 8006090:	d305      	bcc.n	800609e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609a:	429a      	cmp	r2, r3
 800609c:	d904      	bls.n	80060a8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a4:	f001 bbd5 	b.w	8007852 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80060a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	f000 8154 	beq.w	800635a <UART_SetConfig+0xdda>
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	dc06      	bgt.n	80060c4 <UART_SetConfig+0xb44>
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d00f      	beq.n	80060da <UART_SetConfig+0xb5a>
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	f000 80ac 	beq.w	8006218 <UART_SetConfig+0xc98>
 80060c0:	f000 bc30 	b.w	8006924 <UART_SetConfig+0x13a4>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f000 832d 	beq.w	8006724 <UART_SetConfig+0x11a4>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	f000 83a5 	beq.w	800681a <UART_SetConfig+0x129a>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	f000 81e3 	beq.w	800649c <UART_SetConfig+0xf1c>
 80060d6:	f000 bc25 	b.w	8006924 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060da:	f7fe fbef 	bl	80048bc <HAL_RCCEx_GetD3PCLK1Freq>
 80060de:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	4618      	mov	r0, r3
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d067      	beq.n	80061c0 <UART_SetConfig+0xc40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d05e      	beq.n	80061b6 <UART_SetConfig+0xc36>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d055      	beq.n	80061ac <UART_SetConfig+0xc2c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b03      	cmp	r3, #3
 8006106:	d04c      	beq.n	80061a2 <UART_SetConfig+0xc22>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2b04      	cmp	r3, #4
 800610e:	d043      	beq.n	8006198 <UART_SetConfig+0xc18>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b05      	cmp	r3, #5
 8006116:	d03a      	beq.n	800618e <UART_SetConfig+0xc0e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	2b06      	cmp	r3, #6
 800611e:	d031      	beq.n	8006184 <UART_SetConfig+0xc04>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2b07      	cmp	r3, #7
 8006126:	d028      	beq.n	800617a <UART_SetConfig+0xbfa>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b08      	cmp	r3, #8
 800612e:	d01f      	beq.n	8006170 <UART_SetConfig+0xbf0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b09      	cmp	r3, #9
 8006136:	d016      	beq.n	8006166 <UART_SetConfig+0xbe6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b0a      	cmp	r3, #10
 800613e:	d00d      	beq.n	800615c <UART_SetConfig+0xbdc>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b0b      	cmp	r3, #11
 8006146:	d104      	bne.n	8006152 <UART_SetConfig+0xbd2>
 8006148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	e03a      	b.n	80061c8 <UART_SetConfig+0xc48>
 8006152:	f04f 0301 	mov.w	r3, #1
 8006156:	f04f 0400 	mov.w	r4, #0
 800615a:	e035      	b.n	80061c8 <UART_SetConfig+0xc48>
 800615c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006160:	f04f 0400 	mov.w	r4, #0
 8006164:	e030      	b.n	80061c8 <UART_SetConfig+0xc48>
 8006166:	f04f 0340 	mov.w	r3, #64	; 0x40
 800616a:	f04f 0400 	mov.w	r4, #0
 800616e:	e02b      	b.n	80061c8 <UART_SetConfig+0xc48>
 8006170:	f04f 0320 	mov.w	r3, #32
 8006174:	f04f 0400 	mov.w	r4, #0
 8006178:	e026      	b.n	80061c8 <UART_SetConfig+0xc48>
 800617a:	f04f 0310 	mov.w	r3, #16
 800617e:	f04f 0400 	mov.w	r4, #0
 8006182:	e021      	b.n	80061c8 <UART_SetConfig+0xc48>
 8006184:	f04f 030c 	mov.w	r3, #12
 8006188:	f04f 0400 	mov.w	r4, #0
 800618c:	e01c      	b.n	80061c8 <UART_SetConfig+0xc48>
 800618e:	f04f 030a 	mov.w	r3, #10
 8006192:	f04f 0400 	mov.w	r4, #0
 8006196:	e017      	b.n	80061c8 <UART_SetConfig+0xc48>
 8006198:	f04f 0308 	mov.w	r3, #8
 800619c:	f04f 0400 	mov.w	r4, #0
 80061a0:	e012      	b.n	80061c8 <UART_SetConfig+0xc48>
 80061a2:	f04f 0306 	mov.w	r3, #6
 80061a6:	f04f 0400 	mov.w	r4, #0
 80061aa:	e00d      	b.n	80061c8 <UART_SetConfig+0xc48>
 80061ac:	f04f 0304 	mov.w	r3, #4
 80061b0:	f04f 0400 	mov.w	r4, #0
 80061b4:	e008      	b.n	80061c8 <UART_SetConfig+0xc48>
 80061b6:	f04f 0302 	mov.w	r3, #2
 80061ba:	f04f 0400 	mov.w	r4, #0
 80061be:	e003      	b.n	80061c8 <UART_SetConfig+0xc48>
 80061c0:	f04f 0301 	mov.w	r3, #1
 80061c4:	f04f 0400 	mov.w	r4, #0
 80061c8:	461a      	mov	r2, r3
 80061ca:	4623      	mov	r3, r4
 80061cc:	f7fa f8d8 	bl	8000380 <__aeabi_uldivmod>
 80061d0:	4603      	mov	r3, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	4619      	mov	r1, r3
 80061d6:	4622      	mov	r2, r4
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	f04f 0400 	mov.w	r4, #0
 80061e0:	0214      	lsls	r4, r2, #8
 80061e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80061e6:	020b      	lsls	r3, r1, #8
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6852      	ldr	r2, [r2, #4]
 80061ec:	0852      	lsrs	r2, r2, #1
 80061ee:	4611      	mov	r1, r2
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	eb13 0b01 	adds.w	fp, r3, r1
 80061f8:	eb44 0c02 	adc.w	ip, r4, r2
 80061fc:	4658      	mov	r0, fp
 80061fe:	4661      	mov	r1, ip
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f04f 0400 	mov.w	r4, #0
 8006208:	461a      	mov	r2, r3
 800620a:	4623      	mov	r3, r4
 800620c:	f7fa f8b8 	bl	8000380 <__aeabi_uldivmod>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006216:	e389      	b.n	800692c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006218:	f107 0318 	add.w	r3, r7, #24
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fb63 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4618      	mov	r0, r3
 8006226:	f04f 0100 	mov.w	r1, #0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d067      	beq.n	8006302 <UART_SetConfig+0xd82>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b01      	cmp	r3, #1
 8006238:	d05e      	beq.n	80062f8 <UART_SetConfig+0xd78>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b02      	cmp	r3, #2
 8006240:	d055      	beq.n	80062ee <UART_SetConfig+0xd6e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b03      	cmp	r3, #3
 8006248:	d04c      	beq.n	80062e4 <UART_SetConfig+0xd64>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b04      	cmp	r3, #4
 8006250:	d043      	beq.n	80062da <UART_SetConfig+0xd5a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b05      	cmp	r3, #5
 8006258:	d03a      	beq.n	80062d0 <UART_SetConfig+0xd50>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b06      	cmp	r3, #6
 8006260:	d031      	beq.n	80062c6 <UART_SetConfig+0xd46>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b07      	cmp	r3, #7
 8006268:	d028      	beq.n	80062bc <UART_SetConfig+0xd3c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b08      	cmp	r3, #8
 8006270:	d01f      	beq.n	80062b2 <UART_SetConfig+0xd32>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b09      	cmp	r3, #9
 8006278:	d016      	beq.n	80062a8 <UART_SetConfig+0xd28>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b0a      	cmp	r3, #10
 8006280:	d00d      	beq.n	800629e <UART_SetConfig+0xd1e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b0b      	cmp	r3, #11
 8006288:	d104      	bne.n	8006294 <UART_SetConfig+0xd14>
 800628a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800628e:	f04f 0400 	mov.w	r4, #0
 8006292:	e03a      	b.n	800630a <UART_SetConfig+0xd8a>
 8006294:	f04f 0301 	mov.w	r3, #1
 8006298:	f04f 0400 	mov.w	r4, #0
 800629c:	e035      	b.n	800630a <UART_SetConfig+0xd8a>
 800629e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062a2:	f04f 0400 	mov.w	r4, #0
 80062a6:	e030      	b.n	800630a <UART_SetConfig+0xd8a>
 80062a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80062ac:	f04f 0400 	mov.w	r4, #0
 80062b0:	e02b      	b.n	800630a <UART_SetConfig+0xd8a>
 80062b2:	f04f 0320 	mov.w	r3, #32
 80062b6:	f04f 0400 	mov.w	r4, #0
 80062ba:	e026      	b.n	800630a <UART_SetConfig+0xd8a>
 80062bc:	f04f 0310 	mov.w	r3, #16
 80062c0:	f04f 0400 	mov.w	r4, #0
 80062c4:	e021      	b.n	800630a <UART_SetConfig+0xd8a>
 80062c6:	f04f 030c 	mov.w	r3, #12
 80062ca:	f04f 0400 	mov.w	r4, #0
 80062ce:	e01c      	b.n	800630a <UART_SetConfig+0xd8a>
 80062d0:	f04f 030a 	mov.w	r3, #10
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	e017      	b.n	800630a <UART_SetConfig+0xd8a>
 80062da:	f04f 0308 	mov.w	r3, #8
 80062de:	f04f 0400 	mov.w	r4, #0
 80062e2:	e012      	b.n	800630a <UART_SetConfig+0xd8a>
 80062e4:	f04f 0306 	mov.w	r3, #6
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	e00d      	b.n	800630a <UART_SetConfig+0xd8a>
 80062ee:	f04f 0304 	mov.w	r3, #4
 80062f2:	f04f 0400 	mov.w	r4, #0
 80062f6:	e008      	b.n	800630a <UART_SetConfig+0xd8a>
 80062f8:	f04f 0302 	mov.w	r3, #2
 80062fc:	f04f 0400 	mov.w	r4, #0
 8006300:	e003      	b.n	800630a <UART_SetConfig+0xd8a>
 8006302:	f04f 0301 	mov.w	r3, #1
 8006306:	f04f 0400 	mov.w	r4, #0
 800630a:	461a      	mov	r2, r3
 800630c:	4623      	mov	r3, r4
 800630e:	f7fa f837 	bl	8000380 <__aeabi_uldivmod>
 8006312:	4603      	mov	r3, r0
 8006314:	460c      	mov	r4, r1
 8006316:	4619      	mov	r1, r3
 8006318:	4622      	mov	r2, r4
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	0214      	lsls	r4, r2, #8
 8006324:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006328:	020b      	lsls	r3, r1, #8
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6852      	ldr	r2, [r2, #4]
 800632e:	0852      	lsrs	r2, r2, #1
 8006330:	4611      	mov	r1, r2
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	eb13 0b01 	adds.w	fp, r3, r1
 800633a:	eb44 0c02 	adc.w	ip, r4, r2
 800633e:	4658      	mov	r0, fp
 8006340:	4661      	mov	r1, ip
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f04f 0400 	mov.w	r4, #0
 800634a:	461a      	mov	r2, r3
 800634c:	4623      	mov	r3, r4
 800634e:	f7fa f817 	bl	8000380 <__aeabi_uldivmod>
 8006352:	4603      	mov	r3, r0
 8006354:	460c      	mov	r4, r1
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006358:	e2e8      	b.n	800692c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fc0e 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4618      	mov	r0, r3
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d067      	beq.n	8006444 <UART_SetConfig+0xec4>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b01      	cmp	r3, #1
 800637a:	d05e      	beq.n	800643a <UART_SetConfig+0xeba>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b02      	cmp	r3, #2
 8006382:	d055      	beq.n	8006430 <UART_SetConfig+0xeb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b03      	cmp	r3, #3
 800638a:	d04c      	beq.n	8006426 <UART_SetConfig+0xea6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b04      	cmp	r3, #4
 8006392:	d043      	beq.n	800641c <UART_SetConfig+0xe9c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b05      	cmp	r3, #5
 800639a:	d03a      	beq.n	8006412 <UART_SetConfig+0xe92>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d031      	beq.n	8006408 <UART_SetConfig+0xe88>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d028      	beq.n	80063fe <UART_SetConfig+0xe7e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d01f      	beq.n	80063f4 <UART_SetConfig+0xe74>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d016      	beq.n	80063ea <UART_SetConfig+0xe6a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b0a      	cmp	r3, #10
 80063c2:	d00d      	beq.n	80063e0 <UART_SetConfig+0xe60>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b0b      	cmp	r3, #11
 80063ca:	d104      	bne.n	80063d6 <UART_SetConfig+0xe56>
 80063cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	e03a      	b.n	800644c <UART_SetConfig+0xecc>
 80063d6:	f04f 0301 	mov.w	r3, #1
 80063da:	f04f 0400 	mov.w	r4, #0
 80063de:	e035      	b.n	800644c <UART_SetConfig+0xecc>
 80063e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063e4:	f04f 0400 	mov.w	r4, #0
 80063e8:	e030      	b.n	800644c <UART_SetConfig+0xecc>
 80063ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80063ee:	f04f 0400 	mov.w	r4, #0
 80063f2:	e02b      	b.n	800644c <UART_SetConfig+0xecc>
 80063f4:	f04f 0320 	mov.w	r3, #32
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	e026      	b.n	800644c <UART_SetConfig+0xecc>
 80063fe:	f04f 0310 	mov.w	r3, #16
 8006402:	f04f 0400 	mov.w	r4, #0
 8006406:	e021      	b.n	800644c <UART_SetConfig+0xecc>
 8006408:	f04f 030c 	mov.w	r3, #12
 800640c:	f04f 0400 	mov.w	r4, #0
 8006410:	e01c      	b.n	800644c <UART_SetConfig+0xecc>
 8006412:	f04f 030a 	mov.w	r3, #10
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	e017      	b.n	800644c <UART_SetConfig+0xecc>
 800641c:	f04f 0308 	mov.w	r3, #8
 8006420:	f04f 0400 	mov.w	r4, #0
 8006424:	e012      	b.n	800644c <UART_SetConfig+0xecc>
 8006426:	f04f 0306 	mov.w	r3, #6
 800642a:	f04f 0400 	mov.w	r4, #0
 800642e:	e00d      	b.n	800644c <UART_SetConfig+0xecc>
 8006430:	f04f 0304 	mov.w	r3, #4
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	e008      	b.n	800644c <UART_SetConfig+0xecc>
 800643a:	f04f 0302 	mov.w	r3, #2
 800643e:	f04f 0400 	mov.w	r4, #0
 8006442:	e003      	b.n	800644c <UART_SetConfig+0xecc>
 8006444:	f04f 0301 	mov.w	r3, #1
 8006448:	f04f 0400 	mov.w	r4, #0
 800644c:	461a      	mov	r2, r3
 800644e:	4623      	mov	r3, r4
 8006450:	f7f9 ff96 	bl	8000380 <__aeabi_uldivmod>
 8006454:	4603      	mov	r3, r0
 8006456:	460c      	mov	r4, r1
 8006458:	4619      	mov	r1, r3
 800645a:	4622      	mov	r2, r4
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	0214      	lsls	r4, r2, #8
 8006466:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800646a:	020b      	lsls	r3, r1, #8
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6852      	ldr	r2, [r2, #4]
 8006470:	0852      	lsrs	r2, r2, #1
 8006472:	4611      	mov	r1, r2
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	eb13 0b01 	adds.w	fp, r3, r1
 800647c:	eb44 0c02 	adc.w	ip, r4, r2
 8006480:	4658      	mov	r0, fp
 8006482:	4661      	mov	r1, ip
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f04f 0400 	mov.w	r4, #0
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	f7f9 ff76 	bl	8000380 <__aeabi_uldivmod>
 8006494:	4603      	mov	r3, r0
 8006496:	460c      	mov	r4, r1
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800649a:	e247      	b.n	800692c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649c:	4b96      	ldr	r3, [pc, #600]	; (80066f8 <UART_SetConfig+0x1178>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80a3 	beq.w	80065f0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064aa:	4b93      	ldr	r3, [pc, #588]	; (80066f8 <UART_SetConfig+0x1178>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	4a91      	ldr	r2, [pc, #580]	; (80066fc <UART_SetConfig+0x117c>)
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	4618      	mov	r0, r3
 80064bc:	f04f 0100 	mov.w	r1, #0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d067      	beq.n	8006598 <UART_SetConfig+0x1018>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d05e      	beq.n	800658e <UART_SetConfig+0x100e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d055      	beq.n	8006584 <UART_SetConfig+0x1004>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d04c      	beq.n	800657a <UART_SetConfig+0xffa>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d043      	beq.n	8006570 <UART_SetConfig+0xff0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	d03a      	beq.n	8006566 <UART_SetConfig+0xfe6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d031      	beq.n	800655c <UART_SetConfig+0xfdc>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d028      	beq.n	8006552 <UART_SetConfig+0xfd2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b08      	cmp	r3, #8
 8006506:	d01f      	beq.n	8006548 <UART_SetConfig+0xfc8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b09      	cmp	r3, #9
 800650e:	d016      	beq.n	800653e <UART_SetConfig+0xfbe>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b0a      	cmp	r3, #10
 8006516:	d00d      	beq.n	8006534 <UART_SetConfig+0xfb4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b0b      	cmp	r3, #11
 800651e:	d104      	bne.n	800652a <UART_SetConfig+0xfaa>
 8006520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006524:	f04f 0400 	mov.w	r4, #0
 8006528:	e03a      	b.n	80065a0 <UART_SetConfig+0x1020>
 800652a:	f04f 0301 	mov.w	r3, #1
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	e035      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006534:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006538:	f04f 0400 	mov.w	r4, #0
 800653c:	e030      	b.n	80065a0 <UART_SetConfig+0x1020>
 800653e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006542:	f04f 0400 	mov.w	r4, #0
 8006546:	e02b      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006548:	f04f 0320 	mov.w	r3, #32
 800654c:	f04f 0400 	mov.w	r4, #0
 8006550:	e026      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006552:	f04f 0310 	mov.w	r3, #16
 8006556:	f04f 0400 	mov.w	r4, #0
 800655a:	e021      	b.n	80065a0 <UART_SetConfig+0x1020>
 800655c:	f04f 030c 	mov.w	r3, #12
 8006560:	f04f 0400 	mov.w	r4, #0
 8006564:	e01c      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006566:	f04f 030a 	mov.w	r3, #10
 800656a:	f04f 0400 	mov.w	r4, #0
 800656e:	e017      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006570:	f04f 0308 	mov.w	r3, #8
 8006574:	f04f 0400 	mov.w	r4, #0
 8006578:	e012      	b.n	80065a0 <UART_SetConfig+0x1020>
 800657a:	f04f 0306 	mov.w	r3, #6
 800657e:	f04f 0400 	mov.w	r4, #0
 8006582:	e00d      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006584:	f04f 0304 	mov.w	r3, #4
 8006588:	f04f 0400 	mov.w	r4, #0
 800658c:	e008      	b.n	80065a0 <UART_SetConfig+0x1020>
 800658e:	f04f 0302 	mov.w	r3, #2
 8006592:	f04f 0400 	mov.w	r4, #0
 8006596:	e003      	b.n	80065a0 <UART_SetConfig+0x1020>
 8006598:	f04f 0301 	mov.w	r3, #1
 800659c:	f04f 0400 	mov.w	r4, #0
 80065a0:	461a      	mov	r2, r3
 80065a2:	4623      	mov	r3, r4
 80065a4:	f7f9 feec 	bl	8000380 <__aeabi_uldivmod>
 80065a8:	4603      	mov	r3, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4619      	mov	r1, r3
 80065ae:	4622      	mov	r2, r4
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f04f 0400 	mov.w	r4, #0
 80065b8:	0214      	lsls	r4, r2, #8
 80065ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80065be:	020b      	lsls	r3, r1, #8
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6852      	ldr	r2, [r2, #4]
 80065c4:	0852      	lsrs	r2, r2, #1
 80065c6:	4611      	mov	r1, r2
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	eb13 0b01 	adds.w	fp, r3, r1
 80065d0:	eb44 0c02 	adc.w	ip, r4, r2
 80065d4:	4658      	mov	r0, fp
 80065d6:	4661      	mov	r1, ip
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f04f 0400 	mov.w	r4, #0
 80065e0:	461a      	mov	r2, r3
 80065e2:	4623      	mov	r3, r4
 80065e4:	f7f9 fecc 	bl	8000380 <__aeabi_uldivmod>
 80065e8:	4603      	mov	r3, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80065ee:	e19d      	b.n	800692c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05b      	beq.n	80066b0 <UART_SetConfig+0x1130>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d053      	beq.n	80066a8 <UART_SetConfig+0x1128>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b02      	cmp	r3, #2
 8006606:	d04b      	beq.n	80066a0 <UART_SetConfig+0x1120>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b03      	cmp	r3, #3
 800660e:	d043      	beq.n	8006698 <UART_SetConfig+0x1118>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	2b04      	cmp	r3, #4
 8006616:	d03b      	beq.n	8006690 <UART_SetConfig+0x1110>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	2b05      	cmp	r3, #5
 800661e:	d033      	beq.n	8006688 <UART_SetConfig+0x1108>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b06      	cmp	r3, #6
 8006626:	d02b      	beq.n	8006680 <UART_SetConfig+0x1100>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	2b07      	cmp	r3, #7
 800662e:	d023      	beq.n	8006678 <UART_SetConfig+0x10f8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	2b08      	cmp	r3, #8
 8006636:	d01b      	beq.n	8006670 <UART_SetConfig+0x10f0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b09      	cmp	r3, #9
 800663e:	d013      	beq.n	8006668 <UART_SetConfig+0x10e8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b0a      	cmp	r3, #10
 8006646:	d00b      	beq.n	8006660 <UART_SetConfig+0x10e0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b0b      	cmp	r3, #11
 800664e:	d103      	bne.n	8006658 <UART_SetConfig+0x10d8>
 8006650:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <UART_SetConfig+0x117c>)
 8006652:	f04f 0400 	mov.w	r4, #0
 8006656:	e02e      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006658:	4b29      	ldr	r3, [pc, #164]	; (8006700 <UART_SetConfig+0x1180>)
 800665a:	f04f 0403 	mov.w	r4, #3
 800665e:	e02a      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <UART_SetConfig+0x1184>)
 8006662:	f04f 0400 	mov.w	r4, #0
 8006666:	e026      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006668:	4b27      	ldr	r3, [pc, #156]	; (8006708 <UART_SetConfig+0x1188>)
 800666a:	f04f 0400 	mov.w	r4, #0
 800666e:	e022      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006670:	4b26      	ldr	r3, [pc, #152]	; (800670c <UART_SetConfig+0x118c>)
 8006672:	f04f 0400 	mov.w	r4, #0
 8006676:	e01e      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <UART_SetConfig+0x1190>)
 800667a:	f04f 0400 	mov.w	r4, #0
 800667e:	e01a      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006680:	a419      	add	r4, pc, #100	; (adr r4, 80066e8 <UART_SetConfig+0x1168>)
 8006682:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006686:	e016      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <UART_SetConfig+0x1194>)
 800668a:	f04f 0400 	mov.w	r4, #0
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006690:	4b21      	ldr	r3, [pc, #132]	; (8006718 <UART_SetConfig+0x1198>)
 8006692:	f04f 0400 	mov.w	r4, #0
 8006696:	e00e      	b.n	80066b6 <UART_SetConfig+0x1136>
 8006698:	a415      	add	r4, pc, #84	; (adr r4, 80066f0 <UART_SetConfig+0x1170>)
 800669a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800669e:	e00a      	b.n	80066b6 <UART_SetConfig+0x1136>
 80066a0:	4b1e      	ldr	r3, [pc, #120]	; (800671c <UART_SetConfig+0x119c>)
 80066a2:	f04f 0400 	mov.w	r4, #0
 80066a6:	e006      	b.n	80066b6 <UART_SetConfig+0x1136>
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <UART_SetConfig+0x11a0>)
 80066aa:	f04f 0401 	mov.w	r4, #1
 80066ae:	e002      	b.n	80066b6 <UART_SetConfig+0x1136>
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <UART_SetConfig+0x1180>)
 80066b2:	f04f 0403 	mov.w	r4, #3
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6852      	ldr	r2, [r2, #4]
 80066ba:	0852      	lsrs	r2, r2, #1
 80066bc:	4611      	mov	r1, r2
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	eb13 0b01 	adds.w	fp, r3, r1
 80066c6:	eb44 0c02 	adc.w	ip, r4, r2
 80066ca:	4658      	mov	r0, fp
 80066cc:	4661      	mov	r1, ip
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f04f 0400 	mov.w	r4, #0
 80066d6:	461a      	mov	r2, r3
 80066d8:	4623      	mov	r3, r4
 80066da:	f7f9 fe51 	bl	8000380 <__aeabi_uldivmod>
 80066de:	4603      	mov	r3, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066e4:	e122      	b.n	800692c <UART_SetConfig+0x13ac>
 80066e6:	bf00      	nop
 80066e8:	51615500 	.word	0x51615500
 80066ec:	00000000 	.word	0x00000000
 80066f0:	a2c2aa00 	.word	0xa2c2aa00
 80066f4:	00000000 	.word	0x00000000
 80066f8:	58024400 	.word	0x58024400
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	d0900000 	.word	0xd0900000
 8006704:	07a12000 	.word	0x07a12000
 8006708:	0f424000 	.word	0x0f424000
 800670c:	1e848000 	.word	0x1e848000
 8006710:	3d090000 	.word	0x3d090000
 8006714:	61a80000 	.word	0x61a80000
 8006718:	7a120000 	.word	0x7a120000
 800671c:	f4240000 	.word	0xf4240000
 8006720:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05b      	beq.n	80067e4 <UART_SetConfig+0x1264>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b01      	cmp	r3, #1
 8006732:	d053      	beq.n	80067dc <UART_SetConfig+0x125c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b02      	cmp	r3, #2
 800673a:	d04b      	beq.n	80067d4 <UART_SetConfig+0x1254>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	2b03      	cmp	r3, #3
 8006742:	d043      	beq.n	80067cc <UART_SetConfig+0x124c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b04      	cmp	r3, #4
 800674a:	d03b      	beq.n	80067c4 <UART_SetConfig+0x1244>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	2b05      	cmp	r3, #5
 8006752:	d033      	beq.n	80067bc <UART_SetConfig+0x123c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b06      	cmp	r3, #6
 800675a:	d02b      	beq.n	80067b4 <UART_SetConfig+0x1234>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b07      	cmp	r3, #7
 8006762:	d023      	beq.n	80067ac <UART_SetConfig+0x122c>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2b08      	cmp	r3, #8
 800676a:	d01b      	beq.n	80067a4 <UART_SetConfig+0x1224>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b09      	cmp	r3, #9
 8006772:	d013      	beq.n	800679c <UART_SetConfig+0x121c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b0a      	cmp	r3, #10
 800677a:	d00b      	beq.n	8006794 <UART_SetConfig+0x1214>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	2b0b      	cmp	r3, #11
 8006782:	d103      	bne.n	800678c <UART_SetConfig+0x120c>
 8006784:	4bc0      	ldr	r3, [pc, #768]	; (8006a88 <UART_SetConfig+0x1508>)
 8006786:	f04f 0400 	mov.w	r4, #0
 800678a:	e02e      	b.n	80067ea <UART_SetConfig+0x126a>
 800678c:	4bbf      	ldr	r3, [pc, #764]	; (8006a8c <UART_SetConfig+0x150c>)
 800678e:	f04f 0400 	mov.w	r4, #0
 8006792:	e02a      	b.n	80067ea <UART_SetConfig+0x126a>
 8006794:	4bbe      	ldr	r3, [pc, #760]	; (8006a90 <UART_SetConfig+0x1510>)
 8006796:	f04f 0400 	mov.w	r4, #0
 800679a:	e026      	b.n	80067ea <UART_SetConfig+0x126a>
 800679c:	4bbd      	ldr	r3, [pc, #756]	; (8006a94 <UART_SetConfig+0x1514>)
 800679e:	f04f 0400 	mov.w	r4, #0
 80067a2:	e022      	b.n	80067ea <UART_SetConfig+0x126a>
 80067a4:	4bbc      	ldr	r3, [pc, #752]	; (8006a98 <UART_SetConfig+0x1518>)
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	e01e      	b.n	80067ea <UART_SetConfig+0x126a>
 80067ac:	4bbb      	ldr	r3, [pc, #748]	; (8006a9c <UART_SetConfig+0x151c>)
 80067ae:	f04f 0400 	mov.w	r4, #0
 80067b2:	e01a      	b.n	80067ea <UART_SetConfig+0x126a>
 80067b4:	a4b0      	add	r4, pc, #704	; (adr r4, 8006a78 <UART_SetConfig+0x14f8>)
 80067b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80067ba:	e016      	b.n	80067ea <UART_SetConfig+0x126a>
 80067bc:	4bb8      	ldr	r3, [pc, #736]	; (8006aa0 <UART_SetConfig+0x1520>)
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	e012      	b.n	80067ea <UART_SetConfig+0x126a>
 80067c4:	4bb7      	ldr	r3, [pc, #732]	; (8006aa4 <UART_SetConfig+0x1524>)
 80067c6:	f04f 0400 	mov.w	r4, #0
 80067ca:	e00e      	b.n	80067ea <UART_SetConfig+0x126a>
 80067cc:	a4ac      	add	r4, pc, #688	; (adr r4, 8006a80 <UART_SetConfig+0x1500>)
 80067ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80067d2:	e00a      	b.n	80067ea <UART_SetConfig+0x126a>
 80067d4:	4bb4      	ldr	r3, [pc, #720]	; (8006aa8 <UART_SetConfig+0x1528>)
 80067d6:	f04f 0400 	mov.w	r4, #0
 80067da:	e006      	b.n	80067ea <UART_SetConfig+0x126a>
 80067dc:	4bb3      	ldr	r3, [pc, #716]	; (8006aac <UART_SetConfig+0x152c>)
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	e002      	b.n	80067ea <UART_SetConfig+0x126a>
 80067e4:	4ba9      	ldr	r3, [pc, #676]	; (8006a8c <UART_SetConfig+0x150c>)
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6852      	ldr	r2, [r2, #4]
 80067ee:	0852      	lsrs	r2, r2, #1
 80067f0:	4611      	mov	r1, r2
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	eb13 0b01 	adds.w	fp, r3, r1
 80067fa:	eb44 0c02 	adc.w	ip, r4, r2
 80067fe:	4658      	mov	r0, fp
 8006800:	4661      	mov	r1, ip
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f04f 0400 	mov.w	r4, #0
 800680a:	461a      	mov	r2, r3
 800680c:	4623      	mov	r3, r4
 800680e:	f7f9 fdb7 	bl	8000380 <__aeabi_uldivmod>
 8006812:	4603      	mov	r3, r0
 8006814:	460c      	mov	r4, r1
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006818:	e088      	b.n	800692c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d064      	beq.n	80068ec <UART_SetConfig+0x136c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b01      	cmp	r3, #1
 8006828:	d05b      	beq.n	80068e2 <UART_SetConfig+0x1362>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b02      	cmp	r3, #2
 8006830:	d052      	beq.n	80068d8 <UART_SetConfig+0x1358>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b03      	cmp	r3, #3
 8006838:	d04a      	beq.n	80068d0 <UART_SetConfig+0x1350>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b04      	cmp	r3, #4
 8006840:	d041      	beq.n	80068c6 <UART_SetConfig+0x1346>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	2b05      	cmp	r3, #5
 8006848:	d039      	beq.n	80068be <UART_SetConfig+0x133e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b06      	cmp	r3, #6
 8006850:	d031      	beq.n	80068b6 <UART_SetConfig+0x1336>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b07      	cmp	r3, #7
 8006858:	d028      	beq.n	80068ac <UART_SetConfig+0x132c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	2b08      	cmp	r3, #8
 8006860:	d01f      	beq.n	80068a2 <UART_SetConfig+0x1322>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b09      	cmp	r3, #9
 8006868:	d016      	beq.n	8006898 <UART_SetConfig+0x1318>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b0a      	cmp	r3, #10
 8006870:	d00d      	beq.n	800688e <UART_SetConfig+0x130e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b0b      	cmp	r3, #11
 8006878:	d104      	bne.n	8006884 <UART_SetConfig+0x1304>
 800687a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687e:	f04f 0400 	mov.w	r4, #0
 8006882:	e037      	b.n	80068f4 <UART_SetConfig+0x1374>
 8006884:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006888:	f04f 0400 	mov.w	r4, #0
 800688c:	e032      	b.n	80068f4 <UART_SetConfig+0x1374>
 800688e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	e02d      	b.n	80068f4 <UART_SetConfig+0x1374>
 8006898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	e028      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068a6:	f04f 0400 	mov.w	r4, #0
 80068aa:	e023      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068b0:	f04f 0400 	mov.w	r4, #0
 80068b4:	e01e      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068b6:	4b7e      	ldr	r3, [pc, #504]	; (8006ab0 <UART_SetConfig+0x1530>)
 80068b8:	f04f 0400 	mov.w	r4, #0
 80068bc:	e01a      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068be:	4b7d      	ldr	r3, [pc, #500]	; (8006ab4 <UART_SetConfig+0x1534>)
 80068c0:	f04f 0400 	mov.w	r4, #0
 80068c4:	e016      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068ca:	f04f 0400 	mov.w	r4, #0
 80068ce:	e011      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068d0:	4b79      	ldr	r3, [pc, #484]	; (8006ab8 <UART_SetConfig+0x1538>)
 80068d2:	f04f 0400 	mov.w	r4, #0
 80068d6:	e00d      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068dc:	f04f 0400 	mov.w	r4, #0
 80068e0:	e008      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	e003      	b.n	80068f4 <UART_SetConfig+0x1374>
 80068ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068f0:	f04f 0400 	mov.w	r4, #0
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6852      	ldr	r2, [r2, #4]
 80068f8:	0852      	lsrs	r2, r2, #1
 80068fa:	4611      	mov	r1, r2
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	eb13 0b01 	adds.w	fp, r3, r1
 8006904:	eb44 0c02 	adc.w	ip, r4, r2
 8006908:	4658      	mov	r0, fp
 800690a:	4661      	mov	r1, ip
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	f7f9 fd32 	bl	8000380 <__aeabi_uldivmod>
 800691c:	4603      	mov	r3, r0
 800691e:	460c      	mov	r4, r1
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006922:	e003      	b.n	800692c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800692a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006932:	d309      	bcc.n	8006948 <UART_SetConfig+0x13c8>
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	d205      	bcs.n	8006948 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006942:	60da      	str	r2, [r3, #12]
 8006944:	f000 bf85 	b.w	8007852 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694e:	f000 bf80 	b.w	8007852 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695a:	f040 83da 	bne.w	8007112 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800695e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	f200 83b3 	bhi.w	80070ce <UART_SetConfig+0x1b4e>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <UART_SetConfig+0x13f0>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006abd 	.word	0x08006abd
 8006974:	08006b75 	.word	0x08006b75
 8006978:	080070cf 	.word	0x080070cf
 800697c:	080070cf 	.word	0x080070cf
 8006980:	08006c2d 	.word	0x08006c2d
 8006984:	080070cf 	.word	0x080070cf
 8006988:	080070cf 	.word	0x080070cf
 800698c:	080070cf 	.word	0x080070cf
 8006990:	08006ce9 	.word	0x08006ce9
 8006994:	080070cf 	.word	0x080070cf
 8006998:	080070cf 	.word	0x080070cf
 800699c:	080070cf 	.word	0x080070cf
 80069a0:	080070cf 	.word	0x080070cf
 80069a4:	080070cf 	.word	0x080070cf
 80069a8:	080070cf 	.word	0x080070cf
 80069ac:	080070cf 	.word	0x080070cf
 80069b0:	08006da5 	.word	0x08006da5
 80069b4:	080070cf 	.word	0x080070cf
 80069b8:	080070cf 	.word	0x080070cf
 80069bc:	080070cf 	.word	0x080070cf
 80069c0:	080070cf 	.word	0x080070cf
 80069c4:	080070cf 	.word	0x080070cf
 80069c8:	080070cf 	.word	0x080070cf
 80069cc:	080070cf 	.word	0x080070cf
 80069d0:	080070cf 	.word	0x080070cf
 80069d4:	080070cf 	.word	0x080070cf
 80069d8:	080070cf 	.word	0x080070cf
 80069dc:	080070cf 	.word	0x080070cf
 80069e0:	080070cf 	.word	0x080070cf
 80069e4:	080070cf 	.word	0x080070cf
 80069e8:	080070cf 	.word	0x080070cf
 80069ec:	080070cf 	.word	0x080070cf
 80069f0:	08006f17 	.word	0x08006f17
 80069f4:	080070cf 	.word	0x080070cf
 80069f8:	080070cf 	.word	0x080070cf
 80069fc:	080070cf 	.word	0x080070cf
 8006a00:	080070cf 	.word	0x080070cf
 8006a04:	080070cf 	.word	0x080070cf
 8006a08:	080070cf 	.word	0x080070cf
 8006a0c:	080070cf 	.word	0x080070cf
 8006a10:	080070cf 	.word	0x080070cf
 8006a14:	080070cf 	.word	0x080070cf
 8006a18:	080070cf 	.word	0x080070cf
 8006a1c:	080070cf 	.word	0x080070cf
 8006a20:	080070cf 	.word	0x080070cf
 8006a24:	080070cf 	.word	0x080070cf
 8006a28:	080070cf 	.word	0x080070cf
 8006a2c:	080070cf 	.word	0x080070cf
 8006a30:	080070cf 	.word	0x080070cf
 8006a34:	080070cf 	.word	0x080070cf
 8006a38:	080070cf 	.word	0x080070cf
 8006a3c:	080070cf 	.word	0x080070cf
 8006a40:	080070cf 	.word	0x080070cf
 8006a44:	080070cf 	.word	0x080070cf
 8006a48:	080070cf 	.word	0x080070cf
 8006a4c:	080070cf 	.word	0x080070cf
 8006a50:	080070cf 	.word	0x080070cf
 8006a54:	080070cf 	.word	0x080070cf
 8006a58:	080070cf 	.word	0x080070cf
 8006a5c:	080070cf 	.word	0x080070cf
 8006a60:	080070cf 	.word	0x080070cf
 8006a64:	080070cf 	.word	0x080070cf
 8006a68:	080070cf 	.word	0x080070cf
 8006a6c:	080070cf 	.word	0x080070cf
 8006a70:	0800700d 	.word	0x0800700d
 8006a74:	f3af 8000 	nop.w
 8006a78:	05161500 	.word	0x05161500
 8006a7c:	00000000 	.word	0x00000000
 8006a80:	0a2c2a00 	.word	0x0a2c2a00
 8006a84:	00000000 	.word	0x00000000
 8006a88:	003d0900 	.word	0x003d0900
 8006a8c:	3d090000 	.word	0x3d090000
 8006a90:	007a1200 	.word	0x007a1200
 8006a94:	00f42400 	.word	0x00f42400
 8006a98:	01e84800 	.word	0x01e84800
 8006a9c:	03d09000 	.word	0x03d09000
 8006aa0:	061a8000 	.word	0x061a8000
 8006aa4:	07a12000 	.word	0x07a12000
 8006aa8:	0f424000 	.word	0x0f424000
 8006aac:	1e848000 	.word	0x1e848000
 8006ab0:	000aaa00 	.word	0x000aaa00
 8006ab4:	000ccc00 	.word	0x000ccc00
 8006ab8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fc fdac 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8006ac0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d044      	beq.n	8006b54 <UART_SetConfig+0x15d4>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d03e      	beq.n	8006b50 <UART_SetConfig+0x15d0>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d038      	beq.n	8006b4c <UART_SetConfig+0x15cc>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d032      	beq.n	8006b48 <UART_SetConfig+0x15c8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d02c      	beq.n	8006b44 <UART_SetConfig+0x15c4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d026      	beq.n	8006b40 <UART_SetConfig+0x15c0>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d020      	beq.n	8006b3c <UART_SetConfig+0x15bc>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	2b07      	cmp	r3, #7
 8006b00:	d01a      	beq.n	8006b38 <UART_SetConfig+0x15b8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d014      	beq.n	8006b34 <UART_SetConfig+0x15b4>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d00e      	beq.n	8006b30 <UART_SetConfig+0x15b0>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2b0a      	cmp	r3, #10
 8006b18:	d008      	beq.n	8006b2c <UART_SetConfig+0x15ac>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b0b      	cmp	r3, #11
 8006b20:	d102      	bne.n	8006b28 <UART_SetConfig+0x15a8>
 8006b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b26:	e016      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e014      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	e012      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b34:	2320      	movs	r3, #32
 8006b36:	e00e      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	e00c      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	e00a      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b40:	230a      	movs	r3, #10
 8006b42:	e008      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b44:	2308      	movs	r3, #8
 8006b46:	e006      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b48:	2306      	movs	r3, #6
 8006b4a:	e004      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	e002      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e000      	b.n	8006b56 <UART_SetConfig+0x15d6>
 8006b54:	2301      	movs	r3, #1
 8006b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b72:	e2b0      	b.n	80070d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fc fd66 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8006b78:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d044      	beq.n	8006c0c <UART_SetConfig+0x168c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d03e      	beq.n	8006c08 <UART_SetConfig+0x1688>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d038      	beq.n	8006c04 <UART_SetConfig+0x1684>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d032      	beq.n	8006c00 <UART_SetConfig+0x1680>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d02c      	beq.n	8006bfc <UART_SetConfig+0x167c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d026      	beq.n	8006bf8 <UART_SetConfig+0x1678>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d020      	beq.n	8006bf4 <UART_SetConfig+0x1674>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b07      	cmp	r3, #7
 8006bb8:	d01a      	beq.n	8006bf0 <UART_SetConfig+0x1670>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d014      	beq.n	8006bec <UART_SetConfig+0x166c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b09      	cmp	r3, #9
 8006bc8:	d00e      	beq.n	8006be8 <UART_SetConfig+0x1668>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b0a      	cmp	r3, #10
 8006bd0:	d008      	beq.n	8006be4 <UART_SetConfig+0x1664>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b0b      	cmp	r3, #11
 8006bd8:	d102      	bne.n	8006be0 <UART_SetConfig+0x1660>
 8006bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bde:	e016      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e014      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	e012      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	e010      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006bec:	2320      	movs	r3, #32
 8006bee:	e00e      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	e00c      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	e00a      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006bf8:	230a      	movs	r3, #10
 8006bfa:	e008      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	e006      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006c00:	2306      	movs	r3, #6
 8006c02:	e004      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006c04:	2304      	movs	r3, #4
 8006c06:	e002      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e000      	b.n	8006c0e <UART_SetConfig+0x168e>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	005a      	lsls	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c2a:	e254      	b.n	80070d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2c:	f107 0318 	add.w	r3, r7, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fd fe59 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d044      	beq.n	8006cca <UART_SetConfig+0x174a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d03e      	beq.n	8006cc6 <UART_SetConfig+0x1746>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d038      	beq.n	8006cc2 <UART_SetConfig+0x1742>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d032      	beq.n	8006cbe <UART_SetConfig+0x173e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d02c      	beq.n	8006cba <UART_SetConfig+0x173a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b05      	cmp	r3, #5
 8006c66:	d026      	beq.n	8006cb6 <UART_SetConfig+0x1736>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b06      	cmp	r3, #6
 8006c6e:	d020      	beq.n	8006cb2 <UART_SetConfig+0x1732>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b07      	cmp	r3, #7
 8006c76:	d01a      	beq.n	8006cae <UART_SetConfig+0x172e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d014      	beq.n	8006caa <UART_SetConfig+0x172a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b09      	cmp	r3, #9
 8006c86:	d00e      	beq.n	8006ca6 <UART_SetConfig+0x1726>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b0a      	cmp	r3, #10
 8006c8e:	d008      	beq.n	8006ca2 <UART_SetConfig+0x1722>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2b0b      	cmp	r3, #11
 8006c96:	d102      	bne.n	8006c9e <UART_SetConfig+0x171e>
 8006c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9c:	e016      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e014      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	e012      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	e010      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006caa:	2320      	movs	r3, #32
 8006cac:	e00e      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cae:	2310      	movs	r3, #16
 8006cb0:	e00c      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	e00a      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	e008      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cba:	2308      	movs	r3, #8
 8006cbc:	e006      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	e004      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	e002      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e000      	b.n	8006ccc <UART_SetConfig+0x174c>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	005a      	lsls	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	441a      	add	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce6:	e1f6      	b.n	80070d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fd ff47 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d044      	beq.n	8006d86 <UART_SetConfig+0x1806>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d03e      	beq.n	8006d82 <UART_SetConfig+0x1802>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d038      	beq.n	8006d7e <UART_SetConfig+0x17fe>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d032      	beq.n	8006d7a <UART_SetConfig+0x17fa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d02c      	beq.n	8006d76 <UART_SetConfig+0x17f6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	d026      	beq.n	8006d72 <UART_SetConfig+0x17f2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b06      	cmp	r3, #6
 8006d2a:	d020      	beq.n	8006d6e <UART_SetConfig+0x17ee>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b07      	cmp	r3, #7
 8006d32:	d01a      	beq.n	8006d6a <UART_SetConfig+0x17ea>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d014      	beq.n	8006d66 <UART_SetConfig+0x17e6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	d00e      	beq.n	8006d62 <UART_SetConfig+0x17e2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b0a      	cmp	r3, #10
 8006d4a:	d008      	beq.n	8006d5e <UART_SetConfig+0x17de>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b0b      	cmp	r3, #11
 8006d52:	d102      	bne.n	8006d5a <UART_SetConfig+0x17da>
 8006d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d58:	e016      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e014      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d5e:	2380      	movs	r3, #128	; 0x80
 8006d60:	e012      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	e010      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d66:	2320      	movs	r3, #32
 8006d68:	e00e      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	e00c      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	e00a      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d72:	230a      	movs	r3, #10
 8006d74:	e008      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d76:	2308      	movs	r3, #8
 8006d78:	e006      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	e004      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d7e:	2304      	movs	r3, #4
 8006d80:	e002      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e000      	b.n	8006d88 <UART_SetConfig+0x1808>
 8006d86:	2301      	movs	r3, #1
 8006d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8c:	005a      	lsls	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006da2:	e198      	b.n	80070d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006da4:	4b87      	ldr	r3, [pc, #540]	; (8006fc4 <UART_SetConfig+0x1a44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d05e      	beq.n	8006e6e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db0:	4b84      	ldr	r3, [pc, #528]	; (8006fc4 <UART_SetConfig+0x1a44>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	08db      	lsrs	r3, r3, #3
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	4a83      	ldr	r2, [pc, #524]	; (8006fc8 <UART_SetConfig+0x1a48>)
 8006dbc:	40da      	lsrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d044      	beq.n	8006e50 <UART_SetConfig+0x18d0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d03e      	beq.n	8006e4c <UART_SetConfig+0x18cc>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d038      	beq.n	8006e48 <UART_SetConfig+0x18c8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d032      	beq.n	8006e44 <UART_SetConfig+0x18c4>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d02c      	beq.n	8006e40 <UART_SetConfig+0x18c0>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d026      	beq.n	8006e3c <UART_SetConfig+0x18bc>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d020      	beq.n	8006e38 <UART_SetConfig+0x18b8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b07      	cmp	r3, #7
 8006dfc:	d01a      	beq.n	8006e34 <UART_SetConfig+0x18b4>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d014      	beq.n	8006e30 <UART_SetConfig+0x18b0>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b09      	cmp	r3, #9
 8006e0c:	d00e      	beq.n	8006e2c <UART_SetConfig+0x18ac>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b0a      	cmp	r3, #10
 8006e14:	d008      	beq.n	8006e28 <UART_SetConfig+0x18a8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b0b      	cmp	r3, #11
 8006e1c:	d102      	bne.n	8006e24 <UART_SetConfig+0x18a4>
 8006e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e22:	e016      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e014      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	e012      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	e010      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e30:	2320      	movs	r3, #32
 8006e32:	e00e      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e34:	2310      	movs	r3, #16
 8006e36:	e00c      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e38:	230c      	movs	r3, #12
 8006e3a:	e00a      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e3c:	230a      	movs	r3, #10
 8006e3e:	e008      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e40:	2308      	movs	r3, #8
 8006e42:	e006      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e44:	2306      	movs	r3, #6
 8006e46:	e004      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	e002      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e000      	b.n	8006e52 <UART_SetConfig+0x18d2>
 8006e50:	2301      	movs	r3, #1
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	005a      	lsls	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	441a      	add	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006e6c:	e133      	b.n	80070d6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d043      	beq.n	8006efe <UART_SetConfig+0x197e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d03d      	beq.n	8006efa <UART_SetConfig+0x197a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d037      	beq.n	8006ef6 <UART_SetConfig+0x1976>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d031      	beq.n	8006ef2 <UART_SetConfig+0x1972>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d02b      	beq.n	8006eee <UART_SetConfig+0x196e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2b05      	cmp	r3, #5
 8006e9c:	d025      	beq.n	8006eea <UART_SetConfig+0x196a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d01f      	beq.n	8006ee6 <UART_SetConfig+0x1966>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b07      	cmp	r3, #7
 8006eac:	d019      	beq.n	8006ee2 <UART_SetConfig+0x1962>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d013      	beq.n	8006ede <UART_SetConfig+0x195e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d00d      	beq.n	8006eda <UART_SetConfig+0x195a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b0a      	cmp	r3, #10
 8006ec4:	d007      	beq.n	8006ed6 <UART_SetConfig+0x1956>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b0b      	cmp	r3, #11
 8006ecc:	d101      	bne.n	8006ed2 <UART_SetConfig+0x1952>
 8006ece:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <UART_SetConfig+0x1a4c>)
 8006ed0:	e016      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ed2:	4b3f      	ldr	r3, [pc, #252]	; (8006fd0 <UART_SetConfig+0x1a50>)
 8006ed4:	e014      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <UART_SetConfig+0x1a54>)
 8006ed8:	e012      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006eda:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <UART_SetConfig+0x1a58>)
 8006edc:	e010      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ede:	4b3f      	ldr	r3, [pc, #252]	; (8006fdc <UART_SetConfig+0x1a5c>)
 8006ee0:	e00e      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <UART_SetConfig+0x1a60>)
 8006ee4:	e00c      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ee6:	4b3f      	ldr	r3, [pc, #252]	; (8006fe4 <UART_SetConfig+0x1a64>)
 8006ee8:	e00a      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006eea:	4b3f      	ldr	r3, [pc, #252]	; (8006fe8 <UART_SetConfig+0x1a68>)
 8006eec:	e008      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006eee:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <UART_SetConfig+0x1a6c>)
 8006ef0:	e006      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ef2:	4b3f      	ldr	r3, [pc, #252]	; (8006ff0 <UART_SetConfig+0x1a70>)
 8006ef4:	e004      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006ef6:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <UART_SetConfig+0x1a74>)
 8006ef8:	e002      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006efa:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <UART_SetConfig+0x1a48>)
 8006efc:	e000      	b.n	8006f00 <UART_SetConfig+0x1980>
 8006efe:	4b34      	ldr	r3, [pc, #208]	; (8006fd0 <UART_SetConfig+0x1a50>)
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6852      	ldr	r2, [r2, #4]
 8006f04:	0852      	lsrs	r2, r2, #1
 8006f06:	441a      	add	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f14:	e0df      	b.n	80070d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d045      	beq.n	8006faa <UART_SetConfig+0x1a2a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d03f      	beq.n	8006fa6 <UART_SetConfig+0x1a26>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d039      	beq.n	8006fa2 <UART_SetConfig+0x1a22>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d033      	beq.n	8006f9e <UART_SetConfig+0x1a1e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d02d      	beq.n	8006f9a <UART_SetConfig+0x1a1a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d027      	beq.n	8006f96 <UART_SetConfig+0x1a16>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d021      	beq.n	8006f92 <UART_SetConfig+0x1a12>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b07      	cmp	r3, #7
 8006f54:	d01b      	beq.n	8006f8e <UART_SetConfig+0x1a0e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d015      	beq.n	8006f8a <UART_SetConfig+0x1a0a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d00f      	beq.n	8006f86 <UART_SetConfig+0x1a06>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b0a      	cmp	r3, #10
 8006f6c:	d008      	beq.n	8006f80 <UART_SetConfig+0x1a00>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b0b      	cmp	r3, #11
 8006f74:	d102      	bne.n	8006f7c <UART_SetConfig+0x19fc>
 8006f76:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f7a:	e017      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f7c:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <UART_SetConfig+0x1a60>)
 8006f7e:	e015      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f84:	e012      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f86:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <UART_SetConfig+0x1a78>)
 8006f88:	e010      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <UART_SetConfig+0x1a7c>)
 8006f8c:	e00e      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <UART_SetConfig+0x1a4c>)
 8006f90:	e00c      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f92:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <UART_SetConfig+0x1a80>)
 8006f94:	e00a      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f96:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <UART_SetConfig+0x1a84>)
 8006f98:	e008      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f9a:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <UART_SetConfig+0x1a54>)
 8006f9c:	e006      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <UART_SetConfig+0x1a88>)
 8006fa0:	e004      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <UART_SetConfig+0x1a58>)
 8006fa4:	e002      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <UART_SetConfig+0x1a5c>)
 8006fa8:	e000      	b.n	8006fac <UART_SetConfig+0x1a2c>
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <UART_SetConfig+0x1a60>)
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6852      	ldr	r2, [r2, #4]
 8006fb0:	0852      	lsrs	r2, r2, #1
 8006fb2:	441a      	add	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fc0:	e089      	b.n	80070d6 <UART_SetConfig+0x1b56>
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	03d09000 	.word	0x03d09000
 8006fcc:	0007a120 	.word	0x0007a120
 8006fd0:	07a12000 	.word	0x07a12000
 8006fd4:	000f4240 	.word	0x000f4240
 8006fd8:	001e8480 	.word	0x001e8480
 8006fdc:	003d0900 	.word	0x003d0900
 8006fe0:	007a1200 	.word	0x007a1200
 8006fe4:	00a2c2aa 	.word	0x00a2c2aa
 8006fe8:	00c35000 	.word	0x00c35000
 8006fec:	00f42400 	.word	0x00f42400
 8006ff0:	01458554 	.word	0x01458554
 8006ff4:	01e84800 	.word	0x01e84800
 8006ff8:	0001e848 	.word	0x0001e848
 8006ffc:	0003d090 	.word	0x0003d090
 8007000:	000a2c2a 	.word	0x000a2c2a
 8007004:	000c3500 	.word	0x000c3500
 8007008:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d04f      	beq.n	80070b4 <UART_SetConfig+0x1b34>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b01      	cmp	r3, #1
 800701a:	d048      	beq.n	80070ae <UART_SetConfig+0x1b2e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b02      	cmp	r3, #2
 8007022:	d041      	beq.n	80070a8 <UART_SetConfig+0x1b28>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b03      	cmp	r3, #3
 800702a:	d03a      	beq.n	80070a2 <UART_SetConfig+0x1b22>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b04      	cmp	r3, #4
 8007032:	d033      	beq.n	800709c <UART_SetConfig+0x1b1c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b05      	cmp	r3, #5
 800703a:	d02c      	beq.n	8007096 <UART_SetConfig+0x1b16>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b06      	cmp	r3, #6
 8007042:	d025      	beq.n	8007090 <UART_SetConfig+0x1b10>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b07      	cmp	r3, #7
 800704a:	d01e      	beq.n	800708a <UART_SetConfig+0x1b0a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b08      	cmp	r3, #8
 8007052:	d017      	beq.n	8007084 <UART_SetConfig+0x1b04>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b09      	cmp	r3, #9
 800705a:	d010      	beq.n	800707e <UART_SetConfig+0x1afe>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b0a      	cmp	r3, #10
 8007062:	d009      	beq.n	8007078 <UART_SetConfig+0x1af8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b0b      	cmp	r3, #11
 800706a:	d102      	bne.n	8007072 <UART_SetConfig+0x1af2>
 800706c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007070:	e022      	b.n	80070b8 <UART_SetConfig+0x1b38>
 8007072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007076:	e01f      	b.n	80070b8 <UART_SetConfig+0x1b38>
 8007078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707c:	e01c      	b.n	80070b8 <UART_SetConfig+0x1b38>
 800707e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007082:	e019      	b.n	80070b8 <UART_SetConfig+0x1b38>
 8007084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007088:	e016      	b.n	80070b8 <UART_SetConfig+0x1b38>
 800708a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800708e:	e013      	b.n	80070b8 <UART_SetConfig+0x1b38>
 8007090:	f241 5354 	movw	r3, #5460	; 0x1554
 8007094:	e010      	b.n	80070b8 <UART_SetConfig+0x1b38>
 8007096:	f641 1398 	movw	r3, #6552	; 0x1998
 800709a:	e00d      	b.n	80070b8 <UART_SetConfig+0x1b38>
 800709c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070a0:	e00a      	b.n	80070b8 <UART_SetConfig+0x1b38>
 80070a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80070a6:	e007      	b.n	80070b8 <UART_SetConfig+0x1b38>
 80070a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070ac:	e004      	b.n	80070b8 <UART_SetConfig+0x1b38>
 80070ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b2:	e001      	b.n	80070b8 <UART_SetConfig+0x1b38>
 80070b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6852      	ldr	r2, [r2, #4]
 80070bc:	0852      	lsrs	r2, r2, #1
 80070be:	441a      	add	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070cc:	e003      	b.n	80070d6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80070d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d8:	2b0f      	cmp	r3, #15
 80070da:	d916      	bls.n	800710a <UART_SetConfig+0x1b8a>
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d212      	bcs.n	800710a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f023 030f 	bic.w	r3, r3, #15
 80070ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070fc:	4313      	orrs	r3, r2
 80070fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007106:	60da      	str	r2, [r3, #12]
 8007108:	e3a3      	b.n	8007852 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007110:	e39f      	b.n	8007852 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8007112:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	f200 8388 	bhi.w	800782c <UART_SetConfig+0x22ac>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0x1ba4>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007229 	.word	0x08007229
 8007128:	080072df 	.word	0x080072df
 800712c:	0800782d 	.word	0x0800782d
 8007130:	0800782d 	.word	0x0800782d
 8007134:	08007395 	.word	0x08007395
 8007138:	0800782d 	.word	0x0800782d
 800713c:	0800782d 	.word	0x0800782d
 8007140:	0800782d 	.word	0x0800782d
 8007144:	0800744f 	.word	0x0800744f
 8007148:	0800782d 	.word	0x0800782d
 800714c:	0800782d 	.word	0x0800782d
 8007150:	0800782d 	.word	0x0800782d
 8007154:	0800782d 	.word	0x0800782d
 8007158:	0800782d 	.word	0x0800782d
 800715c:	0800782d 	.word	0x0800782d
 8007160:	0800782d 	.word	0x0800782d
 8007164:	08007509 	.word	0x08007509
 8007168:	0800782d 	.word	0x0800782d
 800716c:	0800782d 	.word	0x0800782d
 8007170:	0800782d 	.word	0x0800782d
 8007174:	0800782d 	.word	0x0800782d
 8007178:	0800782d 	.word	0x0800782d
 800717c:	0800782d 	.word	0x0800782d
 8007180:	0800782d 	.word	0x0800782d
 8007184:	0800782d 	.word	0x0800782d
 8007188:	0800782d 	.word	0x0800782d
 800718c:	0800782d 	.word	0x0800782d
 8007190:	0800782d 	.word	0x0800782d
 8007194:	0800782d 	.word	0x0800782d
 8007198:	0800782d 	.word	0x0800782d
 800719c:	0800782d 	.word	0x0800782d
 80071a0:	0800782d 	.word	0x0800782d
 80071a4:	08007679 	.word	0x08007679
 80071a8:	0800782d 	.word	0x0800782d
 80071ac:	0800782d 	.word	0x0800782d
 80071b0:	0800782d 	.word	0x0800782d
 80071b4:	0800782d 	.word	0x0800782d
 80071b8:	0800782d 	.word	0x0800782d
 80071bc:	0800782d 	.word	0x0800782d
 80071c0:	0800782d 	.word	0x0800782d
 80071c4:	0800782d 	.word	0x0800782d
 80071c8:	0800782d 	.word	0x0800782d
 80071cc:	0800782d 	.word	0x0800782d
 80071d0:	0800782d 	.word	0x0800782d
 80071d4:	0800782d 	.word	0x0800782d
 80071d8:	0800782d 	.word	0x0800782d
 80071dc:	0800782d 	.word	0x0800782d
 80071e0:	0800782d 	.word	0x0800782d
 80071e4:	0800782d 	.word	0x0800782d
 80071e8:	0800782d 	.word	0x0800782d
 80071ec:	0800782d 	.word	0x0800782d
 80071f0:	0800782d 	.word	0x0800782d
 80071f4:	0800782d 	.word	0x0800782d
 80071f8:	0800782d 	.word	0x0800782d
 80071fc:	0800782d 	.word	0x0800782d
 8007200:	0800782d 	.word	0x0800782d
 8007204:	0800782d 	.word	0x0800782d
 8007208:	0800782d 	.word	0x0800782d
 800720c:	0800782d 	.word	0x0800782d
 8007210:	0800782d 	.word	0x0800782d
 8007214:	0800782d 	.word	0x0800782d
 8007218:	0800782d 	.word	0x0800782d
 800721c:	0800782d 	.word	0x0800782d
 8007220:	0800782d 	.word	0x0800782d
 8007224:	0800776d 	.word	0x0800776d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fc f9f6 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800722c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d044      	beq.n	80072c0 <UART_SetConfig+0x1d40>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	2b01      	cmp	r3, #1
 800723c:	d03e      	beq.n	80072bc <UART_SetConfig+0x1d3c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b02      	cmp	r3, #2
 8007244:	d038      	beq.n	80072b8 <UART_SetConfig+0x1d38>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b03      	cmp	r3, #3
 800724c:	d032      	beq.n	80072b4 <UART_SetConfig+0x1d34>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b04      	cmp	r3, #4
 8007254:	d02c      	beq.n	80072b0 <UART_SetConfig+0x1d30>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b05      	cmp	r3, #5
 800725c:	d026      	beq.n	80072ac <UART_SetConfig+0x1d2c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b06      	cmp	r3, #6
 8007264:	d020      	beq.n	80072a8 <UART_SetConfig+0x1d28>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b07      	cmp	r3, #7
 800726c:	d01a      	beq.n	80072a4 <UART_SetConfig+0x1d24>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b08      	cmp	r3, #8
 8007274:	d014      	beq.n	80072a0 <UART_SetConfig+0x1d20>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b09      	cmp	r3, #9
 800727c:	d00e      	beq.n	800729c <UART_SetConfig+0x1d1c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b0a      	cmp	r3, #10
 8007284:	d008      	beq.n	8007298 <UART_SetConfig+0x1d18>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2b0b      	cmp	r3, #11
 800728c:	d102      	bne.n	8007294 <UART_SetConfig+0x1d14>
 800728e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007292:	e016      	b.n	80072c2 <UART_SetConfig+0x1d42>
 8007294:	2301      	movs	r3, #1
 8007296:	e014      	b.n	80072c2 <UART_SetConfig+0x1d42>
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	e012      	b.n	80072c2 <UART_SetConfig+0x1d42>
 800729c:	2340      	movs	r3, #64	; 0x40
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072a0:	2320      	movs	r3, #32
 80072a2:	e00e      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072a4:	2310      	movs	r3, #16
 80072a6:	e00c      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072a8:	230c      	movs	r3, #12
 80072aa:	e00a      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072ac:	230a      	movs	r3, #10
 80072ae:	e008      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072b0:	2308      	movs	r3, #8
 80072b2:	e006      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072b4:	2306      	movs	r3, #6
 80072b6:	e004      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072b8:	2304      	movs	r3, #4
 80072ba:	e002      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072bc:	2302      	movs	r3, #2
 80072be:	e000      	b.n	80072c2 <UART_SetConfig+0x1d42>
 80072c0:	2301      	movs	r3, #1
 80072c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	441a      	add	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072dc:	e2aa      	b.n	8007834 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072de:	f7fc f9b1 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 80072e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d044      	beq.n	8007376 <UART_SetConfig+0x1df6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d03e      	beq.n	8007372 <UART_SetConfig+0x1df2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d038      	beq.n	800736e <UART_SetConfig+0x1dee>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b03      	cmp	r3, #3
 8007302:	d032      	beq.n	800736a <UART_SetConfig+0x1dea>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b04      	cmp	r3, #4
 800730a:	d02c      	beq.n	8007366 <UART_SetConfig+0x1de6>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b05      	cmp	r3, #5
 8007312:	d026      	beq.n	8007362 <UART_SetConfig+0x1de2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b06      	cmp	r3, #6
 800731a:	d020      	beq.n	800735e <UART_SetConfig+0x1dde>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b07      	cmp	r3, #7
 8007322:	d01a      	beq.n	800735a <UART_SetConfig+0x1dda>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b08      	cmp	r3, #8
 800732a:	d014      	beq.n	8007356 <UART_SetConfig+0x1dd6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b09      	cmp	r3, #9
 8007332:	d00e      	beq.n	8007352 <UART_SetConfig+0x1dd2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b0a      	cmp	r3, #10
 800733a:	d008      	beq.n	800734e <UART_SetConfig+0x1dce>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b0b      	cmp	r3, #11
 8007342:	d102      	bne.n	800734a <UART_SetConfig+0x1dca>
 8007344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007348:	e016      	b.n	8007378 <UART_SetConfig+0x1df8>
 800734a:	2301      	movs	r3, #1
 800734c:	e014      	b.n	8007378 <UART_SetConfig+0x1df8>
 800734e:	2380      	movs	r3, #128	; 0x80
 8007350:	e012      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	e010      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007356:	2320      	movs	r3, #32
 8007358:	e00e      	b.n	8007378 <UART_SetConfig+0x1df8>
 800735a:	2310      	movs	r3, #16
 800735c:	e00c      	b.n	8007378 <UART_SetConfig+0x1df8>
 800735e:	230c      	movs	r3, #12
 8007360:	e00a      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007362:	230a      	movs	r3, #10
 8007364:	e008      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007366:	2308      	movs	r3, #8
 8007368:	e006      	b.n	8007378 <UART_SetConfig+0x1df8>
 800736a:	2306      	movs	r3, #6
 800736c:	e004      	b.n	8007378 <UART_SetConfig+0x1df8>
 800736e:	2304      	movs	r3, #4
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007372:	2302      	movs	r3, #2
 8007374:	e000      	b.n	8007378 <UART_SetConfig+0x1df8>
 8007376:	2301      	movs	r3, #1
 8007378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737a:	fbb2 f2f3 	udiv	r2, r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	085b      	lsrs	r3, r3, #1
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	b29b      	uxth	r3, r3
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007392:	e24f      	b.n	8007834 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007394:	f107 0318 	add.w	r3, r7, #24
 8007398:	4618      	mov	r0, r3
 800739a:	f7fd faa5 	bl	80048e8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d044      	beq.n	8007432 <UART_SetConfig+0x1eb2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d03e      	beq.n	800742e <UART_SetConfig+0x1eae>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d038      	beq.n	800742a <UART_SetConfig+0x1eaa>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d032      	beq.n	8007426 <UART_SetConfig+0x1ea6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d02c      	beq.n	8007422 <UART_SetConfig+0x1ea2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b05      	cmp	r3, #5
 80073ce:	d026      	beq.n	800741e <UART_SetConfig+0x1e9e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b06      	cmp	r3, #6
 80073d6:	d020      	beq.n	800741a <UART_SetConfig+0x1e9a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b07      	cmp	r3, #7
 80073de:	d01a      	beq.n	8007416 <UART_SetConfig+0x1e96>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d014      	beq.n	8007412 <UART_SetConfig+0x1e92>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b09      	cmp	r3, #9
 80073ee:	d00e      	beq.n	800740e <UART_SetConfig+0x1e8e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b0a      	cmp	r3, #10
 80073f6:	d008      	beq.n	800740a <UART_SetConfig+0x1e8a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b0b      	cmp	r3, #11
 80073fe:	d102      	bne.n	8007406 <UART_SetConfig+0x1e86>
 8007400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007404:	e016      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007406:	2301      	movs	r3, #1
 8007408:	e014      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	e012      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	e010      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007412:	2320      	movs	r3, #32
 8007414:	e00e      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007416:	2310      	movs	r3, #16
 8007418:	e00c      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800741a:	230c      	movs	r3, #12
 800741c:	e00a      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800741e:	230a      	movs	r3, #10
 8007420:	e008      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007422:	2308      	movs	r3, #8
 8007424:	e006      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007426:	2306      	movs	r3, #6
 8007428:	e004      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800742a:	2304      	movs	r3, #4
 800742c:	e002      	b.n	8007434 <UART_SetConfig+0x1eb4>
 800742e:	2302      	movs	r3, #2
 8007430:	e000      	b.n	8007434 <UART_SetConfig+0x1eb4>
 8007432:	2301      	movs	r3, #1
 8007434:	fbb2 f2f3 	udiv	r2, r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800744c:	e1f2      	b.n	8007834 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800744e:	f107 030c 	add.w	r3, r7, #12
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fb94 	bl	8004b80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d044      	beq.n	80074ec <UART_SetConfig+0x1f6c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b01      	cmp	r3, #1
 8007468:	d03e      	beq.n	80074e8 <UART_SetConfig+0x1f68>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b02      	cmp	r3, #2
 8007470:	d038      	beq.n	80074e4 <UART_SetConfig+0x1f64>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b03      	cmp	r3, #3
 8007478:	d032      	beq.n	80074e0 <UART_SetConfig+0x1f60>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b04      	cmp	r3, #4
 8007480:	d02c      	beq.n	80074dc <UART_SetConfig+0x1f5c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b05      	cmp	r3, #5
 8007488:	d026      	beq.n	80074d8 <UART_SetConfig+0x1f58>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b06      	cmp	r3, #6
 8007490:	d020      	beq.n	80074d4 <UART_SetConfig+0x1f54>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b07      	cmp	r3, #7
 8007498:	d01a      	beq.n	80074d0 <UART_SetConfig+0x1f50>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d014      	beq.n	80074cc <UART_SetConfig+0x1f4c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d00e      	beq.n	80074c8 <UART_SetConfig+0x1f48>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b0a      	cmp	r3, #10
 80074b0:	d008      	beq.n	80074c4 <UART_SetConfig+0x1f44>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b0b      	cmp	r3, #11
 80074b8:	d102      	bne.n	80074c0 <UART_SetConfig+0x1f40>
 80074ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e014      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	e010      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074cc:	2320      	movs	r3, #32
 80074ce:	e00e      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074d0:	2310      	movs	r3, #16
 80074d2:	e00c      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074d4:	230c      	movs	r3, #12
 80074d6:	e00a      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074d8:	230a      	movs	r3, #10
 80074da:	e008      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074dc:	2308      	movs	r3, #8
 80074de:	e006      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074e0:	2306      	movs	r3, #6
 80074e2:	e004      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074e4:	2304      	movs	r3, #4
 80074e6:	e002      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e000      	b.n	80074ee <UART_SetConfig+0x1f6e>
 80074ec:	2301      	movs	r3, #1
 80074ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007506:	e195      	b.n	8007834 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007508:	4b87      	ldr	r3, [pc, #540]	; (8007728 <UART_SetConfig+0x21a8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d05d      	beq.n	80075d0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007514:	4b84      	ldr	r3, [pc, #528]	; (8007728 <UART_SetConfig+0x21a8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	08db      	lsrs	r3, r3, #3
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	4a83      	ldr	r2, [pc, #524]	; (800772c <UART_SetConfig+0x21ac>)
 8007520:	40da      	lsrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d044      	beq.n	80075b4 <UART_SetConfig+0x2034>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2b01      	cmp	r3, #1
 8007530:	d03e      	beq.n	80075b0 <UART_SetConfig+0x2030>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b02      	cmp	r3, #2
 8007538:	d038      	beq.n	80075ac <UART_SetConfig+0x202c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2b03      	cmp	r3, #3
 8007540:	d032      	beq.n	80075a8 <UART_SetConfig+0x2028>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b04      	cmp	r3, #4
 8007548:	d02c      	beq.n	80075a4 <UART_SetConfig+0x2024>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b05      	cmp	r3, #5
 8007550:	d026      	beq.n	80075a0 <UART_SetConfig+0x2020>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b06      	cmp	r3, #6
 8007558:	d020      	beq.n	800759c <UART_SetConfig+0x201c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b07      	cmp	r3, #7
 8007560:	d01a      	beq.n	8007598 <UART_SetConfig+0x2018>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b08      	cmp	r3, #8
 8007568:	d014      	beq.n	8007594 <UART_SetConfig+0x2014>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b09      	cmp	r3, #9
 8007570:	d00e      	beq.n	8007590 <UART_SetConfig+0x2010>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b0a      	cmp	r3, #10
 8007578:	d008      	beq.n	800758c <UART_SetConfig+0x200c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b0b      	cmp	r3, #11
 8007580:	d102      	bne.n	8007588 <UART_SetConfig+0x2008>
 8007582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007586:	e016      	b.n	80075b6 <UART_SetConfig+0x2036>
 8007588:	2301      	movs	r3, #1
 800758a:	e014      	b.n	80075b6 <UART_SetConfig+0x2036>
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	e012      	b.n	80075b6 <UART_SetConfig+0x2036>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	e010      	b.n	80075b6 <UART_SetConfig+0x2036>
 8007594:	2320      	movs	r3, #32
 8007596:	e00e      	b.n	80075b6 <UART_SetConfig+0x2036>
 8007598:	2310      	movs	r3, #16
 800759a:	e00c      	b.n	80075b6 <UART_SetConfig+0x2036>
 800759c:	230c      	movs	r3, #12
 800759e:	e00a      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075a0:	230a      	movs	r3, #10
 80075a2:	e008      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075a4:	2308      	movs	r3, #8
 80075a6:	e006      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075a8:	2306      	movs	r3, #6
 80075aa:	e004      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075ac:	2304      	movs	r3, #4
 80075ae:	e002      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e000      	b.n	80075b6 <UART_SetConfig+0x2036>
 80075b4:	2301      	movs	r3, #1
 80075b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	441a      	add	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80075ce:	e131      	b.n	8007834 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d043      	beq.n	8007660 <UART_SetConfig+0x20e0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d03d      	beq.n	800765c <UART_SetConfig+0x20dc>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d037      	beq.n	8007658 <UART_SetConfig+0x20d8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d031      	beq.n	8007654 <UART_SetConfig+0x20d4>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d02b      	beq.n	8007650 <UART_SetConfig+0x20d0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d025      	beq.n	800764c <UART_SetConfig+0x20cc>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b06      	cmp	r3, #6
 8007606:	d01f      	beq.n	8007648 <UART_SetConfig+0x20c8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b07      	cmp	r3, #7
 800760e:	d019      	beq.n	8007644 <UART_SetConfig+0x20c4>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b08      	cmp	r3, #8
 8007616:	d013      	beq.n	8007640 <UART_SetConfig+0x20c0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b09      	cmp	r3, #9
 800761e:	d00d      	beq.n	800763c <UART_SetConfig+0x20bc>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d007      	beq.n	8007638 <UART_SetConfig+0x20b8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b0b      	cmp	r3, #11
 800762e:	d101      	bne.n	8007634 <UART_SetConfig+0x20b4>
 8007630:	4b3f      	ldr	r3, [pc, #252]	; (8007730 <UART_SetConfig+0x21b0>)
 8007632:	e016      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007634:	4b3d      	ldr	r3, [pc, #244]	; (800772c <UART_SetConfig+0x21ac>)
 8007636:	e014      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007638:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <UART_SetConfig+0x21b4>)
 800763a:	e012      	b.n	8007662 <UART_SetConfig+0x20e2>
 800763c:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <UART_SetConfig+0x21b8>)
 800763e:	e010      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007640:	4b3e      	ldr	r3, [pc, #248]	; (800773c <UART_SetConfig+0x21bc>)
 8007642:	e00e      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <UART_SetConfig+0x21c0>)
 8007646:	e00c      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <UART_SetConfig+0x21c4>)
 800764a:	e00a      	b.n	8007662 <UART_SetConfig+0x20e2>
 800764c:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <UART_SetConfig+0x21c8>)
 800764e:	e008      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007650:	4b3e      	ldr	r3, [pc, #248]	; (800774c <UART_SetConfig+0x21cc>)
 8007652:	e006      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007654:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <UART_SetConfig+0x21d0>)
 8007656:	e004      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007658:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <UART_SetConfig+0x21d4>)
 800765a:	e002      	b.n	8007662 <UART_SetConfig+0x20e2>
 800765c:	4b3e      	ldr	r3, [pc, #248]	; (8007758 <UART_SetConfig+0x21d8>)
 800765e:	e000      	b.n	8007662 <UART_SetConfig+0x20e2>
 8007660:	4b32      	ldr	r3, [pc, #200]	; (800772c <UART_SetConfig+0x21ac>)
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	0852      	lsrs	r2, r2, #1
 8007668:	441a      	add	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	b29b      	uxth	r3, r3
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007676:	e0dd      	b.n	8007834 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d046      	beq.n	800770e <UART_SetConfig+0x218e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b01      	cmp	r3, #1
 8007686:	d040      	beq.n	800770a <UART_SetConfig+0x218a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b02      	cmp	r3, #2
 800768e:	d03a      	beq.n	8007706 <UART_SetConfig+0x2186>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b03      	cmp	r3, #3
 8007696:	d034      	beq.n	8007702 <UART_SetConfig+0x2182>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b04      	cmp	r3, #4
 800769e:	d02e      	beq.n	80076fe <UART_SetConfig+0x217e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b05      	cmp	r3, #5
 80076a6:	d028      	beq.n	80076fa <UART_SetConfig+0x217a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b06      	cmp	r3, #6
 80076ae:	d022      	beq.n	80076f6 <UART_SetConfig+0x2176>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	2b07      	cmp	r3, #7
 80076b6:	d01c      	beq.n	80076f2 <UART_SetConfig+0x2172>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d016      	beq.n	80076ee <UART_SetConfig+0x216e>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b09      	cmp	r3, #9
 80076c6:	d00f      	beq.n	80076e8 <UART_SetConfig+0x2168>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b0a      	cmp	r3, #10
 80076ce:	d008      	beq.n	80076e2 <UART_SetConfig+0x2162>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	2b0b      	cmp	r3, #11
 80076d6:	d102      	bne.n	80076de <UART_SetConfig+0x215e>
 80076d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80076dc:	e018      	b.n	8007710 <UART_SetConfig+0x2190>
 80076de:	4b18      	ldr	r3, [pc, #96]	; (8007740 <UART_SetConfig+0x21c0>)
 80076e0:	e016      	b.n	8007710 <UART_SetConfig+0x2190>
 80076e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80076e6:	e013      	b.n	8007710 <UART_SetConfig+0x2190>
 80076e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80076ec:	e010      	b.n	8007710 <UART_SetConfig+0x2190>
 80076ee:	4b1b      	ldr	r3, [pc, #108]	; (800775c <UART_SetConfig+0x21dc>)
 80076f0:	e00e      	b.n	8007710 <UART_SetConfig+0x2190>
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <UART_SetConfig+0x21b0>)
 80076f4:	e00c      	b.n	8007710 <UART_SetConfig+0x2190>
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <UART_SetConfig+0x21e0>)
 80076f8:	e00a      	b.n	8007710 <UART_SetConfig+0x2190>
 80076fa:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <UART_SetConfig+0x21e4>)
 80076fc:	e008      	b.n	8007710 <UART_SetConfig+0x2190>
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <UART_SetConfig+0x21b4>)
 8007700:	e006      	b.n	8007710 <UART_SetConfig+0x2190>
 8007702:	4b19      	ldr	r3, [pc, #100]	; (8007768 <UART_SetConfig+0x21e8>)
 8007704:	e004      	b.n	8007710 <UART_SetConfig+0x2190>
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <UART_SetConfig+0x21b8>)
 8007708:	e002      	b.n	8007710 <UART_SetConfig+0x2190>
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <UART_SetConfig+0x21bc>)
 800770c:	e000      	b.n	8007710 <UART_SetConfig+0x2190>
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <UART_SetConfig+0x21c0>)
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	0852      	lsrs	r2, r2, #1
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007724:	e086      	b.n	8007834 <UART_SetConfig+0x22b4>
 8007726:	bf00      	nop
 8007728:	58024400 	.word	0x58024400
 800772c:	03d09000 	.word	0x03d09000
 8007730:	0003d090 	.word	0x0003d090
 8007734:	0007a120 	.word	0x0007a120
 8007738:	000f4240 	.word	0x000f4240
 800773c:	001e8480 	.word	0x001e8480
 8007740:	003d0900 	.word	0x003d0900
 8007744:	00516155 	.word	0x00516155
 8007748:	0061a800 	.word	0x0061a800
 800774c:	007a1200 	.word	0x007a1200
 8007750:	00a2c2aa 	.word	0x00a2c2aa
 8007754:	00f42400 	.word	0x00f42400
 8007758:	01e84800 	.word	0x01e84800
 800775c:	0001e848 	.word	0x0001e848
 8007760:	00051615 	.word	0x00051615
 8007764:	00061a80 	.word	0x00061a80
 8007768:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d04e      	beq.n	8007812 <UART_SetConfig+0x2292>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b01      	cmp	r3, #1
 800777a:	d047      	beq.n	800780c <UART_SetConfig+0x228c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b02      	cmp	r3, #2
 8007782:	d040      	beq.n	8007806 <UART_SetConfig+0x2286>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b03      	cmp	r3, #3
 800778a:	d039      	beq.n	8007800 <UART_SetConfig+0x2280>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b04      	cmp	r3, #4
 8007792:	d032      	beq.n	80077fa <UART_SetConfig+0x227a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b05      	cmp	r3, #5
 800779a:	d02b      	beq.n	80077f4 <UART_SetConfig+0x2274>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d024      	beq.n	80077ee <UART_SetConfig+0x226e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b07      	cmp	r3, #7
 80077aa:	d01d      	beq.n	80077e8 <UART_SetConfig+0x2268>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d016      	beq.n	80077e2 <UART_SetConfig+0x2262>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d00f      	beq.n	80077dc <UART_SetConfig+0x225c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b0a      	cmp	r3, #10
 80077c2:	d008      	beq.n	80077d6 <UART_SetConfig+0x2256>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b0b      	cmp	r3, #11
 80077ca:	d101      	bne.n	80077d0 <UART_SetConfig+0x2250>
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	e022      	b.n	8007816 <UART_SetConfig+0x2296>
 80077d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d4:	e01f      	b.n	8007816 <UART_SetConfig+0x2296>
 80077d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077da:	e01c      	b.n	8007816 <UART_SetConfig+0x2296>
 80077dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e0:	e019      	b.n	8007816 <UART_SetConfig+0x2296>
 80077e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e6:	e016      	b.n	8007816 <UART_SetConfig+0x2296>
 80077e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077ec:	e013      	b.n	8007816 <UART_SetConfig+0x2296>
 80077ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80077f2:	e010      	b.n	8007816 <UART_SetConfig+0x2296>
 80077f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80077f8:	e00d      	b.n	8007816 <UART_SetConfig+0x2296>
 80077fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077fe:	e00a      	b.n	8007816 <UART_SetConfig+0x2296>
 8007800:	f241 5355 	movw	r3, #5461	; 0x1555
 8007804:	e007      	b.n	8007816 <UART_SetConfig+0x2296>
 8007806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800780a:	e004      	b.n	8007816 <UART_SetConfig+0x2296>
 800780c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007810:	e001      	b.n	8007816 <UART_SetConfig+0x2296>
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6852      	ldr	r2, [r2, #4]
 800781a:	0852      	lsrs	r2, r2, #1
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	fbb2 f3f3 	udiv	r3, r2, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800782a:	e003      	b.n	8007834 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d908      	bls.n	800784c <UART_SetConfig+0x22cc>
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007840:	d204      	bcs.n	800784c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007848:	60da      	str	r2, [r3, #12]
 800784a:	e002      	b.n	8007852 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800786e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007872:	4618      	mov	r0, r3
 8007874:	3740      	adds	r7, #64	; 0x40
 8007876:	46bd      	mov	sp, r7
 8007878:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800787c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01a      	beq.n	8007992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800797a:	d10a      	bne.n	8007992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  }
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80079d0:	f7f8 fed8 	bl	8000784 <HAL_GetTick>
 80079d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d10e      	bne.n	8007a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f82c 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e022      	b.n	8007a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d10e      	bne.n	8007a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f816 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e00c      	b.n	8007a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a60:	e062      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d05e      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7f8 fe8b 	bl	8000784 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11d      	bne.n	8007abc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e045      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02e      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad8:	d126      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007af2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e00f      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d08d      	beq.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e027      	b.n	8007bb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2224      	movs	r2, #36	; 0x24
 8007b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0201 	bic.w	r2, r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e02d      	b.n	8007c36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2224      	movs	r2, #36	; 0x24
 8007be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0201 	bic.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f850 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e02d      	b.n	8007cb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	; 0x24
 8007c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f812 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007cc4:	4a2f      	ldr	r2, [pc, #188]	; (8007d84 <UARTEx_SetNbDataToProcess+0xc8>)
 8007cc6:	f107 0314 	add.w	r3, r7, #20
 8007cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007cd2:	4a2d      	ldr	r2, [pc, #180]	; (8007d88 <UARTEx_SetNbDataToProcess+0xcc>)
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cdc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d108      	bne.n	8007cfa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cf8:	e03d      	b.n	8007d76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cfe:	2308      	movs	r3, #8
 8007d00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	0e5b      	lsrs	r3, r3, #25
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	0f5b      	lsrs	r3, r3, #29
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007d22:	7fbb      	ldrb	r3, [r7, #30]
 8007d24:	7f3a      	ldrb	r2, [r7, #28]
 8007d26:	f107 0120 	add.w	r1, r7, #32
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	7f3a      	ldrb	r2, [r7, #28]
 8007d36:	f107 0120 	add.w	r1, r7, #32
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007d4c:	7ffb      	ldrb	r3, [r7, #31]
 8007d4e:	7f7a      	ldrb	r2, [r7, #29]
 8007d50:	f107 0120 	add.w	r1, r7, #32
 8007d54:	440a      	add	r2, r1
 8007d56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
 8007d5e:	7f7a      	ldrb	r2, [r7, #29]
 8007d60:	f107 0120 	add.w	r1, r7, #32
 8007d64:	440a      	add	r2, r1
 8007d66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d76:	bf00      	nop
 8007d78:	3724      	adds	r7, #36	; 0x24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	08009600 	.word	0x08009600
 8007d88:	08009608 	.word	0x08009608

08007d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8007d92:	f107 031c 	add.w	r3, r7, #28
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007d9e:	463b      	mov	r3, r7
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	609a      	str	r2, [r3, #8]
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	611a      	str	r2, [r3, #16]
 8007dac:	615a      	str	r2, [r3, #20]
 8007dae:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007db0:	4b2f      	ldr	r3, [pc, #188]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007db2:	4a30      	ldr	r2, [pc, #192]	; (8007e74 <MX_ADC1_Init+0xe8>)
 8007db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007db6:	4b2e      	ldr	r3, [pc, #184]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007db8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007dbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007dbe:	4b2c      	ldr	r3, [pc, #176]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007dc4:	4b2a      	ldr	r3, [pc, #168]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007dca:	4b29      	ldr	r3, [pc, #164]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dcc:	2204      	movs	r2, #4
 8007dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8007ddc:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007de2:	4b23      	ldr	r3, [pc, #140]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007de8:	4b21      	ldr	r3, [pc, #132]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007df4:	4b1e      	ldr	r3, [pc, #120]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007e00:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007e0e:	4818      	ldr	r0, [pc, #96]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007e10:	f7f8 fe72 	bl	8000af8 <HAL_ADC_Init>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8007e1a:	f000 fab1 	bl	8008380 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007e22:	f107 031c 	add.w	r3, r7, #28
 8007e26:	4619      	mov	r1, r3
 8007e28:	4811      	ldr	r0, [pc, #68]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007e2a:	f7f9 fc3f 	bl	80016ac <HAL_ADCEx_MultiModeConfigChannel>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007e34:	f000 faa4 	bl	8008380 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007e38:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <MX_ADC1_Init+0xec>)
 8007e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007e3c:	2306      	movs	r3, #6
 8007e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007e44:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007e48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e52:	463b      	mov	r3, r7
 8007e54:	4619      	mov	r1, r3
 8007e56:	4806      	ldr	r0, [pc, #24]	; (8007e70 <MX_ADC1_Init+0xe4>)
 8007e58:	f7f8 ffee 	bl	8000e38 <HAL_ADC_ConfigChannel>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8007e62:	f000 fa8d 	bl	8008380 <Error_Handler>
  }

}
 8007e66:	bf00      	nop
 8007e68:	3728      	adds	r7, #40	; 0x28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	240000a4 	.word	0x240000a4
 8007e74:	40022000 	.word	0x40022000
 8007e78:	25b00200 	.word	0x25b00200

08007e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08a      	sub	sp, #40	; 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	609a      	str	r2, [r3, #8]
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <HAL_ADC_MspInit+0x80>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d129      	bne.n	8007ef2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007e9e:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ea4:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007ea6:	f043 0320 	orr.w	r3, r3, #32
 8007eaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007eae:	4b14      	ldr	r3, [pc, #80]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	613b      	str	r3, [r7, #16]
 8007eba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ebc:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ec2:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007ec4:	f043 0302 	orr.w	r3, r3, #2
 8007ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <HAL_ADC_MspInit+0x84>)
 8007ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ee6:	f107 0314 	add.w	r3, r7, #20
 8007eea:	4619      	mov	r1, r3
 8007eec:	4805      	ldr	r0, [pc, #20]	; (8007f04 <HAL_ADC_MspInit+0x88>)
 8007eee:	f7f9 fd9b 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3728      	adds	r7, #40	; 0x28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40022000 	.word	0x40022000
 8007f00:	58024400 	.word	0x58024400
 8007f04:	58020400 	.word	0x58020400

08007f08 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	; 0x28
 8007f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	609a      	str	r2, [r3, #8]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f1e:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f24:	4a2f      	ldr	r2, [pc, #188]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f2e:	4b2d      	ldr	r3, [pc, #180]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007f3c:	4b29      	ldr	r3, [pc, #164]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f42:	4a28      	ldr	r2, [pc, #160]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f4c:	4b25      	ldr	r3, [pc, #148]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f5a:	4b22      	ldr	r3, [pc, #136]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f60:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f62:	f043 0302 	orr.w	r3, r3, #2
 8007f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	60bb      	str	r3, [r7, #8]
 8007f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f78:	4b1a      	ldr	r3, [pc, #104]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f7e:	4a19      	ldr	r2, [pc, #100]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f92:	607b      	str	r3, [r7, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f9c:	4a11      	ldr	r2, [pc, #68]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <MX_GPIO_Init+0xdc>)
 8007fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	211c      	movs	r1, #28
 8007fb8:	480b      	ldr	r0, [pc, #44]	; (8007fe8 <MX_GPIO_Init+0xe0>)
 8007fba:	f7f9 fee5 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8007fbe:	231c      	movs	r3, #28
 8007fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007fce:	f107 0314 	add.w	r3, r7, #20
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4804      	ldr	r0, [pc, #16]	; (8007fe8 <MX_GPIO_Init+0xe0>)
 8007fd6:	f7f9 fd27 	bl	8001a28 <HAL_GPIO_Init>

}
 8007fda:	bf00      	nop
 8007fdc:	3728      	adds	r7, #40	; 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	58021800 	.word	0x58021800

08007fec <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <MX_I2C3_Init+0x74>)
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <MX_I2C3_Init+0x78>)
 8007ff4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <MX_I2C3_Init+0x74>)
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <MX_I2C3_Init+0x7c>)
 8007ffa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8007ffc:	4b18      	ldr	r3, [pc, #96]	; (8008060 <MX_I2C3_Init+0x74>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008002:	4b17      	ldr	r3, [pc, #92]	; (8008060 <MX_I2C3_Init+0x74>)
 8008004:	2201      	movs	r2, #1
 8008006:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008008:	4b15      	ldr	r3, [pc, #84]	; (8008060 <MX_I2C3_Init+0x74>)
 800800a:	2200      	movs	r2, #0
 800800c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <MX_I2C3_Init+0x74>)
 8008010:	2200      	movs	r2, #0
 8008012:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008014:	4b12      	ldr	r3, [pc, #72]	; (8008060 <MX_I2C3_Init+0x74>)
 8008016:	2200      	movs	r2, #0
 8008018:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800801a:	4b11      	ldr	r3, [pc, #68]	; (8008060 <MX_I2C3_Init+0x74>)
 800801c:	2200      	movs	r2, #0
 800801e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <MX_I2C3_Init+0x74>)
 8008022:	2200      	movs	r2, #0
 8008024:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008026:	480e      	ldr	r0, [pc, #56]	; (8008060 <MX_I2C3_Init+0x74>)
 8008028:	f7f9 fee2 	bl	8001df0 <HAL_I2C_Init>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8008032:	f000 f9a5 	bl	8008380 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008036:	2100      	movs	r1, #0
 8008038:	4809      	ldr	r0, [pc, #36]	; (8008060 <MX_I2C3_Init+0x74>)
 800803a:	f7fa fb33 	bl	80026a4 <HAL_I2CEx_ConfigAnalogFilter>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8008044:	f000 f99c 	bl	8008380 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8008048:	2100      	movs	r1, #0
 800804a:	4805      	ldr	r0, [pc, #20]	; (8008060 <MX_I2C3_Init+0x74>)
 800804c:	f7fa fb75 	bl	800273a <HAL_I2CEx_ConfigDigitalFilter>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8008056:	f000 f993 	bl	8008380 <Error_Handler>
  }

}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	24000108 	.word	0x24000108
 8008064:	40005c00 	.word	0x40005c00
 8008068:	10c0ecff 	.word	0x10c0ecff

0800806c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <HAL_I2C_MspInit+0x88>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d12e      	bne.n	80080ec <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800808e:	4b1a      	ldr	r3, [pc, #104]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 8008090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008094:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 8008096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800809e:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 80080a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80080ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80080b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080b2:	2312      	movs	r3, #18
 80080b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ba:	2300      	movs	r3, #0
 80080bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80080be:	2304      	movs	r3, #4
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80080c2:	f107 0314 	add.w	r3, r7, #20
 80080c6:	4619      	mov	r1, r3
 80080c8:	480c      	ldr	r0, [pc, #48]	; (80080fc <HAL_I2C_MspInit+0x90>)
 80080ca:	f7f9 fcad 	bl	8001a28 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80080ce:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 80080d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080d4:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 80080d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <HAL_I2C_MspInit+0x8c>)
 80080e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80080ec:	bf00      	nop
 80080ee:	3728      	adds	r7, #40	; 0x28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40005c00 	.word	0x40005c00
 80080f8:	58024400 	.word	0x58024400
 80080fc:	58021c00 	.word	0x58021c00

08008100 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8008106:	f7f8 fabb 	bl	8000680 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800810a:	f000 f853 	bl	80081b4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800810e:	f7ff fefb 	bl	8007f08 <MX_GPIO_Init>
    MX_ADC1_Init();
 8008112:	f7ff fe3b 	bl	8007d8c <MX_ADC1_Init>
    MX_I2C3_Init();
 8008116:	f7ff ff69 	bl	8007fec <MX_I2C3_Init>
    MX_USART1_UART_Init();
 800811a:	f000 fa7d 	bl	8008618 <MX_USART1_UART_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */
        hdc1080_write_buffer[0] = HDC1080_TEMPERATURE;
 800811e:	4b1e      	ldr	r3, [pc, #120]	; (8008198 <main+0x98>)
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit(&hi2c3, HDC1080_ADDRESS, hdc1080_write_buffer, 1, 100);
 8008124:	2364      	movs	r3, #100	; 0x64
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2301      	movs	r3, #1
 800812a:	4a1b      	ldr	r2, [pc, #108]	; (8008198 <main+0x98>)
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	481b      	ldr	r0, [pc, #108]	; (800819c <main+0x9c>)
 8008130:	f7f9 feee 	bl	8001f10 <HAL_I2C_Master_Transmit>
        HAL_Delay(20);
 8008134:	2014      	movs	r0, #20
 8008136:	f7f8 fb31 	bl	800079c <HAL_Delay>
        HAL_I2C_Master_Receive(&hi2c3,HDC1080_ADDRESS,hdc1080_write_buffer,2,100);
 800813a:	2364      	movs	r3, #100	; 0x64
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2302      	movs	r3, #2
 8008140:	4a15      	ldr	r2, [pc, #84]	; (8008198 <main+0x98>)
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	4815      	ldr	r0, [pc, #84]	; (800819c <main+0x9c>)
 8008146:	f7f9 ffd7 	bl	80020f8 <HAL_I2C_Master_Receive>
        Read_Temperature = hdc1080_write_buffer[0] << 8 | hdc1080_write_buffer[1];
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <main+0x98>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	b21a      	sxth	r2, r3
 8008152:	4b11      	ldr	r3, [pc, #68]	; (8008198 <main+0x98>)
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	b21b      	sxth	r3, r3
 8008158:	4313      	orrs	r3, r2
 800815a:	b21b      	sxth	r3, r3
 800815c:	b29a      	uxth	r2, r3
 800815e:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <main+0xa0>)
 8008160:	801a      	strh	r2, [r3, #0]
        printf("HDC1080_Temperature is : 0x%x\r\n", Read_Temperature);
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <main+0xa0>)
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	480e      	ldr	r0, [pc, #56]	; (80081a4 <main+0xa4>)
 800816a:	f000 fb59 	bl	8008820 <iprintf>
        HAL_GPIO_TogglePin(GPIOG, LED0_Pin|LED1_Pin|LED2_Pin);
 800816e:	211c      	movs	r1, #28
 8008170:	480d      	ldr	r0, [pc, #52]	; (80081a8 <main+0xa8>)
 8008172:	f7f9 fe22 	bl	8001dba <HAL_GPIO_TogglePin>
        printf("System main_loop is : %d\r\n", main_loop);
 8008176:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <main+0xac>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4619      	mov	r1, r3
 800817c:	480c      	ldr	r0, [pc, #48]	; (80081b0 <main+0xb0>)
 800817e:	f000 fb4f 	bl	8008820 <iprintf>
        main_loop++;
 8008182:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <main+0xac>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <main+0xac>)
 800818a:	6013      	str	r3, [r2, #0]
        HAL_Delay(1000);
 800818c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008190:	f7f8 fb04 	bl	800079c <HAL_Delay>
        hdc1080_write_buffer[0] = HDC1080_TEMPERATURE;
 8008194:	e7c3      	b.n	800811e <main+0x1e>
 8008196:	bf00      	nop
 8008198:	24000158 	.word	0x24000158
 800819c:	24000108 	.word	0x24000108
 80081a0:	2400015a 	.word	0x2400015a
 80081a4:	08009610 	.word	0x08009610
 80081a8:	58021800 	.word	0x58021800
 80081ac:	24000090 	.word	0x24000090
 80081b0:	08009630 	.word	0x08009630

080081b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b0cc      	sub	sp, #304	; 0x130
 80081b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80081ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80081be:	224c      	movs	r2, #76	; 0x4c
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fb24 	bl	8008810 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80081c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80081cc:	2220      	movs	r2, #32
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fb1d 	bl	8008810 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80081d6:	f107 0308 	add.w	r3, r7, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	23bc      	movs	r3, #188	; 0xbc
 80081de:	461a      	mov	r2, r3
 80081e0:	2100      	movs	r1, #0
 80081e2:	f000 fb15 	bl	8008810 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80081e6:	2002      	movs	r0, #2
 80081e8:	f7fa faf4 	bl	80027d4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80081ec:	1d3b      	adds	r3, r7, #4
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	4b5f      	ldr	r3, [pc, #380]	; (8008370 <SystemClock_Config+0x1bc>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	4a5e      	ldr	r2, [pc, #376]	; (8008370 <SystemClock_Config+0x1bc>)
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081fe:	4b5c      	ldr	r3, [pc, #368]	; (8008370 <SystemClock_Config+0x1bc>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f003 0201 	and.w	r2, r3, #1
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <SystemClock_Config+0x1c0>)
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	4a59      	ldr	r2, [pc, #356]	; (8008374 <SystemClock_Config+0x1c0>)
 8008210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008214:	6193      	str	r3, [r2, #24]
 8008216:	4b57      	ldr	r3, [pc, #348]	; (8008374 <SystemClock_Config+0x1c0>)
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	681b      	ldr	r3, [r3, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8008226:	bf00      	nop
 8008228:	4b52      	ldr	r3, [pc, #328]	; (8008374 <SystemClock_Config+0x1c0>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008234:	d1f8      	bne.n	8008228 <SystemClock_Config+0x74>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008236:	4b50      	ldr	r3, [pc, #320]	; (8008378 <SystemClock_Config+0x1c4>)
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	4a4e      	ldr	r2, [pc, #312]	; (8008378 <SystemClock_Config+0x1c4>)
 8008240:	f043 0302 	orr.w	r3, r3, #2
 8008244:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008246:	2301      	movs	r3, #1
 8008248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800824c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008250:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008254:	2302      	movs	r3, #2
 8008256:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800825a:	2302      	movs	r3, #2
 800825c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8008260:	2305      	movs	r3, #5
 8008262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 160;
 8008266:	23a0      	movs	r3, #160	; 0xa0
 8008268:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 800826c:	2302      	movs	r3, #2
 800826e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8008272:	2302      	movs	r3, #2
 8008274:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8008278:	2302      	movs	r3, #2
 800827a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800827e:	2308      	movs	r3, #8
 8008280:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008284:	2300      	movs	r3, #0
 8008286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008290:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fa fad5 	bl	8002844 <HAL_RCC_OscConfig>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <SystemClock_Config+0xf0>
		Error_Handler();
 80082a0:	f000 f86e 	bl	8008380 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80082a4:	233f      	movs	r3, #63	; 0x3f
 80082a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082aa:	2303      	movs	r3, #3
 80082ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80082b6:	2308      	movs	r3, #8
 80082b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80082c2:	2340      	movs	r3, #64	; 0x40
 80082c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80082c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80082d0:	2340      	movs	r3, #64	; 0x40
 80082d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80082d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082da:	2102      	movs	r1, #2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fa fe69 	bl	8002fb4 <HAL_RCC_ClockConfig>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <SystemClock_Config+0x138>
		Error_Handler();
 80082e8:	f000 f84a 	bl	8008380 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4a22      	ldr	r2, [pc, #136]	; (800837c <SystemClock_Config+0x1c8>)
 80082f2:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C3 | RCC_PERIPHCLK_ADC;
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	2202      	movs	r2, #2
 80082fa:	605a      	str	r2, [r3, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 80082fc:	f107 0308 	add.w	r3, r7, #8
 8008300:	220c      	movs	r2, #12
 8008302:	609a      	str	r2, [r3, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	2202      	movs	r2, #2
 800830a:	60da      	str	r2, [r3, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	2202      	movs	r2, #2
 8008312:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008314:	f107 0308 	add.w	r3, r7, #8
 8008318:	2202      	movs	r2, #2
 800831a:	615a      	str	r2, [r3, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800831c:	f107 0308 	add.w	r3, r7, #8
 8008320:	22c0      	movs	r2, #192	; 0xc0
 8008322:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	2220      	movs	r2, #32
 800832a:	61da      	str	r2, [r3, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800832c:	f107 0308 	add.w	r3, r7, #8
 8008330:	2200      	movs	r2, #0
 8008332:	621a      	str	r2, [r3, #32]
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	2200      	movs	r2, #0
 800833a:	679a      	str	r2, [r3, #120]	; 0x78
	PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800833c:	f107 0308 	add.w	r3, r7, #8
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008346:	f107 0308 	add.w	r3, r7, #8
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	4618      	mov	r0, r3
 8008356:	f7fb f98b 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <SystemClock_Config+0x1b0>
		Error_Handler();
 8008360:	f000 f80e 	bl	8008380 <Error_Handler>
	}
}
 8008364:	bf00      	nop
 8008366:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	58000400 	.word	0x58000400
 8008374:	58024800 	.word	0x58024800
 8008378:	58024400 	.word	0x58024400
 800837c:	00080009 	.word	0x00080009

08008380 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_MspInit+0x30>)
 8008398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800839c:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <HAL_MspInit+0x30>)
 800839e:	f043 0302 	orr.w	r3, r3, #2
 80083a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083a6:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <HAL_MspInit+0x30>)
 80083a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58024400 	.word	0x58024400

080083c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083d2:	b480      	push	{r7}
 80083d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083d6:	e7fe      	b.n	80083d6 <HardFault_Handler+0x4>

080083d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083dc:	e7fe      	b.n	80083dc <MemManage_Handler+0x4>

080083de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083de:	b480      	push	{r7}
 80083e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083e2:	e7fe      	b.n	80083e2 <BusFault_Handler+0x4>

080083e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083e8:	e7fe      	b.n	80083e8 <UsageFault_Handler+0x4>

080083ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083ea:	b480      	push	{r7}
 80083ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083ee:	bf00      	nop
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083fc:	bf00      	nop
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008406:	b480      	push	{r7}
 8008408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800840a:	bf00      	nop
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008418:	f7f8 f9a0 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800841c:	bf00      	nop
 800841e:	bd80      	pop	{r7, pc}

08008420 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e00a      	b.n	8008448 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008432:	f3af 8000 	nop.w
 8008436:	4601      	mov	r1, r0
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	60ba      	str	r2, [r7, #8]
 800843e:	b2ca      	uxtb	r2, r1
 8008440:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3301      	adds	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	429a      	cmp	r2, r3
 800844e:	dbf0      	blt.n	8008432 <_read+0x12>
	}

return len;
 8008450:	687b      	ldr	r3, [r7, #4]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e009      	b.n	8008480 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	60ba      	str	r2, [r7, #8]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f965 	bl	8008744 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	3301      	adds	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	dbf1      	blt.n	800846c <_write+0x12>
	}
	return len;
 8008488:	687b      	ldr	r3, [r7, #4]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <_close>:

int _close(int file)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
	return -1;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084ba:	605a      	str	r2, [r3, #4]
	return 0;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <_isatty>:

int _isatty(int file)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
	return 1;
 80084d2:	2301      	movs	r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
	return 0;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008504:	4b11      	ldr	r3, [pc, #68]	; (800854c <_sbrk+0x50>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <_sbrk+0x16>
		heap_end = &end;
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <_sbrk+0x50>)
 800850e:	4a10      	ldr	r2, [pc, #64]	; (8008550 <_sbrk+0x54>)
 8008510:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <_sbrk+0x50>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <_sbrk+0x50>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4413      	add	r3, r2
 8008520:	466a      	mov	r2, sp
 8008522:	4293      	cmp	r3, r2
 8008524:	d907      	bls.n	8008536 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008526:	f000 f949 	bl	80087bc <__errno>
 800852a:	4602      	mov	r2, r0
 800852c:	230c      	movs	r3, #12
 800852e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	e006      	b.n	8008544 <_sbrk+0x48>
	}

	heap_end += incr;
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <_sbrk+0x50>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	4a03      	ldr	r2, [pc, #12]	; (800854c <_sbrk+0x50>)
 8008540:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008542:	68fb      	ldr	r3, [r7, #12]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	24000094 	.word	0x24000094
 8008550:	240001f0 	.word	0x240001f0

08008554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008558:	4b29      	ldr	r3, [pc, #164]	; (8008600 <SystemInit+0xac>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855e:	4a28      	ldr	r2, [pc, #160]	; (8008600 <SystemInit+0xac>)
 8008560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <SystemInit+0xb0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a25      	ldr	r2, [pc, #148]	; (8008604 <SystemInit+0xb0>)
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008574:	4b23      	ldr	r3, [pc, #140]	; (8008604 <SystemInit+0xb0>)
 8008576:	2200      	movs	r2, #0
 8008578:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800857a:	4b22      	ldr	r3, [pc, #136]	; (8008604 <SystemInit+0xb0>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	4921      	ldr	r1, [pc, #132]	; (8008604 <SystemInit+0xb0>)
 8008580:	4b21      	ldr	r3, [pc, #132]	; (8008608 <SystemInit+0xb4>)
 8008582:	4013      	ands	r3, r2
 8008584:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008586:	4b1f      	ldr	r3, [pc, #124]	; (8008604 <SystemInit+0xb0>)
 8008588:	2200      	movs	r2, #0
 800858a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800858c:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <SystemInit+0xb0>)
 800858e:	2200      	movs	r2, #0
 8008590:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <SystemInit+0xb0>)
 8008594:	2200      	movs	r2, #0
 8008596:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8008598:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <SystemInit+0xb0>)
 800859a:	2200      	movs	r2, #0
 800859c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <SystemInit+0xb0>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <SystemInit+0xb0>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80085aa:	4b16      	ldr	r3, [pc, #88]	; (8008604 <SystemInit+0xb0>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <SystemInit+0xb0>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <SystemInit+0xb0>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80085bc:	4b11      	ldr	r3, [pc, #68]	; (8008604 <SystemInit+0xb0>)
 80085be:	2200      	movs	r2, #0
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <SystemInit+0xb0>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <SystemInit+0xb0>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a0d      	ldr	r2, [pc, #52]	; (8008604 <SystemInit+0xb0>)
 80085ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <SystemInit+0xb0>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <SystemInit+0xb8>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <SystemInit+0xbc>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e6:	d202      	bcs.n	80085ee <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <SystemInit+0xc0>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80085ee:	4b04      	ldr	r3, [pc, #16]	; (8008600 <SystemInit+0xac>)
 80085f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085f4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000ed00 	.word	0xe000ed00
 8008604:	58024400 	.word	0x58024400
 8008608:	eaf6ed7f 	.word	0xeaf6ed7f
 800860c:	5c001000 	.word	0x5c001000
 8008610:	ffff0000 	.word	0xffff0000
 8008614:	51008108 	.word	0x51008108

08008618 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800861c:	4b22      	ldr	r3, [pc, #136]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 800861e:	4a23      	ldr	r2, [pc, #140]	; (80086ac <MX_USART1_UART_Init+0x94>)
 8008620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008622:	4b21      	ldr	r3, [pc, #132]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 800862c:	2200      	movs	r2, #0
 800862e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008630:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008632:	2200      	movs	r2, #0
 8008634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008636:	4b1c      	ldr	r3, [pc, #112]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008638:	2200      	movs	r2, #0
 800863a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 800863e:	220c      	movs	r2, #12
 8008640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008642:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008644:	2200      	movs	r2, #0
 8008646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008648:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 800864a:	2200      	movs	r2, #0
 800864c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800864e:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008650:	2200      	movs	r2, #0
 8008652:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008654:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008656:	2200      	movs	r2, #0
 8008658:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800865a:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 800865c:	2200      	movs	r2, #0
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008660:	4811      	ldr	r0, [pc, #68]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008662:	f7fc fea5 	bl	80053b0 <HAL_UART_Init>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800866c:	f7ff fe88 	bl	8008380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008670:	2100      	movs	r1, #0
 8008672:	480d      	ldr	r0, [pc, #52]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008674:	f7ff faa5 	bl	8007bc2 <HAL_UARTEx_SetTxFifoThreshold>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800867e:	f7ff fe7f 	bl	8008380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008682:	2100      	movs	r1, #0
 8008684:	4808      	ldr	r0, [pc, #32]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008686:	f7ff fada 	bl	8007c3e <HAL_UARTEx_SetRxFifoThreshold>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008690:	f7ff fe76 	bl	8008380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008694:	4804      	ldr	r0, [pc, #16]	; (80086a8 <MX_USART1_UART_Init+0x90>)
 8008696:	f7ff fa5b 	bl	8007b50 <HAL_UARTEx_DisableFifoMode>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80086a0:	f7ff fe6e 	bl	8008380 <Error_Handler>
  }

}
 80086a4:	bf00      	nop
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	2400015c 	.word	0x2400015c
 80086ac:	40011000 	.word	0x40011000

080086b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	; 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <HAL_UART_MspInit+0x88>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d12e      	bne.n	8008730 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <HAL_UART_MspInit+0x8c>)
 80086d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086d8:	4a18      	ldr	r2, [pc, #96]	; (800873c <HAL_UART_MspInit+0x8c>)
 80086da:	f043 0310 	orr.w	r3, r3, #16
 80086de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80086e2:	4b16      	ldr	r3, [pc, #88]	; (800873c <HAL_UART_MspInit+0x8c>)
 80086e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f0:	4b12      	ldr	r3, [pc, #72]	; (800873c <HAL_UART_MspInit+0x8c>)
 80086f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086f6:	4a11      	ldr	r2, [pc, #68]	; (800873c <HAL_UART_MspInit+0x8c>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <HAL_UART_MspInit+0x8c>)
 8008702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800870e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008714:	2302      	movs	r3, #2
 8008716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	2300      	movs	r3, #0
 800871a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800871c:	2300      	movs	r3, #0
 800871e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008720:	2307      	movs	r3, #7
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008724:	f107 0314 	add.w	r3, r7, #20
 8008728:	4619      	mov	r1, r3
 800872a:	4805      	ldr	r0, [pc, #20]	; (8008740 <HAL_UART_MspInit+0x90>)
 800872c:	f7f9 f97c 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008730:	bf00      	nop
 8008732:	3728      	adds	r7, #40	; 0x28
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	40011000 	.word	0x40011000
 800873c:	58024400 	.word	0x58024400
 8008740:	58020000 	.word	0x58020000

08008744 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800874c:	1d39      	adds	r1, r7, #4
 800874e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008752:	2201      	movs	r2, #1
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <__io_putchar+0x20>)
 8008756:	f7fc fe7b 	bl	8005450 <HAL_UART_Transmit>

  return ch;
 800875a:	687b      	ldr	r3, [r7, #4]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	2400015c 	.word	0x2400015c

08008768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800876c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800876e:	e003      	b.n	8008778 <LoopCopyDataInit>

08008770 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008772:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008774:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008776:	3104      	adds	r1, #4

08008778 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008778:	480b      	ldr	r0, [pc, #44]	; (80087a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800877c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800877e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008780:	d3f6      	bcc.n	8008770 <CopyDataInit>
  ldr  r2, =_sbss
 8008782:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008784:	e002      	b.n	800878c <LoopFillZerobss>

08008786 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008786:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008788:	f842 3b04 	str.w	r3, [r2], #4

0800878c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800878c:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800878e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008790:	d3f9      	bcc.n	8008786 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008792:	f7ff fedf 	bl	8008554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008796:	f000 f817 	bl	80087c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800879a:	f7ff fcb1 	bl	8008100 <main>
  bx  lr    
 800879e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80087a0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80087a4:	08009704 	.word	0x08009704
  ldr  r0, =_sdata
 80087a8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80087ac:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 80087b0:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 80087b4:	240001ec 	.word	0x240001ec

080087b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087b8:	e7fe      	b.n	80087b8 <ADC3_IRQHandler>
	...

080087bc <__errno>:
 80087bc:	4b01      	ldr	r3, [pc, #4]	; (80087c4 <__errno+0x8>)
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	24000010 	.word	0x24000010

080087c8 <__libc_init_array>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4e0d      	ldr	r6, [pc, #52]	; (8008800 <__libc_init_array+0x38>)
 80087cc:	4c0d      	ldr	r4, [pc, #52]	; (8008804 <__libc_init_array+0x3c>)
 80087ce:	1ba4      	subs	r4, r4, r6
 80087d0:	10a4      	asrs	r4, r4, #2
 80087d2:	2500      	movs	r5, #0
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d109      	bne.n	80087ec <__libc_init_array+0x24>
 80087d8:	4e0b      	ldr	r6, [pc, #44]	; (8008808 <__libc_init_array+0x40>)
 80087da:	4c0c      	ldr	r4, [pc, #48]	; (800880c <__libc_init_array+0x44>)
 80087dc:	f000 ff04 	bl	80095e8 <_init>
 80087e0:	1ba4      	subs	r4, r4, r6
 80087e2:	10a4      	asrs	r4, r4, #2
 80087e4:	2500      	movs	r5, #0
 80087e6:	42a5      	cmp	r5, r4
 80087e8:	d105      	bne.n	80087f6 <__libc_init_array+0x2e>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087f0:	4798      	blx	r3
 80087f2:	3501      	adds	r5, #1
 80087f4:	e7ee      	b.n	80087d4 <__libc_init_array+0xc>
 80087f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087fa:	4798      	blx	r3
 80087fc:	3501      	adds	r5, #1
 80087fe:	e7f2      	b.n	80087e6 <__libc_init_array+0x1e>
 8008800:	080096fc 	.word	0x080096fc
 8008804:	080096fc 	.word	0x080096fc
 8008808:	080096fc 	.word	0x080096fc
 800880c:	08009700 	.word	0x08009700

08008810 <memset>:
 8008810:	4402      	add	r2, r0
 8008812:	4603      	mov	r3, r0
 8008814:	4293      	cmp	r3, r2
 8008816:	d100      	bne.n	800881a <memset+0xa>
 8008818:	4770      	bx	lr
 800881a:	f803 1b01 	strb.w	r1, [r3], #1
 800881e:	e7f9      	b.n	8008814 <memset+0x4>

08008820 <iprintf>:
 8008820:	b40f      	push	{r0, r1, r2, r3}
 8008822:	4b0a      	ldr	r3, [pc, #40]	; (800884c <iprintf+0x2c>)
 8008824:	b513      	push	{r0, r1, r4, lr}
 8008826:	681c      	ldr	r4, [r3, #0]
 8008828:	b124      	cbz	r4, 8008834 <iprintf+0x14>
 800882a:	69a3      	ldr	r3, [r4, #24]
 800882c:	b913      	cbnz	r3, 8008834 <iprintf+0x14>
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f84e 	bl	80088d0 <__sinit>
 8008834:	ab05      	add	r3, sp, #20
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	68a1      	ldr	r1, [r4, #8]
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	4620      	mov	r0, r4
 800883e:	f000 f955 	bl	8008aec <_vfiprintf_r>
 8008842:	b002      	add	sp, #8
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	b004      	add	sp, #16
 800884a:	4770      	bx	lr
 800884c:	24000010 	.word	0x24000010

08008850 <std>:
 8008850:	2300      	movs	r3, #0
 8008852:	b510      	push	{r4, lr}
 8008854:	4604      	mov	r4, r0
 8008856:	e9c0 3300 	strd	r3, r3, [r0]
 800885a:	6083      	str	r3, [r0, #8]
 800885c:	8181      	strh	r1, [r0, #12]
 800885e:	6643      	str	r3, [r0, #100]	; 0x64
 8008860:	81c2      	strh	r2, [r0, #14]
 8008862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008866:	6183      	str	r3, [r0, #24]
 8008868:	4619      	mov	r1, r3
 800886a:	2208      	movs	r2, #8
 800886c:	305c      	adds	r0, #92	; 0x5c
 800886e:	f7ff ffcf 	bl	8008810 <memset>
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x38>)
 8008874:	6263      	str	r3, [r4, #36]	; 0x24
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x3c>)
 8008878:	62a3      	str	r3, [r4, #40]	; 0x28
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <std+0x40>)
 800887c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <std+0x44>)
 8008880:	6224      	str	r4, [r4, #32]
 8008882:	6323      	str	r3, [r4, #48]	; 0x30
 8008884:	bd10      	pop	{r4, pc}
 8008886:	bf00      	nop
 8008888:	08009049 	.word	0x08009049
 800888c:	0800906b 	.word	0x0800906b
 8008890:	080090a3 	.word	0x080090a3
 8008894:	080090c7 	.word	0x080090c7

08008898 <_cleanup_r>:
 8008898:	4901      	ldr	r1, [pc, #4]	; (80088a0 <_cleanup_r+0x8>)
 800889a:	f000 b885 	b.w	80089a8 <_fwalk_reent>
 800889e:	bf00      	nop
 80088a0:	080093a1 	.word	0x080093a1

080088a4 <__sfmoreglue>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	1e4a      	subs	r2, r1, #1
 80088a8:	2568      	movs	r5, #104	; 0x68
 80088aa:	4355      	muls	r5, r2
 80088ac:	460e      	mov	r6, r1
 80088ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088b2:	f000 f897 	bl	80089e4 <_malloc_r>
 80088b6:	4604      	mov	r4, r0
 80088b8:	b140      	cbz	r0, 80088cc <__sfmoreglue+0x28>
 80088ba:	2100      	movs	r1, #0
 80088bc:	e9c0 1600 	strd	r1, r6, [r0]
 80088c0:	300c      	adds	r0, #12
 80088c2:	60a0      	str	r0, [r4, #8]
 80088c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088c8:	f7ff ffa2 	bl	8008810 <memset>
 80088cc:	4620      	mov	r0, r4
 80088ce:	bd70      	pop	{r4, r5, r6, pc}

080088d0 <__sinit>:
 80088d0:	6983      	ldr	r3, [r0, #24]
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	bb33      	cbnz	r3, 8008926 <__sinit+0x56>
 80088d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80088dc:	6503      	str	r3, [r0, #80]	; 0x50
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <__sinit+0x58>)
 80088e0:	4a12      	ldr	r2, [pc, #72]	; (800892c <__sinit+0x5c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6282      	str	r2, [r0, #40]	; 0x28
 80088e6:	4298      	cmp	r0, r3
 80088e8:	bf04      	itt	eq
 80088ea:	2301      	moveq	r3, #1
 80088ec:	6183      	streq	r3, [r0, #24]
 80088ee:	f000 f81f 	bl	8008930 <__sfp>
 80088f2:	6060      	str	r0, [r4, #4]
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f81b 	bl	8008930 <__sfp>
 80088fa:	60a0      	str	r0, [r4, #8]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 f817 	bl	8008930 <__sfp>
 8008902:	2200      	movs	r2, #0
 8008904:	60e0      	str	r0, [r4, #12]
 8008906:	2104      	movs	r1, #4
 8008908:	6860      	ldr	r0, [r4, #4]
 800890a:	f7ff ffa1 	bl	8008850 <std>
 800890e:	2201      	movs	r2, #1
 8008910:	2109      	movs	r1, #9
 8008912:	68a0      	ldr	r0, [r4, #8]
 8008914:	f7ff ff9c 	bl	8008850 <std>
 8008918:	2202      	movs	r2, #2
 800891a:	2112      	movs	r1, #18
 800891c:	68e0      	ldr	r0, [r4, #12]
 800891e:	f7ff ff97 	bl	8008850 <std>
 8008922:	2301      	movs	r3, #1
 8008924:	61a3      	str	r3, [r4, #24]
 8008926:	bd10      	pop	{r4, pc}
 8008928:	0800965c 	.word	0x0800965c
 800892c:	08008899 	.word	0x08008899

08008930 <__sfp>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <__sfp+0x70>)
 8008934:	681e      	ldr	r6, [r3, #0]
 8008936:	69b3      	ldr	r3, [r6, #24]
 8008938:	4607      	mov	r7, r0
 800893a:	b913      	cbnz	r3, 8008942 <__sfp+0x12>
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff ffc7 	bl	80088d0 <__sinit>
 8008942:	3648      	adds	r6, #72	; 0x48
 8008944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008948:	3b01      	subs	r3, #1
 800894a:	d503      	bpl.n	8008954 <__sfp+0x24>
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	b133      	cbz	r3, 800895e <__sfp+0x2e>
 8008950:	6836      	ldr	r6, [r6, #0]
 8008952:	e7f7      	b.n	8008944 <__sfp+0x14>
 8008954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008958:	b16d      	cbz	r5, 8008976 <__sfp+0x46>
 800895a:	3468      	adds	r4, #104	; 0x68
 800895c:	e7f4      	b.n	8008948 <__sfp+0x18>
 800895e:	2104      	movs	r1, #4
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ff9f 	bl	80088a4 <__sfmoreglue>
 8008966:	6030      	str	r0, [r6, #0]
 8008968:	2800      	cmp	r0, #0
 800896a:	d1f1      	bne.n	8008950 <__sfp+0x20>
 800896c:	230c      	movs	r3, #12
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4604      	mov	r4, r0
 8008972:	4620      	mov	r0, r4
 8008974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008976:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <__sfp+0x74>)
 8008978:	6665      	str	r5, [r4, #100]	; 0x64
 800897a:	e9c4 5500 	strd	r5, r5, [r4]
 800897e:	60a5      	str	r5, [r4, #8]
 8008980:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008984:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008988:	2208      	movs	r2, #8
 800898a:	4629      	mov	r1, r5
 800898c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008990:	f7ff ff3e 	bl	8008810 <memset>
 8008994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800899c:	e7e9      	b.n	8008972 <__sfp+0x42>
 800899e:	bf00      	nop
 80089a0:	0800965c 	.word	0x0800965c
 80089a4:	ffff0001 	.word	0xffff0001

080089a8 <_fwalk_reent>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4680      	mov	r8, r0
 80089ae:	4689      	mov	r9, r1
 80089b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089b4:	2600      	movs	r6, #0
 80089b6:	b914      	cbnz	r4, 80089be <_fwalk_reent+0x16>
 80089b8:	4630      	mov	r0, r6
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80089c2:	3f01      	subs	r7, #1
 80089c4:	d501      	bpl.n	80089ca <_fwalk_reent+0x22>
 80089c6:	6824      	ldr	r4, [r4, #0]
 80089c8:	e7f5      	b.n	80089b6 <_fwalk_reent+0xe>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d907      	bls.n	80089e0 <_fwalk_reent+0x38>
 80089d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089d4:	3301      	adds	r3, #1
 80089d6:	d003      	beq.n	80089e0 <_fwalk_reent+0x38>
 80089d8:	4629      	mov	r1, r5
 80089da:	4640      	mov	r0, r8
 80089dc:	47c8      	blx	r9
 80089de:	4306      	orrs	r6, r0
 80089e0:	3568      	adds	r5, #104	; 0x68
 80089e2:	e7ee      	b.n	80089c2 <_fwalk_reent+0x1a>

080089e4 <_malloc_r>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	1ccd      	adds	r5, r1, #3
 80089e8:	f025 0503 	bic.w	r5, r5, #3
 80089ec:	3508      	adds	r5, #8
 80089ee:	2d0c      	cmp	r5, #12
 80089f0:	bf38      	it	cc
 80089f2:	250c      	movcc	r5, #12
 80089f4:	2d00      	cmp	r5, #0
 80089f6:	4606      	mov	r6, r0
 80089f8:	db01      	blt.n	80089fe <_malloc_r+0x1a>
 80089fa:	42a9      	cmp	r1, r5
 80089fc:	d903      	bls.n	8008a06 <_malloc_r+0x22>
 80089fe:	230c      	movs	r3, #12
 8008a00:	6033      	str	r3, [r6, #0]
 8008a02:	2000      	movs	r0, #0
 8008a04:	bd70      	pop	{r4, r5, r6, pc}
 8008a06:	f000 fd6b 	bl	80094e0 <__malloc_lock>
 8008a0a:	4a21      	ldr	r2, [pc, #132]	; (8008a90 <_malloc_r+0xac>)
 8008a0c:	6814      	ldr	r4, [r2, #0]
 8008a0e:	4621      	mov	r1, r4
 8008a10:	b991      	cbnz	r1, 8008a38 <_malloc_r+0x54>
 8008a12:	4c20      	ldr	r4, [pc, #128]	; (8008a94 <_malloc_r+0xb0>)
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	b91b      	cbnz	r3, 8008a20 <_malloc_r+0x3c>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 fb05 	bl	8009028 <_sbrk_r>
 8008a1e:	6020      	str	r0, [r4, #0]
 8008a20:	4629      	mov	r1, r5
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 fb00 	bl	8009028 <_sbrk_r>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d124      	bne.n	8008a76 <_malloc_r+0x92>
 8008a2c:	230c      	movs	r3, #12
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 fd56 	bl	80094e2 <__malloc_unlock>
 8008a36:	e7e4      	b.n	8008a02 <_malloc_r+0x1e>
 8008a38:	680b      	ldr	r3, [r1, #0]
 8008a3a:	1b5b      	subs	r3, r3, r5
 8008a3c:	d418      	bmi.n	8008a70 <_malloc_r+0x8c>
 8008a3e:	2b0b      	cmp	r3, #11
 8008a40:	d90f      	bls.n	8008a62 <_malloc_r+0x7e>
 8008a42:	600b      	str	r3, [r1, #0]
 8008a44:	50cd      	str	r5, [r1, r3]
 8008a46:	18cc      	adds	r4, r1, r3
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 fd4a 	bl	80094e2 <__malloc_unlock>
 8008a4e:	f104 000b 	add.w	r0, r4, #11
 8008a52:	1d23      	adds	r3, r4, #4
 8008a54:	f020 0007 	bic.w	r0, r0, #7
 8008a58:	1ac3      	subs	r3, r0, r3
 8008a5a:	d0d3      	beq.n	8008a04 <_malloc_r+0x20>
 8008a5c:	425a      	negs	r2, r3
 8008a5e:	50e2      	str	r2, [r4, r3]
 8008a60:	e7d0      	b.n	8008a04 <_malloc_r+0x20>
 8008a62:	428c      	cmp	r4, r1
 8008a64:	684b      	ldr	r3, [r1, #4]
 8008a66:	bf16      	itet	ne
 8008a68:	6063      	strne	r3, [r4, #4]
 8008a6a:	6013      	streq	r3, [r2, #0]
 8008a6c:	460c      	movne	r4, r1
 8008a6e:	e7eb      	b.n	8008a48 <_malloc_r+0x64>
 8008a70:	460c      	mov	r4, r1
 8008a72:	6849      	ldr	r1, [r1, #4]
 8008a74:	e7cc      	b.n	8008a10 <_malloc_r+0x2c>
 8008a76:	1cc4      	adds	r4, r0, #3
 8008a78:	f024 0403 	bic.w	r4, r4, #3
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d005      	beq.n	8008a8c <_malloc_r+0xa8>
 8008a80:	1a21      	subs	r1, r4, r0
 8008a82:	4630      	mov	r0, r6
 8008a84:	f000 fad0 	bl	8009028 <_sbrk_r>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d0cf      	beq.n	8008a2c <_malloc_r+0x48>
 8008a8c:	6025      	str	r5, [r4, #0]
 8008a8e:	e7db      	b.n	8008a48 <_malloc_r+0x64>
 8008a90:	24000098 	.word	0x24000098
 8008a94:	2400009c 	.word	0x2400009c

08008a98 <__sfputc_r>:
 8008a98:	6893      	ldr	r3, [r2, #8]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	b410      	push	{r4}
 8008aa0:	6093      	str	r3, [r2, #8]
 8008aa2:	da08      	bge.n	8008ab6 <__sfputc_r+0x1e>
 8008aa4:	6994      	ldr	r4, [r2, #24]
 8008aa6:	42a3      	cmp	r3, r4
 8008aa8:	db01      	blt.n	8008aae <__sfputc_r+0x16>
 8008aaa:	290a      	cmp	r1, #10
 8008aac:	d103      	bne.n	8008ab6 <__sfputc_r+0x1e>
 8008aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab2:	f000 bb0d 	b.w	80090d0 <__swbuf_r>
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	1c58      	adds	r0, r3, #1
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	7019      	strb	r1, [r3, #0]
 8008abe:	4608      	mov	r0, r1
 8008ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <__sfputs_r>:
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac8:	4606      	mov	r6, r0
 8008aca:	460f      	mov	r7, r1
 8008acc:	4614      	mov	r4, r2
 8008ace:	18d5      	adds	r5, r2, r3
 8008ad0:	42ac      	cmp	r4, r5
 8008ad2:	d101      	bne.n	8008ad8 <__sfputs_r+0x12>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e007      	b.n	8008ae8 <__sfputs_r+0x22>
 8008ad8:	463a      	mov	r2, r7
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ffda 	bl	8008a98 <__sfputc_r>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d1f3      	bne.n	8008ad0 <__sfputs_r+0xa>
 8008ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aec <_vfiprintf_r>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	b09d      	sub	sp, #116	; 0x74
 8008af4:	4617      	mov	r7, r2
 8008af6:	461d      	mov	r5, r3
 8008af8:	4606      	mov	r6, r0
 8008afa:	b118      	cbz	r0, 8008b04 <_vfiprintf_r+0x18>
 8008afc:	6983      	ldr	r3, [r0, #24]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x18>
 8008b00:	f7ff fee6 	bl	80088d0 <__sinit>
 8008b04:	4b7c      	ldr	r3, [pc, #496]	; (8008cf8 <_vfiprintf_r+0x20c>)
 8008b06:	429c      	cmp	r4, r3
 8008b08:	d158      	bne.n	8008bbc <_vfiprintf_r+0xd0>
 8008b0a:	6874      	ldr	r4, [r6, #4]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	0718      	lsls	r0, r3, #28
 8008b10:	d55e      	bpl.n	8008bd0 <_vfiprintf_r+0xe4>
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05b      	beq.n	8008bd0 <_vfiprintf_r+0xe4>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b22:	2330      	movs	r3, #48	; 0x30
 8008b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b28:	9503      	str	r5, [sp, #12]
 8008b2a:	f04f 0b01 	mov.w	fp, #1
 8008b2e:	46b8      	mov	r8, r7
 8008b30:	4645      	mov	r5, r8
 8008b32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b36:	b10b      	cbz	r3, 8008b3c <_vfiprintf_r+0x50>
 8008b38:	2b25      	cmp	r3, #37	; 0x25
 8008b3a:	d154      	bne.n	8008be6 <_vfiprintf_r+0xfa>
 8008b3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008b40:	d00b      	beq.n	8008b5a <_vfiprintf_r+0x6e>
 8008b42:	4653      	mov	r3, sl
 8008b44:	463a      	mov	r2, r7
 8008b46:	4621      	mov	r1, r4
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff ffbc 	bl	8008ac6 <__sfputs_r>
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f000 80c2 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	4453      	add	r3, sl
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	f898 3000 	ldrb.w	r3, [r8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80ba 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b64:	2300      	movs	r3, #0
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b76:	931a      	str	r3, [sp, #104]	; 0x68
 8008b78:	46a8      	mov	r8, r5
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008b80:	485e      	ldr	r0, [pc, #376]	; (8008cfc <_vfiprintf_r+0x210>)
 8008b82:	f7f7 fbad 	bl	80002e0 <memchr>
 8008b86:	9b04      	ldr	r3, [sp, #16]
 8008b88:	bb78      	cbnz	r0, 8008bea <_vfiprintf_r+0xfe>
 8008b8a:	06d9      	lsls	r1, r3, #27
 8008b8c:	bf44      	itt	mi
 8008b8e:	2220      	movmi	r2, #32
 8008b90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b94:	071a      	lsls	r2, r3, #28
 8008b96:	bf44      	itt	mi
 8008b98:	222b      	movmi	r2, #43	; 0x2b
 8008b9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b9e:	782a      	ldrb	r2, [r5, #0]
 8008ba0:	2a2a      	cmp	r2, #42	; 0x2a
 8008ba2:	d02a      	beq.n	8008bfa <_vfiprintf_r+0x10e>
 8008ba4:	9a07      	ldr	r2, [sp, #28]
 8008ba6:	46a8      	mov	r8, r5
 8008ba8:	2000      	movs	r0, #0
 8008baa:	250a      	movs	r5, #10
 8008bac:	4641      	mov	r1, r8
 8008bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb2:	3b30      	subs	r3, #48	; 0x30
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d969      	bls.n	8008c8c <_vfiprintf_r+0x1a0>
 8008bb8:	b360      	cbz	r0, 8008c14 <_vfiprintf_r+0x128>
 8008bba:	e024      	b.n	8008c06 <_vfiprintf_r+0x11a>
 8008bbc:	4b50      	ldr	r3, [pc, #320]	; (8008d00 <_vfiprintf_r+0x214>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d101      	bne.n	8008bc6 <_vfiprintf_r+0xda>
 8008bc2:	68b4      	ldr	r4, [r6, #8]
 8008bc4:	e7a2      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008bc6:	4b4f      	ldr	r3, [pc, #316]	; (8008d04 <_vfiprintf_r+0x218>)
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	bf08      	it	eq
 8008bcc:	68f4      	ldreq	r4, [r6, #12]
 8008bce:	e79d      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 fae0 	bl	8009198 <__swsetup_r>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d09d      	beq.n	8008b18 <_vfiprintf_r+0x2c>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	b01d      	add	sp, #116	; 0x74
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	46a8      	mov	r8, r5
 8008be8:	e7a2      	b.n	8008b30 <_vfiprintf_r+0x44>
 8008bea:	4a44      	ldr	r2, [pc, #272]	; (8008cfc <_vfiprintf_r+0x210>)
 8008bec:	1a80      	subs	r0, r0, r2
 8008bee:	fa0b f000 	lsl.w	r0, fp, r0
 8008bf2:	4318      	orrs	r0, r3
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	4645      	mov	r5, r8
 8008bf8:	e7be      	b.n	8008b78 <_vfiprintf_r+0x8c>
 8008bfa:	9a03      	ldr	r2, [sp, #12]
 8008bfc:	1d11      	adds	r1, r2, #4
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	9103      	str	r1, [sp, #12]
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	db01      	blt.n	8008c0a <_vfiprintf_r+0x11e>
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	e004      	b.n	8008c14 <_vfiprintf_r+0x128>
 8008c0a:	4252      	negs	r2, r2
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	f898 3000 	ldrb.w	r3, [r8]
 8008c18:	2b2e      	cmp	r3, #46	; 0x2e
 8008c1a:	d10e      	bne.n	8008c3a <_vfiprintf_r+0x14e>
 8008c1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c20:	2b2a      	cmp	r3, #42	; 0x2a
 8008c22:	d138      	bne.n	8008c96 <_vfiprintf_r+0x1aa>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9203      	str	r2, [sp, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb8      	it	lt
 8008c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c34:	f108 0802 	add.w	r8, r8, #2
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	4d33      	ldr	r5, [pc, #204]	; (8008d08 <_vfiprintf_r+0x21c>)
 8008c3c:	f898 1000 	ldrb.w	r1, [r8]
 8008c40:	2203      	movs	r2, #3
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7f7 fb4c 	bl	80002e0 <memchr>
 8008c48:	b140      	cbz	r0, 8008c5c <_vfiprintf_r+0x170>
 8008c4a:	2340      	movs	r3, #64	; 0x40
 8008c4c:	1b40      	subs	r0, r0, r5
 8008c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c52:	9b04      	ldr	r3, [sp, #16]
 8008c54:	4303      	orrs	r3, r0
 8008c56:	f108 0801 	add.w	r8, r8, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	f898 1000 	ldrb.w	r1, [r8]
 8008c60:	482a      	ldr	r0, [pc, #168]	; (8008d0c <_vfiprintf_r+0x220>)
 8008c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c66:	2206      	movs	r2, #6
 8008c68:	f108 0701 	add.w	r7, r8, #1
 8008c6c:	f7f7 fb38 	bl	80002e0 <memchr>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d037      	beq.n	8008ce4 <_vfiprintf_r+0x1f8>
 8008c74:	4b26      	ldr	r3, [pc, #152]	; (8008d10 <_vfiprintf_r+0x224>)
 8008c76:	bb1b      	cbnz	r3, 8008cc0 <_vfiprintf_r+0x1d4>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	3307      	adds	r3, #7
 8008c7c:	f023 0307 	bic.w	r3, r3, #7
 8008c80:	3308      	adds	r3, #8
 8008c82:	9303      	str	r3, [sp, #12]
 8008c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c86:	444b      	add	r3, r9
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	e750      	b.n	8008b2e <_vfiprintf_r+0x42>
 8008c8c:	fb05 3202 	mla	r2, r5, r2, r3
 8008c90:	2001      	movs	r0, #1
 8008c92:	4688      	mov	r8, r1
 8008c94:	e78a      	b.n	8008bac <_vfiprintf_r+0xc0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f108 0801 	add.w	r8, r8, #1
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	250a      	movs	r5, #10
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca8:	3a30      	subs	r2, #48	; 0x30
 8008caa:	2a09      	cmp	r2, #9
 8008cac:	d903      	bls.n	8008cb6 <_vfiprintf_r+0x1ca>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0c3      	beq.n	8008c3a <_vfiprintf_r+0x14e>
 8008cb2:	9105      	str	r1, [sp, #20]
 8008cb4:	e7c1      	b.n	8008c3a <_vfiprintf_r+0x14e>
 8008cb6:	fb05 2101 	mla	r1, r5, r1, r2
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	e7f0      	b.n	8008ca2 <_vfiprintf_r+0x1b6>
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <_vfiprintf_r+0x228>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cd4:	4681      	mov	r9, r0
 8008cd6:	d1d5      	bne.n	8008c84 <_vfiprintf_r+0x198>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	065b      	lsls	r3, r3, #25
 8008cdc:	f53f af7e 	bmi.w	8008bdc <_vfiprintf_r+0xf0>
 8008ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce2:	e77d      	b.n	8008be0 <_vfiprintf_r+0xf4>
 8008ce4:	ab03      	add	r3, sp, #12
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4622      	mov	r2, r4
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <_vfiprintf_r+0x228>)
 8008cec:	a904      	add	r1, sp, #16
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f000 f888 	bl	8008e04 <_printf_i>
 8008cf4:	e7ec      	b.n	8008cd0 <_vfiprintf_r+0x1e4>
 8008cf6:	bf00      	nop
 8008cf8:	08009680 	.word	0x08009680
 8008cfc:	080096c0 	.word	0x080096c0
 8008d00:	080096a0 	.word	0x080096a0
 8008d04:	08009660 	.word	0x08009660
 8008d08:	080096c6 	.word	0x080096c6
 8008d0c:	080096ca 	.word	0x080096ca
 8008d10:	00000000 	.word	0x00000000
 8008d14:	08008ac7 	.word	0x08008ac7

08008d18 <_printf_common>:
 8008d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	4691      	mov	r9, r2
 8008d1e:	461f      	mov	r7, r3
 8008d20:	688a      	ldr	r2, [r1, #8]
 8008d22:	690b      	ldr	r3, [r1, #16]
 8008d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	bfb8      	it	lt
 8008d2c:	4613      	movlt	r3, r2
 8008d2e:	f8c9 3000 	str.w	r3, [r9]
 8008d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d36:	4606      	mov	r6, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	b112      	cbz	r2, 8008d42 <_printf_common+0x2a>
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f8c9 3000 	str.w	r3, [r9]
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	0699      	lsls	r1, r3, #26
 8008d46:	bf42      	ittt	mi
 8008d48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d4c:	3302      	addmi	r3, #2
 8008d4e:	f8c9 3000 	strmi.w	r3, [r9]
 8008d52:	6825      	ldr	r5, [r4, #0]
 8008d54:	f015 0506 	ands.w	r5, r5, #6
 8008d58:	d107      	bne.n	8008d6a <_printf_common+0x52>
 8008d5a:	f104 0a19 	add.w	sl, r4, #25
 8008d5e:	68e3      	ldr	r3, [r4, #12]
 8008d60:	f8d9 2000 	ldr.w	r2, [r9]
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	42ab      	cmp	r3, r5
 8008d68:	dc28      	bgt.n	8008dbc <_printf_common+0xa4>
 8008d6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	3300      	adds	r3, #0
 8008d72:	bf18      	it	ne
 8008d74:	2301      	movne	r3, #1
 8008d76:	0692      	lsls	r2, r2, #26
 8008d78:	d42d      	bmi.n	8008dd6 <_printf_common+0xbe>
 8008d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4630      	mov	r0, r6
 8008d82:	47c0      	blx	r8
 8008d84:	3001      	adds	r0, #1
 8008d86:	d020      	beq.n	8008dca <_printf_common+0xb2>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	68e5      	ldr	r5, [r4, #12]
 8008d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008d90:	f003 0306 	and.w	r3, r3, #6
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	bf08      	it	eq
 8008d98:	1aad      	subeq	r5, r5, r2
 8008d9a:	68a3      	ldr	r3, [r4, #8]
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	bf0c      	ite	eq
 8008da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008da4:	2500      	movne	r5, #0
 8008da6:	4293      	cmp	r3, r2
 8008da8:	bfc4      	itt	gt
 8008daa:	1a9b      	subgt	r3, r3, r2
 8008dac:	18ed      	addgt	r5, r5, r3
 8008dae:	f04f 0900 	mov.w	r9, #0
 8008db2:	341a      	adds	r4, #26
 8008db4:	454d      	cmp	r5, r9
 8008db6:	d11a      	bne.n	8008dee <_printf_common+0xd6>
 8008db8:	2000      	movs	r0, #0
 8008dba:	e008      	b.n	8008dce <_printf_common+0xb6>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d103      	bne.n	8008dd2 <_printf_common+0xba>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd2:	3501      	adds	r5, #1
 8008dd4:	e7c3      	b.n	8008d5e <_printf_common+0x46>
 8008dd6:	18e1      	adds	r1, r4, r3
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	2030      	movs	r0, #48	; 0x30
 8008ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008de0:	4422      	add	r2, r4
 8008de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dea:	3302      	adds	r3, #2
 8008dec:	e7c5      	b.n	8008d7a <_printf_common+0x62>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4622      	mov	r2, r4
 8008df2:	4639      	mov	r1, r7
 8008df4:	4630      	mov	r0, r6
 8008df6:	47c0      	blx	r8
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0e6      	beq.n	8008dca <_printf_common+0xb2>
 8008dfc:	f109 0901 	add.w	r9, r9, #1
 8008e00:	e7d8      	b.n	8008db4 <_printf_common+0x9c>
	...

08008e04 <_printf_i>:
 8008e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	7e09      	ldrb	r1, [r1, #24]
 8008e10:	b085      	sub	sp, #20
 8008e12:	296e      	cmp	r1, #110	; 0x6e
 8008e14:	4617      	mov	r7, r2
 8008e16:	4606      	mov	r6, r0
 8008e18:	4698      	mov	r8, r3
 8008e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e1c:	f000 80b3 	beq.w	8008f86 <_printf_i+0x182>
 8008e20:	d822      	bhi.n	8008e68 <_printf_i+0x64>
 8008e22:	2963      	cmp	r1, #99	; 0x63
 8008e24:	d036      	beq.n	8008e94 <_printf_i+0x90>
 8008e26:	d80a      	bhi.n	8008e3e <_printf_i+0x3a>
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	f000 80b9 	beq.w	8008fa0 <_printf_i+0x19c>
 8008e2e:	2958      	cmp	r1, #88	; 0x58
 8008e30:	f000 8083 	beq.w	8008f3a <_printf_i+0x136>
 8008e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e3c:	e032      	b.n	8008ea4 <_printf_i+0xa0>
 8008e3e:	2964      	cmp	r1, #100	; 0x64
 8008e40:	d001      	beq.n	8008e46 <_printf_i+0x42>
 8008e42:	2969      	cmp	r1, #105	; 0x69
 8008e44:	d1f6      	bne.n	8008e34 <_printf_i+0x30>
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	6813      	ldr	r3, [r2, #0]
 8008e4a:	0605      	lsls	r5, r0, #24
 8008e4c:	f103 0104 	add.w	r1, r3, #4
 8008e50:	d52a      	bpl.n	8008ea8 <_printf_i+0xa4>
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da03      	bge.n	8008e62 <_printf_i+0x5e>
 8008e5a:	222d      	movs	r2, #45	; 0x2d
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e62:	486f      	ldr	r0, [pc, #444]	; (8009020 <_printf_i+0x21c>)
 8008e64:	220a      	movs	r2, #10
 8008e66:	e039      	b.n	8008edc <_printf_i+0xd8>
 8008e68:	2973      	cmp	r1, #115	; 0x73
 8008e6a:	f000 809d 	beq.w	8008fa8 <_printf_i+0x1a4>
 8008e6e:	d808      	bhi.n	8008e82 <_printf_i+0x7e>
 8008e70:	296f      	cmp	r1, #111	; 0x6f
 8008e72:	d020      	beq.n	8008eb6 <_printf_i+0xb2>
 8008e74:	2970      	cmp	r1, #112	; 0x70
 8008e76:	d1dd      	bne.n	8008e34 <_printf_i+0x30>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	f043 0320 	orr.w	r3, r3, #32
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	e003      	b.n	8008e8a <_printf_i+0x86>
 8008e82:	2975      	cmp	r1, #117	; 0x75
 8008e84:	d017      	beq.n	8008eb6 <_printf_i+0xb2>
 8008e86:	2978      	cmp	r1, #120	; 0x78
 8008e88:	d1d4      	bne.n	8008e34 <_printf_i+0x30>
 8008e8a:	2378      	movs	r3, #120	; 0x78
 8008e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e90:	4864      	ldr	r0, [pc, #400]	; (8009024 <_printf_i+0x220>)
 8008e92:	e055      	b.n	8008f40 <_printf_i+0x13c>
 8008e94:	6813      	ldr	r3, [r2, #0]
 8008e96:	1d19      	adds	r1, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6011      	str	r1, [r2, #0]
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e08c      	b.n	8008fc2 <_printf_i+0x1be>
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6011      	str	r1, [r2, #0]
 8008eac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008eb0:	bf18      	it	ne
 8008eb2:	b21b      	sxthne	r3, r3
 8008eb4:	e7cf      	b.n	8008e56 <_printf_i+0x52>
 8008eb6:	6813      	ldr	r3, [r2, #0]
 8008eb8:	6825      	ldr	r5, [r4, #0]
 8008eba:	1d18      	adds	r0, r3, #4
 8008ebc:	6010      	str	r0, [r2, #0]
 8008ebe:	0628      	lsls	r0, r5, #24
 8008ec0:	d501      	bpl.n	8008ec6 <_printf_i+0xc2>
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	e002      	b.n	8008ecc <_printf_i+0xc8>
 8008ec6:	0668      	lsls	r0, r5, #25
 8008ec8:	d5fb      	bpl.n	8008ec2 <_printf_i+0xbe>
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	4854      	ldr	r0, [pc, #336]	; (8009020 <_printf_i+0x21c>)
 8008ece:	296f      	cmp	r1, #111	; 0x6f
 8008ed0:	bf14      	ite	ne
 8008ed2:	220a      	movne	r2, #10
 8008ed4:	2208      	moveq	r2, #8
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008edc:	6865      	ldr	r5, [r4, #4]
 8008ede:	60a5      	str	r5, [r4, #8]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	f2c0 8095 	blt.w	8009010 <_printf_i+0x20c>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	f021 0104 	bic.w	r1, r1, #4
 8008eec:	6021      	str	r1, [r4, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d13d      	bne.n	8008f6e <_printf_i+0x16a>
 8008ef2:	2d00      	cmp	r5, #0
 8008ef4:	f040 808e 	bne.w	8009014 <_printf_i+0x210>
 8008ef8:	4665      	mov	r5, ip
 8008efa:	2a08      	cmp	r2, #8
 8008efc:	d10b      	bne.n	8008f16 <_printf_i+0x112>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	07db      	lsls	r3, r3, #31
 8008f02:	d508      	bpl.n	8008f16 <_printf_i+0x112>
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	bfde      	ittt	le
 8008f0c:	2330      	movle	r3, #48	; 0x30
 8008f0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f16:	ebac 0305 	sub.w	r3, ip, r5
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	f8cd 8000 	str.w	r8, [sp]
 8008f20:	463b      	mov	r3, r7
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4630      	mov	r0, r6
 8008f28:	f7ff fef6 	bl	8008d18 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14d      	bne.n	8008fcc <_printf_i+0x1c8>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b005      	add	sp, #20
 8008f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	4839      	ldr	r0, [pc, #228]	; (8009020 <_printf_i+0x21c>)
 8008f3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f40:	6813      	ldr	r3, [r2, #0]
 8008f42:	6821      	ldr	r1, [r4, #0]
 8008f44:	1d1d      	adds	r5, r3, #4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6015      	str	r5, [r2, #0]
 8008f4a:	060a      	lsls	r2, r1, #24
 8008f4c:	d50b      	bpl.n	8008f66 <_printf_i+0x162>
 8008f4e:	07ca      	lsls	r2, r1, #31
 8008f50:	bf44      	itt	mi
 8008f52:	f041 0120 	orrmi.w	r1, r1, #32
 8008f56:	6021      	strmi	r1, [r4, #0]
 8008f58:	b91b      	cbnz	r3, 8008f62 <_printf_i+0x15e>
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	f022 0220 	bic.w	r2, r2, #32
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	2210      	movs	r2, #16
 8008f64:	e7b7      	b.n	8008ed6 <_printf_i+0xd2>
 8008f66:	064d      	lsls	r5, r1, #25
 8008f68:	bf48      	it	mi
 8008f6a:	b29b      	uxthmi	r3, r3
 8008f6c:	e7ef      	b.n	8008f4e <_printf_i+0x14a>
 8008f6e:	4665      	mov	r5, ip
 8008f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f74:	fb02 3311 	mls	r3, r2, r1, r3
 8008f78:	5cc3      	ldrb	r3, [r0, r3]
 8008f7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f7e:	460b      	mov	r3, r1
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d1f5      	bne.n	8008f70 <_printf_i+0x16c>
 8008f84:	e7b9      	b.n	8008efa <_printf_i+0xf6>
 8008f86:	6813      	ldr	r3, [r2, #0]
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	6961      	ldr	r1, [r4, #20]
 8008f8c:	1d18      	adds	r0, r3, #4
 8008f8e:	6010      	str	r0, [r2, #0]
 8008f90:	0628      	lsls	r0, r5, #24
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	d501      	bpl.n	8008f9a <_printf_i+0x196>
 8008f96:	6019      	str	r1, [r3, #0]
 8008f98:	e002      	b.n	8008fa0 <_printf_i+0x19c>
 8008f9a:	066a      	lsls	r2, r5, #25
 8008f9c:	d5fb      	bpl.n	8008f96 <_printf_i+0x192>
 8008f9e:	8019      	strh	r1, [r3, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	4665      	mov	r5, ip
 8008fa6:	e7b9      	b.n	8008f1c <_printf_i+0x118>
 8008fa8:	6813      	ldr	r3, [r2, #0]
 8008faa:	1d19      	adds	r1, r3, #4
 8008fac:	6011      	str	r1, [r2, #0]
 8008fae:	681d      	ldr	r5, [r3, #0]
 8008fb0:	6862      	ldr	r2, [r4, #4]
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f7f7 f993 	bl	80002e0 <memchr>
 8008fba:	b108      	cbz	r0, 8008fc0 <_printf_i+0x1bc>
 8008fbc:	1b40      	subs	r0, r0, r5
 8008fbe:	6060      	str	r0, [r4, #4]
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fca:	e7a7      	b.n	8008f1c <_printf_i+0x118>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	47c0      	blx	r8
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d0aa      	beq.n	8008f30 <_printf_i+0x12c>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	079b      	lsls	r3, r3, #30
 8008fde:	d413      	bmi.n	8009008 <_printf_i+0x204>
 8008fe0:	68e0      	ldr	r0, [r4, #12]
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	bfb8      	it	lt
 8008fe8:	4618      	movlt	r0, r3
 8008fea:	e7a3      	b.n	8008f34 <_printf_i+0x130>
 8008fec:	2301      	movs	r3, #1
 8008fee:	464a      	mov	r2, r9
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	47c0      	blx	r8
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d09a      	beq.n	8008f30 <_printf_i+0x12c>
 8008ffa:	3501      	adds	r5, #1
 8008ffc:	68e3      	ldr	r3, [r4, #12]
 8008ffe:	9a03      	ldr	r2, [sp, #12]
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	42ab      	cmp	r3, r5
 8009004:	dcf2      	bgt.n	8008fec <_printf_i+0x1e8>
 8009006:	e7eb      	b.n	8008fe0 <_printf_i+0x1dc>
 8009008:	2500      	movs	r5, #0
 800900a:	f104 0919 	add.w	r9, r4, #25
 800900e:	e7f5      	b.n	8008ffc <_printf_i+0x1f8>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1ac      	bne.n	8008f6e <_printf_i+0x16a>
 8009014:	7803      	ldrb	r3, [r0, #0]
 8009016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800901a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800901e:	e76c      	b.n	8008efa <_printf_i+0xf6>
 8009020:	080096d1 	.word	0x080096d1
 8009024:	080096e2 	.word	0x080096e2

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4c06      	ldr	r4, [pc, #24]	; (8009044 <_sbrk_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4605      	mov	r5, r0
 8009030:	4608      	mov	r0, r1
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	f7ff fa62 	bl	80084fc <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	240001e8 	.word	0x240001e8

08009048 <__sread>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 fa96 	bl	8009580 <_read_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	bfab      	itete	ge
 8009058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800905a:	89a3      	ldrhlt	r3, [r4, #12]
 800905c:	181b      	addge	r3, r3, r0
 800905e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009062:	bfac      	ite	ge
 8009064:	6563      	strge	r3, [r4, #84]	; 0x54
 8009066:	81a3      	strhlt	r3, [r4, #12]
 8009068:	bd10      	pop	{r4, pc}

0800906a <__swrite>:
 800906a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	461f      	mov	r7, r3
 8009070:	898b      	ldrh	r3, [r1, #12]
 8009072:	05db      	lsls	r3, r3, #23
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	4616      	mov	r6, r2
 800907a:	d505      	bpl.n	8009088 <__swrite+0x1e>
 800907c:	2302      	movs	r3, #2
 800907e:	2200      	movs	r2, #0
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	f000 f9b6 	bl	80093f4 <_lseek_r>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	4628      	mov	r0, r5
 800909a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	f000 b869 	b.w	8009174 <_write_r>

080090a2 <__sseek>:
 80090a2:	b510      	push	{r4, lr}
 80090a4:	460c      	mov	r4, r1
 80090a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090aa:	f000 f9a3 	bl	80093f4 <_lseek_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	bf15      	itete	ne
 80090b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090be:	81a3      	strheq	r3, [r4, #12]
 80090c0:	bf18      	it	ne
 80090c2:	81a3      	strhne	r3, [r4, #12]
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <__sclose>:
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 b8d3 	b.w	8009274 <_close_r>
	...

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f7ff fbf7 	bl	80088d0 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12a      	bne.n	800913e <__swbuf_r+0x6e>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52e      	bpl.n	8009152 <__swbuf_r+0x82>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b363      	cbz	r3, 8009152 <__swbuf_r+0x82>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f948 	bl	80093a0 <_fflush_r>
 8009110:	bb28      	cbnz	r0, 800915e <__swbuf_r+0x8e>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d519      	bpl.n	8009162 <__swbuf_r+0x92>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d117      	bne.n	8009162 <__swbuf_r+0x92>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f933 	bl	80093a0 <_fflush_r>
 800913a:	b190      	cbz	r0, 8009162 <__swbuf_r+0x92>
 800913c:	e00f      	b.n	800915e <__swbuf_r+0x8e>
 800913e:	4b0b      	ldr	r3, [pc, #44]	; (800916c <__swbuf_r+0x9c>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d101      	bne.n	8009148 <__swbuf_r+0x78>
 8009144:	68ac      	ldr	r4, [r5, #8]
 8009146:	e7d0      	b.n	80090ea <__swbuf_r+0x1a>
 8009148:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914a:	429c      	cmp	r4, r3
 800914c:	bf08      	it	eq
 800914e:	68ec      	ldreq	r4, [r5, #12]
 8009150:	e7cb      	b.n	80090ea <__swbuf_r+0x1a>
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f81f 	bl	8009198 <__swsetup_r>
 800915a:	2800      	cmp	r0, #0
 800915c:	d0cc      	beq.n	80090f8 <__swbuf_r+0x28>
 800915e:	f04f 37ff 	mov.w	r7, #4294967295
 8009162:	4638      	mov	r0, r7
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009166:	bf00      	nop
 8009168:	08009680 	.word	0x08009680
 800916c:	080096a0 	.word	0x080096a0
 8009170:	08009660 	.word	0x08009660

08009174 <_write_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4c07      	ldr	r4, [pc, #28]	; (8009194 <_write_r+0x20>)
 8009178:	4605      	mov	r5, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7ff f969 	bl	800845a <_write>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_write_r+0x1e>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	b103      	cbz	r3, 8009192 <_write_r+0x1e>
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	240001e8 	.word	0x240001e8

08009198 <__swsetup_r>:
 8009198:	4b32      	ldr	r3, [pc, #200]	; (8009264 <__swsetup_r+0xcc>)
 800919a:	b570      	push	{r4, r5, r6, lr}
 800919c:	681d      	ldr	r5, [r3, #0]
 800919e:	4606      	mov	r6, r0
 80091a0:	460c      	mov	r4, r1
 80091a2:	b125      	cbz	r5, 80091ae <__swsetup_r+0x16>
 80091a4:	69ab      	ldr	r3, [r5, #24]
 80091a6:	b913      	cbnz	r3, 80091ae <__swsetup_r+0x16>
 80091a8:	4628      	mov	r0, r5
 80091aa:	f7ff fb91 	bl	80088d0 <__sinit>
 80091ae:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <__swsetup_r+0xd0>)
 80091b0:	429c      	cmp	r4, r3
 80091b2:	d10f      	bne.n	80091d4 <__swsetup_r+0x3c>
 80091b4:	686c      	ldr	r4, [r5, #4]
 80091b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	0715      	lsls	r5, r2, #28
 80091be:	d42c      	bmi.n	800921a <__swsetup_r+0x82>
 80091c0:	06d0      	lsls	r0, r2, #27
 80091c2:	d411      	bmi.n	80091e8 <__swsetup_r+0x50>
 80091c4:	2209      	movs	r2, #9
 80091c6:	6032      	str	r2, [r6, #0]
 80091c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	e03e      	b.n	8009252 <__swsetup_r+0xba>
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <__swsetup_r+0xd4>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <__swsetup_r+0x46>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7eb      	b.n	80091b6 <__swsetup_r+0x1e>
 80091de:	4b24      	ldr	r3, [pc, #144]	; (8009270 <__swsetup_r+0xd8>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7e6      	b.n	80091b6 <__swsetup_r+0x1e>
 80091e8:	0751      	lsls	r1, r2, #29
 80091ea:	d512      	bpl.n	8009212 <__swsetup_r+0x7a>
 80091ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ee:	b141      	cbz	r1, 8009202 <__swsetup_r+0x6a>
 80091f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091f4:	4299      	cmp	r1, r3
 80091f6:	d002      	beq.n	80091fe <__swsetup_r+0x66>
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f973 	bl	80094e4 <_free_r>
 80091fe:	2300      	movs	r3, #0
 8009200:	6363      	str	r3, [r4, #52]	; 0x34
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	2300      	movs	r3, #0
 800920c:	6063      	str	r3, [r4, #4]
 800920e:	6923      	ldr	r3, [r4, #16]
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	f043 0308 	orr.w	r3, r3, #8
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	b94b      	cbnz	r3, 8009232 <__swsetup_r+0x9a>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009228:	d003      	beq.n	8009232 <__swsetup_r+0x9a>
 800922a:	4621      	mov	r1, r4
 800922c:	4630      	mov	r0, r6
 800922e:	f000 f917 	bl	8009460 <__smakebuf_r>
 8009232:	89a2      	ldrh	r2, [r4, #12]
 8009234:	f012 0301 	ands.w	r3, r2, #1
 8009238:	d00c      	beq.n	8009254 <__swsetup_r+0xbc>
 800923a:	2300      	movs	r3, #0
 800923c:	60a3      	str	r3, [r4, #8]
 800923e:	6963      	ldr	r3, [r4, #20]
 8009240:	425b      	negs	r3, r3
 8009242:	61a3      	str	r3, [r4, #24]
 8009244:	6923      	ldr	r3, [r4, #16]
 8009246:	b953      	cbnz	r3, 800925e <__swsetup_r+0xc6>
 8009248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009250:	d1ba      	bne.n	80091c8 <__swsetup_r+0x30>
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	0792      	lsls	r2, r2, #30
 8009256:	bf58      	it	pl
 8009258:	6963      	ldrpl	r3, [r4, #20]
 800925a:	60a3      	str	r3, [r4, #8]
 800925c:	e7f2      	b.n	8009244 <__swsetup_r+0xac>
 800925e:	2000      	movs	r0, #0
 8009260:	e7f7      	b.n	8009252 <__swsetup_r+0xba>
 8009262:	bf00      	nop
 8009264:	24000010 	.word	0x24000010
 8009268:	08009680 	.word	0x08009680
 800926c:	080096a0 	.word	0x080096a0
 8009270:	08009660 	.word	0x08009660

08009274 <_close_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4c06      	ldr	r4, [pc, #24]	; (8009290 <_close_r+0x1c>)
 8009278:	2300      	movs	r3, #0
 800927a:	4605      	mov	r5, r0
 800927c:	4608      	mov	r0, r1
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	f7ff f907 	bl	8008492 <_close>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_close_r+0x1a>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	b103      	cbz	r3, 800928e <_close_r+0x1a>
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	240001e8 	.word	0x240001e8

08009294 <__sflush_r>:
 8009294:	898a      	ldrh	r2, [r1, #12]
 8009296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	0710      	lsls	r0, r2, #28
 800929e:	460c      	mov	r4, r1
 80092a0:	d458      	bmi.n	8009354 <__sflush_r+0xc0>
 80092a2:	684b      	ldr	r3, [r1, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc05      	bgt.n	80092b4 <__sflush_r+0x20>
 80092a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dc02      	bgt.n	80092b4 <__sflush_r+0x20>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d0f9      	beq.n	80092ae <__sflush_r+0x1a>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	6a21      	ldr	r1, [r4, #32]
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	d032      	beq.n	800932e <__sflush_r+0x9a>
 80092c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	075a      	lsls	r2, r3, #29
 80092ce:	d505      	bpl.n	80092dc <__sflush_r+0x48>
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	1ac0      	subs	r0, r0, r3
 80092d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d6:	b10b      	cbz	r3, 80092dc <__sflush_r+0x48>
 80092d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092da:	1ac0      	subs	r0, r0, r3
 80092dc:	2300      	movs	r3, #0
 80092de:	4602      	mov	r2, r0
 80092e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e2:	6a21      	ldr	r1, [r4, #32]
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	d106      	bne.n	80092fc <__sflush_r+0x68>
 80092ee:	6829      	ldr	r1, [r5, #0]
 80092f0:	291d      	cmp	r1, #29
 80092f2:	d848      	bhi.n	8009386 <__sflush_r+0xf2>
 80092f4:	4a29      	ldr	r2, [pc, #164]	; (800939c <__sflush_r+0x108>)
 80092f6:	40ca      	lsrs	r2, r1
 80092f8:	07d6      	lsls	r6, r2, #31
 80092fa:	d544      	bpl.n	8009386 <__sflush_r+0xf2>
 80092fc:	2200      	movs	r2, #0
 80092fe:	6062      	str	r2, [r4, #4]
 8009300:	04d9      	lsls	r1, r3, #19
 8009302:	6922      	ldr	r2, [r4, #16]
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	d504      	bpl.n	8009312 <__sflush_r+0x7e>
 8009308:	1c42      	adds	r2, r0, #1
 800930a:	d101      	bne.n	8009310 <__sflush_r+0x7c>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b903      	cbnz	r3, 8009312 <__sflush_r+0x7e>
 8009310:	6560      	str	r0, [r4, #84]	; 0x54
 8009312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009314:	602f      	str	r7, [r5, #0]
 8009316:	2900      	cmp	r1, #0
 8009318:	d0c9      	beq.n	80092ae <__sflush_r+0x1a>
 800931a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800931e:	4299      	cmp	r1, r3
 8009320:	d002      	beq.n	8009328 <__sflush_r+0x94>
 8009322:	4628      	mov	r0, r5
 8009324:	f000 f8de 	bl	80094e4 <_free_r>
 8009328:	2000      	movs	r0, #0
 800932a:	6360      	str	r0, [r4, #52]	; 0x34
 800932c:	e7c0      	b.n	80092b0 <__sflush_r+0x1c>
 800932e:	2301      	movs	r3, #1
 8009330:	4628      	mov	r0, r5
 8009332:	47b0      	blx	r6
 8009334:	1c41      	adds	r1, r0, #1
 8009336:	d1c8      	bne.n	80092ca <__sflush_r+0x36>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0c5      	beq.n	80092ca <__sflush_r+0x36>
 800933e:	2b1d      	cmp	r3, #29
 8009340:	d001      	beq.n	8009346 <__sflush_r+0xb2>
 8009342:	2b16      	cmp	r3, #22
 8009344:	d101      	bne.n	800934a <__sflush_r+0xb6>
 8009346:	602f      	str	r7, [r5, #0]
 8009348:	e7b1      	b.n	80092ae <__sflush_r+0x1a>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	e7ad      	b.n	80092b0 <__sflush_r+0x1c>
 8009354:	690f      	ldr	r7, [r1, #16]
 8009356:	2f00      	cmp	r7, #0
 8009358:	d0a9      	beq.n	80092ae <__sflush_r+0x1a>
 800935a:	0793      	lsls	r3, r2, #30
 800935c:	680e      	ldr	r6, [r1, #0]
 800935e:	bf08      	it	eq
 8009360:	694b      	ldreq	r3, [r1, #20]
 8009362:	600f      	str	r7, [r1, #0]
 8009364:	bf18      	it	ne
 8009366:	2300      	movne	r3, #0
 8009368:	eba6 0807 	sub.w	r8, r6, r7
 800936c:	608b      	str	r3, [r1, #8]
 800936e:	f1b8 0f00 	cmp.w	r8, #0
 8009372:	dd9c      	ble.n	80092ae <__sflush_r+0x1a>
 8009374:	4643      	mov	r3, r8
 8009376:	463a      	mov	r2, r7
 8009378:	6a21      	ldr	r1, [r4, #32]
 800937a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800937c:	4628      	mov	r0, r5
 800937e:	47b0      	blx	r6
 8009380:	2800      	cmp	r0, #0
 8009382:	dc06      	bgt.n	8009392 <__sflush_r+0xfe>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e78e      	b.n	80092b0 <__sflush_r+0x1c>
 8009392:	4407      	add	r7, r0
 8009394:	eba8 0800 	sub.w	r8, r8, r0
 8009398:	e7e9      	b.n	800936e <__sflush_r+0xda>
 800939a:	bf00      	nop
 800939c:	20400001 	.word	0x20400001

080093a0 <_fflush_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b1db      	cbz	r3, 80093e2 <_fflush_r+0x42>
 80093aa:	b118      	cbz	r0, 80093b4 <_fflush_r+0x14>
 80093ac:	6983      	ldr	r3, [r0, #24]
 80093ae:	b90b      	cbnz	r3, 80093b4 <_fflush_r+0x14>
 80093b0:	f7ff fa8e 	bl	80088d0 <__sinit>
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <_fflush_r+0x48>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d109      	bne.n	80093ce <_fflush_r+0x2e>
 80093ba:	686c      	ldr	r4, [r5, #4]
 80093bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c0:	b17b      	cbz	r3, 80093e2 <_fflush_r+0x42>
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ca:	f7ff bf63 	b.w	8009294 <__sflush_r>
 80093ce:	4b07      	ldr	r3, [pc, #28]	; (80093ec <_fflush_r+0x4c>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d101      	bne.n	80093d8 <_fflush_r+0x38>
 80093d4:	68ac      	ldr	r4, [r5, #8]
 80093d6:	e7f1      	b.n	80093bc <_fflush_r+0x1c>
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <_fflush_r+0x50>)
 80093da:	429c      	cmp	r4, r3
 80093dc:	bf08      	it	eq
 80093de:	68ec      	ldreq	r4, [r5, #12]
 80093e0:	e7ec      	b.n	80093bc <_fflush_r+0x1c>
 80093e2:	2000      	movs	r0, #0
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	08009680 	.word	0x08009680
 80093ec:	080096a0 	.word	0x080096a0
 80093f0:	08009660 	.word	0x08009660

080093f4 <_lseek_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4c07      	ldr	r4, [pc, #28]	; (8009414 <_lseek_r+0x20>)
 80093f8:	4605      	mov	r5, r0
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	6022      	str	r2, [r4, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f7ff f86c 	bl	80084e0 <_lseek>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_lseek_r+0x1e>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	b103      	cbz	r3, 8009412 <_lseek_r+0x1e>
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	240001e8 	.word	0x240001e8

08009418 <__swhatbuf_r>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	460e      	mov	r6, r1
 800941c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009420:	2900      	cmp	r1, #0
 8009422:	b096      	sub	sp, #88	; 0x58
 8009424:	4614      	mov	r4, r2
 8009426:	461d      	mov	r5, r3
 8009428:	da07      	bge.n	800943a <__swhatbuf_r+0x22>
 800942a:	2300      	movs	r3, #0
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	89b3      	ldrh	r3, [r6, #12]
 8009430:	061a      	lsls	r2, r3, #24
 8009432:	d410      	bmi.n	8009456 <__swhatbuf_r+0x3e>
 8009434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009438:	e00e      	b.n	8009458 <__swhatbuf_r+0x40>
 800943a:	466a      	mov	r2, sp
 800943c:	f000 f8b2 	bl	80095a4 <_fstat_r>
 8009440:	2800      	cmp	r0, #0
 8009442:	dbf2      	blt.n	800942a <__swhatbuf_r+0x12>
 8009444:	9a01      	ldr	r2, [sp, #4]
 8009446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800944a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800944e:	425a      	negs	r2, r3
 8009450:	415a      	adcs	r2, r3
 8009452:	602a      	str	r2, [r5, #0]
 8009454:	e7ee      	b.n	8009434 <__swhatbuf_r+0x1c>
 8009456:	2340      	movs	r3, #64	; 0x40
 8009458:	2000      	movs	r0, #0
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	b016      	add	sp, #88	; 0x58
 800945e:	bd70      	pop	{r4, r5, r6, pc}

08009460 <__smakebuf_r>:
 8009460:	898b      	ldrh	r3, [r1, #12]
 8009462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009464:	079d      	lsls	r5, r3, #30
 8009466:	4606      	mov	r6, r0
 8009468:	460c      	mov	r4, r1
 800946a:	d507      	bpl.n	800947c <__smakebuf_r+0x1c>
 800946c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	2301      	movs	r3, #1
 8009476:	6163      	str	r3, [r4, #20]
 8009478:	b002      	add	sp, #8
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	ab01      	add	r3, sp, #4
 800947e:	466a      	mov	r2, sp
 8009480:	f7ff ffca 	bl	8009418 <__swhatbuf_r>
 8009484:	9900      	ldr	r1, [sp, #0]
 8009486:	4605      	mov	r5, r0
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff faab 	bl	80089e4 <_malloc_r>
 800948e:	b948      	cbnz	r0, 80094a4 <__smakebuf_r+0x44>
 8009490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009494:	059a      	lsls	r2, r3, #22
 8009496:	d4ef      	bmi.n	8009478 <__smakebuf_r+0x18>
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	f043 0302 	orr.w	r3, r3, #2
 80094a0:	81a3      	strh	r3, [r4, #12]
 80094a2:	e7e3      	b.n	800946c <__smakebuf_r+0xc>
 80094a4:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <__smakebuf_r+0x7c>)
 80094a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	6020      	str	r0, [r4, #0]
 80094ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	9b00      	ldr	r3, [sp, #0]
 80094b4:	6163      	str	r3, [r4, #20]
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	6120      	str	r0, [r4, #16]
 80094ba:	b15b      	cbz	r3, 80094d4 <__smakebuf_r+0x74>
 80094bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 f881 	bl	80095c8 <_isatty_r>
 80094c6:	b128      	cbz	r0, 80094d4 <__smakebuf_r+0x74>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	431d      	orrs	r5, r3
 80094d8:	81a5      	strh	r5, [r4, #12]
 80094da:	e7cd      	b.n	8009478 <__smakebuf_r+0x18>
 80094dc:	08008899 	.word	0x08008899

080094e0 <__malloc_lock>:
 80094e0:	4770      	bx	lr

080094e2 <__malloc_unlock>:
 80094e2:	4770      	bx	lr

080094e4 <_free_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4605      	mov	r5, r0
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d045      	beq.n	8009578 <_free_r+0x94>
 80094ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f0:	1f0c      	subs	r4, r1, #4
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bfb8      	it	lt
 80094f6:	18e4      	addlt	r4, r4, r3
 80094f8:	f7ff fff2 	bl	80094e0 <__malloc_lock>
 80094fc:	4a1f      	ldr	r2, [pc, #124]	; (800957c <_free_r+0x98>)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	4610      	mov	r0, r2
 8009502:	b933      	cbnz	r3, 8009512 <_free_r+0x2e>
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	6014      	str	r4, [r2, #0]
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950e:	f7ff bfe8 	b.w	80094e2 <__malloc_unlock>
 8009512:	42a3      	cmp	r3, r4
 8009514:	d90c      	bls.n	8009530 <_free_r+0x4c>
 8009516:	6821      	ldr	r1, [r4, #0]
 8009518:	1862      	adds	r2, r4, r1
 800951a:	4293      	cmp	r3, r2
 800951c:	bf04      	itt	eq
 800951e:	681a      	ldreq	r2, [r3, #0]
 8009520:	685b      	ldreq	r3, [r3, #4]
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	bf04      	itt	eq
 8009526:	1852      	addeq	r2, r2, r1
 8009528:	6022      	streq	r2, [r4, #0]
 800952a:	6004      	str	r4, [r0, #0]
 800952c:	e7ec      	b.n	8009508 <_free_r+0x24>
 800952e:	4613      	mov	r3, r2
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	b10a      	cbz	r2, 8009538 <_free_r+0x54>
 8009534:	42a2      	cmp	r2, r4
 8009536:	d9fa      	bls.n	800952e <_free_r+0x4a>
 8009538:	6819      	ldr	r1, [r3, #0]
 800953a:	1858      	adds	r0, r3, r1
 800953c:	42a0      	cmp	r0, r4
 800953e:	d10b      	bne.n	8009558 <_free_r+0x74>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4401      	add	r1, r0
 8009544:	1858      	adds	r0, r3, r1
 8009546:	4282      	cmp	r2, r0
 8009548:	6019      	str	r1, [r3, #0]
 800954a:	d1dd      	bne.n	8009508 <_free_r+0x24>
 800954c:	6810      	ldr	r0, [r2, #0]
 800954e:	6852      	ldr	r2, [r2, #4]
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	4401      	add	r1, r0
 8009554:	6019      	str	r1, [r3, #0]
 8009556:	e7d7      	b.n	8009508 <_free_r+0x24>
 8009558:	d902      	bls.n	8009560 <_free_r+0x7c>
 800955a:	230c      	movs	r3, #12
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	e7d3      	b.n	8009508 <_free_r+0x24>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428a      	cmp	r2, r1
 8009566:	bf04      	itt	eq
 8009568:	6811      	ldreq	r1, [r2, #0]
 800956a:	6852      	ldreq	r2, [r2, #4]
 800956c:	6062      	str	r2, [r4, #4]
 800956e:	bf04      	itt	eq
 8009570:	1809      	addeq	r1, r1, r0
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	605c      	str	r4, [r3, #4]
 8009576:	e7c7      	b.n	8009508 <_free_r+0x24>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	24000098 	.word	0x24000098

08009580 <_read_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4c07      	ldr	r4, [pc, #28]	; (80095a0 <_read_r+0x20>)
 8009584:	4605      	mov	r5, r0
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
 800958a:	2200      	movs	r2, #0
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7fe ff46 	bl	8008420 <_read>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_read_r+0x1e>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	b103      	cbz	r3, 800959e <_read_r+0x1e>
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	240001e8 	.word	0x240001e8

080095a4 <_fstat_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4c07      	ldr	r4, [pc, #28]	; (80095c4 <_fstat_r+0x20>)
 80095a8:	2300      	movs	r3, #0
 80095aa:	4605      	mov	r5, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	f7fe ff7a 	bl	80084aa <_fstat>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d102      	bne.n	80095c0 <_fstat_r+0x1c>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	b103      	cbz	r3, 80095c0 <_fstat_r+0x1c>
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	bd38      	pop	{r3, r4, r5, pc}
 80095c2:	bf00      	nop
 80095c4:	240001e8 	.word	0x240001e8

080095c8 <_isatty_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4c06      	ldr	r4, [pc, #24]	; (80095e4 <_isatty_r+0x1c>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4605      	mov	r5, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	f7fe ff79 	bl	80084ca <_isatty>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_isatty_r+0x1a>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_isatty_r+0x1a>
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	240001e8 	.word	0x240001e8

080095e8 <_init>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr

080095f4 <_fini>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	bf00      	nop
 80095f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fa:	bc08      	pop	{r3}
 80095fc:	469e      	mov	lr, r3
 80095fe:	4770      	bx	lr
