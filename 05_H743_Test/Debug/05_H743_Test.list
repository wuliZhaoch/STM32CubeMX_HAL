
05_H743_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f94  08006f94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f9c  08006f9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  24000010  08006fb4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400014c  08006fb4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001598e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002646  00000000  00000000  000359cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035316  00000000  00000000  00039490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2e2  00000000  00000000  0006e7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00152acd  00000000  00000000  0007aa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  001cd5d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006f5c 	.word	0x08006f5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006f5c 	.word	0x08006f5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f987 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fad3 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f006 fa4f 	bl	8006ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	08006f84 	.word	0x08006f84
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f96f 	bl	8000956 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f939 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	2400002c 	.word	0x2400002c

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2400002c 	.word	0x2400002c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	4313      	orrs	r3, r2
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	05fa0000 	.word	0x05fa0000

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4907      	ldr	r1, [pc, #28]	; (80007ec <__NVIC_EnableIRQ+0x38>)
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff8e 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff29 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff40 	bl	8000798 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff33 	bl	80007b4 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa4 	bl	80008ac <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e188      	b.n	8000c94 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d004      	beq.n	8000998 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e17d      	b.n	8000c94 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a8c      	ldr	r2, [pc, #560]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d04a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a8b      	ldr	r2, [pc, #556]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d045      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a89      	ldr	r2, [pc, #548]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d040      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d03b      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a86      	ldr	r2, [pc, #536]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d036      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a85      	ldr	r2, [pc, #532]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d031      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d02c      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a82      	ldr	r2, [pc, #520]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d027      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a80      	ldr	r2, [pc, #512]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d022      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a7f      	ldr	r2, [pc, #508]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d01d      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a7d      	ldr	r2, [pc, #500]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d018      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a7a      	ldr	r2, [pc, #488]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00e      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a79      	ldr	r2, [pc, #484]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d009      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d004      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a76      	ldr	r2, [pc, #472]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_DMA_Abort_IT+0xcc>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_DMA_Abort_IT+0xce>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d065      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a60      	ldr	r2, [pc, #384]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d04a      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d045      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a5d      	ldr	r2, [pc, #372]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d040      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a5b      	ldr	r2, [pc, #364]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d03b      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d036      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a58      	ldr	r2, [pc, #352]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d031      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d02c      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a55      	ldr	r2, [pc, #340]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d027      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d022      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a52      	ldr	r2, [pc, #328]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d01d      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d018      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d013      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00e      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d009      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d004      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d108      	bne.n	8000afc <HAL_DMA_Abort_IT+0x18c>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e0ca      	b.n	8000c92 <HAL_DMA_Abort_IT+0x322>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0201 	bic.w	r2, r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e0c1      	b.n	8000c92 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 020e 	bic.w	r2, r2, #14
 8000b1c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d04a      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d045      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d040      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d03b      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d036      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d031      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d02c      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d027      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d022      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01d      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d018      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d013      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00e      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d009      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d004      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d128      	bne.n	8000c10 <HAL_DMA_Abort_IT+0x2a0>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e027      	b.n	8000c20 <HAL_DMA_Abort_IT+0x2b0>
 8000bd0:	40020010 	.word	0x40020010
 8000bd4:	40020028 	.word	0x40020028
 8000bd8:	40020040 	.word	0x40020040
 8000bdc:	40020058 	.word	0x40020058
 8000be0:	40020070 	.word	0x40020070
 8000be4:	40020088 	.word	0x40020088
 8000be8:	400200a0 	.word	0x400200a0
 8000bec:	400200b8 	.word	0x400200b8
 8000bf0:	40020410 	.word	0x40020410
 8000bf4:	40020428 	.word	0x40020428
 8000bf8:	40020440 	.word	0x40020440
 8000bfc:	40020458 	.word	0x40020458
 8000c00:	40020470 	.word	0x40020470
 8000c04:	40020488 	.word	0x40020488
 8000c08:	400204a0 	.word	0x400204a0
 8000c0c:	400204b8 	.word	0x400204b8
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	2201      	movs	r2, #1
 8000c40:	409a      	lsls	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c4e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00c      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c66:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000c70:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000caa:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <HAL_GPIO_Init+0x234>)
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cae:	e194      	b.n	8000fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8186 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x3c>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b12      	cmp	r3, #18
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80e0 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e32:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_GPIO_Init+0x23c>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_GPIO_Init+0x240>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d052      	beq.n	8000f04 <HAL_GPIO_Init+0x268>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_GPIO_Init+0x244>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d031      	beq.n	8000eca <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_GPIO_Init+0x248>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x22a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_GPIO_Init+0x24c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x250>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_GPIO_Init+0x254>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_GPIO_Init+0x258>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_GPIO_Init+0x25c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x260>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_GPIO_Init+0x264>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	e02d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eaa:	230a      	movs	r3, #10
 8000eac:	e02b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e029      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e027      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e025      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e023      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e021      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e01f      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e01d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e01b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ece:	bf00      	nop
 8000ed0:	58000080 	.word	0x58000080
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58000400 	.word	0x58000400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58020800 	.word	0x58020800
 8000ee8:	58020c00 	.word	0x58020c00
 8000eec:	58021000 	.word	0x58021000
 8000ef0:	58021400 	.word	0x58021400
 8000ef4:	58021800 	.word	0x58021800
 8000ef8:	58021c00 	.word	0x58021c00
 8000efc:	58022000 	.word	0x58022000
 8000f00:	58022400 	.word	0x58022400
 8000f04:	2300      	movs	r3, #0
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f16:	4938      	ldr	r1, [pc, #224]	; (8000ff8 <HAL_GPIO_Init+0x35c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae63 	bne.w	8000cb0 <HAL_GPIO_Init+0x14>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	58000400 	.word	0x58000400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	401a      	ands	r2, r3
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	429a      	cmp	r2, r3
 8001046:	d104      	bne.n	8001052 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	041a      	lsls	r2, r3, #16
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_PWREx_ConfigSupply+0x6c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b04      	cmp	r3, #4
 8001076:	d008      	beq.n	800108a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_PWREx_ConfigSupply+0x6c>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e01d      	b.n	80010c6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_PWREx_ConfigSupply+0x6c>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f023 0207 	bic.w	r2, r3, #7
 8001092:	490f      	ldr	r1, [pc, #60]	; (80010d0 <HAL_PWREx_ConfigSupply+0x6c>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109a:	f7ff fb1f 	bl	80006dc <HAL_GetTick>
 800109e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80010a0:	e009      	b.n	80010b6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80010a2:	f7ff fb1b 	bl	80006dc <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b0:	d901      	bls.n	80010b6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e007      	b.n	80010c6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_PWREx_ConfigSupply+0x6c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d1ee      	bne.n	80010a2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	58024800 	.word	0x58024800

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e3a4      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8087 	beq.w	8001202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f4:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010fe:	4b98      	ldr	r3, [pc, #608]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	2b10      	cmp	r3, #16
 8001108:	d007      	beq.n	800111a <HAL_RCC_OscConfig+0x46>
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	2b18      	cmp	r3, #24
 800110e:	d110      	bne.n	8001132 <HAL_RCC_OscConfig+0x5e>
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d10b      	bne.n	8001132 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d06c      	beq.n	8001200 <HAL_RCC_OscConfig+0x12c>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d168      	bne.n	8001200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e37e      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x76>
 800113c:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a87      	ldr	r2, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e02e      	b.n	80011a8 <HAL_RCC_OscConfig+0xd4>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x98>
 8001152:	4b83      	ldr	r3, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a82      	ldr	r2, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e01d      	b.n	80011a8 <HAL_RCC_OscConfig+0xd4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0xbc>
 8001176:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a79      	ldr	r2, [pc, #484]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a76      	ldr	r2, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0xd4>
 8001190:	4b73      	ldr	r3, [pc, #460]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a72      	ldr	r2, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b70      	ldr	r3, [pc, #448]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a6f      	ldr	r2, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa94 	bl	80006dc <HAL_GetTick>
 80011b4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fa90 	bl	80006dc <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e332      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe4>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fa80 	bl	80006dc <HAL_GetTick>
 80011dc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fa7c 	bl	80006dc <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e31e      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f2:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x10c>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80b0 	beq.w	8001370 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001218:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800121a:	4b51      	ldr	r3, [pc, #324]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_RCC_OscConfig+0x162>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b18      	cmp	r3, #24
 800122a:	d149      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1ec>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d144      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x17a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e2f0      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 0219 	bic.w	r2, r3, #25
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4941      	ldr	r1, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fa3c 	bl	80006dc <HAL_GetTick>
 8001264:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fa38 	bl	80006dc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e2da      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	f7ff fa57 	bl	8000738 <HAL_GetREVID>
 800128a:	4602      	mov	r2, r0
 800128c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001290:	429a      	cmp	r2, r3
 8001292:	d80a      	bhi.n	80012aa <HAL_RCC_OscConfig+0x1d6>
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	492f      	ldr	r1, [pc, #188]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a8:	e062      	b.n	8001370 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012be:	e057      	b.n	8001370 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d038      	beq.n	800133a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 0219 	bic.w	r2, r3, #25
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4922      	ldr	r1, [pc, #136]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff f9ff 	bl	80006dc <HAL_GetTick>
 80012de:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff f9fb 	bl	80006dc <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e29d      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	f7ff fa1a 	bl	8000738 <HAL_GetREVID>
 8001304:	4602      	mov	r2, r0
 8001306:	f241 0303 	movw	r3, #4099	; 0x1003
 800130a:	429a      	cmp	r2, r3
 800130c:	d80a      	bhi.n	8001324 <HAL_RCC_OscConfig+0x250>
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	031b      	lsls	r3, r3, #12
 800131c:	4910      	ldr	r1, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e025      	b.n	8001370 <HAL_RCC_OscConfig+0x29c>
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	490b      	ldr	r1, [pc, #44]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e01a      	b.n	8001370 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_RCC_OscConfig+0x28c>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff f9c9 	bl	80006dc <HAL_GetTick>
 800134a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff f9c5 	bl	80006dc <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d903      	bls.n	8001364 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e267      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
 8001360:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001364:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 808f 	beq.w	800149c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137e:	4b9a      	ldr	r3, [pc, #616]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001386:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001388:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d007      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2d0>
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b18      	cmp	r3, #24
 8001398:	d12d      	bne.n	80013f6 <HAL_RCC_OscConfig+0x322>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d128      	bne.n	80013f6 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a4:	4b90      	ldr	r3, [pc, #576]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x2e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b80      	cmp	r3, #128	; 0x80
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e239      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013bc:	f7ff f9bc 	bl	8000738 <HAL_GetREVID>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d80a      	bhi.n	80013e0 <HAL_RCC_OscConfig+0x30c>
 80013ca:	4b87      	ldr	r3, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	069b      	lsls	r3, r3, #26
 80013d8:	4983      	ldr	r1, [pc, #524]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013de:	e05d      	b.n	800149c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	497e      	ldr	r1, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013f4:	e052      	b.n	800149c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d035      	beq.n	800146a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013fe:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a79      	ldr	r2, [pc, #484]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff f967 	bl	80006dc <HAL_GetTick>
 800140e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001412:	f7ff f963 	bl	80006dc <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e205      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001430:	f7ff f982 	bl	8000738 <HAL_GetREVID>
 8001434:	4602      	mov	r2, r0
 8001436:	f241 0303 	movw	r3, #4099	; 0x1003
 800143a:	429a      	cmp	r2, r3
 800143c:	d80a      	bhi.n	8001454 <HAL_RCC_OscConfig+0x380>
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	069b      	lsls	r3, r3, #26
 800144c:	4966      	ldr	r1, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
 8001452:	e023      	b.n	800149c <HAL_RCC_OscConfig+0x3c8>
 8001454:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	4961      	ldr	r1, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e018      	b.n	800149c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a5e      	ldr	r2, [pc, #376]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff f931 	bl	80006dc <HAL_GetTick>
 800147a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800147e:	f7ff f92d 	bl	80006dc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e1cf      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001490:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d036      	beq.n	8001516 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d019      	beq.n	80014e4 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80014b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff f90e 	bl	80006dc <HAL_GetTick>
 80014c0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff f90a 	bl	80006dc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1ac      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3f0>
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff f8f4 	bl	80006dc <HAL_GetTick>
 80014f4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff f8f0 	bl	80006dc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e192      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d019      	beq.n	800155e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001534:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001536:	f7ff f8d1 	bl	80006dc <HAL_GetTick>
 800153a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800153e:	f7ff f8cd 	bl	80006dc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e16f      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x46a>
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001568:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800156a:	f7ff f8b7 	bl	80006dc <HAL_GetTick>
 800156e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001572:	f7ff f8b3 	bl	80006dc <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e155      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8086 	beq.w	80016aa <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_RCC_OscConfig+0x518>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <HAL_RCC_OscConfig+0x518>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015aa:	f7ff f897 	bl	80006dc <HAL_GetTick>
 80015ae:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff f893 	bl	80006dc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e135      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x518>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x51c>
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a02      	ldr	r2, [pc, #8]	; (80015e8 <HAL_RCC_OscConfig+0x514>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e032      	b.n	800164c <HAL_RCC_OscConfig+0x578>
 80015e6:	bf00      	nop
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58024800 	.word	0x58024800
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x53e>
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a8e      	ldr	r2, [pc, #568]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x578>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x560>
 800161a:	4b87      	ldr	r3, [pc, #540]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a86      	ldr	r2, [pc, #536]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	4b84      	ldr	r3, [pc, #528]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a83      	ldr	r2, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x578>
 8001634:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d015      	beq.n	8001680 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff f842 	bl	80006dc <HAL_GetTick>
 8001658:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff f83e 	bl	80006dc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0de      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001672:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ee      	beq.n	800165c <HAL_RCC_OscConfig+0x588>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff f82c 	bl	80006dc <HAL_GetTick>
 8001684:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff f828 	bl	80006dc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0c8      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800169e:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ee      	bne.n	8001688 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80bd 	beq.w	800182e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016bc:	2b18      	cmp	r3, #24
 80016be:	f000 80b4 	beq.w	800182a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	f040 8095 	bne.w	80017f6 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a59      	ldr	r2, [pc, #356]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80016d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff f800 	bl	80006dc <HAL_GetTick>
 80016dc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7fe fffc 	bl	80006dc <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e09e      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x768>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	4949      	ldr	r1, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001714:	4313      	orrs	r3, r2
 8001716:	628b      	str	r3, [r1, #40]	; 0x28
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	3b01      	subs	r3, #1
 800171e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	3b01      	subs	r3, #1
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	b29b      	uxth	r3, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	3b01      	subs	r3, #1
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001748:	493b      	ldr	r1, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800174a:	4313      	orrs	r3, r2
 800174c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	4a39      	ldr	r2, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800175c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x76c>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001766:	00d2      	lsls	r2, r2, #3
 8001768:	4933      	ldr	r1, [pc, #204]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800176a:	4313      	orrs	r3, r2
 800176c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f023 020c 	bic.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	492f      	ldr	r1, [pc, #188]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800177c:	4313      	orrs	r3, r2
 800177e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f023 0202 	bic.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	492a      	ldr	r1, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800178e:	4313      	orrs	r3, r2
 8001790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7fe ff85 	bl	80006dc <HAL_GetTick>
 80017d2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d6:	f7fe ff81 	bl	80006dc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e023      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x702>
 80017f4:	e01b      	b.n	800182e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7fe ff6b 	bl	80006dc <HAL_GetTick>
 8001806:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7fe ff67 	bl	80006dc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e009      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x764>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x736>
 8001828:	e001      	b.n	800182e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400
 800183c:	fffffc0c 	.word	0xfffffc0c
 8001840:	ffff0007 	.word	0xffff0007

08001844 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e18d      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 020f 	bic.w	r2, r3, #15
 800186e:	4985      	ldr	r1, [pc, #532]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b83      	ldr	r3, [pc, #524]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e175      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d010      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d908      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018a4:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	4975      	ldr	r1, [pc, #468]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d908      	bls.n	80018e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	496a      	ldr	r1, [pc, #424]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d908      	bls.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001900:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	495e      	ldr	r1, [pc, #376]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800190e:	4313      	orrs	r3, r2
 8001910:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800192a:	429a      	cmp	r2, r3
 800192c:	d908      	bls.n	8001940 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4953      	ldr	r1, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800193c:	4313      	orrs	r3, r2
 800193e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d010      	beq.n	800196e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	429a      	cmp	r2, r3
 800195a:	d908      	bls.n	800196e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f023 020f 	bic.w	r2, r3, #15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4947      	ldr	r1, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800196a:	4313      	orrs	r3, r2
 800196c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d055      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4940      	ldr	r1, [pc, #256]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001988:	4313      	orrs	r3, r2
 800198a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d121      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0e7      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d115      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0db      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cf      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0c7      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	f023 0207 	bic.w	r2, r3, #7
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4925      	ldr	r1, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7fe fe71 	bl	80006dc <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7fe fe6d 	bl	80006dc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0af      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d1eb      	bne.n	80019fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d208      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f023 020f 	bic.w	r2, r3, #15
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x244>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d214      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	4906      	ldr	r1, [pc, #24]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_RCC_ClockConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e077      	b.n	8001b74 <HAL_RCC_ClockConfig+0x330>
 8001a84:	52002000 	.word	0x52002000
 8001a88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d208      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4931      	ldr	r1, [pc, #196]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d010      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d208      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ad6:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4926      	ldr	r1, [pc, #152]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d208      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	491a      	ldr	r1, [pc, #104]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d208      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	490f      	ldr	r1, [pc, #60]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b44:	f000 f822 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b48:	4601      	mov	r1, r0
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_ClockConfig+0x338>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_RCC_ClockConfig+0x33c>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa21 f303 	lsr.w	r3, r1, r3
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_RCC_ClockConfig+0x340>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_ClockConfig+0x344>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fd6d 	bl	8000648 <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	08006f84 	.word	0x08006f84
 8001b84:	24000008 	.word	0x24000008
 8001b88:	24000000 	.word	0x24000000

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b92:	4baf      	ldr	r3, [pc, #700]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b9a:	2b18      	cmp	r3, #24
 8001b9c:	f200 814e 	bhi.w	8001e3c <HAL_RCC_GetSysClockFreq+0x2b0>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001c0d 	.word	0x08001c0d
 8001bac:	08001e3d 	.word	0x08001e3d
 8001bb0:	08001e3d 	.word	0x08001e3d
 8001bb4:	08001e3d 	.word	0x08001e3d
 8001bb8:	08001e3d 	.word	0x08001e3d
 8001bbc:	08001e3d 	.word	0x08001e3d
 8001bc0:	08001e3d 	.word	0x08001e3d
 8001bc4:	08001e3d 	.word	0x08001e3d
 8001bc8:	08001c33 	.word	0x08001c33
 8001bcc:	08001e3d 	.word	0x08001e3d
 8001bd0:	08001e3d 	.word	0x08001e3d
 8001bd4:	08001e3d 	.word	0x08001e3d
 8001bd8:	08001e3d 	.word	0x08001e3d
 8001bdc:	08001e3d 	.word	0x08001e3d
 8001be0:	08001e3d 	.word	0x08001e3d
 8001be4:	08001e3d 	.word	0x08001e3d
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001e3d 	.word	0x08001e3d
 8001bf0:	08001e3d 	.word	0x08001e3d
 8001bf4:	08001e3d 	.word	0x08001e3d
 8001bf8:	08001e3d 	.word	0x08001e3d
 8001bfc:	08001e3d 	.word	0x08001e3d
 8001c00:	08001e3d 	.word	0x08001e3d
 8001c04:	08001e3d 	.word	0x08001e3d
 8001c08:	08001c3f 	.word	0x08001c3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c0c:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c18:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	4a8c      	ldr	r2, [pc, #560]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c2a:	e10a      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c2c:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c2e:	61bb      	str	r3, [r7, #24]
    break;
 8001c30:	e107      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c32:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001c34:	61bb      	str	r3, [r7, #24]
    break;
 8001c36:	e104      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001c3a:	61bb      	str	r3, [r7, #24]
    break;
 8001c3c:	e101      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c3e:	4b84      	ldr	r3, [pc, #528]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c48:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c54:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80da 	beq.w	8001e36 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d05a      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1b2>
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d302      	bcc.n	8001c92 <HAL_RCC_GetSysClockFreq+0x106>
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d078      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001c90:	e099      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d02d      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	08db      	lsrs	r3, r3, #3
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cdc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001cf8:	e087      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d20:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d3c:	e065      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d48:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001e68 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d64:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d80:	e043      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001e6c <HAL_RCC_GetSysClockFreq+0x2e0>
 8001d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001da8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dc4:	e021      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001e68 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dec:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e08:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	0a5b      	lsrs	r3, r3, #9
 8001e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e14:	3301      	adds	r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2e:	ee17 3a90 	vmov	r3, s15
 8001e32:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e34:	e005      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e3e:	61bb      	str	r3, [r7, #24]
    break;
 8001e40:	bf00      	nop
  }

  return sysclockfreq;
 8001e42:	69bb      	ldr	r3, [r7, #24]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3724      	adds	r7, #36	; 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	58024400 	.word	0x58024400
 8001e54:	03d09000 	.word	0x03d09000
 8001e58:	003d0900 	.word	0x003d0900
 8001e5c:	017d7840 	.word	0x017d7840
 8001e60:	46000000 	.word	0x46000000
 8001e64:	4c742400 	.word	0x4c742400
 8001e68:	4a742400 	.word	0x4a742400
 8001e6c:	4bbebc20 	.word	0x4bbebc20

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e74:	f001 f9e2 	bl	800323c <HAL_RCCEx_GetD1SysClockFreq>
 8001e78:	4601      	mov	r1, r0
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x30>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e90:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e94:	681b      	ldr	r3, [r3, #0]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	08006f84 	.word	0x08006f84
 8001ea4:	2400000c 	.word	0x2400000c

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001eac:	f7ff ffe0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	08006f84 	.word	0x08006f84

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001ed8:	f7ff ffca 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001edc:	4601      	mov	r1, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	08006f84 	.word	0x08006f84

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03d      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f24:	d013      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f2a:	d802      	bhi.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001f30:	e01f      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f36:	d013      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f3c:	d01c      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f40:	4baf      	ldr	r3, [pc, #700]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	4aae      	ldr	r2, [pc, #696]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f4c:	e015      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2102      	movs	r1, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f98d 	bl	8003274 <RCCEx_PLL2_Config>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f5e:	e00c      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3324      	adds	r3, #36	; 0x24
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 fa36 	bl	80033d8 <RCCEx_PLL3_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f70:	e003      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
      break;
 8001f76:	e000      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001f80:	4b9f      	ldr	r3, [pc, #636]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f8c:	499c      	ldr	r1, [pc, #624]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	650b      	str	r3, [r1, #80]	; 0x50
 8001f92:	e001      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03d      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d826      	bhi.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc9 	.word	0x08001fc9
 8001fb8:	08001fd7 	.word	0x08001fd7
 8001fbc:	08001fe9 	.word	0x08001fe9
 8001fc0:	08002001 	.word	0x08002001
 8001fc4:	08002001 	.word	0x08002001
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fc8:	4b8d      	ldr	r3, [pc, #564]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	4a8c      	ldr	r2, [pc, #560]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fd4:	e015      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f949 	bl	8003274 <RCCEx_PLL2_Config>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fe6:	e00c      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3324      	adds	r3, #36	; 0x24
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f9f2 	bl	80033d8 <RCCEx_PLL3_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ff8:	e003      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8001ffe:	e000      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002008:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	497a      	ldr	r1, [pc, #488]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002016:	4313      	orrs	r3, r2
 8002018:	650b      	str	r3, [r1, #80]	; 0x50
 800201a:	e001      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03e      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d01c      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d804      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d00d      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002040:	e01e      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002042:	2bc0      	cmp	r3, #192	; 0xc0
 8002044:	d01f      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204a:	d01e      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800204c:	e018      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800204e:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	4a6b      	ldr	r2, [pc, #428]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800205a:	e017      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f001 f906 	bl	8003274 <RCCEx_PLL2_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800206c:	e00e      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3324      	adds	r3, #36	; 0x24
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f001 f9af 	bl	80033d8 <RCCEx_PLL3_Config>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800207e:	e005      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	75fb      	strb	r3, [r7, #23]
      break;
 8002084:	e002      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800208a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002096:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4958      	ldr	r1, [pc, #352]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	650b      	str	r3, [r1, #80]	; 0x50
 80020a4:	e001      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d044      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c0:	d01f      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d805      	bhi.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d0:	d00e      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80020d2:	e01f      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80020d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80020d8:	d01f      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80020da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020de:	d01e      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80020e0:	e018      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020ee:	e017      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f8bc 	bl	8003274 <RCCEx_PLL2_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002100:	e00e      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3324      	adds	r3, #36	; 0x24
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f001 f965 	bl	80033d8 <RCCEx_PLL3_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002112:	e005      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800211e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002134:	4932      	ldr	r1, [pc, #200]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002136:	4313      	orrs	r3, r2
 8002138:	658b      	str	r3, [r1, #88]	; 0x58
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002148:	2b00      	cmp	r3, #0
 800214a:	d044      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002156:	d01f      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800215c:	d805      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002166:	d00e      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002168:	e01f      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800216a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800216e:	d01f      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002174:	d01e      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002176:	e018      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002184:	e017      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f001 f871 	bl	8003274 <RCCEx_PLL2_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002196:	e00e      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3324      	adds	r3, #36	; 0x24
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f91a 	bl	80033d8 <RCCEx_PLL3_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021a8:	e005      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	658b      	str	r3, [r1, #88]	; 0x58
 80021d0:	e001      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d035      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d00c      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d802      	bhi.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01b      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80021f2:	e017      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d00c      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80021f8:	2b30      	cmp	r3, #48	; 0x30
 80021fa:	d018      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80021fc:	e012      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80021fe:	bf00      	nop
 8002200:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002204:	4baf      	ldr	r3, [pc, #700]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	4aae      	ldr	r2, [pc, #696]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800220a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002210:	e00e      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	2102      	movs	r1, #2
 8002218:	4618      	mov	r0, r3
 800221a:	f001 f82b 	bl	8003274 <RCCEx_PLL2_Config>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002222:	e005      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
      break;
 8002228:	e002      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800222e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002236:	4ba3      	ldr	r3, [pc, #652]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002242:	49a0      	ldr	r1, [pc, #640]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002248:	e001      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d042      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002262:	d01f      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002268:	d805      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	d00e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002274:	e01f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800227a:	d01f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800227c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002280:	d01e      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	4a8e      	ldr	r2, [pc, #568]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002290:	e017      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 ffeb 	bl	8003274 <RCCEx_PLL2_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80022a2:	e00e      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3324      	adds	r3, #36	; 0x24
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f894 	bl	80033d8 <RCCEx_PLL3_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80022b4:	e005      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80022bc:	bf00      	nop
 80022be:	e000      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80022c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80022c8:	4b7e      	ldr	r3, [pc, #504]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	497b      	ldr	r1, [pc, #492]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	650b      	str	r3, [r1, #80]	; 0x50
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d042      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022f4:	d01b      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022fa:	d805      	bhi.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002306:	e01b      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800230c:	d01d      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800230e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002312:	d01c      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002318:	d01b      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f000 ffa6 	bl	8003274 <RCCEx_PLL2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800232c:	e012      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3324      	adds	r3, #36	; 0x24
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f84f 	bl	80033d8 <RCCEx_PLL3_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
      break;
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800235c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	4957      	ldr	r1, [pc, #348]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	650b      	str	r3, [r1, #80]	; 0x50
 800236c:	e001      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002388:	d01b      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800238a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238e:	d805      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800239a:	e01b      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d01d      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80023a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a6:	d01c      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80023a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80023ac:	d01b      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80023ae:	e011      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 ff5c 	bl	8003274 <RCCEx_PLL2_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023c0:	e012      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3324      	adds	r3, #36	; 0x24
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 f805 	bl	80033d8 <RCCEx_PLL3_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023d2:	e009      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	75fb      	strb	r3, [r7, #23]
      break;
 80023d8:	e006      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023fc:	4931      	ldr	r1, [pc, #196]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	658b      	str	r3, [r1, #88]	; 0x58
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02d      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800241c:	d005      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800241e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002422:	d009      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002428:	e00f      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002436:	e00c      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f000 ff18 	bl	8003274 <RCCEx_PLL2_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002448:	e003      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
      break;
 800244e:	e000      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002464:	4917      	ldr	r1, [pc, #92]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	650b      	str	r3, [r1, #80]	; 0x50
 800246a:	e001      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d035      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	2b03      	cmp	r3, #3
 8002482:	d81b      	bhi.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002484:	a201      	add	r2, pc, #4	; (adr r2, 800248c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248a:	bf00      	nop
 800248c:	080024c9 	.word	0x080024c9
 8002490:	0800249d 	.word	0x0800249d
 8002494:	080024ab 	.word	0x080024ab
 8002498:	080024c9 	.word	0x080024c9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80024a8:	e00f      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fedf 	bl	8003274 <RCCEx_PLL2_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80024ba:	e006      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	75fb      	strb	r3, [r7, #23]
      break;
 80024c0:	e003      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80024c2:	bf00      	nop
 80024c4:	58024400 	.word	0x58024400
      break;
 80024c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80024d0:	4bba      	ldr	r3, [pc, #744]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	f023 0203 	bic.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	49b7      	ldr	r1, [pc, #732]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024e2:	e001      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8086 	beq.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f6:	4bb2      	ldr	r3, [pc, #712]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4ab1      	ldr	r2, [pc, #708]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002502:	f7fe f8eb 	bl	80006dc <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002508:	e009      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe f8e7 	bl	80006dc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d902      	bls.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	75fb      	strb	r3, [r7, #23]
        break;
 800251c:	e005      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800251e:	4ba8      	ldr	r3, [pc, #672]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ef      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d166      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002530:	4ba2      	ldr	r3, [pc, #648]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800253a:	4053      	eors	r3, r2
 800253c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002544:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800254e:	4b9b      	ldr	r3, [pc, #620]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a9a      	ldr	r2, [pc, #616]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	4b98      	ldr	r3, [pc, #608]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a97      	ldr	r2, [pc, #604]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002566:	4a95      	ldr	r2, [pc, #596]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	d115      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe f8b0 	bl	80006dc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257e:	e00b      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe f8ac 	bl	80006dc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d902      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	75fb      	strb	r3, [r7, #23]
            break;
 8002596:	e005      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ed      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d126      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b8:	d10d      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80025ba:	4b80      	ldr	r3, [pc, #512]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025c8:	0919      	lsrs	r1, r3, #4
 80025ca:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80025cc:	400b      	ands	r3, r1
 80025ce:	497b      	ldr	r1, [pc, #492]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	610b      	str	r3, [r1, #16]
 80025d4:	e005      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80025d6:	4b79      	ldr	r3, [pc, #484]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025e0:	6113      	str	r3, [r2, #16]
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	4972      	ldr	r1, [pc, #456]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	670b      	str	r3, [r1, #112]	; 0x70
 80025f6:	e004      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	75bb      	strb	r3, [r7, #22]
 80025fc:	e001      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07d      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	2b28      	cmp	r3, #40	; 0x28
 8002614:	d866      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	080026eb 	.word	0x080026eb
 8002620:	080026e5 	.word	0x080026e5
 8002624:	080026e5 	.word	0x080026e5
 8002628:	080026e5 	.word	0x080026e5
 800262c:	080026e5 	.word	0x080026e5
 8002630:	080026e5 	.word	0x080026e5
 8002634:	080026e5 	.word	0x080026e5
 8002638:	080026e5 	.word	0x080026e5
 800263c:	080026c1 	.word	0x080026c1
 8002640:	080026e5 	.word	0x080026e5
 8002644:	080026e5 	.word	0x080026e5
 8002648:	080026e5 	.word	0x080026e5
 800264c:	080026e5 	.word	0x080026e5
 8002650:	080026e5 	.word	0x080026e5
 8002654:	080026e5 	.word	0x080026e5
 8002658:	080026e5 	.word	0x080026e5
 800265c:	080026d3 	.word	0x080026d3
 8002660:	080026e5 	.word	0x080026e5
 8002664:	080026e5 	.word	0x080026e5
 8002668:	080026e5 	.word	0x080026e5
 800266c:	080026e5 	.word	0x080026e5
 8002670:	080026e5 	.word	0x080026e5
 8002674:	080026e5 	.word	0x080026e5
 8002678:	080026e5 	.word	0x080026e5
 800267c:	080026eb 	.word	0x080026eb
 8002680:	080026e5 	.word	0x080026e5
 8002684:	080026e5 	.word	0x080026e5
 8002688:	080026e5 	.word	0x080026e5
 800268c:	080026e5 	.word	0x080026e5
 8002690:	080026e5 	.word	0x080026e5
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026e5 	.word	0x080026e5
 800269c:	080026eb 	.word	0x080026eb
 80026a0:	080026e5 	.word	0x080026e5
 80026a4:	080026e5 	.word	0x080026e5
 80026a8:	080026e5 	.word	0x080026e5
 80026ac:	080026e5 	.word	0x080026e5
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026e5 	.word	0x080026e5
 80026b8:	080026e5 	.word	0x080026e5
 80026bc:	080026eb 	.word	0x080026eb
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fdd4 	bl	8003274 <RCCEx_PLL2_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80026d0:	e00c      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3324      	adds	r3, #36	; 0x24
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fe7d 	bl	80033d8 <RCCEx_PLL3_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80026e2:	e003      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	75fb      	strb	r3, [r7, #23]
      break;
 80026e8:	e000      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80026ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026fe:	492f      	ldr	r1, [pc, #188]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	654b      	str	r3, [r1, #84]	; 0x54
 8002704:	e001      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d037      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	2b05      	cmp	r3, #5
 800271c:	d820      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002767 	.word	0x08002767
 8002728:	0800273d 	.word	0x0800273d
 800272c:	0800274f 	.word	0x0800274f
 8002730:	08002767 	.word	0x08002767
 8002734:	08002767 	.word	0x08002767
 8002738:	08002767 	.word	0x08002767
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fd96 	bl	8003274 <RCCEx_PLL2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800274c:	e00c      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3324      	adds	r3, #36	; 0x24
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fe3f 	bl	80033d8 <RCCEx_PLL3_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800275e:	e003      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      break;
 8002764:	e000      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	4910      	ldr	r1, [pc, #64]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	654b      	str	r3, [r1, #84]	; 0x54
 8002780:	e001      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d040      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	2b05      	cmp	r3, #5
 800279a:	d827      	bhi.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800279c:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	080027f3 	.word	0x080027f3
 80027a8:	080027c9 	.word	0x080027c9
 80027ac:	080027db 	.word	0x080027db
 80027b0:	080027f3 	.word	0x080027f3
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	080027f3 	.word	0x080027f3
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58024800 	.word	0x58024800
 80027c4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fd50 	bl	8003274 <RCCEx_PLL2_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80027d8:	e00c      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3324      	adds	r3, #36	; 0x24
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fdf9 	bl	80033d8 <RCCEx_PLL3_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80027ea:	e003      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
      break;
 80027f0:	e000      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80027f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027fa:	4bb3      	ldr	r3, [pc, #716]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	49af      	ldr	r1, [pc, #700]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	658b      	str	r3, [r1, #88]	; 0x58
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d044      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282a:	d01b      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800282c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002830:	d805      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d022      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800283c:	e01b      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d01d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002848:	d01c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800284a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800284e:	d01b      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002850:	e011      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd0b 	bl	8003274 <RCCEx_PLL2_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002862:	e012      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fdb4 	bl	80033d8 <RCCEx_PLL3_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002874:	e009      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	75fb      	strb	r3, [r7, #23]
      break;
 800287a:	e006      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800287c:	bf00      	nop
 800287e:	e004      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002880:	bf00      	nop
 8002882:	e002      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002890:	4b8d      	ldr	r3, [pc, #564]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289e:	498a      	ldr	r1, [pc, #552]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	654b      	str	r3, [r1, #84]	; 0x54
 80028a4:	e001      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d044      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c0:	d01b      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80028c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c6:	d805      	bhi.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d022      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80028d2:	e01b      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	d01d      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80028da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80028de:	d01c      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80028e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028e4:	d01b      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80028e6:	e011      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fcc0 	bl	8003274 <RCCEx_PLL2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80028f8:	e012      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3324      	adds	r3, #36	; 0x24
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fd69 	bl	80033d8 <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800290a:	e009      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	75fb      	strb	r3, [r7, #23]
      break;
 8002910:	e006      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002912:	bf00      	nop
 8002914:	e004      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800291e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002926:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002934:	4964      	ldr	r1, [pc, #400]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	658b      	str	r3, [r1, #88]	; 0x58
 800293a:	e001      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d044      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002956:	d01b      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800295c:	d805      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d022      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002968:	e01b      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800296a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296e:	d01d      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002970:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002974:	d01c      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800297a:	d01b      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800297c:	e011      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fc75 	bl	8003274 <RCCEx_PLL2_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800298e:	e012      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3324      	adds	r3, #36	; 0x24
 8002994:	2102      	movs	r1, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fd1e 	bl	80033d8 <RCCEx_PLL3_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80029a0:	e009      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
      break;
 80029a6:	e006      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80029a8:	bf00      	nop
 80029aa:	e004      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80029b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ca:	493f      	ldr	r1, [pc, #252]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	658b      	str	r3, [r1, #88]	; 0x58
 80029d0:	e001      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01b      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fcef 	bl	80033d8 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75bb      	strb	r3, [r7, #22]
 8002a04:	e009      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a14:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01b      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a30:	d10b      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3324      	adds	r3, #36	; 0x24
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fccd 	bl	80033d8 <RCCEx_PLL3_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	75bb      	strb	r3, [r7, #22]
 8002a48:	e009      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a58:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d032      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d00d      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8002a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a7a:	d016      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fbf4 	bl	8003274 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002a90:	e00c      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fc9d 	bl	80033d8 <RCCEx_PLL3_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002aa2:	e003      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8002aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ac0:	4901      	ldr	r1, [pc, #4]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02f      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae6:	d00c      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002aec:	d015      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d10f      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af4:	4b79      	ldr	r3, [pc, #484]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4a78      	ldr	r2, [pc, #480]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002b00:	e00c      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3324      	adds	r3, #36	; 0x24
 8002b06:	2101      	movs	r1, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fc65 	bl	80033d8 <RCCEx_PLL3_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002b12:	e003      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	75fb      	strb	r3, [r7, #23]
      break;
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b22:	4b6e      	ldr	r3, [pc, #440]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b30:	496a      	ldr	r1, [pc, #424]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	654b      	str	r3, [r1, #84]	; 0x54
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d029      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d007      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002b56:	e00f      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b58:	4b60      	ldr	r3, [pc, #384]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a5f      	ldr	r2, [pc, #380]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002b64:	e00b      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fb81 	bl	8003274 <RCCEx_PLL2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002b76:	e002      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4952      	ldr	r1, [pc, #328]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b96:	e001      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3324      	adds	r3, #36	; 0x24
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fc12 	bl	80033d8 <RCCEx_PLL3_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02f      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d802      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002bde:	e00d      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be4:	d00f      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bea:	d00e      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002bfa:	e007      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002c00:	e004      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c12:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1e:	492f      	ldr	r1, [pc, #188]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	654b      	str	r3, [r1, #84]	; 0x54
 8002c24:	e001      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4926      	ldr	r1, [pc, #152]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c62:	491e      	ldr	r1, [pc, #120]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c80:	4916      	ldr	r1, [pc, #88]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c9c:	6113      	str	r3, [r2, #16]
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da08      	bge.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	4906      	ldr	r1, [pc, #24]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002cc8:	7dbb      	ldrb	r3, [r7, #22]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	58024400 	.word	0x58024400

08002ce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002ce4:	f7ff f8c4 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58024400 	.word	0x58024400
 8002d08:	08006f84 	.word	0x08006f84

08002d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d14:	4b9d      	ldr	r3, [pc, #628]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002d1e:	4b9b      	ldr	r3, [pc, #620]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	0b1b      	lsrs	r3, r3, #12
 8002d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d28:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002d2a:	4b98      	ldr	r3, [pc, #608]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002d34:	4b95      	ldr	r3, [pc, #596]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 810a 	beq.w	8002f6c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d05a      	beq.n	8002e14 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d302      	bcc.n	8002d68 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d078      	beq.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002d66:	e099      	b.n	8002e9c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02d      	beq.n	8002dd0 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d74:	4b85      	ldr	r3, [pc, #532]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	4a84      	ldr	r2, [pc, #528]	; (8002f90 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8002db2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8002dce:	e087      	b.n	8002ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002f98 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8002dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de2:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002df6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e12:	e065      	b.n	8002ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e56:	e043      	b.n	8002ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e9a:	e021      	b.n	8002ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002ede:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	0a5b      	lsrs	r3, r3, #9
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8002efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f06:	ee17 2a90 	vmov	r2, s15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f34:	ee17 2a90 	vmov	r2, s15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f62:	ee17 2a90 	vmov	r2, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002f6a:	e008      	b.n	8002f7e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	bf00      	nop
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	03d09000 	.word	0x03d09000
 8002f94:	46000000 	.word	0x46000000
 8002f98:	4c742400 	.word	0x4c742400
 8002f9c:	4a742400 	.word	0x4a742400
 8002fa0:	4bbebc20 	.word	0x4bbebc20

08002fa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fac:	4b9d      	ldr	r3, [pc, #628]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002fb6:	4b9b      	ldr	r3, [pc, #620]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	0d1b      	lsrs	r3, r3, #20
 8002fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc0:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002fc2:	4b98      	ldr	r3, [pc, #608]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002fcc:	4b95      	ldr	r3, [pc, #596]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 810a 	beq.w	8003204 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d05a      	beq.n	80030ac <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d302      	bcc.n	8003000 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d078      	beq.n	80030f0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002ffe:	e099      	b.n	8003134 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003000:	4b88      	ldr	r3, [pc, #544]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02d      	beq.n	8003068 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800300c:	4b85      	ldr	r3, [pc, #532]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	08db      	lsrs	r3, r3, #3
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	4a84      	ldr	r2, [pc, #528]	; (8003228 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003036:	4b7b      	ldr	r3, [pc, #492]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003046:	ed97 6a03 	vldr	s12, [r7, #12]
 800304a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800304e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800305a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003062:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003066:	e087      	b.n	8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003230 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307a:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308a:	ed97 6a03 	vldr	s12, [r7, #12]
 800308e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800309e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030aa:	e065      	b.n	8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80030ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80030d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80030d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030ee:	e043      	b.n	8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003238 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b48      	ldr	r3, [pc, #288]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a03 	vldr	s12, [r7, #12]
 8003116:	eddf 5a45 	vldr	s11, [pc, #276]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003132:	e021      	b.n	8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b37      	ldr	r3, [pc, #220]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a03 	vldr	s12, [r7, #12]
 800315a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800322c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003176:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	0a5b      	lsrs	r3, r3, #9
 800317e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800318e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003192:	edd7 6a07 	vldr	s13, [r7, #28]
 8003196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800319a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319e:	ee17 2a90 	vmov	r2, s15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031cc:	ee17 2a90 	vmov	r2, s15
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	0e1b      	lsrs	r3, r3, #24
 80031da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80031f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fa:	ee17 2a90 	vmov	r2, s15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003202:	e008      	b.n	8003216 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	58024400 	.word	0x58024400
 8003228:	03d09000 	.word	0x03d09000
 800322c:	46000000 	.word	0x46000000
 8003230:	4c742400 	.word	0x4c742400
 8003234:	4a742400 	.word	0x4a742400
 8003238:	4bbebc20 	.word	0x4bbebc20

0800323c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003240:	f7fe fca4 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8003244:	4601      	mov	r1, r0
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800325e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58024400 	.word	0x58024400
 800326c:	08006f84 	.word	0x08006f84
 8003270:	24000008 	.word	0x24000008

08003274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b03      	cmp	r3, #3
 800328c:	d101      	bne.n	8003292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e099      	b.n	80033c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003292:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329e:	f7fd fa1d 	bl	80006dc <HAL_GetTick>
 80032a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032a4:	e008      	b.n	80032b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032a6:	f7fd fa19 	bl	80006dc <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e086      	b.n	80033c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032c4:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	493f      	ldr	r1, [pc, #252]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	628b      	str	r3, [r1, #40]	; 0x28
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	3b01      	subs	r3, #1
 80032de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	025b      	lsls	r3, r3, #9
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	3b01      	subs	r3, #1
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003308:	4931      	ldr	r1, [pc, #196]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	492d      	ldr	r1, [pc, #180]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f023 0220 	bic.w	r2, r3, #32
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4928      	ldr	r1, [pc, #160]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003338:	f023 0310 	bic.w	r3, r3, #16
 800333c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <RCCEx_PLL2_Config+0x160>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69d2      	ldr	r2, [r2, #28]
 800334a:	00d2      	lsls	r2, r2, #3
 800334c:	4920      	ldr	r1, [pc, #128]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003352:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003358:	f043 0310 	orr.w	r3, r3, #16
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800336a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003370:	e00f      	b.n	8003392 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003384:	e005      	b.n	8003392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 800338c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 8003398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800339c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339e:	f7fd f99d 	bl	80006dc <HAL_GetTick>
 80033a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80033a6:	f7fd f999 	bl	80006dc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e006      	b.n	80033c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <RCCEx_PLL2_Config+0x15c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	ffff0007 	.word	0xffff0007

080033d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d101      	bne.n	80033f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e099      	b.n	800352a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80033f6:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4e      	ldr	r2, [pc, #312]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003402:	f7fd f96b 	bl	80006dc <HAL_GetTick>
 8003406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003408:	e008      	b.n	800341c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800340a:	f7fd f967 	bl	80006dc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e086      	b.n	800352a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800341c:	4b45      	ldr	r3, [pc, #276]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	493f      	ldr	r1, [pc, #252]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	628b      	str	r3, [r1, #40]	; 0x28
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	3b01      	subs	r3, #1
 8003442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	025b      	lsls	r3, r3, #9
 800344e:	b29b      	uxth	r3, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	3b01      	subs	r3, #1
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800346c:	4931      	ldr	r1, [pc, #196]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	492d      	ldr	r1, [pc, #180]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4928      	ldr	r1, [pc, #160]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	4a26      	ldr	r2, [pc, #152]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <RCCEx_PLL3_Config+0x160>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	69d2      	ldr	r2, [r2, #28]
 80034ae:	00d2      	lsls	r2, r2, #3
 80034b0:	4920      	ldr	r1, [pc, #128]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80034b6:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034d4:	e00f      	b.n	80034f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034e8:	e005      	b.n	80034f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003502:	f7fd f8eb 	bl	80006dc <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003508:	e008      	b.n	800351c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800350a:	f7fd f8e7 	bl	80006dc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e006      	b.n	800352a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <RCCEx_PLL3_Config+0x15c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
 8003538:	ffff0007 	.word	0xffff0007

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e042      	b.n	80035d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f003 fc01 	bl	8006d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2224      	movs	r2, #36	; 0x24
 800356a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fb2e 	bl	8003be0 <UART_SetConfig>
 8003584:	4603      	mov	r3, r0
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e022      	b.n	80035d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f002 fca0 	bl	8005edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f002 fd27 	bl	8006020 <UART_CheckIdleState>
 80035d2:	4603      	mov	r3, r0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f040 8083 	bne.w	80036fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_UART_Transmit+0x28>
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e07b      	b.n	8003700 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Transmit+0x3a>
 8003612:	2302      	movs	r3, #2
 8003614:	e074      	b.n	8003700 <HAL_UART_Transmit+0x124>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2221      	movs	r2, #33	; 0x21
 800362a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800362e:	f7fd f855 	bl	80006dc <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d108      	bne.n	8003660 <HAL_UART_Transmit+0x84>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e003      	b.n	8003668 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003668:	e02c      	b.n	80036c4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f002 fd1b 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e03d      	b.n	8003700 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3302      	adds	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e007      	b.n	80036b2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1cc      	bne.n	800366a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f002 fce8 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00a      	b.n	8003700 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80bc 	bne.w	800389a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_UART_Receive_IT+0x26>
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0b4      	b.n	800389c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_UART_Receive_IT+0x38>
 800373c:	2302      	movs	r3, #2
 800373e:	e0ad      	b.n	800389c <HAL_UART_Receive_IT+0x194>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d10e      	bne.n	800378c <HAL_UART_Receive_IT+0x84>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_UART_Receive_IT+0x7a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f240 12ff 	movw	r2, #511	; 0x1ff
 800377c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003780:	e02d      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800378a:	e028      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <HAL_UART_Receive_IT+0xa8>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_UART_Receive_IT+0x9e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037a4:	e01b      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	227f      	movs	r2, #127	; 0x7f
 80037aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037ae:	e016      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b8:	d10d      	bne.n	80037d6 <HAL_UART_Receive_IT+0xce>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_UART_Receive_IT+0xc4>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	227f      	movs	r2, #127	; 0x7f
 80037c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037ca:	e008      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037d4:	e003      	b.n	80037de <HAL_UART_Receive_IT+0xd6>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2222      	movs	r2, #34	; 0x22
 80037ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003806:	d12a      	bne.n	800385e <HAL_UART_Receive_IT+0x156>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	429a      	cmp	r2, r3
 8003812:	d324      	bcc.n	800385e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d107      	bne.n	800382e <HAL_UART_Receive_IT+0x126>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_UART_Receive_IT+0x1a0>)
 800382a:	66da      	str	r2, [r3, #108]	; 0x6c
 800382c:	e002      	b.n	8003834 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_UART_Receive_IT+0x1a4>)
 8003832:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e01b      	b.n	8003896 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	d107      	bne.n	8003878 <HAL_UART_Receive_IT+0x170>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_UART_Receive_IT+0x1a8>)
 8003874:	66da      	str	r2, [r3, #108]	; 0x6c
 8003876:	e002      	b.n	800387e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <HAL_UART_Receive_IT+0x1ac>)
 800387c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003894:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	080064b5 	.word	0x080064b5
 80038ac:	080063ad 	.word	0x080063ad
 80038b0:	08006303 	.word	0x08006303
 80038b4:	08006259 	.word	0x08006259

080038b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f640 030f 	movw	r3, #2063	; 0x80f
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d118      	bne.n	800391a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d013      	beq.n	800391a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8145 	beq.w	8003b9a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
      }
      return;
 8003918:	e13f      	b.n	8003b9a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80e8 	beq.w	8003af2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4ba1      	ldr	r3, [pc, #644]	; (8003bac <HAL_UART_IRQHandler+0x2f4>)
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4ba0      	ldr	r3, [pc, #640]	; (8003bb0 <HAL_UART_IRQHandler+0x2f8>)
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80dd 	beq.w	8003af2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_UART_IRQHandler+0xac>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2201      	movs	r2, #1
 8003952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d010      	beq.n	8003990 <HAL_UART_IRQHandler+0xd8>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2202      	movs	r2, #2
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <HAL_UART_IRQHandler+0x104>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2204      	movs	r2, #4
 80039aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d015      	beq.n	80039f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_UART_IRQHandler+0x2f4>)
 80039d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2208      	movs	r2, #8
 80039e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f043 0208 	orr.w	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d011      	beq.n	8003a20 <HAL_UART_IRQHandler+0x168>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80b9 	beq.w	8003b9e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d004      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d031      	beq.n	8003ade <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f002 fb98 	bl	80061b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d123      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aaa:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <HAL_UART_IRQHandler+0x2fc>)
 8003aac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc ff5c 	bl	8000970 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00f      	b.n	8003aee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f87c 	bl	8003bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00b      	b.n	8003aee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f878 	bl	8003bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e007      	b.n	8003aee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f874 	bl	8003bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003aec:	e057      	b.n	8003b9e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aee:	bf00      	nop
    return;
 8003af0:	e055      	b.n	8003b9e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_UART_IRQHandler+0x260>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f002 fd53 	bl	80065bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b16:	e045      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d031      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
    }
    return;
 8003b46:	e02c      	b.n	8003ba2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_UART_IRQHandler+0x2ac>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f002 fb61 	bl	8006224 <UART_EndTransmit_IT>
    return;
 8003b62:	e01f      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_UART_IRQHandler+0x2c8>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f002 fd33 	bl	80065e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7e:	e011      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	da09      	bge.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f002 fd1d 	bl	80065d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003ba2:	bf00      	nop
  }
}
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	10000001 	.word	0x10000001
 8003bb0:	04000120 	.word	0x04000120
 8003bb4:	080061f9 	.word	0x080061f9

08003bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003be4:	b090      	sub	sp, #64	; 0x40
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c16:	4313      	orrs	r3, r2
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4bc1      	ldr	r3, [pc, #772]	; (8003f28 <UART_SetConfig+0x348>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4ab7      	ldr	r2, [pc, #732]	; (8003f2c <UART_SetConfig+0x34c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4bb2      	ldr	r3, [pc, #712]	; (8003f30 <UART_SetConfig+0x350>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f023 010f 	bic.w	r1, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4aa9      	ldr	r2, [pc, #676]	; (8003f34 <UART_SetConfig+0x354>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d177      	bne.n	8003d82 <UART_SetConfig+0x1a2>
 8003c92:	4ba9      	ldr	r3, [pc, #676]	; (8003f38 <UART_SetConfig+0x358>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	2b28      	cmp	r3, #40	; 0x28
 8003c9c:	d86c      	bhi.n	8003d78 <UART_SetConfig+0x198>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xc4>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003d49 	.word	0x08003d49
 8003ca8:	08003d79 	.word	0x08003d79
 8003cac:	08003d79 	.word	0x08003d79
 8003cb0:	08003d79 	.word	0x08003d79
 8003cb4:	08003d79 	.word	0x08003d79
 8003cb8:	08003d79 	.word	0x08003d79
 8003cbc:	08003d79 	.word	0x08003d79
 8003cc0:	08003d79 	.word	0x08003d79
 8003cc4:	08003d51 	.word	0x08003d51
 8003cc8:	08003d79 	.word	0x08003d79
 8003ccc:	08003d79 	.word	0x08003d79
 8003cd0:	08003d79 	.word	0x08003d79
 8003cd4:	08003d79 	.word	0x08003d79
 8003cd8:	08003d79 	.word	0x08003d79
 8003cdc:	08003d79 	.word	0x08003d79
 8003ce0:	08003d79 	.word	0x08003d79
 8003ce4:	08003d59 	.word	0x08003d59
 8003ce8:	08003d79 	.word	0x08003d79
 8003cec:	08003d79 	.word	0x08003d79
 8003cf0:	08003d79 	.word	0x08003d79
 8003cf4:	08003d79 	.word	0x08003d79
 8003cf8:	08003d79 	.word	0x08003d79
 8003cfc:	08003d79 	.word	0x08003d79
 8003d00:	08003d79 	.word	0x08003d79
 8003d04:	08003d61 	.word	0x08003d61
 8003d08:	08003d79 	.word	0x08003d79
 8003d0c:	08003d79 	.word	0x08003d79
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003d79 	.word	0x08003d79
 8003d1c:	08003d79 	.word	0x08003d79
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d4e:	e233      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d50:	2304      	movs	r3, #4
 8003d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d56:	e22f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d5e:	e22b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d60:	2310      	movs	r3, #16
 8003d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d66:	e227      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d6e:	e223      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d76:	e21f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d7e:	bf00      	nop
 8003d80:	e21a      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6d      	ldr	r2, [pc, #436]	; (8003f3c <UART_SetConfig+0x35c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d132      	bne.n	8003df2 <UART_SetConfig+0x212>
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <UART_SetConfig+0x358>)
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d827      	bhi.n	8003de8 <UART_SetConfig+0x208>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x1c0>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003db9 	.word	0x08003db9
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	08003dc9 	.word	0x08003dc9
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dbe:	e1fb      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dc6:	e1f7      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dce:	e1f3      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dd6:	e1ef      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003dd8:	2320      	movs	r3, #32
 8003dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dde:	e1eb      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003de0:	2340      	movs	r3, #64	; 0x40
 8003de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003de6:	e1e7      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dee:	bf00      	nop
 8003df0:	e1e2      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <UART_SetConfig+0x360>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d132      	bne.n	8003e62 <UART_SetConfig+0x282>
 8003dfc:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <UART_SetConfig+0x358>)
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d827      	bhi.n	8003e58 <UART_SetConfig+0x278>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x230>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e29 	.word	0x08003e29
 8003e14:	08003e31 	.word	0x08003e31
 8003e18:	08003e39 	.word	0x08003e39
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e2e:	e1c3      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e36:	e1bf      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e3e:	e1bb      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e46:	e1b7      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e48:	2320      	movs	r3, #32
 8003e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e4e:	e1b3      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e56:	e1af      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e5e:	bf00      	nop
 8003e60:	e1aa      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <UART_SetConfig+0x364>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d132      	bne.n	8003ed2 <UART_SetConfig+0x2f2>
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <UART_SetConfig+0x358>)
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d827      	bhi.n	8003ec8 <UART_SetConfig+0x2e8>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0x2a0>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003ea1 	.word	0x08003ea1
 8003e88:	08003ea9 	.word	0x08003ea9
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e9e:	e18b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ea6:	e187      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003eae:	e183      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003eb6:	e17f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003eb8:	2320      	movs	r3, #32
 8003eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ebe:	e17b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003ec0:	2340      	movs	r3, #64	; 0x40
 8003ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ec6:	e177      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ece:	bf00      	nop
 8003ed0:	e172      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <UART_SetConfig+0x368>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d144      	bne.n	8003f66 <UART_SetConfig+0x386>
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <UART_SetConfig+0x358>)
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d839      	bhi.n	8003f5c <UART_SetConfig+0x37c>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x310>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f09 	.word	0x08003f09
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f0e:	e153      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f16:	e14f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f1e:	e14b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f26:	e147      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f28:	cfff69f3 	.word	0xcfff69f3
 8003f2c:	58000c00 	.word	0x58000c00
 8003f30:	11fff4ff 	.word	0x11fff4ff
 8003f34:	40011000 	.word	0x40011000
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	40004800 	.word	0x40004800
 8003f44:	40004c00 	.word	0x40004c00
 8003f48:	40005000 	.word	0x40005000
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f52:	e131      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f5a:	e12d      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f62:	bf00      	nop
 8003f64:	e128      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4ac3      	ldr	r2, [pc, #780]	; (8004278 <UART_SetConfig+0x698>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d178      	bne.n	8004062 <UART_SetConfig+0x482>
 8003f70:	4bc2      	ldr	r3, [pc, #776]	; (800427c <UART_SetConfig+0x69c>)
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f78:	2b28      	cmp	r3, #40	; 0x28
 8003f7a:	d86d      	bhi.n	8004058 <UART_SetConfig+0x478>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <UART_SetConfig+0x3a4>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08004029 	.word	0x08004029
 8003f88:	08004059 	.word	0x08004059
 8003f8c:	08004059 	.word	0x08004059
 8003f90:	08004059 	.word	0x08004059
 8003f94:	08004059 	.word	0x08004059
 8003f98:	08004059 	.word	0x08004059
 8003f9c:	08004059 	.word	0x08004059
 8003fa0:	08004059 	.word	0x08004059
 8003fa4:	08004031 	.word	0x08004031
 8003fa8:	08004059 	.word	0x08004059
 8003fac:	08004059 	.word	0x08004059
 8003fb0:	08004059 	.word	0x08004059
 8003fb4:	08004059 	.word	0x08004059
 8003fb8:	08004059 	.word	0x08004059
 8003fbc:	08004059 	.word	0x08004059
 8003fc0:	08004059 	.word	0x08004059
 8003fc4:	08004039 	.word	0x08004039
 8003fc8:	08004059 	.word	0x08004059
 8003fcc:	08004059 	.word	0x08004059
 8003fd0:	08004059 	.word	0x08004059
 8003fd4:	08004059 	.word	0x08004059
 8003fd8:	08004059 	.word	0x08004059
 8003fdc:	08004059 	.word	0x08004059
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004041 	.word	0x08004041
 8003fe8:	08004059 	.word	0x08004059
 8003fec:	08004059 	.word	0x08004059
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08004059 	.word	0x08004059
 8003ff8:	08004059 	.word	0x08004059
 8003ffc:	08004059 	.word	0x08004059
 8004000:	08004059 	.word	0x08004059
 8004004:	08004049 	.word	0x08004049
 8004008:	08004059 	.word	0x08004059
 800400c:	08004059 	.word	0x08004059
 8004010:	08004059 	.word	0x08004059
 8004014:	08004059 	.word	0x08004059
 8004018:	08004059 	.word	0x08004059
 800401c:	08004059 	.word	0x08004059
 8004020:	08004059 	.word	0x08004059
 8004024:	08004051 	.word	0x08004051
 8004028:	2301      	movs	r3, #1
 800402a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800402e:	e0c3      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004030:	2304      	movs	r3, #4
 8004032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004036:	e0bf      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004038:	2308      	movs	r3, #8
 800403a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800403e:	e0bb      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004040:	2310      	movs	r3, #16
 8004042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004046:	e0b7      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004048:	2320      	movs	r3, #32
 800404a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800404e:	e0b3      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004056:	e0af      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800405e:	bf00      	nop
 8004060:	e0aa      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a86      	ldr	r2, [pc, #536]	; (8004280 <UART_SetConfig+0x6a0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d132      	bne.n	80040d2 <UART_SetConfig+0x4f2>
 800406c:	4b83      	ldr	r3, [pc, #524]	; (800427c <UART_SetConfig+0x69c>)
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	2b05      	cmp	r3, #5
 8004076:	d827      	bhi.n	80040c8 <UART_SetConfig+0x4e8>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0x4a0>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	08004099 	.word	0x08004099
 8004084:	080040a1 	.word	0x080040a1
 8004088:	080040a9 	.word	0x080040a9
 800408c:	080040b1 	.word	0x080040b1
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040c1 	.word	0x080040c1
 8004098:	2300      	movs	r3, #0
 800409a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800409e:	e08b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040a6:	e087      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040ae:	e083      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040b6:	e07f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040b8:	2320      	movs	r3, #32
 80040ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040be:	e07b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040c0:	2340      	movs	r3, #64	; 0x40
 80040c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040c6:	e077      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040ce:	bf00      	nop
 80040d0:	e072      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <UART_SetConfig+0x6a4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d132      	bne.n	8004142 <UART_SetConfig+0x562>
 80040dc:	4b67      	ldr	r3, [pc, #412]	; (800427c <UART_SetConfig+0x69c>)
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d827      	bhi.n	8004138 <UART_SetConfig+0x558>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0x510>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004109 	.word	0x08004109
 80040f4:	08004111 	.word	0x08004111
 80040f8:	08004119 	.word	0x08004119
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004129 	.word	0x08004129
 8004104:	08004131 	.word	0x08004131
 8004108:	2300      	movs	r3, #0
 800410a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800410e:	e053      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004116:	e04f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800411e:	e04b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004126:	e047      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004128:	2320      	movs	r3, #32
 800412a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800412e:	e043      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004130:	2340      	movs	r3, #64	; 0x40
 8004132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004136:	e03f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800413e:	bf00      	nop
 8004140:	e03a      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a50      	ldr	r2, [pc, #320]	; (8004288 <UART_SetConfig+0x6a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d132      	bne.n	80041b2 <UART_SetConfig+0x5d2>
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <UART_SetConfig+0x69c>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	2b05      	cmp	r3, #5
 8004156:	d827      	bhi.n	80041a8 <UART_SetConfig+0x5c8>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x580>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004179 	.word	0x08004179
 8004164:	08004181 	.word	0x08004181
 8004168:	08004189 	.word	0x08004189
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	2302      	movs	r3, #2
 800417a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800417e:	e01b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004186:	e017      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800418e:	e013      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004196:	e00f      	b.n	80041b8 <UART_SetConfig+0x5d8>
 8004198:	2320      	movs	r3, #32
 800419a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800419e:	e00b      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80041a0:	2340      	movs	r3, #64	; 0x40
 80041a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041a6:	e007      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <UART_SetConfig+0x5d8>
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a32      	ldr	r2, [pc, #200]	; (8004288 <UART_SetConfig+0x6a8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f040 86f7 	bne.w	8004fb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	f000 80c0 	beq.w	800434e <UART_SetConfig+0x76e>
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	dc04      	bgt.n	80041dc <UART_SetConfig+0x5fc>
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d00c      	beq.n	80041f0 <UART_SetConfig+0x610>
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d065      	beq.n	80042a6 <UART_SetConfig+0x6c6>
 80041da:	e27a      	b.n	80046d2 <UART_SetConfig+0xaf2>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	f000 81b0 	beq.w	8004542 <UART_SetConfig+0x962>
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	f000 821e 	beq.w	8004624 <UART_SetConfig+0xa44>
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	f000 8104 	beq.w	80043f6 <UART_SetConfig+0x816>
 80041ee:	e270      	b.n	80046d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041f0:	f7fe fd76 	bl	8002ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04e      	beq.n	800429c <UART_SetConfig+0x6bc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b01      	cmp	r3, #1
 8004204:	d048      	beq.n	8004298 <UART_SetConfig+0x6b8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b02      	cmp	r3, #2
 800420c:	d042      	beq.n	8004294 <UART_SetConfig+0x6b4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b03      	cmp	r3, #3
 8004214:	d03c      	beq.n	8004290 <UART_SetConfig+0x6b0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b04      	cmp	r3, #4
 800421c:	d036      	beq.n	800428c <UART_SetConfig+0x6ac>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b05      	cmp	r3, #5
 8004224:	d026      	beq.n	8004274 <UART_SetConfig+0x694>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b06      	cmp	r3, #6
 800422c:	d020      	beq.n	8004270 <UART_SetConfig+0x690>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b07      	cmp	r3, #7
 8004234:	d01a      	beq.n	800426c <UART_SetConfig+0x68c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b08      	cmp	r3, #8
 800423c:	d014      	beq.n	8004268 <UART_SetConfig+0x688>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b09      	cmp	r3, #9
 8004244:	d00e      	beq.n	8004264 <UART_SetConfig+0x684>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d008      	beq.n	8004260 <UART_SetConfig+0x680>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	2b0b      	cmp	r3, #11
 8004254:	d102      	bne.n	800425c <UART_SetConfig+0x67c>
 8004256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425a:	e020      	b.n	800429e <UART_SetConfig+0x6be>
 800425c:	2301      	movs	r3, #1
 800425e:	e01e      	b.n	800429e <UART_SetConfig+0x6be>
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	e01c      	b.n	800429e <UART_SetConfig+0x6be>
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	e01a      	b.n	800429e <UART_SetConfig+0x6be>
 8004268:	2320      	movs	r3, #32
 800426a:	e018      	b.n	800429e <UART_SetConfig+0x6be>
 800426c:	2310      	movs	r3, #16
 800426e:	e016      	b.n	800429e <UART_SetConfig+0x6be>
 8004270:	230c      	movs	r3, #12
 8004272:	e014      	b.n	800429e <UART_SetConfig+0x6be>
 8004274:	230a      	movs	r3, #10
 8004276:	e012      	b.n	800429e <UART_SetConfig+0x6be>
 8004278:	40011400 	.word	0x40011400
 800427c:	58024400 	.word	0x58024400
 8004280:	40007800 	.word	0x40007800
 8004284:	40007c00 	.word	0x40007c00
 8004288:	58000c00 	.word	0x58000c00
 800428c:	2308      	movs	r3, #8
 800428e:	e006      	b.n	800429e <UART_SetConfig+0x6be>
 8004290:	2306      	movs	r3, #6
 8004292:	e004      	b.n	800429e <UART_SetConfig+0x6be>
 8004294:	2304      	movs	r3, #4
 8004296:	e002      	b.n	800429e <UART_SetConfig+0x6be>
 8004298:	2302      	movs	r3, #2
 800429a:	e000      	b.n	800429e <UART_SetConfig+0x6be>
 800429c:	2301      	movs	r3, #1
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042a4:	e219      	b.n	80046da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042a6:	f107 0318 	add.w	r3, r7, #24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fd2e 	bl	8002d0c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d044      	beq.n	8004344 <UART_SetConfig+0x764>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d03e      	beq.n	8004340 <UART_SetConfig+0x760>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d038      	beq.n	800433c <UART_SetConfig+0x75c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d032      	beq.n	8004338 <UART_SetConfig+0x758>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d02c      	beq.n	8004334 <UART_SetConfig+0x754>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d026      	beq.n	8004330 <UART_SetConfig+0x750>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d020      	beq.n	800432c <UART_SetConfig+0x74c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	d01a      	beq.n	8004328 <UART_SetConfig+0x748>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d014      	beq.n	8004324 <UART_SetConfig+0x744>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b09      	cmp	r3, #9
 8004300:	d00e      	beq.n	8004320 <UART_SetConfig+0x740>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b0a      	cmp	r3, #10
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x73c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b0b      	cmp	r3, #11
 8004310:	d102      	bne.n	8004318 <UART_SetConfig+0x738>
 8004312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004316:	e016      	b.n	8004346 <UART_SetConfig+0x766>
 8004318:	2301      	movs	r3, #1
 800431a:	e014      	b.n	8004346 <UART_SetConfig+0x766>
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	e012      	b.n	8004346 <UART_SetConfig+0x766>
 8004320:	2340      	movs	r3, #64	; 0x40
 8004322:	e010      	b.n	8004346 <UART_SetConfig+0x766>
 8004324:	2320      	movs	r3, #32
 8004326:	e00e      	b.n	8004346 <UART_SetConfig+0x766>
 8004328:	2310      	movs	r3, #16
 800432a:	e00c      	b.n	8004346 <UART_SetConfig+0x766>
 800432c:	230c      	movs	r3, #12
 800432e:	e00a      	b.n	8004346 <UART_SetConfig+0x766>
 8004330:	230a      	movs	r3, #10
 8004332:	e008      	b.n	8004346 <UART_SetConfig+0x766>
 8004334:	2308      	movs	r3, #8
 8004336:	e006      	b.n	8004346 <UART_SetConfig+0x766>
 8004338:	2306      	movs	r3, #6
 800433a:	e004      	b.n	8004346 <UART_SetConfig+0x766>
 800433c:	2304      	movs	r3, #4
 800433e:	e002      	b.n	8004346 <UART_SetConfig+0x766>
 8004340:	2302      	movs	r3, #2
 8004342:	e000      	b.n	8004346 <UART_SetConfig+0x766>
 8004344:	2301      	movs	r3, #1
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800434c:	e1c5      	b.n	80046da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800434e:	f107 030c 	add.w	r3, r7, #12
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fe26 	bl	8002fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d044      	beq.n	80043ec <UART_SetConfig+0x80c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b01      	cmp	r3, #1
 8004368:	d03e      	beq.n	80043e8 <UART_SetConfig+0x808>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b02      	cmp	r3, #2
 8004370:	d038      	beq.n	80043e4 <UART_SetConfig+0x804>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b03      	cmp	r3, #3
 8004378:	d032      	beq.n	80043e0 <UART_SetConfig+0x800>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b04      	cmp	r3, #4
 8004380:	d02c      	beq.n	80043dc <UART_SetConfig+0x7fc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b05      	cmp	r3, #5
 8004388:	d026      	beq.n	80043d8 <UART_SetConfig+0x7f8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b06      	cmp	r3, #6
 8004390:	d020      	beq.n	80043d4 <UART_SetConfig+0x7f4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b07      	cmp	r3, #7
 8004398:	d01a      	beq.n	80043d0 <UART_SetConfig+0x7f0>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d014      	beq.n	80043cc <UART_SetConfig+0x7ec>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d00e      	beq.n	80043c8 <UART_SetConfig+0x7e8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b0a      	cmp	r3, #10
 80043b0:	d008      	beq.n	80043c4 <UART_SetConfig+0x7e4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b0b      	cmp	r3, #11
 80043b8:	d102      	bne.n	80043c0 <UART_SetConfig+0x7e0>
 80043ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043be:	e016      	b.n	80043ee <UART_SetConfig+0x80e>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e014      	b.n	80043ee <UART_SetConfig+0x80e>
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	e012      	b.n	80043ee <UART_SetConfig+0x80e>
 80043c8:	2340      	movs	r3, #64	; 0x40
 80043ca:	e010      	b.n	80043ee <UART_SetConfig+0x80e>
 80043cc:	2320      	movs	r3, #32
 80043ce:	e00e      	b.n	80043ee <UART_SetConfig+0x80e>
 80043d0:	2310      	movs	r3, #16
 80043d2:	e00c      	b.n	80043ee <UART_SetConfig+0x80e>
 80043d4:	230c      	movs	r3, #12
 80043d6:	e00a      	b.n	80043ee <UART_SetConfig+0x80e>
 80043d8:	230a      	movs	r3, #10
 80043da:	e008      	b.n	80043ee <UART_SetConfig+0x80e>
 80043dc:	2308      	movs	r3, #8
 80043de:	e006      	b.n	80043ee <UART_SetConfig+0x80e>
 80043e0:	2306      	movs	r3, #6
 80043e2:	e004      	b.n	80043ee <UART_SetConfig+0x80e>
 80043e4:	2304      	movs	r3, #4
 80043e6:	e002      	b.n	80043ee <UART_SetConfig+0x80e>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e000      	b.n	80043ee <UART_SetConfig+0x80e>
 80043ec:	2301      	movs	r3, #1
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f4:	e171      	b.n	80046da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f6:	4b7a      	ldr	r3, [pc, #488]	; (80045e0 <UART_SetConfig+0xa00>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d054      	beq.n	80044ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004402:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <UART_SetConfig+0xa00>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <UART_SetConfig+0xa04>)
 800440e:	40da      	lsrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d044      	beq.n	80044a2 <UART_SetConfig+0x8c2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2b01      	cmp	r3, #1
 800441e:	d03e      	beq.n	800449e <UART_SetConfig+0x8be>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b02      	cmp	r3, #2
 8004426:	d038      	beq.n	800449a <UART_SetConfig+0x8ba>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b03      	cmp	r3, #3
 800442e:	d032      	beq.n	8004496 <UART_SetConfig+0x8b6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b04      	cmp	r3, #4
 8004436:	d02c      	beq.n	8004492 <UART_SetConfig+0x8b2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b05      	cmp	r3, #5
 800443e:	d026      	beq.n	800448e <UART_SetConfig+0x8ae>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b06      	cmp	r3, #6
 8004446:	d020      	beq.n	800448a <UART_SetConfig+0x8aa>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b07      	cmp	r3, #7
 800444e:	d01a      	beq.n	8004486 <UART_SetConfig+0x8a6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b08      	cmp	r3, #8
 8004456:	d014      	beq.n	8004482 <UART_SetConfig+0x8a2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b09      	cmp	r3, #9
 800445e:	d00e      	beq.n	800447e <UART_SetConfig+0x89e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b0a      	cmp	r3, #10
 8004466:	d008      	beq.n	800447a <UART_SetConfig+0x89a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b0b      	cmp	r3, #11
 800446e:	d102      	bne.n	8004476 <UART_SetConfig+0x896>
 8004470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004474:	e016      	b.n	80044a4 <UART_SetConfig+0x8c4>
 8004476:	2301      	movs	r3, #1
 8004478:	e014      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	e012      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	e010      	b.n	80044a4 <UART_SetConfig+0x8c4>
 8004482:	2320      	movs	r3, #32
 8004484:	e00e      	b.n	80044a4 <UART_SetConfig+0x8c4>
 8004486:	2310      	movs	r3, #16
 8004488:	e00c      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800448a:	230c      	movs	r3, #12
 800448c:	e00a      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800448e:	230a      	movs	r3, #10
 8004490:	e008      	b.n	80044a4 <UART_SetConfig+0x8c4>
 8004492:	2308      	movs	r3, #8
 8004494:	e006      	b.n	80044a4 <UART_SetConfig+0x8c4>
 8004496:	2306      	movs	r3, #6
 8004498:	e004      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800449a:	2304      	movs	r3, #4
 800449c:	e002      	b.n	80044a4 <UART_SetConfig+0x8c4>
 800449e:	2302      	movs	r3, #2
 80044a0:	e000      	b.n	80044a4 <UART_SetConfig+0x8c4>
 80044a2:	2301      	movs	r3, #1
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80044aa:	e116      	b.n	80046da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d043      	beq.n	800453c <UART_SetConfig+0x95c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d03d      	beq.n	8004538 <UART_SetConfig+0x958>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d037      	beq.n	8004534 <UART_SetConfig+0x954>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d031      	beq.n	8004530 <UART_SetConfig+0x950>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d02b      	beq.n	800452c <UART_SetConfig+0x94c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d025      	beq.n	8004528 <UART_SetConfig+0x948>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d01f      	beq.n	8004524 <UART_SetConfig+0x944>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d019      	beq.n	8004520 <UART_SetConfig+0x940>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d013      	beq.n	800451c <UART_SetConfig+0x93c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d00d      	beq.n	8004518 <UART_SetConfig+0x938>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b0a      	cmp	r3, #10
 8004502:	d007      	beq.n	8004514 <UART_SetConfig+0x934>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b0b      	cmp	r3, #11
 800450a:	d101      	bne.n	8004510 <UART_SetConfig+0x930>
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <UART_SetConfig+0xa08>)
 800450e:	e016      	b.n	800453e <UART_SetConfig+0x95e>
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <UART_SetConfig+0xa04>)
 8004512:	e014      	b.n	800453e <UART_SetConfig+0x95e>
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <UART_SetConfig+0xa0c>)
 8004516:	e012      	b.n	800453e <UART_SetConfig+0x95e>
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <UART_SetConfig+0xa10>)
 800451a:	e010      	b.n	800453e <UART_SetConfig+0x95e>
 800451c:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <UART_SetConfig+0xa14>)
 800451e:	e00e      	b.n	800453e <UART_SetConfig+0x95e>
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <UART_SetConfig+0xa18>)
 8004522:	e00c      	b.n	800453e <UART_SetConfig+0x95e>
 8004524:	4b35      	ldr	r3, [pc, #212]	; (80045fc <UART_SetConfig+0xa1c>)
 8004526:	e00a      	b.n	800453e <UART_SetConfig+0x95e>
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <UART_SetConfig+0xa20>)
 800452a:	e008      	b.n	800453e <UART_SetConfig+0x95e>
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <UART_SetConfig+0xa24>)
 800452e:	e006      	b.n	800453e <UART_SetConfig+0x95e>
 8004530:	4b35      	ldr	r3, [pc, #212]	; (8004608 <UART_SetConfig+0xa28>)
 8004532:	e004      	b.n	800453e <UART_SetConfig+0x95e>
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <UART_SetConfig+0xa2c>)
 8004536:	e002      	b.n	800453e <UART_SetConfig+0x95e>
 8004538:	4b35      	ldr	r3, [pc, #212]	; (8004610 <UART_SetConfig+0xa30>)
 800453a:	e000      	b.n	800453e <UART_SetConfig+0x95e>
 800453c:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <UART_SetConfig+0xa04>)
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004540:	e0cb      	b.n	80046da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d046      	beq.n	80045d8 <UART_SetConfig+0x9f8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b01      	cmp	r3, #1
 8004550:	d040      	beq.n	80045d4 <UART_SetConfig+0x9f4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b02      	cmp	r3, #2
 8004558:	d03a      	beq.n	80045d0 <UART_SetConfig+0x9f0>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b03      	cmp	r3, #3
 8004560:	d034      	beq.n	80045cc <UART_SetConfig+0x9ec>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b04      	cmp	r3, #4
 8004568:	d02e      	beq.n	80045c8 <UART_SetConfig+0x9e8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b05      	cmp	r3, #5
 8004570:	d028      	beq.n	80045c4 <UART_SetConfig+0x9e4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b06      	cmp	r3, #6
 8004578:	d022      	beq.n	80045c0 <UART_SetConfig+0x9e0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b07      	cmp	r3, #7
 8004580:	d01c      	beq.n	80045bc <UART_SetConfig+0x9dc>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b08      	cmp	r3, #8
 8004588:	d016      	beq.n	80045b8 <UART_SetConfig+0x9d8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b09      	cmp	r3, #9
 8004590:	d00f      	beq.n	80045b2 <UART_SetConfig+0x9d2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b0a      	cmp	r3, #10
 8004598:	d008      	beq.n	80045ac <UART_SetConfig+0x9cc>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b0b      	cmp	r3, #11
 80045a0:	d102      	bne.n	80045a8 <UART_SetConfig+0x9c8>
 80045a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80045a6:	e018      	b.n	80045da <UART_SetConfig+0x9fa>
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <UART_SetConfig+0xa18>)
 80045aa:	e016      	b.n	80045da <UART_SetConfig+0x9fa>
 80045ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 80045b0:	e013      	b.n	80045da <UART_SetConfig+0x9fa>
 80045b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045b6:	e010      	b.n	80045da <UART_SetConfig+0x9fa>
 80045b8:	4b16      	ldr	r3, [pc, #88]	; (8004614 <UART_SetConfig+0xa34>)
 80045ba:	e00e      	b.n	80045da <UART_SetConfig+0x9fa>
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <UART_SetConfig+0xa08>)
 80045be:	e00c      	b.n	80045da <UART_SetConfig+0x9fa>
 80045c0:	4b15      	ldr	r3, [pc, #84]	; (8004618 <UART_SetConfig+0xa38>)
 80045c2:	e00a      	b.n	80045da <UART_SetConfig+0x9fa>
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <UART_SetConfig+0xa3c>)
 80045c6:	e008      	b.n	80045da <UART_SetConfig+0x9fa>
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <UART_SetConfig+0xa0c>)
 80045ca:	e006      	b.n	80045da <UART_SetConfig+0x9fa>
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <UART_SetConfig+0xa40>)
 80045ce:	e004      	b.n	80045da <UART_SetConfig+0x9fa>
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <UART_SetConfig+0xa10>)
 80045d2:	e002      	b.n	80045da <UART_SetConfig+0x9fa>
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <UART_SetConfig+0xa14>)
 80045d6:	e000      	b.n	80045da <UART_SetConfig+0x9fa>
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <UART_SetConfig+0xa18>)
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045dc:	e07d      	b.n	80046da <UART_SetConfig+0xafa>
 80045de:	bf00      	nop
 80045e0:	58024400 	.word	0x58024400
 80045e4:	03d09000 	.word	0x03d09000
 80045e8:	0003d090 	.word	0x0003d090
 80045ec:	0007a120 	.word	0x0007a120
 80045f0:	000f4240 	.word	0x000f4240
 80045f4:	001e8480 	.word	0x001e8480
 80045f8:	003d0900 	.word	0x003d0900
 80045fc:	00516155 	.word	0x00516155
 8004600:	0061a800 	.word	0x0061a800
 8004604:	007a1200 	.word	0x007a1200
 8004608:	00a2c2aa 	.word	0x00a2c2aa
 800460c:	00f42400 	.word	0x00f42400
 8004610:	01e84800 	.word	0x01e84800
 8004614:	0001e848 	.word	0x0001e848
 8004618:	00051615 	.word	0x00051615
 800461c:	00061a80 	.word	0x00061a80
 8004620:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d04e      	beq.n	80046ca <UART_SetConfig+0xaea>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b01      	cmp	r3, #1
 8004632:	d047      	beq.n	80046c4 <UART_SetConfig+0xae4>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b02      	cmp	r3, #2
 800463a:	d040      	beq.n	80046be <UART_SetConfig+0xade>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b03      	cmp	r3, #3
 8004642:	d039      	beq.n	80046b8 <UART_SetConfig+0xad8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b04      	cmp	r3, #4
 800464a:	d032      	beq.n	80046b2 <UART_SetConfig+0xad2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b05      	cmp	r3, #5
 8004652:	d02b      	beq.n	80046ac <UART_SetConfig+0xacc>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b06      	cmp	r3, #6
 800465a:	d024      	beq.n	80046a6 <UART_SetConfig+0xac6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b07      	cmp	r3, #7
 8004662:	d01d      	beq.n	80046a0 <UART_SetConfig+0xac0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b08      	cmp	r3, #8
 800466a:	d016      	beq.n	800469a <UART_SetConfig+0xaba>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b09      	cmp	r3, #9
 8004672:	d00f      	beq.n	8004694 <UART_SetConfig+0xab4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b0a      	cmp	r3, #10
 800467a:	d008      	beq.n	800468e <UART_SetConfig+0xaae>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b0b      	cmp	r3, #11
 8004682:	d101      	bne.n	8004688 <UART_SetConfig+0xaa8>
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	e022      	b.n	80046ce <UART_SetConfig+0xaee>
 8004688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468c:	e01f      	b.n	80046ce <UART_SetConfig+0xaee>
 800468e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004692:	e01c      	b.n	80046ce <UART_SetConfig+0xaee>
 8004694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004698:	e019      	b.n	80046ce <UART_SetConfig+0xaee>
 800469a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469e:	e016      	b.n	80046ce <UART_SetConfig+0xaee>
 80046a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046a4:	e013      	b.n	80046ce <UART_SetConfig+0xaee>
 80046a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80046aa:	e010      	b.n	80046ce <UART_SetConfig+0xaee>
 80046ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 80046b0:	e00d      	b.n	80046ce <UART_SetConfig+0xaee>
 80046b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b6:	e00a      	b.n	80046ce <UART_SetConfig+0xaee>
 80046b8:	f241 5355 	movw	r3, #5461	; 0x1555
 80046bc:	e007      	b.n	80046ce <UART_SetConfig+0xaee>
 80046be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046c2:	e004      	b.n	80046ce <UART_SetConfig+0xaee>
 80046c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c8:	e001      	b.n	80046ce <UART_SetConfig+0xaee>
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046d0:	e003      	b.n	80046da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80046d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f001 83e8 	beq.w	8005eb2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d305      	bcc.n	80046fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d904      	bls.n	8004708 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004704:	f001 bbd5 	b.w	8005eb2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800470c:	2b08      	cmp	r3, #8
 800470e:	f000 8154 	beq.w	80049ba <UART_SetConfig+0xdda>
 8004712:	2b08      	cmp	r3, #8
 8004714:	dc06      	bgt.n	8004724 <UART_SetConfig+0xb44>
 8004716:	2b02      	cmp	r3, #2
 8004718:	d00f      	beq.n	800473a <UART_SetConfig+0xb5a>
 800471a:	2b04      	cmp	r3, #4
 800471c:	f000 80ac 	beq.w	8004878 <UART_SetConfig+0xc98>
 8004720:	f000 bc30 	b.w	8004f84 <UART_SetConfig+0x13a4>
 8004724:	2b20      	cmp	r3, #32
 8004726:	f000 832d 	beq.w	8004d84 <UART_SetConfig+0x11a4>
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	f000 83a5 	beq.w	8004e7a <UART_SetConfig+0x129a>
 8004730:	2b10      	cmp	r3, #16
 8004732:	f000 81e3 	beq.w	8004afc <UART_SetConfig+0xf1c>
 8004736:	f000 bc25 	b.w	8004f84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800473a:	f7fe fad1 	bl	8002ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 800473e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	4618      	mov	r0, r3
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d067      	beq.n	8004820 <UART_SetConfig+0xc40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b01      	cmp	r3, #1
 8004756:	d05e      	beq.n	8004816 <UART_SetConfig+0xc36>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b02      	cmp	r3, #2
 800475e:	d055      	beq.n	800480c <UART_SetConfig+0xc2c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b03      	cmp	r3, #3
 8004766:	d04c      	beq.n	8004802 <UART_SetConfig+0xc22>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b04      	cmp	r3, #4
 800476e:	d043      	beq.n	80047f8 <UART_SetConfig+0xc18>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b05      	cmp	r3, #5
 8004776:	d03a      	beq.n	80047ee <UART_SetConfig+0xc0e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b06      	cmp	r3, #6
 800477e:	d031      	beq.n	80047e4 <UART_SetConfig+0xc04>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b07      	cmp	r3, #7
 8004786:	d028      	beq.n	80047da <UART_SetConfig+0xbfa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2b08      	cmp	r3, #8
 800478e:	d01f      	beq.n	80047d0 <UART_SetConfig+0xbf0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2b09      	cmp	r3, #9
 8004796:	d016      	beq.n	80047c6 <UART_SetConfig+0xbe6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b0a      	cmp	r3, #10
 800479e:	d00d      	beq.n	80047bc <UART_SetConfig+0xbdc>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	2b0b      	cmp	r3, #11
 80047a6:	d104      	bne.n	80047b2 <UART_SetConfig+0xbd2>
 80047a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	e03a      	b.n	8004828 <UART_SetConfig+0xc48>
 80047b2:	f04f 0301 	mov.w	r3, #1
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	e035      	b.n	8004828 <UART_SetConfig+0xc48>
 80047bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80047c0:	f04f 0400 	mov.w	r4, #0
 80047c4:	e030      	b.n	8004828 <UART_SetConfig+0xc48>
 80047c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	e02b      	b.n	8004828 <UART_SetConfig+0xc48>
 80047d0:	f04f 0320 	mov.w	r3, #32
 80047d4:	f04f 0400 	mov.w	r4, #0
 80047d8:	e026      	b.n	8004828 <UART_SetConfig+0xc48>
 80047da:	f04f 0310 	mov.w	r3, #16
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	e021      	b.n	8004828 <UART_SetConfig+0xc48>
 80047e4:	f04f 030c 	mov.w	r3, #12
 80047e8:	f04f 0400 	mov.w	r4, #0
 80047ec:	e01c      	b.n	8004828 <UART_SetConfig+0xc48>
 80047ee:	f04f 030a 	mov.w	r3, #10
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	e017      	b.n	8004828 <UART_SetConfig+0xc48>
 80047f8:	f04f 0308 	mov.w	r3, #8
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	e012      	b.n	8004828 <UART_SetConfig+0xc48>
 8004802:	f04f 0306 	mov.w	r3, #6
 8004806:	f04f 0400 	mov.w	r4, #0
 800480a:	e00d      	b.n	8004828 <UART_SetConfig+0xc48>
 800480c:	f04f 0304 	mov.w	r3, #4
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	e008      	b.n	8004828 <UART_SetConfig+0xc48>
 8004816:	f04f 0302 	mov.w	r3, #2
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	e003      	b.n	8004828 <UART_SetConfig+0xc48>
 8004820:	f04f 0301 	mov.w	r3, #1
 8004824:	f04f 0400 	mov.w	r4, #0
 8004828:	461a      	mov	r2, r3
 800482a:	4623      	mov	r3, r4
 800482c:	f7fb fd54 	bl	80002d8 <__aeabi_uldivmod>
 8004830:	4603      	mov	r3, r0
 8004832:	460c      	mov	r4, r1
 8004834:	4619      	mov	r1, r3
 8004836:	4622      	mov	r2, r4
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	f04f 0400 	mov.w	r4, #0
 8004840:	0214      	lsls	r4, r2, #8
 8004842:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004846:	020b      	lsls	r3, r1, #8
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6852      	ldr	r2, [r2, #4]
 800484c:	0852      	lsrs	r2, r2, #1
 800484e:	4611      	mov	r1, r2
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	eb13 0b01 	adds.w	fp, r3, r1
 8004858:	eb44 0c02 	adc.w	ip, r4, r2
 800485c:	4658      	mov	r0, fp
 800485e:	4661      	mov	r1, ip
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f04f 0400 	mov.w	r4, #0
 8004868:	461a      	mov	r2, r3
 800486a:	4623      	mov	r3, r4
 800486c:	f7fb fd34 	bl	80002d8 <__aeabi_uldivmod>
 8004870:	4603      	mov	r3, r0
 8004872:	460c      	mov	r4, r1
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004876:	e389      	b.n	8004f8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004878:	f107 0318 	add.w	r3, r7, #24
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fa45 	bl	8002d0c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4618      	mov	r0, r3
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d067      	beq.n	8004962 <UART_SetConfig+0xd82>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b01      	cmp	r3, #1
 8004898:	d05e      	beq.n	8004958 <UART_SetConfig+0xd78>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d055      	beq.n	800494e <UART_SetConfig+0xd6e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d04c      	beq.n	8004944 <UART_SetConfig+0xd64>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d043      	beq.n	800493a <UART_SetConfig+0xd5a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d03a      	beq.n	8004930 <UART_SetConfig+0xd50>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d031      	beq.n	8004926 <UART_SetConfig+0xd46>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d028      	beq.n	800491c <UART_SetConfig+0xd3c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d01f      	beq.n	8004912 <UART_SetConfig+0xd32>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d016      	beq.n	8004908 <UART_SetConfig+0xd28>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b0a      	cmp	r3, #10
 80048e0:	d00d      	beq.n	80048fe <UART_SetConfig+0xd1e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b0b      	cmp	r3, #11
 80048e8:	d104      	bne.n	80048f4 <UART_SetConfig+0xd14>
 80048ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	e03a      	b.n	800496a <UART_SetConfig+0xd8a>
 80048f4:	f04f 0301 	mov.w	r3, #1
 80048f8:	f04f 0400 	mov.w	r4, #0
 80048fc:	e035      	b.n	800496a <UART_SetConfig+0xd8a>
 80048fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004902:	f04f 0400 	mov.w	r4, #0
 8004906:	e030      	b.n	800496a <UART_SetConfig+0xd8a>
 8004908:	f04f 0340 	mov.w	r3, #64	; 0x40
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	e02b      	b.n	800496a <UART_SetConfig+0xd8a>
 8004912:	f04f 0320 	mov.w	r3, #32
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	e026      	b.n	800496a <UART_SetConfig+0xd8a>
 800491c:	f04f 0310 	mov.w	r3, #16
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	e021      	b.n	800496a <UART_SetConfig+0xd8a>
 8004926:	f04f 030c 	mov.w	r3, #12
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	e01c      	b.n	800496a <UART_SetConfig+0xd8a>
 8004930:	f04f 030a 	mov.w	r3, #10
 8004934:	f04f 0400 	mov.w	r4, #0
 8004938:	e017      	b.n	800496a <UART_SetConfig+0xd8a>
 800493a:	f04f 0308 	mov.w	r3, #8
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	e012      	b.n	800496a <UART_SetConfig+0xd8a>
 8004944:	f04f 0306 	mov.w	r3, #6
 8004948:	f04f 0400 	mov.w	r4, #0
 800494c:	e00d      	b.n	800496a <UART_SetConfig+0xd8a>
 800494e:	f04f 0304 	mov.w	r3, #4
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	e008      	b.n	800496a <UART_SetConfig+0xd8a>
 8004958:	f04f 0302 	mov.w	r3, #2
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xd8a>
 8004962:	f04f 0301 	mov.w	r3, #1
 8004966:	f04f 0400 	mov.w	r4, #0
 800496a:	461a      	mov	r2, r3
 800496c:	4623      	mov	r3, r4
 800496e:	f7fb fcb3 	bl	80002d8 <__aeabi_uldivmod>
 8004972:	4603      	mov	r3, r0
 8004974:	460c      	mov	r4, r1
 8004976:	4619      	mov	r1, r3
 8004978:	4622      	mov	r2, r4
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	f04f 0400 	mov.w	r4, #0
 8004982:	0214      	lsls	r4, r2, #8
 8004984:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004988:	020b      	lsls	r3, r1, #8
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6852      	ldr	r2, [r2, #4]
 800498e:	0852      	lsrs	r2, r2, #1
 8004990:	4611      	mov	r1, r2
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	eb13 0b01 	adds.w	fp, r3, r1
 800499a:	eb44 0c02 	adc.w	ip, r4, r2
 800499e:	4658      	mov	r0, fp
 80049a0:	4661      	mov	r1, ip
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	461a      	mov	r2, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	f7fb fc93 	bl	80002d8 <__aeabi_uldivmod>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80049b8:	e2e8      	b.n	8004f8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe faf0 	bl	8002fa4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d067      	beq.n	8004aa4 <UART_SetConfig+0xec4>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d05e      	beq.n	8004a9a <UART_SetConfig+0xeba>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d055      	beq.n	8004a90 <UART_SetConfig+0xeb0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d04c      	beq.n	8004a86 <UART_SetConfig+0xea6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d043      	beq.n	8004a7c <UART_SetConfig+0xe9c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d03a      	beq.n	8004a72 <UART_SetConfig+0xe92>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b06      	cmp	r3, #6
 8004a02:	d031      	beq.n	8004a68 <UART_SetConfig+0xe88>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b07      	cmp	r3, #7
 8004a0a:	d028      	beq.n	8004a5e <UART_SetConfig+0xe7e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d01f      	beq.n	8004a54 <UART_SetConfig+0xe74>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b09      	cmp	r3, #9
 8004a1a:	d016      	beq.n	8004a4a <UART_SetConfig+0xe6a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b0a      	cmp	r3, #10
 8004a22:	d00d      	beq.n	8004a40 <UART_SetConfig+0xe60>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b0b      	cmp	r3, #11
 8004a2a:	d104      	bne.n	8004a36 <UART_SetConfig+0xe56>
 8004a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	e03a      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a36:	f04f 0301 	mov.w	r3, #1
 8004a3a:	f04f 0400 	mov.w	r4, #0
 8004a3e:	e035      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a40:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	e030      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004a4e:	f04f 0400 	mov.w	r4, #0
 8004a52:	e02b      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a54:	f04f 0320 	mov.w	r3, #32
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	e026      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a5e:	f04f 0310 	mov.w	r3, #16
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	e021      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a68:	f04f 030c 	mov.w	r3, #12
 8004a6c:	f04f 0400 	mov.w	r4, #0
 8004a70:	e01c      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a72:	f04f 030a 	mov.w	r3, #10
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	e017      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a7c:	f04f 0308 	mov.w	r3, #8
 8004a80:	f04f 0400 	mov.w	r4, #0
 8004a84:	e012      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a86:	f04f 0306 	mov.w	r3, #6
 8004a8a:	f04f 0400 	mov.w	r4, #0
 8004a8e:	e00d      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a90:	f04f 0304 	mov.w	r3, #4
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	e008      	b.n	8004aac <UART_SetConfig+0xecc>
 8004a9a:	f04f 0302 	mov.w	r3, #2
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	e003      	b.n	8004aac <UART_SetConfig+0xecc>
 8004aa4:	f04f 0301 	mov.w	r3, #1
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fb fc12 	bl	80002d8 <__aeabi_uldivmod>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4622      	mov	r2, r4
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	0214      	lsls	r4, r2, #8
 8004ac6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004aca:	020b      	lsls	r3, r1, #8
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6852      	ldr	r2, [r2, #4]
 8004ad0:	0852      	lsrs	r2, r2, #1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	eb13 0b01 	adds.w	fp, r3, r1
 8004adc:	eb44 0c02 	adc.w	ip, r4, r2
 8004ae0:	4658      	mov	r0, fp
 8004ae2:	4661      	mov	r1, ip
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f04f 0400 	mov.w	r4, #0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	f7fb fbf2 	bl	80002d8 <__aeabi_uldivmod>
 8004af4:	4603      	mov	r3, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004afa:	e247      	b.n	8004f8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afc:	4b96      	ldr	r3, [pc, #600]	; (8004d58 <UART_SetConfig+0x1178>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a3 	beq.w	8004c50 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b0a:	4b93      	ldr	r3, [pc, #588]	; (8004d58 <UART_SetConfig+0x1178>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	4a91      	ldr	r2, [pc, #580]	; (8004d5c <UART_SetConfig+0x117c>)
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d067      	beq.n	8004bf8 <UART_SetConfig+0x1018>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d05e      	beq.n	8004bee <UART_SetConfig+0x100e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d055      	beq.n	8004be4 <UART_SetConfig+0x1004>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d04c      	beq.n	8004bda <UART_SetConfig+0xffa>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d043      	beq.n	8004bd0 <UART_SetConfig+0xff0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d03a      	beq.n	8004bc6 <UART_SetConfig+0xfe6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d031      	beq.n	8004bbc <UART_SetConfig+0xfdc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d028      	beq.n	8004bb2 <UART_SetConfig+0xfd2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d01f      	beq.n	8004ba8 <UART_SetConfig+0xfc8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d016      	beq.n	8004b9e <UART_SetConfig+0xfbe>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b0a      	cmp	r3, #10
 8004b76:	d00d      	beq.n	8004b94 <UART_SetConfig+0xfb4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b0b      	cmp	r3, #11
 8004b7e:	d104      	bne.n	8004b8a <UART_SetConfig+0xfaa>
 8004b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b84:	f04f 0400 	mov.w	r4, #0
 8004b88:	e03a      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004b8a:	f04f 0301 	mov.w	r3, #1
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	e035      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004b94:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e030      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	e02b      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004ba8:	f04f 0320 	mov.w	r3, #32
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e026      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bb2:	f04f 0310 	mov.w	r3, #16
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	e021      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bbc:	f04f 030c 	mov.w	r3, #12
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	e01c      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bc6:	f04f 030a 	mov.w	r3, #10
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	e017      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bd0:	f04f 0308 	mov.w	r3, #8
 8004bd4:	f04f 0400 	mov.w	r4, #0
 8004bd8:	e012      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bda:	f04f 0306 	mov.w	r3, #6
 8004bde:	f04f 0400 	mov.w	r4, #0
 8004be2:	e00d      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004be4:	f04f 0304 	mov.w	r3, #4
 8004be8:	f04f 0400 	mov.w	r4, #0
 8004bec:	e008      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bee:	f04f 0302 	mov.w	r3, #2
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	e003      	b.n	8004c00 <UART_SetConfig+0x1020>
 8004bf8:	f04f 0301 	mov.w	r3, #1
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	461a      	mov	r2, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	f7fb fb68 	bl	80002d8 <__aeabi_uldivmod>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4622      	mov	r2, r4
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	0214      	lsls	r4, r2, #8
 8004c1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c1e:	020b      	lsls	r3, r1, #8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	4611      	mov	r1, r2
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	eb13 0b01 	adds.w	fp, r3, r1
 8004c30:	eb44 0c02 	adc.w	ip, r4, r2
 8004c34:	4658      	mov	r0, fp
 8004c36:	4661      	mov	r1, ip
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	f7fb fb48 	bl	80002d8 <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8004c4e:	e19d      	b.n	8004f8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <UART_SetConfig+0x1130>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d053      	beq.n	8004d08 <UART_SetConfig+0x1128>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d04b      	beq.n	8004d00 <UART_SetConfig+0x1120>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d043      	beq.n	8004cf8 <UART_SetConfig+0x1118>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d03b      	beq.n	8004cf0 <UART_SetConfig+0x1110>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d033      	beq.n	8004ce8 <UART_SetConfig+0x1108>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b06      	cmp	r3, #6
 8004c86:	d02b      	beq.n	8004ce0 <UART_SetConfig+0x1100>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	d023      	beq.n	8004cd8 <UART_SetConfig+0x10f8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d01b      	beq.n	8004cd0 <UART_SetConfig+0x10f0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b09      	cmp	r3, #9
 8004c9e:	d013      	beq.n	8004cc8 <UART_SetConfig+0x10e8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b0a      	cmp	r3, #10
 8004ca6:	d00b      	beq.n	8004cc0 <UART_SetConfig+0x10e0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b0b      	cmp	r3, #11
 8004cae:	d103      	bne.n	8004cb8 <UART_SetConfig+0x10d8>
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <UART_SetConfig+0x117c>)
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	e02e      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <UART_SetConfig+0x1180>)
 8004cba:	f04f 0403 	mov.w	r4, #3
 8004cbe:	e02a      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cc0:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <UART_SetConfig+0x1184>)
 8004cc2:	f04f 0400 	mov.w	r4, #0
 8004cc6:	e026      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <UART_SetConfig+0x1188>)
 8004cca:	f04f 0400 	mov.w	r4, #0
 8004cce:	e022      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cd0:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <UART_SetConfig+0x118c>)
 8004cd2:	f04f 0400 	mov.w	r4, #0
 8004cd6:	e01e      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <UART_SetConfig+0x1190>)
 8004cda:	f04f 0400 	mov.w	r4, #0
 8004cde:	e01a      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004ce0:	a419      	add	r4, pc, #100	; (adr r4, 8004d48 <UART_SetConfig+0x1168>)
 8004ce2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004ce6:	e016      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004ce8:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <UART_SetConfig+0x1194>)
 8004cea:	f04f 0400 	mov.w	r4, #0
 8004cee:	e012      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <UART_SetConfig+0x1198>)
 8004cf2:	f04f 0400 	mov.w	r4, #0
 8004cf6:	e00e      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004cf8:	a415      	add	r4, pc, #84	; (adr r4, 8004d50 <UART_SetConfig+0x1170>)
 8004cfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004cfe:	e00a      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <UART_SetConfig+0x119c>)
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	e006      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <UART_SetConfig+0x11a0>)
 8004d0a:	f04f 0401 	mov.w	r4, #1
 8004d0e:	e002      	b.n	8004d16 <UART_SetConfig+0x1136>
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <UART_SetConfig+0x1180>)
 8004d12:	f04f 0403 	mov.w	r4, #3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6852      	ldr	r2, [r2, #4]
 8004d1a:	0852      	lsrs	r2, r2, #1
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	eb13 0b01 	adds.w	fp, r3, r1
 8004d26:	eb44 0c02 	adc.w	ip, r4, r2
 8004d2a:	4658      	mov	r0, fp
 8004d2c:	4661      	mov	r1, ip
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f04f 0400 	mov.w	r4, #0
 8004d36:	461a      	mov	r2, r3
 8004d38:	4623      	mov	r3, r4
 8004d3a:	f7fb facd 	bl	80002d8 <__aeabi_uldivmod>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d44:	e122      	b.n	8004f8c <UART_SetConfig+0x13ac>
 8004d46:	bf00      	nop
 8004d48:	51615500 	.word	0x51615500
 8004d4c:	00000000 	.word	0x00000000
 8004d50:	a2c2aa00 	.word	0xa2c2aa00
 8004d54:	00000000 	.word	0x00000000
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	03d09000 	.word	0x03d09000
 8004d60:	d0900000 	.word	0xd0900000
 8004d64:	07a12000 	.word	0x07a12000
 8004d68:	0f424000 	.word	0x0f424000
 8004d6c:	1e848000 	.word	0x1e848000
 8004d70:	3d090000 	.word	0x3d090000
 8004d74:	61a80000 	.word	0x61a80000
 8004d78:	7a120000 	.word	0x7a120000
 8004d7c:	f4240000 	.word	0xf4240000
 8004d80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05b      	beq.n	8004e44 <UART_SetConfig+0x1264>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d053      	beq.n	8004e3c <UART_SetConfig+0x125c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d04b      	beq.n	8004e34 <UART_SetConfig+0x1254>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d043      	beq.n	8004e2c <UART_SetConfig+0x124c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d03b      	beq.n	8004e24 <UART_SetConfig+0x1244>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d033      	beq.n	8004e1c <UART_SetConfig+0x123c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d02b      	beq.n	8004e14 <UART_SetConfig+0x1234>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b07      	cmp	r3, #7
 8004dc2:	d023      	beq.n	8004e0c <UART_SetConfig+0x122c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d01b      	beq.n	8004e04 <UART_SetConfig+0x1224>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b09      	cmp	r3, #9
 8004dd2:	d013      	beq.n	8004dfc <UART_SetConfig+0x121c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b0a      	cmp	r3, #10
 8004dda:	d00b      	beq.n	8004df4 <UART_SetConfig+0x1214>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2b0b      	cmp	r3, #11
 8004de2:	d103      	bne.n	8004dec <UART_SetConfig+0x120c>
 8004de4:	4bc0      	ldr	r3, [pc, #768]	; (80050e8 <UART_SetConfig+0x1508>)
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	e02e      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004dec:	4bbf      	ldr	r3, [pc, #764]	; (80050ec <UART_SetConfig+0x150c>)
 8004dee:	f04f 0400 	mov.w	r4, #0
 8004df2:	e02a      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004df4:	4bbe      	ldr	r3, [pc, #760]	; (80050f0 <UART_SetConfig+0x1510>)
 8004df6:	f04f 0400 	mov.w	r4, #0
 8004dfa:	e026      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004dfc:	4bbd      	ldr	r3, [pc, #756]	; (80050f4 <UART_SetConfig+0x1514>)
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	e022      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e04:	4bbc      	ldr	r3, [pc, #752]	; (80050f8 <UART_SetConfig+0x1518>)
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	e01e      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e0c:	4bbb      	ldr	r3, [pc, #748]	; (80050fc <UART_SetConfig+0x151c>)
 8004e0e:	f04f 0400 	mov.w	r4, #0
 8004e12:	e01a      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e14:	a4b0      	add	r4, pc, #704	; (adr r4, 80050d8 <UART_SetConfig+0x14f8>)
 8004e16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e1a:	e016      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e1c:	4bb8      	ldr	r3, [pc, #736]	; (8005100 <UART_SetConfig+0x1520>)
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	e012      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e24:	4bb7      	ldr	r3, [pc, #732]	; (8005104 <UART_SetConfig+0x1524>)
 8004e26:	f04f 0400 	mov.w	r4, #0
 8004e2a:	e00e      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e2c:	a4ac      	add	r4, pc, #688	; (adr r4, 80050e0 <UART_SetConfig+0x1500>)
 8004e2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e32:	e00a      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e34:	4bb4      	ldr	r3, [pc, #720]	; (8005108 <UART_SetConfig+0x1528>)
 8004e36:	f04f 0400 	mov.w	r4, #0
 8004e3a:	e006      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e3c:	4bb3      	ldr	r3, [pc, #716]	; (800510c <UART_SetConfig+0x152c>)
 8004e3e:	f04f 0400 	mov.w	r4, #0
 8004e42:	e002      	b.n	8004e4a <UART_SetConfig+0x126a>
 8004e44:	4ba9      	ldr	r3, [pc, #676]	; (80050ec <UART_SetConfig+0x150c>)
 8004e46:	f04f 0400 	mov.w	r4, #0
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6852      	ldr	r2, [r2, #4]
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	4611      	mov	r1, r2
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	eb13 0b01 	adds.w	fp, r3, r1
 8004e5a:	eb44 0c02 	adc.w	ip, r4, r2
 8004e5e:	4658      	mov	r0, fp
 8004e60:	4661      	mov	r1, ip
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	f7fb fa33 	bl	80002d8 <__aeabi_uldivmod>
 8004e72:	4603      	mov	r3, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e78:	e088      	b.n	8004f8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d064      	beq.n	8004f4c <UART_SetConfig+0x136c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d05b      	beq.n	8004f42 <UART_SetConfig+0x1362>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d052      	beq.n	8004f38 <UART_SetConfig+0x1358>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d04a      	beq.n	8004f30 <UART_SetConfig+0x1350>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d041      	beq.n	8004f26 <UART_SetConfig+0x1346>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d039      	beq.n	8004f1e <UART_SetConfig+0x133e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d031      	beq.n	8004f16 <UART_SetConfig+0x1336>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	d028      	beq.n	8004f0c <UART_SetConfig+0x132c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d01f      	beq.n	8004f02 <UART_SetConfig+0x1322>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	d016      	beq.n	8004ef8 <UART_SetConfig+0x1318>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b0a      	cmp	r3, #10
 8004ed0:	d00d      	beq.n	8004eee <UART_SetConfig+0x130e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b0b      	cmp	r3, #11
 8004ed8:	d104      	bne.n	8004ee4 <UART_SetConfig+0x1304>
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	e037      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004ee4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	e032      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ef2:	f04f 0400 	mov.w	r4, #0
 8004ef6:	e02d      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	e028      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f06:	f04f 0400 	mov.w	r4, #0
 8004f0a:	e023      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f10:	f04f 0400 	mov.w	r4, #0
 8004f14:	e01e      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f16:	4b7e      	ldr	r3, [pc, #504]	; (8005110 <UART_SetConfig+0x1530>)
 8004f18:	f04f 0400 	mov.w	r4, #0
 8004f1c:	e01a      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <UART_SetConfig+0x1534>)
 8004f20:	f04f 0400 	mov.w	r4, #0
 8004f24:	e016      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f2a:	f04f 0400 	mov.w	r4, #0
 8004f2e:	e011      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f30:	4b79      	ldr	r3, [pc, #484]	; (8005118 <UART_SetConfig+0x1538>)
 8004f32:	f04f 0400 	mov.w	r4, #0
 8004f36:	e00d      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f3c:	f04f 0400 	mov.w	r4, #0
 8004f40:	e008      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	e003      	b.n	8004f54 <UART_SetConfig+0x1374>
 8004f4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004f50:	f04f 0400 	mov.w	r4, #0
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6852      	ldr	r2, [r2, #4]
 8004f58:	0852      	lsrs	r2, r2, #1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	eb13 0b01 	adds.w	fp, r3, r1
 8004f64:	eb44 0c02 	adc.w	ip, r4, r2
 8004f68:	4658      	mov	r0, fp
 8004f6a:	4661      	mov	r1, ip
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	461a      	mov	r2, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	f7fb f9ae 	bl	80002d8 <__aeabi_uldivmod>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004f82:	e003      	b.n	8004f8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8004f8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f92:	d309      	bcc.n	8004fa8 <UART_SetConfig+0x13c8>
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d205      	bcs.n	8004fa8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	f000 bf85 	b.w	8005eb2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fae:	f000 bf80 	b.w	8005eb2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	f040 83da 	bne.w	8005772 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8004fbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	f200 83b3 	bhi.w	800572e <UART_SetConfig+0x1b4e>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x13f0>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	0800511d 	.word	0x0800511d
 8004fd4:	080051d5 	.word	0x080051d5
 8004fd8:	0800572f 	.word	0x0800572f
 8004fdc:	0800572f 	.word	0x0800572f
 8004fe0:	0800528d 	.word	0x0800528d
 8004fe4:	0800572f 	.word	0x0800572f
 8004fe8:	0800572f 	.word	0x0800572f
 8004fec:	0800572f 	.word	0x0800572f
 8004ff0:	08005349 	.word	0x08005349
 8004ff4:	0800572f 	.word	0x0800572f
 8004ff8:	0800572f 	.word	0x0800572f
 8004ffc:	0800572f 	.word	0x0800572f
 8005000:	0800572f 	.word	0x0800572f
 8005004:	0800572f 	.word	0x0800572f
 8005008:	0800572f 	.word	0x0800572f
 800500c:	0800572f 	.word	0x0800572f
 8005010:	08005405 	.word	0x08005405
 8005014:	0800572f 	.word	0x0800572f
 8005018:	0800572f 	.word	0x0800572f
 800501c:	0800572f 	.word	0x0800572f
 8005020:	0800572f 	.word	0x0800572f
 8005024:	0800572f 	.word	0x0800572f
 8005028:	0800572f 	.word	0x0800572f
 800502c:	0800572f 	.word	0x0800572f
 8005030:	0800572f 	.word	0x0800572f
 8005034:	0800572f 	.word	0x0800572f
 8005038:	0800572f 	.word	0x0800572f
 800503c:	0800572f 	.word	0x0800572f
 8005040:	0800572f 	.word	0x0800572f
 8005044:	0800572f 	.word	0x0800572f
 8005048:	0800572f 	.word	0x0800572f
 800504c:	0800572f 	.word	0x0800572f
 8005050:	08005577 	.word	0x08005577
 8005054:	0800572f 	.word	0x0800572f
 8005058:	0800572f 	.word	0x0800572f
 800505c:	0800572f 	.word	0x0800572f
 8005060:	0800572f 	.word	0x0800572f
 8005064:	0800572f 	.word	0x0800572f
 8005068:	0800572f 	.word	0x0800572f
 800506c:	0800572f 	.word	0x0800572f
 8005070:	0800572f 	.word	0x0800572f
 8005074:	0800572f 	.word	0x0800572f
 8005078:	0800572f 	.word	0x0800572f
 800507c:	0800572f 	.word	0x0800572f
 8005080:	0800572f 	.word	0x0800572f
 8005084:	0800572f 	.word	0x0800572f
 8005088:	0800572f 	.word	0x0800572f
 800508c:	0800572f 	.word	0x0800572f
 8005090:	0800572f 	.word	0x0800572f
 8005094:	0800572f 	.word	0x0800572f
 8005098:	0800572f 	.word	0x0800572f
 800509c:	0800572f 	.word	0x0800572f
 80050a0:	0800572f 	.word	0x0800572f
 80050a4:	0800572f 	.word	0x0800572f
 80050a8:	0800572f 	.word	0x0800572f
 80050ac:	0800572f 	.word	0x0800572f
 80050b0:	0800572f 	.word	0x0800572f
 80050b4:	0800572f 	.word	0x0800572f
 80050b8:	0800572f 	.word	0x0800572f
 80050bc:	0800572f 	.word	0x0800572f
 80050c0:	0800572f 	.word	0x0800572f
 80050c4:	0800572f 	.word	0x0800572f
 80050c8:	0800572f 	.word	0x0800572f
 80050cc:	0800572f 	.word	0x0800572f
 80050d0:	0800566d 	.word	0x0800566d
 80050d4:	f3af 8000 	nop.w
 80050d8:	05161500 	.word	0x05161500
 80050dc:	00000000 	.word	0x00000000
 80050e0:	0a2c2a00 	.word	0x0a2c2a00
 80050e4:	00000000 	.word	0x00000000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	3d090000 	.word	0x3d090000
 80050f0:	007a1200 	.word	0x007a1200
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	01e84800 	.word	0x01e84800
 80050fc:	03d09000 	.word	0x03d09000
 8005100:	061a8000 	.word	0x061a8000
 8005104:	07a12000 	.word	0x07a12000
 8005108:	0f424000 	.word	0x0f424000
 800510c:	1e848000 	.word	0x1e848000
 8005110:	000aaa00 	.word	0x000aaa00
 8005114:	000ccc00 	.word	0x000ccc00
 8005118:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7fc fec4 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8005120:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d044      	beq.n	80051b4 <UART_SetConfig+0x15d4>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b01      	cmp	r3, #1
 8005130:	d03e      	beq.n	80051b0 <UART_SetConfig+0x15d0>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b02      	cmp	r3, #2
 8005138:	d038      	beq.n	80051ac <UART_SetConfig+0x15cc>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b03      	cmp	r3, #3
 8005140:	d032      	beq.n	80051a8 <UART_SetConfig+0x15c8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b04      	cmp	r3, #4
 8005148:	d02c      	beq.n	80051a4 <UART_SetConfig+0x15c4>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b05      	cmp	r3, #5
 8005150:	d026      	beq.n	80051a0 <UART_SetConfig+0x15c0>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b06      	cmp	r3, #6
 8005158:	d020      	beq.n	800519c <UART_SetConfig+0x15bc>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b07      	cmp	r3, #7
 8005160:	d01a      	beq.n	8005198 <UART_SetConfig+0x15b8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b08      	cmp	r3, #8
 8005168:	d014      	beq.n	8005194 <UART_SetConfig+0x15b4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b09      	cmp	r3, #9
 8005170:	d00e      	beq.n	8005190 <UART_SetConfig+0x15b0>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b0a      	cmp	r3, #10
 8005178:	d008      	beq.n	800518c <UART_SetConfig+0x15ac>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b0b      	cmp	r3, #11
 8005180:	d102      	bne.n	8005188 <UART_SetConfig+0x15a8>
 8005182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005186:	e016      	b.n	80051b6 <UART_SetConfig+0x15d6>
 8005188:	2301      	movs	r3, #1
 800518a:	e014      	b.n	80051b6 <UART_SetConfig+0x15d6>
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	e012      	b.n	80051b6 <UART_SetConfig+0x15d6>
 8005190:	2340      	movs	r3, #64	; 0x40
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x15d6>
 8005194:	2320      	movs	r3, #32
 8005196:	e00e      	b.n	80051b6 <UART_SetConfig+0x15d6>
 8005198:	2310      	movs	r3, #16
 800519a:	e00c      	b.n	80051b6 <UART_SetConfig+0x15d6>
 800519c:	230c      	movs	r3, #12
 800519e:	e00a      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051a0:	230a      	movs	r3, #10
 80051a2:	e008      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051a4:	2308      	movs	r3, #8
 80051a6:	e006      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051a8:	2306      	movs	r3, #6
 80051aa:	e004      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051ac:	2304      	movs	r3, #4
 80051ae:	e002      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e000      	b.n	80051b6 <UART_SetConfig+0x15d6>
 80051b4:	2301      	movs	r3, #1
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	005a      	lsls	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051d2:	e2b0      	b.n	8005736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fc fe7e 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80051d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <UART_SetConfig+0x168c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d03e      	beq.n	8005268 <UART_SetConfig+0x1688>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d038      	beq.n	8005264 <UART_SetConfig+0x1684>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d032      	beq.n	8005260 <UART_SetConfig+0x1680>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d02c      	beq.n	800525c <UART_SetConfig+0x167c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b05      	cmp	r3, #5
 8005208:	d026      	beq.n	8005258 <UART_SetConfig+0x1678>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b06      	cmp	r3, #6
 8005210:	d020      	beq.n	8005254 <UART_SetConfig+0x1674>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b07      	cmp	r3, #7
 8005218:	d01a      	beq.n	8005250 <UART_SetConfig+0x1670>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b08      	cmp	r3, #8
 8005220:	d014      	beq.n	800524c <UART_SetConfig+0x166c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b09      	cmp	r3, #9
 8005228:	d00e      	beq.n	8005248 <UART_SetConfig+0x1668>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b0a      	cmp	r3, #10
 8005230:	d008      	beq.n	8005244 <UART_SetConfig+0x1664>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b0b      	cmp	r3, #11
 8005238:	d102      	bne.n	8005240 <UART_SetConfig+0x1660>
 800523a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800523e:	e016      	b.n	800526e <UART_SetConfig+0x168e>
 8005240:	2301      	movs	r3, #1
 8005242:	e014      	b.n	800526e <UART_SetConfig+0x168e>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	e012      	b.n	800526e <UART_SetConfig+0x168e>
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	e010      	b.n	800526e <UART_SetConfig+0x168e>
 800524c:	2320      	movs	r3, #32
 800524e:	e00e      	b.n	800526e <UART_SetConfig+0x168e>
 8005250:	2310      	movs	r3, #16
 8005252:	e00c      	b.n	800526e <UART_SetConfig+0x168e>
 8005254:	230c      	movs	r3, #12
 8005256:	e00a      	b.n	800526e <UART_SetConfig+0x168e>
 8005258:	230a      	movs	r3, #10
 800525a:	e008      	b.n	800526e <UART_SetConfig+0x168e>
 800525c:	2308      	movs	r3, #8
 800525e:	e006      	b.n	800526e <UART_SetConfig+0x168e>
 8005260:	2306      	movs	r3, #6
 8005262:	e004      	b.n	800526e <UART_SetConfig+0x168e>
 8005264:	2304      	movs	r3, #4
 8005266:	e002      	b.n	800526e <UART_SetConfig+0x168e>
 8005268:	2302      	movs	r3, #2
 800526a:	e000      	b.n	800526e <UART_SetConfig+0x168e>
 800526c:	2301      	movs	r3, #1
 800526e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	005a      	lsls	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	441a      	add	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800528a:	e254      	b.n	8005736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800528c:	f107 0318 	add.w	r3, r7, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fd3b 	bl	8002d0c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d044      	beq.n	800532a <UART_SetConfig+0x174a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d03e      	beq.n	8005326 <UART_SetConfig+0x1746>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d038      	beq.n	8005322 <UART_SetConfig+0x1742>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d032      	beq.n	800531e <UART_SetConfig+0x173e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d02c      	beq.n	800531a <UART_SetConfig+0x173a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d026      	beq.n	8005316 <UART_SetConfig+0x1736>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d020      	beq.n	8005312 <UART_SetConfig+0x1732>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b07      	cmp	r3, #7
 80052d6:	d01a      	beq.n	800530e <UART_SetConfig+0x172e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d014      	beq.n	800530a <UART_SetConfig+0x172a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b09      	cmp	r3, #9
 80052e6:	d00e      	beq.n	8005306 <UART_SetConfig+0x1726>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b0a      	cmp	r3, #10
 80052ee:	d008      	beq.n	8005302 <UART_SetConfig+0x1722>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b0b      	cmp	r3, #11
 80052f6:	d102      	bne.n	80052fe <UART_SetConfig+0x171e>
 80052f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052fc:	e016      	b.n	800532c <UART_SetConfig+0x174c>
 80052fe:	2301      	movs	r3, #1
 8005300:	e014      	b.n	800532c <UART_SetConfig+0x174c>
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	e012      	b.n	800532c <UART_SetConfig+0x174c>
 8005306:	2340      	movs	r3, #64	; 0x40
 8005308:	e010      	b.n	800532c <UART_SetConfig+0x174c>
 800530a:	2320      	movs	r3, #32
 800530c:	e00e      	b.n	800532c <UART_SetConfig+0x174c>
 800530e:	2310      	movs	r3, #16
 8005310:	e00c      	b.n	800532c <UART_SetConfig+0x174c>
 8005312:	230c      	movs	r3, #12
 8005314:	e00a      	b.n	800532c <UART_SetConfig+0x174c>
 8005316:	230a      	movs	r3, #10
 8005318:	e008      	b.n	800532c <UART_SetConfig+0x174c>
 800531a:	2308      	movs	r3, #8
 800531c:	e006      	b.n	800532c <UART_SetConfig+0x174c>
 800531e:	2306      	movs	r3, #6
 8005320:	e004      	b.n	800532c <UART_SetConfig+0x174c>
 8005322:	2304      	movs	r3, #4
 8005324:	e002      	b.n	800532c <UART_SetConfig+0x174c>
 8005326:	2302      	movs	r3, #2
 8005328:	e000      	b.n	800532c <UART_SetConfig+0x174c>
 800532a:	2301      	movs	r3, #1
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	005a      	lsls	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005346:	e1f6      	b.n	8005736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005348:	f107 030c 	add.w	r3, r7, #12
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd fe29 	bl	8002fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d044      	beq.n	80053e6 <UART_SetConfig+0x1806>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b01      	cmp	r3, #1
 8005362:	d03e      	beq.n	80053e2 <UART_SetConfig+0x1802>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b02      	cmp	r3, #2
 800536a:	d038      	beq.n	80053de <UART_SetConfig+0x17fe>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	2b03      	cmp	r3, #3
 8005372:	d032      	beq.n	80053da <UART_SetConfig+0x17fa>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b04      	cmp	r3, #4
 800537a:	d02c      	beq.n	80053d6 <UART_SetConfig+0x17f6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b05      	cmp	r3, #5
 8005382:	d026      	beq.n	80053d2 <UART_SetConfig+0x17f2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b06      	cmp	r3, #6
 800538a:	d020      	beq.n	80053ce <UART_SetConfig+0x17ee>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b07      	cmp	r3, #7
 8005392:	d01a      	beq.n	80053ca <UART_SetConfig+0x17ea>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b08      	cmp	r3, #8
 800539a:	d014      	beq.n	80053c6 <UART_SetConfig+0x17e6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	d00e      	beq.n	80053c2 <UART_SetConfig+0x17e2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b0a      	cmp	r3, #10
 80053aa:	d008      	beq.n	80053be <UART_SetConfig+0x17de>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b0b      	cmp	r3, #11
 80053b2:	d102      	bne.n	80053ba <UART_SetConfig+0x17da>
 80053b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b8:	e016      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e014      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	e012      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	e010      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053c6:	2320      	movs	r3, #32
 80053c8:	e00e      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053ca:	2310      	movs	r3, #16
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053ce:	230c      	movs	r3, #12
 80053d0:	e00a      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053d2:	230a      	movs	r3, #10
 80053d4:	e008      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053d6:	2308      	movs	r3, #8
 80053d8:	e006      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053da:	2306      	movs	r3, #6
 80053dc:	e004      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053de:	2304      	movs	r3, #4
 80053e0:	e002      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e000      	b.n	80053e8 <UART_SetConfig+0x1808>
 80053e6:	2301      	movs	r3, #1
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005402:	e198      	b.n	8005736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005404:	4b87      	ldr	r3, [pc, #540]	; (8005624 <UART_SetConfig+0x1a44>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05e      	beq.n	80054ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005410:	4b84      	ldr	r3, [pc, #528]	; (8005624 <UART_SetConfig+0x1a44>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	08db      	lsrs	r3, r3, #3
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	4a83      	ldr	r2, [pc, #524]	; (8005628 <UART_SetConfig+0x1a48>)
 800541c:	40da      	lsrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d044      	beq.n	80054b0 <UART_SetConfig+0x18d0>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b01      	cmp	r3, #1
 800542c:	d03e      	beq.n	80054ac <UART_SetConfig+0x18cc>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b02      	cmp	r3, #2
 8005434:	d038      	beq.n	80054a8 <UART_SetConfig+0x18c8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	2b03      	cmp	r3, #3
 800543c:	d032      	beq.n	80054a4 <UART_SetConfig+0x18c4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b04      	cmp	r3, #4
 8005444:	d02c      	beq.n	80054a0 <UART_SetConfig+0x18c0>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b05      	cmp	r3, #5
 800544c:	d026      	beq.n	800549c <UART_SetConfig+0x18bc>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b06      	cmp	r3, #6
 8005454:	d020      	beq.n	8005498 <UART_SetConfig+0x18b8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b07      	cmp	r3, #7
 800545c:	d01a      	beq.n	8005494 <UART_SetConfig+0x18b4>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b08      	cmp	r3, #8
 8005464:	d014      	beq.n	8005490 <UART_SetConfig+0x18b0>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b09      	cmp	r3, #9
 800546c:	d00e      	beq.n	800548c <UART_SetConfig+0x18ac>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b0a      	cmp	r3, #10
 8005474:	d008      	beq.n	8005488 <UART_SetConfig+0x18a8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	2b0b      	cmp	r3, #11
 800547c:	d102      	bne.n	8005484 <UART_SetConfig+0x18a4>
 800547e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005482:	e016      	b.n	80054b2 <UART_SetConfig+0x18d2>
 8005484:	2301      	movs	r3, #1
 8005486:	e014      	b.n	80054b2 <UART_SetConfig+0x18d2>
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x18d2>
 800548c:	2340      	movs	r3, #64	; 0x40
 800548e:	e010      	b.n	80054b2 <UART_SetConfig+0x18d2>
 8005490:	2320      	movs	r3, #32
 8005492:	e00e      	b.n	80054b2 <UART_SetConfig+0x18d2>
 8005494:	2310      	movs	r3, #16
 8005496:	e00c      	b.n	80054b2 <UART_SetConfig+0x18d2>
 8005498:	230c      	movs	r3, #12
 800549a:	e00a      	b.n	80054b2 <UART_SetConfig+0x18d2>
 800549c:	230a      	movs	r3, #10
 800549e:	e008      	b.n	80054b2 <UART_SetConfig+0x18d2>
 80054a0:	2308      	movs	r3, #8
 80054a2:	e006      	b.n	80054b2 <UART_SetConfig+0x18d2>
 80054a4:	2306      	movs	r3, #6
 80054a6:	e004      	b.n	80054b2 <UART_SetConfig+0x18d2>
 80054a8:	2304      	movs	r3, #4
 80054aa:	e002      	b.n	80054b2 <UART_SetConfig+0x18d2>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e000      	b.n	80054b2 <UART_SetConfig+0x18d2>
 80054b0:	2301      	movs	r3, #1
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	005a      	lsls	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80054cc:	e133      	b.n	8005736 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d043      	beq.n	800555e <UART_SetConfig+0x197e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d03d      	beq.n	800555a <UART_SetConfig+0x197a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d037      	beq.n	8005556 <UART_SetConfig+0x1976>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d031      	beq.n	8005552 <UART_SetConfig+0x1972>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d02b      	beq.n	800554e <UART_SetConfig+0x196e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d025      	beq.n	800554a <UART_SetConfig+0x196a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b06      	cmp	r3, #6
 8005504:	d01f      	beq.n	8005546 <UART_SetConfig+0x1966>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b07      	cmp	r3, #7
 800550c:	d019      	beq.n	8005542 <UART_SetConfig+0x1962>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b08      	cmp	r3, #8
 8005514:	d013      	beq.n	800553e <UART_SetConfig+0x195e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b09      	cmp	r3, #9
 800551c:	d00d      	beq.n	800553a <UART_SetConfig+0x195a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b0a      	cmp	r3, #10
 8005524:	d007      	beq.n	8005536 <UART_SetConfig+0x1956>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b0b      	cmp	r3, #11
 800552c:	d101      	bne.n	8005532 <UART_SetConfig+0x1952>
 800552e:	4b3f      	ldr	r3, [pc, #252]	; (800562c <UART_SetConfig+0x1a4c>)
 8005530:	e016      	b.n	8005560 <UART_SetConfig+0x1980>
 8005532:	4b3f      	ldr	r3, [pc, #252]	; (8005630 <UART_SetConfig+0x1a50>)
 8005534:	e014      	b.n	8005560 <UART_SetConfig+0x1980>
 8005536:	4b3f      	ldr	r3, [pc, #252]	; (8005634 <UART_SetConfig+0x1a54>)
 8005538:	e012      	b.n	8005560 <UART_SetConfig+0x1980>
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <UART_SetConfig+0x1a58>)
 800553c:	e010      	b.n	8005560 <UART_SetConfig+0x1980>
 800553e:	4b3f      	ldr	r3, [pc, #252]	; (800563c <UART_SetConfig+0x1a5c>)
 8005540:	e00e      	b.n	8005560 <UART_SetConfig+0x1980>
 8005542:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <UART_SetConfig+0x1a60>)
 8005544:	e00c      	b.n	8005560 <UART_SetConfig+0x1980>
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <UART_SetConfig+0x1a64>)
 8005548:	e00a      	b.n	8005560 <UART_SetConfig+0x1980>
 800554a:	4b3f      	ldr	r3, [pc, #252]	; (8005648 <UART_SetConfig+0x1a68>)
 800554c:	e008      	b.n	8005560 <UART_SetConfig+0x1980>
 800554e:	4b3f      	ldr	r3, [pc, #252]	; (800564c <UART_SetConfig+0x1a6c>)
 8005550:	e006      	b.n	8005560 <UART_SetConfig+0x1980>
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <UART_SetConfig+0x1a70>)
 8005554:	e004      	b.n	8005560 <UART_SetConfig+0x1980>
 8005556:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <UART_SetConfig+0x1a74>)
 8005558:	e002      	b.n	8005560 <UART_SetConfig+0x1980>
 800555a:	4b33      	ldr	r3, [pc, #204]	; (8005628 <UART_SetConfig+0x1a48>)
 800555c:	e000      	b.n	8005560 <UART_SetConfig+0x1980>
 800555e:	4b34      	ldr	r3, [pc, #208]	; (8005630 <UART_SetConfig+0x1a50>)
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	0852      	lsrs	r2, r2, #1
 8005566:	441a      	add	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005574:	e0df      	b.n	8005736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d045      	beq.n	800560a <UART_SetConfig+0x1a2a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b01      	cmp	r3, #1
 8005584:	d03f      	beq.n	8005606 <UART_SetConfig+0x1a26>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b02      	cmp	r3, #2
 800558c:	d039      	beq.n	8005602 <UART_SetConfig+0x1a22>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b03      	cmp	r3, #3
 8005594:	d033      	beq.n	80055fe <UART_SetConfig+0x1a1e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b04      	cmp	r3, #4
 800559c:	d02d      	beq.n	80055fa <UART_SetConfig+0x1a1a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d027      	beq.n	80055f6 <UART_SetConfig+0x1a16>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d021      	beq.n	80055f2 <UART_SetConfig+0x1a12>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	d01b      	beq.n	80055ee <UART_SetConfig+0x1a0e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d015      	beq.n	80055ea <UART_SetConfig+0x1a0a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b09      	cmp	r3, #9
 80055c4:	d00f      	beq.n	80055e6 <UART_SetConfig+0x1a06>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	2b0a      	cmp	r3, #10
 80055cc:	d008      	beq.n	80055e0 <UART_SetConfig+0x1a00>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b0b      	cmp	r3, #11
 80055d4:	d102      	bne.n	80055dc <UART_SetConfig+0x19fc>
 80055d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80055da:	e017      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055dc:	4b18      	ldr	r3, [pc, #96]	; (8005640 <UART_SetConfig+0x1a60>)
 80055de:	e015      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80055e4:	e012      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <UART_SetConfig+0x1a78>)
 80055e8:	e010      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055ea:	4b1c      	ldr	r3, [pc, #112]	; (800565c <UART_SetConfig+0x1a7c>)
 80055ec:	e00e      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <UART_SetConfig+0x1a4c>)
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <UART_SetConfig+0x1a80>)
 80055f4:	e00a      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <UART_SetConfig+0x1a84>)
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055fa:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <UART_SetConfig+0x1a54>)
 80055fc:	e006      	b.n	800560c <UART_SetConfig+0x1a2c>
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <UART_SetConfig+0x1a88>)
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x1a2c>
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <UART_SetConfig+0x1a58>)
 8005604:	e002      	b.n	800560c <UART_SetConfig+0x1a2c>
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x1a5c>)
 8005608:	e000      	b.n	800560c <UART_SetConfig+0x1a2c>
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <UART_SetConfig+0x1a60>)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	0852      	lsrs	r2, r2, #1
 8005612:	441a      	add	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	b29b      	uxth	r3, r3
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005620:	e089      	b.n	8005736 <UART_SetConfig+0x1b56>
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	03d09000 	.word	0x03d09000
 800562c:	0007a120 	.word	0x0007a120
 8005630:	07a12000 	.word	0x07a12000
 8005634:	000f4240 	.word	0x000f4240
 8005638:	001e8480 	.word	0x001e8480
 800563c:	003d0900 	.word	0x003d0900
 8005640:	007a1200 	.word	0x007a1200
 8005644:	00a2c2aa 	.word	0x00a2c2aa
 8005648:	00c35000 	.word	0x00c35000
 800564c:	00f42400 	.word	0x00f42400
 8005650:	01458554 	.word	0x01458554
 8005654:	01e84800 	.word	0x01e84800
 8005658:	0001e848 	.word	0x0001e848
 800565c:	0003d090 	.word	0x0003d090
 8005660:	000a2c2a 	.word	0x000a2c2a
 8005664:	000c3500 	.word	0x000c3500
 8005668:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d04f      	beq.n	8005714 <UART_SetConfig+0x1b34>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b01      	cmp	r3, #1
 800567a:	d048      	beq.n	800570e <UART_SetConfig+0x1b2e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b02      	cmp	r3, #2
 8005682:	d041      	beq.n	8005708 <UART_SetConfig+0x1b28>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b03      	cmp	r3, #3
 800568a:	d03a      	beq.n	8005702 <UART_SetConfig+0x1b22>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b04      	cmp	r3, #4
 8005692:	d033      	beq.n	80056fc <UART_SetConfig+0x1b1c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b05      	cmp	r3, #5
 800569a:	d02c      	beq.n	80056f6 <UART_SetConfig+0x1b16>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b06      	cmp	r3, #6
 80056a2:	d025      	beq.n	80056f0 <UART_SetConfig+0x1b10>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d01e      	beq.n	80056ea <UART_SetConfig+0x1b0a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d017      	beq.n	80056e4 <UART_SetConfig+0x1b04>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d010      	beq.n	80056de <UART_SetConfig+0x1afe>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b0a      	cmp	r3, #10
 80056c2:	d009      	beq.n	80056d8 <UART_SetConfig+0x1af8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	2b0b      	cmp	r3, #11
 80056ca:	d102      	bne.n	80056d2 <UART_SetConfig+0x1af2>
 80056cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d0:	e022      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056d6:	e01f      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056dc:	e01c      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e2:	e019      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056e8:	e016      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ee:	e013      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056f0:	f241 5354 	movw	r3, #5460	; 0x1554
 80056f4:	e010      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056f6:	f641 1398 	movw	r3, #6552	; 0x1998
 80056fa:	e00d      	b.n	8005718 <UART_SetConfig+0x1b38>
 80056fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005700:	e00a      	b.n	8005718 <UART_SetConfig+0x1b38>
 8005702:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005706:	e007      	b.n	8005718 <UART_SetConfig+0x1b38>
 8005708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800570c:	e004      	b.n	8005718 <UART_SetConfig+0x1b38>
 800570e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005712:	e001      	b.n	8005718 <UART_SetConfig+0x1b38>
 8005714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6852      	ldr	r2, [r2, #4]
 800571c:	0852      	lsrs	r2, r2, #1
 800571e:	441a      	add	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800572c:	e003      	b.n	8005736 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d916      	bls.n	800576a <UART_SetConfig+0x1b8a>
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005742:	d212      	bcs.n	800576a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	b29b      	uxth	r3, r3
 8005748:	f023 030f 	bic.w	r3, r3, #15
 800574c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b29a      	uxth	r2, r3
 800575a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800575c:	4313      	orrs	r3, r2
 800575e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e3a3      	b.n	8005eb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005770:	e39f      	b.n	8005eb2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005772:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	f200 8388 	bhi.w	8005e8c <UART_SetConfig+0x22ac>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0x1ba4>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005889 	.word	0x08005889
 8005788:	0800593f 	.word	0x0800593f
 800578c:	08005e8d 	.word	0x08005e8d
 8005790:	08005e8d 	.word	0x08005e8d
 8005794:	080059f5 	.word	0x080059f5
 8005798:	08005e8d 	.word	0x08005e8d
 800579c:	08005e8d 	.word	0x08005e8d
 80057a0:	08005e8d 	.word	0x08005e8d
 80057a4:	08005aaf 	.word	0x08005aaf
 80057a8:	08005e8d 	.word	0x08005e8d
 80057ac:	08005e8d 	.word	0x08005e8d
 80057b0:	08005e8d 	.word	0x08005e8d
 80057b4:	08005e8d 	.word	0x08005e8d
 80057b8:	08005e8d 	.word	0x08005e8d
 80057bc:	08005e8d 	.word	0x08005e8d
 80057c0:	08005e8d 	.word	0x08005e8d
 80057c4:	08005b69 	.word	0x08005b69
 80057c8:	08005e8d 	.word	0x08005e8d
 80057cc:	08005e8d 	.word	0x08005e8d
 80057d0:	08005e8d 	.word	0x08005e8d
 80057d4:	08005e8d 	.word	0x08005e8d
 80057d8:	08005e8d 	.word	0x08005e8d
 80057dc:	08005e8d 	.word	0x08005e8d
 80057e0:	08005e8d 	.word	0x08005e8d
 80057e4:	08005e8d 	.word	0x08005e8d
 80057e8:	08005e8d 	.word	0x08005e8d
 80057ec:	08005e8d 	.word	0x08005e8d
 80057f0:	08005e8d 	.word	0x08005e8d
 80057f4:	08005e8d 	.word	0x08005e8d
 80057f8:	08005e8d 	.word	0x08005e8d
 80057fc:	08005e8d 	.word	0x08005e8d
 8005800:	08005e8d 	.word	0x08005e8d
 8005804:	08005cd9 	.word	0x08005cd9
 8005808:	08005e8d 	.word	0x08005e8d
 800580c:	08005e8d 	.word	0x08005e8d
 8005810:	08005e8d 	.word	0x08005e8d
 8005814:	08005e8d 	.word	0x08005e8d
 8005818:	08005e8d 	.word	0x08005e8d
 800581c:	08005e8d 	.word	0x08005e8d
 8005820:	08005e8d 	.word	0x08005e8d
 8005824:	08005e8d 	.word	0x08005e8d
 8005828:	08005e8d 	.word	0x08005e8d
 800582c:	08005e8d 	.word	0x08005e8d
 8005830:	08005e8d 	.word	0x08005e8d
 8005834:	08005e8d 	.word	0x08005e8d
 8005838:	08005e8d 	.word	0x08005e8d
 800583c:	08005e8d 	.word	0x08005e8d
 8005840:	08005e8d 	.word	0x08005e8d
 8005844:	08005e8d 	.word	0x08005e8d
 8005848:	08005e8d 	.word	0x08005e8d
 800584c:	08005e8d 	.word	0x08005e8d
 8005850:	08005e8d 	.word	0x08005e8d
 8005854:	08005e8d 	.word	0x08005e8d
 8005858:	08005e8d 	.word	0x08005e8d
 800585c:	08005e8d 	.word	0x08005e8d
 8005860:	08005e8d 	.word	0x08005e8d
 8005864:	08005e8d 	.word	0x08005e8d
 8005868:	08005e8d 	.word	0x08005e8d
 800586c:	08005e8d 	.word	0x08005e8d
 8005870:	08005e8d 	.word	0x08005e8d
 8005874:	08005e8d 	.word	0x08005e8d
 8005878:	08005e8d 	.word	0x08005e8d
 800587c:	08005e8d 	.word	0x08005e8d
 8005880:	08005e8d 	.word	0x08005e8d
 8005884:	08005dcd 	.word	0x08005dcd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fc fb0e 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 800588c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <UART_SetConfig+0x1d40>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b01      	cmp	r3, #1
 800589c:	d03e      	beq.n	800591c <UART_SetConfig+0x1d3c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d038      	beq.n	8005918 <UART_SetConfig+0x1d38>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d032      	beq.n	8005914 <UART_SetConfig+0x1d34>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d02c      	beq.n	8005910 <UART_SetConfig+0x1d30>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d026      	beq.n	800590c <UART_SetConfig+0x1d2c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d020      	beq.n	8005908 <UART_SetConfig+0x1d28>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0x1d24>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d014      	beq.n	8005900 <UART_SetConfig+0x1d20>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d00e      	beq.n	80058fc <UART_SetConfig+0x1d1c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b0a      	cmp	r3, #10
 80058e4:	d008      	beq.n	80058f8 <UART_SetConfig+0x1d18>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d102      	bne.n	80058f4 <UART_SetConfig+0x1d14>
 80058ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f2:	e016      	b.n	8005922 <UART_SetConfig+0x1d42>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0x1d42>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	e012      	b.n	8005922 <UART_SetConfig+0x1d42>
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005900:	2320      	movs	r3, #32
 8005902:	e00e      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005904:	2310      	movs	r3, #16
 8005906:	e00c      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005908:	230c      	movs	r3, #12
 800590a:	e00a      	b.n	8005922 <UART_SetConfig+0x1d42>
 800590c:	230a      	movs	r3, #10
 800590e:	e008      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005910:	2308      	movs	r3, #8
 8005912:	e006      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005914:	2306      	movs	r3, #6
 8005916:	e004      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005918:	2304      	movs	r3, #4
 800591a:	e002      	b.n	8005922 <UART_SetConfig+0x1d42>
 800591c:	2302      	movs	r3, #2
 800591e:	e000      	b.n	8005922 <UART_SetConfig+0x1d42>
 8005920:	2301      	movs	r3, #1
 8005922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005924:	fbb2 f2f3 	udiv	r2, r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	b29b      	uxth	r3, r3
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800593c:	e2aa      	b.n	8005e94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593e:	f7fc fac9 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8005942:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d044      	beq.n	80059d6 <UART_SetConfig+0x1df6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d03e      	beq.n	80059d2 <UART_SetConfig+0x1df2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b02      	cmp	r3, #2
 800595a:	d038      	beq.n	80059ce <UART_SetConfig+0x1dee>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b03      	cmp	r3, #3
 8005962:	d032      	beq.n	80059ca <UART_SetConfig+0x1dea>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b04      	cmp	r3, #4
 800596a:	d02c      	beq.n	80059c6 <UART_SetConfig+0x1de6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b05      	cmp	r3, #5
 8005972:	d026      	beq.n	80059c2 <UART_SetConfig+0x1de2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b06      	cmp	r3, #6
 800597a:	d020      	beq.n	80059be <UART_SetConfig+0x1dde>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b07      	cmp	r3, #7
 8005982:	d01a      	beq.n	80059ba <UART_SetConfig+0x1dda>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b08      	cmp	r3, #8
 800598a:	d014      	beq.n	80059b6 <UART_SetConfig+0x1dd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b09      	cmp	r3, #9
 8005992:	d00e      	beq.n	80059b2 <UART_SetConfig+0x1dd2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b0a      	cmp	r3, #10
 800599a:	d008      	beq.n	80059ae <UART_SetConfig+0x1dce>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b0b      	cmp	r3, #11
 80059a2:	d102      	bne.n	80059aa <UART_SetConfig+0x1dca>
 80059a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a8:	e016      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e014      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	e012      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	e010      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059b6:	2320      	movs	r3, #32
 80059b8:	e00e      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059ba:	2310      	movs	r3, #16
 80059bc:	e00c      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059be:	230c      	movs	r3, #12
 80059c0:	e00a      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059c2:	230a      	movs	r3, #10
 80059c4:	e008      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059c6:	2308      	movs	r3, #8
 80059c8:	e006      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059ca:	2306      	movs	r3, #6
 80059cc:	e004      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059ce:	2304      	movs	r3, #4
 80059d0:	e002      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e000      	b.n	80059d8 <UART_SetConfig+0x1df8>
 80059d6:	2301      	movs	r3, #1
 80059d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059da:	fbb2 f2f3 	udiv	r2, r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059f2:	e24f      	b.n	8005e94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f4:	f107 0318 	add.w	r3, r7, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd f987 	bl	8002d0c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d044      	beq.n	8005a92 <UART_SetConfig+0x1eb2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d03e      	beq.n	8005a8e <UART_SetConfig+0x1eae>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d038      	beq.n	8005a8a <UART_SetConfig+0x1eaa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d032      	beq.n	8005a86 <UART_SetConfig+0x1ea6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d02c      	beq.n	8005a82 <UART_SetConfig+0x1ea2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d026      	beq.n	8005a7e <UART_SetConfig+0x1e9e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d020      	beq.n	8005a7a <UART_SetConfig+0x1e9a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	d01a      	beq.n	8005a76 <UART_SetConfig+0x1e96>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d014      	beq.n	8005a72 <UART_SetConfig+0x1e92>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d00e      	beq.n	8005a6e <UART_SetConfig+0x1e8e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b0a      	cmp	r3, #10
 8005a56:	d008      	beq.n	8005a6a <UART_SetConfig+0x1e8a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d102      	bne.n	8005a66 <UART_SetConfig+0x1e86>
 8005a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a64:	e016      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e014      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	e012      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	e010      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a72:	2320      	movs	r3, #32
 8005a74:	e00e      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a76:	2310      	movs	r3, #16
 8005a78:	e00c      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	e00a      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a7e:	230a      	movs	r3, #10
 8005a80:	e008      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a82:	2308      	movs	r3, #8
 8005a84:	e006      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a86:	2306      	movs	r3, #6
 8005a88:	e004      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e000      	b.n	8005a94 <UART_SetConfig+0x1eb4>
 8005a92:	2301      	movs	r3, #1
 8005a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aac:	e1f2      	b.n	8005e94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aae:	f107 030c 	add.w	r3, r7, #12
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fd fa76 	bl	8002fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d044      	beq.n	8005b4c <UART_SetConfig+0x1f6c>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d03e      	beq.n	8005b48 <UART_SetConfig+0x1f68>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d038      	beq.n	8005b44 <UART_SetConfig+0x1f64>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d032      	beq.n	8005b40 <UART_SetConfig+0x1f60>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d02c      	beq.n	8005b3c <UART_SetConfig+0x1f5c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d026      	beq.n	8005b38 <UART_SetConfig+0x1f58>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d020      	beq.n	8005b34 <UART_SetConfig+0x1f54>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b07      	cmp	r3, #7
 8005af8:	d01a      	beq.n	8005b30 <UART_SetConfig+0x1f50>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d014      	beq.n	8005b2c <UART_SetConfig+0x1f4c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	2b09      	cmp	r3, #9
 8005b08:	d00e      	beq.n	8005b28 <UART_SetConfig+0x1f48>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	2b0a      	cmp	r3, #10
 8005b10:	d008      	beq.n	8005b24 <UART_SetConfig+0x1f44>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	2b0b      	cmp	r3, #11
 8005b18:	d102      	bne.n	8005b20 <UART_SetConfig+0x1f40>
 8005b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b1e:	e016      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e014      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	e012      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	e010      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	e00e      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b30:	2310      	movs	r3, #16
 8005b32:	e00c      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b34:	230c      	movs	r3, #12
 8005b36:	e00a      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b38:	230a      	movs	r3, #10
 8005b3a:	e008      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	e006      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b40:	2306      	movs	r3, #6
 8005b42:	e004      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b44:	2304      	movs	r3, #4
 8005b46:	e002      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e000      	b.n	8005b4e <UART_SetConfig+0x1f6e>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b66:	e195      	b.n	8005e94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b68:	4b87      	ldr	r3, [pc, #540]	; (8005d88 <UART_SetConfig+0x21a8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d05d      	beq.n	8005c30 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b74:	4b84      	ldr	r3, [pc, #528]	; (8005d88 <UART_SetConfig+0x21a8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	4a83      	ldr	r2, [pc, #524]	; (8005d8c <UART_SetConfig+0x21ac>)
 8005b80:	40da      	lsrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d044      	beq.n	8005c14 <UART_SetConfig+0x2034>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d03e      	beq.n	8005c10 <UART_SetConfig+0x2030>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d038      	beq.n	8005c0c <UART_SetConfig+0x202c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d032      	beq.n	8005c08 <UART_SetConfig+0x2028>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d02c      	beq.n	8005c04 <UART_SetConfig+0x2024>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d026      	beq.n	8005c00 <UART_SetConfig+0x2020>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d020      	beq.n	8005bfc <UART_SetConfig+0x201c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b07      	cmp	r3, #7
 8005bc0:	d01a      	beq.n	8005bf8 <UART_SetConfig+0x2018>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d014      	beq.n	8005bf4 <UART_SetConfig+0x2014>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d00e      	beq.n	8005bf0 <UART_SetConfig+0x2010>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b0a      	cmp	r3, #10
 8005bd8:	d008      	beq.n	8005bec <UART_SetConfig+0x200c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b0b      	cmp	r3, #11
 8005be0:	d102      	bne.n	8005be8 <UART_SetConfig+0x2008>
 8005be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be6:	e016      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e014      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	e012      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	e010      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e00e      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	e00c      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	e00a      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c00:	230a      	movs	r3, #10
 8005c02:	e008      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c04:	2308      	movs	r3, #8
 8005c06:	e006      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c08:	2306      	movs	r3, #6
 8005c0a:	e004      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	e002      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e000      	b.n	8005c16 <UART_SetConfig+0x2036>
 8005c14:	2301      	movs	r3, #1
 8005c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005c2e:	e131      	b.n	8005e94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d043      	beq.n	8005cc0 <UART_SetConfig+0x20e0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d03d      	beq.n	8005cbc <UART_SetConfig+0x20dc>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d037      	beq.n	8005cb8 <UART_SetConfig+0x20d8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d031      	beq.n	8005cb4 <UART_SetConfig+0x20d4>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d02b      	beq.n	8005cb0 <UART_SetConfig+0x20d0>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d025      	beq.n	8005cac <UART_SetConfig+0x20cc>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	d01f      	beq.n	8005ca8 <UART_SetConfig+0x20c8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b07      	cmp	r3, #7
 8005c6e:	d019      	beq.n	8005ca4 <UART_SetConfig+0x20c4>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d013      	beq.n	8005ca0 <UART_SetConfig+0x20c0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d00d      	beq.n	8005c9c <UART_SetConfig+0x20bc>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b0a      	cmp	r3, #10
 8005c86:	d007      	beq.n	8005c98 <UART_SetConfig+0x20b8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b0b      	cmp	r3, #11
 8005c8e:	d101      	bne.n	8005c94 <UART_SetConfig+0x20b4>
 8005c90:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <UART_SetConfig+0x21b0>)
 8005c92:	e016      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005c94:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <UART_SetConfig+0x21ac>)
 8005c96:	e014      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005c98:	4b3e      	ldr	r3, [pc, #248]	; (8005d94 <UART_SetConfig+0x21b4>)
 8005c9a:	e012      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005c9c:	4b3e      	ldr	r3, [pc, #248]	; (8005d98 <UART_SetConfig+0x21b8>)
 8005c9e:	e010      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005ca0:	4b3e      	ldr	r3, [pc, #248]	; (8005d9c <UART_SetConfig+0x21bc>)
 8005ca2:	e00e      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005ca4:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <UART_SetConfig+0x21c0>)
 8005ca6:	e00c      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <UART_SetConfig+0x21c4>)
 8005caa:	e00a      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cac:	4b3e      	ldr	r3, [pc, #248]	; (8005da8 <UART_SetConfig+0x21c8>)
 8005cae:	e008      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cb0:	4b3e      	ldr	r3, [pc, #248]	; (8005dac <UART_SetConfig+0x21cc>)
 8005cb2:	e006      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cb4:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <UART_SetConfig+0x21d0>)
 8005cb6:	e004      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	; (8005db4 <UART_SetConfig+0x21d4>)
 8005cba:	e002      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <UART_SetConfig+0x21d8>)
 8005cbe:	e000      	b.n	8005cc2 <UART_SetConfig+0x20e2>
 8005cc0:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <UART_SetConfig+0x21ac>)
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6852      	ldr	r2, [r2, #4]
 8005cc6:	0852      	lsrs	r2, r2, #1
 8005cc8:	441a      	add	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd6:	e0dd      	b.n	8005e94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d046      	beq.n	8005d6e <UART_SetConfig+0x218e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d040      	beq.n	8005d6a <UART_SetConfig+0x218a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d03a      	beq.n	8005d66 <UART_SetConfig+0x2186>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d034      	beq.n	8005d62 <UART_SetConfig+0x2182>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d02e      	beq.n	8005d5e <UART_SetConfig+0x217e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	d028      	beq.n	8005d5a <UART_SetConfig+0x217a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	2b06      	cmp	r3, #6
 8005d0e:	d022      	beq.n	8005d56 <UART_SetConfig+0x2176>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2b07      	cmp	r3, #7
 8005d16:	d01c      	beq.n	8005d52 <UART_SetConfig+0x2172>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d016      	beq.n	8005d4e <UART_SetConfig+0x216e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d00f      	beq.n	8005d48 <UART_SetConfig+0x2168>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b0a      	cmp	r3, #10
 8005d2e:	d008      	beq.n	8005d42 <UART_SetConfig+0x2162>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b0b      	cmp	r3, #11
 8005d36:	d102      	bne.n	8005d3e <UART_SetConfig+0x215e>
 8005d38:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005d3c:	e018      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <UART_SetConfig+0x21c0>)
 8005d40:	e016      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d42:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005d46:	e013      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d4c:	e010      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <UART_SetConfig+0x21dc>)
 8005d50:	e00e      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <UART_SetConfig+0x21b0>)
 8005d54:	e00c      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <UART_SetConfig+0x21e0>)
 8005d58:	e00a      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <UART_SetConfig+0x21e4>)
 8005d5c:	e008      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <UART_SetConfig+0x21b4>)
 8005d60:	e006      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d62:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <UART_SetConfig+0x21e8>)
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <UART_SetConfig+0x21b8>)
 8005d68:	e002      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <UART_SetConfig+0x21bc>)
 8005d6c:	e000      	b.n	8005d70 <UART_SetConfig+0x2190>
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <UART_SetConfig+0x21c0>)
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	0852      	lsrs	r2, r2, #1
 8005d76:	441a      	add	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d84:	e086      	b.n	8005e94 <UART_SetConfig+0x22b4>
 8005d86:	bf00      	nop
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	03d09000 	.word	0x03d09000
 8005d90:	0003d090 	.word	0x0003d090
 8005d94:	0007a120 	.word	0x0007a120
 8005d98:	000f4240 	.word	0x000f4240
 8005d9c:	001e8480 	.word	0x001e8480
 8005da0:	003d0900 	.word	0x003d0900
 8005da4:	00516155 	.word	0x00516155
 8005da8:	0061a800 	.word	0x0061a800
 8005dac:	007a1200 	.word	0x007a1200
 8005db0:	00a2c2aa 	.word	0x00a2c2aa
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	01e84800 	.word	0x01e84800
 8005dbc:	0001e848 	.word	0x0001e848
 8005dc0:	00051615 	.word	0x00051615
 8005dc4:	00061a80 	.word	0x00061a80
 8005dc8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d04e      	beq.n	8005e72 <UART_SetConfig+0x2292>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d047      	beq.n	8005e6c <UART_SetConfig+0x228c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d040      	beq.n	8005e66 <UART_SetConfig+0x2286>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d039      	beq.n	8005e60 <UART_SetConfig+0x2280>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d032      	beq.n	8005e5a <UART_SetConfig+0x227a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d02b      	beq.n	8005e54 <UART_SetConfig+0x2274>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d024      	beq.n	8005e4e <UART_SetConfig+0x226e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b07      	cmp	r3, #7
 8005e0a:	d01d      	beq.n	8005e48 <UART_SetConfig+0x2268>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d016      	beq.n	8005e42 <UART_SetConfig+0x2262>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b09      	cmp	r3, #9
 8005e1a:	d00f      	beq.n	8005e3c <UART_SetConfig+0x225c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b0a      	cmp	r3, #10
 8005e22:	d008      	beq.n	8005e36 <UART_SetConfig+0x2256>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b0b      	cmp	r3, #11
 8005e2a:	d101      	bne.n	8005e30 <UART_SetConfig+0x2250>
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	e022      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e34:	e01f      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3a:	e01c      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	e019      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e46:	e016      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e4c:	e013      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005e52:	e010      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e54:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005e58:	e00d      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e5e:	e00a      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e60:	f241 5355 	movw	r3, #5461	; 0x1555
 8005e64:	e007      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6a:	e004      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e70:	e001      	b.n	8005e76 <UART_SetConfig+0x2296>
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6852      	ldr	r2, [r2, #4]
 8005e7a:	0852      	lsrs	r2, r2, #1
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8a:	e003      	b.n	8005e94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d908      	bls.n	8005eac <UART_SetConfig+0x22cc>
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d204      	bcs.n	8005eac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e002      	b.n	8005eb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3740      	adds	r7, #64	; 0x40
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fda:	d10a      	bne.n	8005ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006030:	f7fa fb54 	bl	80006dc <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b08      	cmp	r3, #8
 8006042:	d10e      	bne.n	8006062 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f82c 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e022      	b.n	80060a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d10e      	bne.n	800608e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f816 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e00c      	b.n	80060a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	e062      	b.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d05e      	beq.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fa fb07 	bl	80006dc <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11d      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e045      	b.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02e      	beq.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006138:	d126      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006142:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006152:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e00f      	b.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4013      	ands	r3, r2
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d08d      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6899      	ldr	r1, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <UART_EndRxTransfer+0x44>)
 80061d4:	400b      	ands	r3, r1
 80061d6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	effffffe 	.word	0xeffffffe

080061f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7fd fcd8 	bl	8003bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fd fcb4 	bl	8003bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006266:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626e:	2b22      	cmp	r3, #34	; 0x22
 8006270:	d13b      	bne.n	80062ea <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800627a:	89bb      	ldrh	r3, [r7, #12]
 800627c:	b2d9      	uxtb	r1, r3
 800627e:	89fb      	ldrh	r3, [r7, #14]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	400a      	ands	r2, r1
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d122      	bne.n	80062fa <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fdca 	bl	8006e7c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062e8:	e007      	b.n	80062fa <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0208 	orr.w	r2, r2, #8
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006310:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006318:	2b22      	cmp	r3, #34	; 0x22
 800631a:	d13b      	bne.n	8006394 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800632a:	89ba      	ldrh	r2, [r7, #12]
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	4013      	ands	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	1c9a      	adds	r2, r3, #2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d122      	bne.n	80063a4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800636c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fd75 	bl	8006e7c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006392:	e007      	b.n	80063a4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0208 	orr.w	r2, r2, #8
 80063a2:	619a      	str	r2, [r3, #24]
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063ba:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	2b22      	cmp	r3, #34	; 0x22
 80063c4:	d166      	bne.n	8006494 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063cc:	81fb      	strh	r3, [r7, #14]
 80063ce:	e03d      	b.n	800644c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063d8:	893b      	ldrh	r3, [r7, #8]
 80063da:	b2d9      	uxtb	r1, r3
 80063dc:	89bb      	ldrh	r3, [r7, #12]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	400a      	ands	r2, r1
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006420:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6899      	ldr	r1, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b1f      	ldr	r3, [pc, #124]	; (80064ac <UART_RxISR_8BIT_FIFOEN+0x100>)
 800642e:	400b      	ands	r3, r1
 8006430:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fd1b 	bl	8006e7c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006446:	89fb      	ldrh	r3, [r7, #14]
 8006448:	3b01      	subs	r3, #1
 800644a:	81fb      	strh	r3, [r7, #14]
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1be      	bne.n	80063d0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006458:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d021      	beq.n	80064a4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006466:	897a      	ldrh	r2, [r7, #10]
 8006468:	429a      	cmp	r2, r3
 800646a:	d21b      	bcs.n	80064a4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800647a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006480:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0220 	orr.w	r2, r2, #32
 8006490:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006492:	e007      	b.n	80064a4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	619a      	str	r2, [r3, #24]
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	effffffe 	.word	0xeffffffe
 80064b0:	08006259 	.word	0x08006259

080064b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064c2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ca:	2b22      	cmp	r3, #34	; 0x22
 80064cc:	d166      	bne.n	800659c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064d4:	82fb      	strh	r3, [r7, #22]
 80064d6:	e03d      	b.n	8006554 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80064e6:	8a3a      	ldrh	r2, [r7, #16]
 80064e8:	8abb      	ldrh	r3, [r7, #20]
 80064ea:	4013      	ands	r3, r2
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d119      	bne.n	800654e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006528:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b1f      	ldr	r3, [pc, #124]	; (80065b4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006536:	400b      	ands	r3, r1
 8006538:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc97 	bl	8006e7c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800654e:	8afb      	ldrh	r3, [r7, #22]
 8006550:	3b01      	subs	r3, #1
 8006552:	82fb      	strh	r3, [r7, #22]
 8006554:	8afb      	ldrh	r3, [r7, #22]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1be      	bne.n	80064d8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006560:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006562:	8a7b      	ldrh	r3, [r7, #18]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d021      	beq.n	80065ac <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800656e:	8a7a      	ldrh	r2, [r7, #18]
 8006570:	429a      	cmp	r2, r3
 8006572:	d21b      	bcs.n	80065ac <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006582:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006588:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0220 	orr.w	r2, r2, #32
 8006598:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800659a:	e007      	b.n	80065ac <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0208 	orr.w	r2, r2, #8
 80065aa:	619a      	str	r2, [r3, #24]
}
 80065ac:	bf00      	nop
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	effffffe 	.word	0xeffffffe
 80065b8:	08006303 	.word	0x08006303

080065bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UARTEx_DisableFifoMode+0x16>
 800660a:	2302      	movs	r3, #2
 800660c:	e027      	b.n	800665e <HAL_UARTEx_DisableFifoMode+0x66>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2224      	movs	r2, #36	; 0x24
 800661a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800663c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800667e:	2302      	movs	r3, #2
 8006680:	e02d      	b.n	80066de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2224      	movs	r2, #36	; 0x24
 800668e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f850 	bl	8006764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e02d      	b.n	800675a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2224      	movs	r2, #36	; 0x24
 800670a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f812 	bl	8006764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b089      	sub	sp, #36	; 0x24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800676c:	4a2f      	ldr	r2, [pc, #188]	; (800682c <UARTEx_SetNbDataToProcess+0xc8>)
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006776:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800677a:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <UARTEx_SetNbDataToProcess+0xcc>)
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006784:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678c:	2b00      	cmp	r3, #0
 800678e:	d108      	bne.n	80067a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067a0:	e03d      	b.n	800681e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067a6:	2308      	movs	r3, #8
 80067a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	0e5b      	lsrs	r3, r3, #25
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	0f5b      	lsrs	r3, r3, #29
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80067ca:	7fbb      	ldrb	r3, [r7, #30]
 80067cc:	7f3a      	ldrb	r2, [r7, #28]
 80067ce:	f107 0120 	add.w	r1, r7, #32
 80067d2:	440a      	add	r2, r1
 80067d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	7f3a      	ldrb	r2, [r7, #28]
 80067de:	f107 0120 	add.w	r1, r7, #32
 80067e2:	440a      	add	r2, r1
 80067e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80067f4:	7ffb      	ldrb	r3, [r7, #31]
 80067f6:	7f7a      	ldrb	r2, [r7, #29]
 80067f8:	f107 0120 	add.w	r1, r7, #32
 80067fc:	440a      	add	r2, r1
 80067fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	7f7a      	ldrb	r2, [r7, #29]
 8006808:	f107 0120 	add.w	r1, r7, #32
 800680c:	440a      	add	r2, r1
 800680e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006812:	fb93 f3f2 	sdiv	r3, r3, r2
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800681e:	bf00      	nop
 8006820:	3724      	adds	r7, #36	; 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	08006f74 	.word	0x08006f74
 8006830:	08006f7c 	.word	0x08006f7c

08006834 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800683a:	f107 0314 	add.w	r3, r7, #20
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	609a      	str	r2, [r3, #8]
 8006846:	60da      	str	r2, [r3, #12]
 8006848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <MX_GPIO_Init+0xdc>)
 800684c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006850:	4a2f      	ldr	r2, [pc, #188]	; (8006910 <MX_GPIO_Init+0xdc>)
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800685a:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <MX_GPIO_Init+0xdc>)
 800685c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	613b      	str	r3, [r7, #16]
 8006866:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006868:	4b29      	ldr	r3, [pc, #164]	; (8006910 <MX_GPIO_Init+0xdc>)
 800686a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800686e:	4a28      	ldr	r2, [pc, #160]	; (8006910 <MX_GPIO_Init+0xdc>)
 8006870:	f043 0320 	orr.w	r3, r3, #32
 8006874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <MX_GPIO_Init+0xdc>)
 800687a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <MX_GPIO_Init+0xdc>)
 8006888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800688c:	4a20      	ldr	r2, [pc, #128]	; (8006910 <MX_GPIO_Init+0xdc>)
 800688e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006896:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <MX_GPIO_Init+0xdc>)
 8006898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068b4:	4b16      	ldr	r3, [pc, #88]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c2:	4b13      	ldr	r3, [pc, #76]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068d2:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <MX_GPIO_Init+0xdc>)
 80068d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80068e0:	2200      	movs	r2, #0
 80068e2:	211c      	movs	r1, #28
 80068e4:	480b      	ldr	r0, [pc, #44]	; (8006914 <MX_GPIO_Init+0xe0>)
 80068e6:	f7fa fb89 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 80068ea:	231c      	movs	r3, #28
 80068ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068f6:	2300      	movs	r3, #0
 80068f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	4619      	mov	r1, r3
 8006900:	4804      	ldr	r0, [pc, #16]	; (8006914 <MX_GPIO_Init+0xe0>)
 8006902:	f7fa f9cb 	bl	8000c9c <HAL_GPIO_Init>

}
 8006906:	bf00      	nop
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	58021800 	.word	0x58021800

08006918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0

  HAL_Init();
 800691c:	f7f9 fe5c 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8006920:	f000 f81a 	bl	8006958 <SystemClock_Config>
  MX_GPIO_Init();
 8006924:	f7ff ff86 	bl	8006834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006928:	f000 f9d2 	bl	8006cd0 <MX_USART1_UART_Init>
  MX_UART7_Init();
 800692c:	f000 f984 	bl	8006c38 <MX_UART7_Init>
  HAL_UART_Receive_IT(&huart7,(uint8_t *)uart_buffer,1);
 8006930:	2201      	movs	r2, #1
 8006932:	4906      	ldr	r1, [pc, #24]	; (800694c <main+0x34>)
 8006934:	4806      	ldr	r0, [pc, #24]	; (8006950 <main+0x38>)
 8006936:	f7fc fee7 	bl	8003708 <HAL_UART_Receive_IT>

	while (1)
	{

		HAL_GPIO_TogglePin(GPIOG, LED0_Pin|LED1_Pin|LED2_Pin);
 800693a:	211c      	movs	r1, #28
 800693c:	4805      	ldr	r0, [pc, #20]	; (8006954 <main+0x3c>)
 800693e:	f7fa fb76 	bl	800102e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8006942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006946:	f7f9 fed5 	bl	80006f4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOG, LED0_Pin|LED1_Pin|LED2_Pin);
 800694a:	e7f6      	b.n	800693a <main+0x22>
 800694c:	240000bc 	.word	0x240000bc
 8006950:	24000030 	.word	0x24000030
 8006954:	58021800 	.word	0x58021800

08006958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b0cc      	sub	sp, #304	; 0x130
 800695c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800695e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006962:	224c      	movs	r2, #76	; 0x4c
 8006964:	2100      	movs	r1, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f000 faf0 	bl	8006f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800696c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006970:	2220      	movs	r2, #32
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fae9 	bl	8006f4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	4618      	mov	r0, r3
 8006980:	23bc      	movs	r3, #188	; 0xbc
 8006982:	461a      	mov	r2, r3
 8006984:	2100      	movs	r1, #0
 8006986:	f000 fae1 	bl	8006f4c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800698a:	2002      	movs	r0, #2
 800698c:	f7fa fb6a 	bl	8001064 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	4b48      	ldr	r3, [pc, #288]	; (8006ab8 <SystemClock_Config+0x160>)
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	4a47      	ldr	r2, [pc, #284]	; (8006ab8 <SystemClock_Config+0x160>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069a2:	4b45      	ldr	r3, [pc, #276]	; (8006ab8 <SystemClock_Config+0x160>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	f003 0201 	and.w	r2, r3, #1
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	4b43      	ldr	r3, [pc, #268]	; (8006abc <SystemClock_Config+0x164>)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	4a42      	ldr	r2, [pc, #264]	; (8006abc <SystemClock_Config+0x164>)
 80069b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b8:	6193      	str	r3, [r2, #24]
 80069ba:	4b40      	ldr	r3, [pc, #256]	; (8006abc <SystemClock_Config+0x164>)
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80069ca:	bf00      	nop
 80069cc:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <SystemClock_Config+0x164>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d8:	d1f8      	bne.n	80069cc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80069da:	2301      	movs	r3, #1
 80069dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80069e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069e8:	2302      	movs	r3, #2
 80069ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80069ee:	2302      	movs	r3, #2
 80069f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80069f4:	2305      	movs	r3, #5
 80069f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 160;
 80069fa:	23a0      	movs	r3, #160	; 0xa0
 80069fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006a00:	2302      	movs	r3, #2
 8006a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006a06:	2302      	movs	r3, #2
 8006a08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006a12:	2308      	movs	r3, #8
 8006a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fa fb53 	bl	80010d4 <HAL_RCC_OscConfig>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8006a34:	f000 f844 	bl	8006ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a38:	233f      	movs	r3, #63	; 0x3f
 8006a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006a6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fa fee7 	bl	8001844 <HAL_RCC_ClockConfig>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8006a7c:	f000 f820 	bl	8006ac0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_USART1;
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	2203      	movs	r2, #3
 8006a86:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006a90:	f107 0308 	add.w	r3, r7, #8
 8006a94:	2200      	movs	r2, #0
 8006a96:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a98:	f107 0308 	add.w	r3, r7, #8
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fb fa2f 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <SystemClock_Config+0x154>
  {
    Error_Handler();
 8006aa8:	f000 f80a 	bl	8006ac0 <Error_Handler>
  }
}
 8006aac:	bf00      	nop
 8006aae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58000400 	.word	0x58000400
 8006abc:	58024800 	.word	0x58024800

08006ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <HAL_MspInit+0x30>)
 8006ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006adc:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <HAL_MspInit+0x30>)
 8006ade:	f043 0302 	orr.w	r3, r3, #2
 8006ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_MspInit+0x30>)
 8006ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58024400 	.word	0x58024400

08006b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b12:	b480      	push	{r7}
 8006b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b16:	e7fe      	b.n	8006b16 <HardFault_Handler+0x4>

08006b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b1c:	e7fe      	b.n	8006b1c <MemManage_Handler+0x4>

08006b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b22:	e7fe      	b.n	8006b22 <BusFault_Handler+0x4>

08006b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b28:	e7fe      	b.n	8006b28 <UsageFault_Handler+0x4>

08006b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b3c:	bf00      	nop
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b4a:	bf00      	nop
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b58:	f7f9 fdac 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b5c:	bf00      	nop
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006b64:	4802      	ldr	r0, [pc, #8]	; (8006b70 <UART7_IRQHandler+0x10>)
 8006b66:	f7fc fea7 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	24000030 	.word	0x24000030

08006b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <SystemInit+0xac>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	4a28      	ldr	r2, [pc, #160]	; (8006c20 <SystemInit+0xac>)
 8006b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <SystemInit+0xb0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <SystemInit+0xb0>)
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <SystemInit+0xb0>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006b9a:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <SystemInit+0xb0>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4921      	ldr	r1, [pc, #132]	; (8006c24 <SystemInit+0xb0>)
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <SystemInit+0xb4>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <SystemInit+0xb0>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006bac:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <SystemInit+0xb0>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <SystemInit+0xb0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8006bb8:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <SystemInit+0xb0>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8006bbe:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <SystemInit+0xb0>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <SystemInit+0xb0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <SystemInit+0xb0>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8006bd0:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <SystemInit+0xb0>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <SystemInit+0xb0>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8006bdc:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <SystemInit+0xb0>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006be2:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <SystemInit+0xb0>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <SystemInit+0xb0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0d      	ldr	r2, [pc, #52]	; (8006c24 <SystemInit+0xb0>)
 8006bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <SystemInit+0xb0>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006bfa:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <SystemInit+0xb8>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <SystemInit+0xbc>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c06:	d202      	bcs.n	8006c0e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <SystemInit+0xc0>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SystemInit+0xac>)
 8006c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006c16:	bf00      	nop
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed00 	.word	0xe000ed00
 8006c24:	58024400 	.word	0x58024400
 8006c28:	eaf6ed7f 	.word	0xeaf6ed7f
 8006c2c:	5c001000 	.word	0x5c001000
 8006c30:	ffff0000 	.word	0xffff0000
 8006c34:	51008108 	.word	0x51008108

08006c38 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart1;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c3e:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <MX_UART7_Init+0x94>)
 8006c40:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c48:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006c4a:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c5e:	220c      	movs	r2, #12
 8006c60:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c74:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c7a:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006c80:	4811      	ldr	r0, [pc, #68]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c82:	f7fc fc5b 	bl	800353c <HAL_UART_Init>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006c8c:	f7ff ff18 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c90:	2100      	movs	r1, #0
 8006c92:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006c94:	f7ff fce9 	bl	800666a <HAL_UARTEx_SetTxFifoThreshold>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8006c9e:	f7ff ff0f 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4808      	ldr	r0, [pc, #32]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006ca6:	f7ff fd1e 	bl	80066e6 <HAL_UARTEx_SetRxFifoThreshold>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8006cb0:	f7ff ff06 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8006cb4:	4804      	ldr	r0, [pc, #16]	; (8006cc8 <MX_UART7_Init+0x90>)
 8006cb6:	f7ff fc9f 	bl	80065f8 <HAL_UARTEx_DisableFifoMode>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8006cc0:	f7ff fefe 	bl	8006ac0 <Error_Handler>
  }

}
 8006cc4:	bf00      	nop
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	24000030 	.word	0x24000030
 8006ccc:	40007800 	.word	0x40007800

08006cd0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006cd4:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cd6:	4a23      	ldr	r2, [pc, #140]	; (8006d64 <MX_USART1_UART_Init+0x94>)
 8006cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006cda:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cf6:	220c      	movs	r2, #12
 8006cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cfa:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d00:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d12:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d18:	4811      	ldr	r0, [pc, #68]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d1a:	f7fc fc0f 	bl	800353c <HAL_UART_Init>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006d24:	f7ff fecc 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d28:	2100      	movs	r1, #0
 8006d2a:	480d      	ldr	r0, [pc, #52]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d2c:	f7ff fc9d 	bl	800666a <HAL_UARTEx_SetTxFifoThreshold>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006d36:	f7ff fec3 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4808      	ldr	r0, [pc, #32]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d3e:	f7ff fcd2 	bl	80066e6 <HAL_UARTEx_SetRxFifoThreshold>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006d48:	f7ff feba 	bl	8006ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006d4c:	4804      	ldr	r0, [pc, #16]	; (8006d60 <MX_USART1_UART_Init+0x90>)
 8006d4e:	f7ff fc53 	bl	80065f8 <HAL_UARTEx_DisableFifoMode>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006d58:	f7ff feb2 	bl	8006ac0 <Error_Handler>
  }

}
 8006d5c:	bf00      	nop
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	240000c0 	.word	0x240000c0
 8006d64:	40011000 	.word	0x40011000

08006d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08c      	sub	sp, #48	; 0x30
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d70:	f107 031c 	add.w	r3, r7, #28
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	60da      	str	r2, [r3, #12]
 8006d7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a38      	ldr	r2, [pc, #224]	; (8006e68 <HAL_UART_MspInit+0x100>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d136      	bne.n	8006df8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8006d8a:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d90:	4a36      	ldr	r2, [pc, #216]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d9a:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dae:	4a2f      	ldr	r2, [pc, #188]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006db8:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006dc6:	23c0      	movs	r3, #192	; 0xc0
 8006dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dda:	f107 031c 	add.w	r3, r7, #28
 8006dde:	4619      	mov	r1, r3
 8006de0:	4823      	ldr	r0, [pc, #140]	; (8006e70 <HAL_UART_MspInit+0x108>)
 8006de2:	f7f9 ff5b 	bl	8000c9c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006de6:	2200      	movs	r2, #0
 8006de8:	2100      	movs	r1, #0
 8006dea:	2052      	movs	r0, #82	; 0x52
 8006dec:	f7f9 fd8b 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006df0:	2052      	movs	r0, #82	; 0x52
 8006df2:	f7f9 fda2 	bl	800093a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006df6:	e033      	b.n	8006e60 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <HAL_UART_MspInit+0x10c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12e      	bne.n	8006e60 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e0a:	f043 0310 	orr.w	r3, r3, #16
 8006e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e20:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e28:	f043 0301 	orr.w	r3, r3, #1
 8006e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <HAL_UART_MspInit+0x104>)
 8006e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006e3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e50:	2307      	movs	r3, #7
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e54:	f107 031c 	add.w	r3, r7, #28
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4807      	ldr	r0, [pc, #28]	; (8006e78 <HAL_UART_MspInit+0x110>)
 8006e5c:	f7f9 ff1e 	bl	8000c9c <HAL_GPIO_Init>
}
 8006e60:	bf00      	nop
 8006e62:	3730      	adds	r7, #48	; 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40007800 	.word	0x40007800
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	58021400 	.word	0x58021400
 8006e74:	40011000 	.word	0x40011000
 8006e78:	58020000 	.word	0x58020000

08006e7c <HAL_UART_RxCpltCallback>:

  return ch;
}
uint8_t uart_buffer[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	HAL_UART_Transmit(&huart1, uart_buffer, sizeof(uart_buffer), 1000);
 8006e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e88:	2201      	movs	r2, #1
 8006e8a:	4906      	ldr	r1, [pc, #24]	; (8006ea4 <HAL_UART_RxCpltCallback+0x28>)
 8006e8c:	4806      	ldr	r0, [pc, #24]	; (8006ea8 <HAL_UART_RxCpltCallback+0x2c>)
 8006e8e:	f7fc fba5 	bl	80035dc <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart7,(uint8_t *)&uart_buffer,1);
 8006e92:	2201      	movs	r2, #1
 8006e94:	4903      	ldr	r1, [pc, #12]	; (8006ea4 <HAL_UART_RxCpltCallback+0x28>)
 8006e96:	4805      	ldr	r0, [pc, #20]	; (8006eac <HAL_UART_RxCpltCallback+0x30>)
 8006e98:	f7fc fc36 	bl	8003708 <HAL_UART_Receive_IT>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	240000bc 	.word	0x240000bc
 8006ea8:	240000c0 	.word	0x240000c0
 8006eac:	24000030 	.word	0x24000030

08006eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006eb6:	e003      	b.n	8006ec0 <LoopCopyDataInit>

08006eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006ebe:	3104      	adds	r1, #4

08006ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ec0:	480b      	ldr	r0, [pc, #44]	; (8006ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006ec8:	d3f6      	bcc.n	8006eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8006eca:	4a0b      	ldr	r2, [pc, #44]	; (8006ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006ecc:	e002      	b.n	8006ed4 <LoopFillZerobss>

08006ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ed0:	f842 3b04 	str.w	r3, [r2], #4

08006ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ed4:	4b09      	ldr	r3, [pc, #36]	; (8006efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ed8:	d3f9      	bcc.n	8006ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006eda:	f7ff fe4b 	bl	8006b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ede:	f000 f811 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ee2:	f7ff fd19 	bl	8006918 <main>
  bx  lr    
 8006ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ee8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006eec:	08006fa4 	.word	0x08006fa4
  ldr  r0, =_sdata
 8006ef0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006ef4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8006ef8:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8006efc:	2400014c 	.word	0x2400014c

08006f00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f00:	e7fe      	b.n	8006f00 <ADC3_IRQHandler>
	...

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4e0d      	ldr	r6, [pc, #52]	; (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1ba4      	subs	r4, r4, r6
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2500      	movs	r5, #0
 8006f10:	42a5      	cmp	r5, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4e0b      	ldr	r6, [pc, #44]	; (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	; (8006f48 <__libc_init_array+0x44>)
 8006f18:	f000 f820 	bl	8006f5c <_init>
 8006f1c:	1ba4      	subs	r4, r4, r6
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2500      	movs	r5, #0
 8006f22:	42a5      	cmp	r5, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f2c:	4798      	blx	r3
 8006f2e:	3501      	adds	r5, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f36:	4798      	blx	r3
 8006f38:	3501      	adds	r5, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08006f9c 	.word	0x08006f9c
 8006f40:	08006f9c 	.word	0x08006f9c
 8006f44:	08006f9c 	.word	0x08006f9c
 8006f48:	08006fa0 	.word	0x08006fa0

08006f4c <memset>:
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
