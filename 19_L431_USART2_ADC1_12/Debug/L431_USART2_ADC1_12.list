
L431_USART2_ADC1_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004178  08004178  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800418c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800418c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d97e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fee  00000000  00000000  0002d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd0  00000000  00000000  0002f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021eea  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aeec  00000000  00000000  00052f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d157b  00000000  00000000  0005ddf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f48  00000000  00000000  0012f3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004110 	.word	0x08004110

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004110 	.word	0x08004110

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <MX_ADC1_Init+0xbc>)
 80004e4:	4a29      	ldr	r2, [pc, #164]	; (800058c <MX_ADC1_Init+0xc0>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <MX_ADC1_Init+0xbc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <MX_ADC1_Init+0xbc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <MX_ADC1_Init+0xbc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <MX_ADC1_Init+0xbc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000502:	2204      	movs	r2, #4
 8000504:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_ADC1_Init+0xbc>)
 800050e:	2200      	movs	r2, #0
 8000510:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000514:	2201      	movs	r2, #1
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_ADC1_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000522:	2200      	movs	r2, #0
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000528:	2200      	movs	r2, #0
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000536:	2200      	movs	r2, #0
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_ADC1_Init+0xbc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000544:	f000 fce4 	bl	8000f10 <HAL_ADC_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800054e:	f000 f942 	bl	80007d6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_ADC1_Init+0xc4>)
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000556:	2306      	movs	r3, #6
 8000558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055e:	237f      	movs	r3, #127	; 0x7f
 8000560:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000562:	2304      	movs	r3, #4
 8000564:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000570:	f000 fe14 	bl	800119c <HAL_ADC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800057a:	f000 f92c 	bl	80007d6 <Error_Handler>
  }

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	50040000 	.word	0x50040000
 8000590:	32601000 	.word	0x32601000

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <HAL_ADC_MspInit+0x74>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d124      	bne.n	8000600 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_ADC_MspInit+0x78>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005ea:	230b      	movs	r3, #11
 80005ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 fbdc 	bl	8001db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	50040000 	.word	0x50040000
 800060c:	40021000 	.word	0x40021000

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_DMA_Init+0x48>)
 8000618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <MX_DMA_Init+0x48>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6493      	str	r3, [r2, #72]	; 0x48
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_DMA_Init+0x48>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2010      	movs	r0, #16
 8000634:	f001 f9e1 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000638:	2010      	movs	r0, #16
 800063a:	f001 f9fa 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2011      	movs	r0, #17
 8000644:	f001 f9d9 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000648:	2011      	movs	r0, #17
 800064a:	f001 f9f2 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x5c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fa35 	bl	8000b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f809 	bl	80006da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f7ff ffc8 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 80006cc:	f7ff ffa0 	bl	8000610 <MX_DMA_Init>
  MX_ADC1_Init();
 80006d0:	f7ff fefc 	bl	80004cc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f92c 	bl	8000930 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x1c>

080006da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b0ae      	sub	sp, #184	; 0xb8
 80006de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006e4:	2244      	movs	r2, #68	; 0x44
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fd09 	bl	8004100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	225c      	movs	r2, #92	; 0x5c
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fcfb 	bl	8004100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070a:	2301      	movs	r3, #1
 800070c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000712:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	2303      	movs	r3, #3
 800071c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000720:	2305      	movs	r3, #5
 8000722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000726:	2320      	movs	r3, #32
 8000728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072c:	2307      	movs	r3, #7
 800072e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fd16 	bl	8002174 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800074e:	f000 f842 	bl	80007d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000766:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800076a:	2104      	movs	r1, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f002 f921 	bl	80029b4 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000778:	f000 f82d 	bl	80007d6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800077c:	f244 0302 	movw	r3, #16386	; 0x4002
 8000780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800078c:	2303      	movs	r3, #3
 800078e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000794:	230d      	movs	r3, #13
 8000796:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000798:	2307      	movs	r3, #7
 800079a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fb05 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007b8:	f000 f80d 	bl	80007d6 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c0:	f001 fc82 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	37b8      	adds	r7, #184	; 0xb8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f9a8 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <DMA1_Channel6_IRQHandler+0x10>)
 800088e:	f001 f9e4 	bl	8001c5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000008c 	.word	0x2000008c

0800089c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <DMA1_Channel7_IRQHandler+0x10>)
 80008a2:	f001 f9da 	bl	8001c5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d4 	.word	0x200000d4

080008b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART2_IRQHandler+0x10>)
 80008b6:	f002 fdd5 	bl	8003464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000011c 	.word	0x2000011c

080008c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <SystemInit+0x64>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <SystemInit+0x64>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <SystemInit+0x68>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <SystemInit+0x68>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <SystemInit+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <SystemInit+0x68>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <SystemInit+0x68>)
 80008f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <SystemInit+0x68>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SystemInit+0x68>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <SystemInit+0x68>)
 8000908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <SystemInit+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SystemInit+0x64>)
 8000916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091a:	609a      	str	r2, [r3, #8]
#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	40021000 	.word	0x40021000

08000930 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART2_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800093c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000974:	f002 fd28 	bl	80033c8 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f7ff ff2a 	bl	80007d6 <Error_Handler>
  }

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000011c 	.word	0x2000011c
 800098c:	40004400 	.word	0x40004400

08000990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a45      	ldr	r2, [pc, #276]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	f040 8083 	bne.w	8000aba <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6593      	str	r3, [r2, #88]	; 0x58
 80009c0:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b3e      	ldr	r3, [pc, #248]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f4:	2307      	movs	r3, #7
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f001 f9d9 	bl	8001db8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a3c:	4823      	ldr	r0, [pc, #140]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a3e:	f001 f813 	bl	8001a68 <HAL_DMA_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8000a48:	f7ff fec5 	bl	80007d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a50:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a66:	2210      	movs	r2, #16
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a8e:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a90:	f000 ffea 	bl	8001a68 <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000a9a:	f7ff fe9c 	bl	80007d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000aa2:	669a      	str	r2, [r3, #104]	; 0x68
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2026      	movs	r0, #38	; 0x26
 8000ab0:	f000 ffa3 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f000 ffbc 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	2000008c 	.word	0x2000008c
 8000ad0:	4002006c 	.word	0x4002006c
 8000ad4:	200000d4 	.word	0x200000d4
 8000ad8:	40020080 	.word	0x40020080

08000adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ae0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000af2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
	ldr	r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000afa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000afc:	f842 3b04 	str.w	r3, [r2], #4

08000b00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <LoopForever+0x16>)
	cmp	r2, r3
 8000b02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b06:	f7ff fedd 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f003 fad5 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0e:	f7ff fdd5 	bl	80006bc <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b18:	08004180 	.word	0x08004180
	ldr	r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b28:	200001a0 	.word	0x200001a0

08000b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>

08000b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 ff53 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f80e 	bl	8000b60 <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b50:	f7ff fe48 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d022      	beq.n	8000bba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_InitTick+0x68>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 ff60 	bl	8001a4e <HAL_SYSTICK_Config>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10f      	bne.n	8000bb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d809      	bhi.n	8000bae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba2:	f000 ff2a 	bl	80019fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_InitTick+0x70>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e004      	b.n	8000bbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e001      	b.n	8000bbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x1c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x1c>)
 8000be4:	6013      	str	r3, [r2, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	2000019c 	.word	0x2000019c
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000019c 	.word	0x2000019c

08000c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	609a      	str	r2, [r3, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c78:	b490      	push	{r4, r7}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3360      	adds	r3, #96	; 0x60
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c94:	6822      	ldr	r2, [r4, #0]
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <LL_ADC_SetOffset+0x40>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000caa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc90      	pop	{r4, r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	03fff000 	.word	0x03fff000

08000cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cbc:	b490      	push	{r4, r7}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3360      	adds	r3, #96	; 0x60
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc90      	pop	{r4, r7}
 8000ce2:	4770      	bx	lr

08000ce4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ce4:	b490      	push	{r4, r7}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3360      	adds	r3, #96	; 0x60
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc90      	pop	{r4, r7}
 8000d12:	4770      	bx	lr

08000d14 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d14:	b490      	push	{r4, r7}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3330      	adds	r3, #48	; 0x30
 8000d24:	461a      	mov	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	4413      	add	r3, r2
 8000d32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d34:	6822      	ldr	r2, [r4, #0]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	211f      	movs	r1, #31
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	401a      	ands	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0e9b      	lsrs	r3, r3, #26
 8000d4a:	f003 011f 	and.w	r1, r3, #31
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc90      	pop	{r4, r7}
 8000d64:	4770      	bx	lr

08000d66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d66:	b490      	push	{r4, r7}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3314      	adds	r3, #20
 8000d76:	461a      	mov	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	0e5b      	lsrs	r3, r3, #25
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	4413      	add	r3, r2
 8000d84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	0d1b      	lsrs	r3, r3, #20
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	2107      	movs	r1, #7
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	0d1b      	lsrs	r3, r3, #20
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc90      	pop	{r4, r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0318 	and.w	r3, r3, #24
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ddc:	40d9      	lsrs	r1, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	400b      	ands	r3, r1
 8000de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000de6:	431a      	orrs	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0007ffff 	.word	0x0007ffff

08000e00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6093      	str	r3, [r2, #8]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e38:	d101      	bne.n	8000e3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e88:	d101      	bne.n	8000e8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <LL_ADC_IsEnabled+0x18>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <LL_ADC_IsEnabled+0x1a>
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d101      	bne.n	8000eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d101      	bne.n	8000f00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e12a      	b.n	8001180 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fb2b 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff67 	bl	8000e24 <LL_ADC_IsDeepPowerDownEnabled>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff4d 	bl	8000e00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff82 	bl	8000e74 <LL_ADC_IsInternalRegulatorEnabled>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d113      	bne.n	8000f9e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff66 	bl	8000e4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f80:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_ADC_Init+0x278>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	4a81      	ldr	r2, [pc, #516]	; (800118c <HAL_ADC_Init+0x27c>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	099b      	lsrs	r3, r3, #6
 8000f8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f90:	e002      	b.n	8000f98 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f9      	bne.n	8000f92 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff66 	bl	8000e74 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10d      	bne.n	8000fca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb2:	f043 0210 	orr.w	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff77 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 8000fd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 80c5 	bne.w	800116e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 80c1 	bne.w	800116e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ff4:	f043 0202 	orr.w	r2, r3, #2
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff4b 	bl	8000e9c <LL_ADC_IsEnabled>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10b      	bne.n	8001024 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800100c:	4860      	ldr	r0, [pc, #384]	; (8001190 <HAL_ADC_Init+0x280>)
 800100e:	f7ff ff45 	bl	8000e9c <LL_ADC_IsEnabled>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4619      	mov	r1, r3
 800101e:	485d      	ldr	r0, [pc, #372]	; (8001194 <HAL_ADC_Init+0x284>)
 8001020:	f7ff fdf6 	bl	8000c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7e5b      	ldrb	r3, [r3, #25]
 8001028:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800102e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001034:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800103a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001042:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d106      	bne.n	8001060 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	3b01      	subs	r3, #1
 8001058:	045b      	lsls	r3, r3, #17
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <HAL_ADC_Init+0x288>)
 8001084:	4013      	ands	r3, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	430b      	orrs	r3, r1
 800108e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff14 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 800109a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff21 	bl	8000ee8 <LL_ADC_INJ_IsConversionOngoing>
 80010a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d13d      	bne.n	800112a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d13a      	bne.n	800112a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010d0:	f023 0302 	bic.w	r3, r3, #2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	69b9      	ldr	r1, [r7, #24]
 80010da:	430b      	orrs	r3, r1
 80010dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d118      	bne.n	800111a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010fe:	4311      	orrs	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001104:	4311      	orrs	r1, r2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800110a:	430a      	orrs	r2, r1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	e007      	b.n	800112a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10c      	bne.n	800114c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f023 010f 	bic.w	r1, r3, #15
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
 800114a:	e007      	b.n	800115c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020f 	bic.w	r2, r2, #15
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001160:	f023 0303 	bic.w	r3, r3, #3
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
 800116c:	e007      	b.n	800117e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	f043 0210 	orr.w	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800117e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	053e2d63 	.word	0x053e2d63
 8001190:	50040000 	.word	0x50040000
 8001194:	50040300 	.word	0x50040300
 8001198:	fff0c007 	.word	0xfff0c007

0800119c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0a6      	sub	sp, #152	; 0x98
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_ADC_ConfigChannel+0x22>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e338      	b.n	8001830 <HAL_ADC_ConfigChannel+0x694>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe79 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 831d 	bne.w	8001812 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d824      	bhi.n	800122a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	3b02      	subs	r3, #2
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d81b      	bhi.n	8001222 <HAL_ADC_ConfigChannel+0x86>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_ADC_ConfigChannel+0x54>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001209 	.word	0x08001209
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001219 	.word	0x08001219
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	220c      	movs	r2, #12
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	e011      	b.n	800122c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2212      	movs	r2, #18
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	e00d      	b.n	800122c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2218      	movs	r2, #24
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	e009      	b.n	800122c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	e004      	b.n	800122c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2206      	movs	r2, #6
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	e000      	b.n	800122c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800122a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	f7ff fd6b 	bl	8000d14 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe3d 	bl	8000ec2 <LL_ADC_REG_IsConversionOngoing>
 8001248:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe49 	bl	8000ee8 <LL_ADC_INJ_IsConversionOngoing>
 8001256:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800125a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 8148 	bne.w	80014f4 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 8143 	bne.w	80014f4 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	461a      	mov	r2, r3
 800127c:	f7ff fd73 	bl	8000d66 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d00a      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012b2:	f7ff fce1 	bl	8000c78 <LL_ADC_SetOffset>
 80012b6:	e11d      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fcfc 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10a      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x148>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fcf1 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	f003 021f 	and.w	r2, r3, #31
 80012e2:	e012      	b.n	800130a <HAL_ADC_ConfigChannel+0x16e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fce6 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x186>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0e9b      	lsrs	r3, r3, #26
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	e00a      	b.n	8001338 <HAL_ADC_ConfigChannel+0x19c>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fccd 	bl	8000ce4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fcb3 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x1da>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fca8 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	e010      	b.n	8001398 <HAL_ADC_ConfigChannel+0x1fc>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fc9d 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800138e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d105      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x214>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0e9b      	lsrs	r3, r3, #26
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	e00a      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x22a>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d106      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc86 	bl	8000ce4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc6c 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x268>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2102      	movs	r1, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fc61 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	0e9b      	lsrs	r3, r3, #26
 80013fe:	f003 021f 	and.w	r2, r3, #31
 8001402:	e010      	b.n	8001426 <HAL_ADC_ConfigChannel+0x28a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fc56 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800141c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <HAL_ADC_ConfigChannel+0x2a2>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0e9b      	lsrs	r3, r3, #26
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	e00a      	b.n	8001454 <HAL_ADC_ConfigChannel+0x2b8>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800144c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	429a      	cmp	r2, r3
 8001456:	d106      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	2102      	movs	r1, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fc3f 	bl	8000ce4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2103      	movs	r1, #3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc25 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10a      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x2f6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2103      	movs	r1, #3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc1a 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	0e9b      	lsrs	r3, r3, #26
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	e010      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x318>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2103      	movs	r1, #3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc0f 	bl	8000cbc <LL_ADC_GetOffsetChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x330>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0e9b      	lsrs	r3, r3, #26
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	e00a      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x346>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80014da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d106      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	2103      	movs	r1, #3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fbf8 	bl	8000ce4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fccf 	bl	8000e9c <LL_ADC_IsEnabled>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 810c 	bne.w	800171e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	461a      	mov	r2, r3
 8001514:	f7ff fc50 	bl	8000db8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4aa8      	ldr	r2, [pc, #672]	; (80017c0 <HAL_ADC_ConfigChannel+0x624>)
 800151e:	4293      	cmp	r3, r2
 8001520:	f040 80fd 	bne.w	800171e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10b      	bne.n	800154c <HAL_ADC_ConfigChannel+0x3b0>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0e9b      	lsrs	r3, r3, #26
 800153a:	3301      	adds	r3, #1
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2b09      	cmp	r3, #9
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e012      	b.n	8001572 <HAL_ADC_ConfigChannel+0x3d6>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b09      	cmp	r3, #9
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001572:	2b00      	cmp	r3, #0
 8001574:	d064      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x3f6>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0e9b      	lsrs	r3, r3, #26
 8001588:	3301      	adds	r3, #1
 800158a:	069b      	lsls	r3, r3, #26
 800158c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001590:	e00e      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x414>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	069b      	lsls	r3, r3, #26
 80015ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x434>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0e9b      	lsrs	r3, r3, #26
 80015c2:	3301      	adds	r3, #1
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	e010      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x456>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80015de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	ea42 0103 	orr.w	r1, r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10a      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x47c>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0e9b      	lsrs	r3, r3, #26
 8001608:	3301      	adds	r3, #1
 800160a:	f003 021f 	and.w	r2, r3, #31
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	e011      	b.n	800163c <HAL_ADC_ConfigChannel+0x4a0>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163c:	430b      	orrs	r3, r1
 800163e:	e069      	b.n	8001714 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_ADC_ConfigChannel+0x4c0>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0e9b      	lsrs	r3, r3, #26
 8001652:	3301      	adds	r3, #1
 8001654:	069b      	lsls	r3, r3, #26
 8001656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165a:	e00e      	b.n	800167a <HAL_ADC_ConfigChannel+0x4de>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	61fb      	str	r3, [r7, #28]
  return result;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	069b      	lsls	r3, r3, #26
 8001676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_ConfigChannel+0x4fe>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0e9b      	lsrs	r3, r3, #26
 800168c:	3301      	adds	r3, #1
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	e010      	b.n	80016bc <HAL_ADC_ConfigChannel+0x520>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	617b      	str	r3, [r7, #20]
  return result;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	ea42 0103 	orr.w	r1, r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x54c>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0e9b      	lsrs	r3, r3, #26
 80016d2:	3301      	adds	r3, #1
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	3b1e      	subs	r3, #30
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016e6:	e014      	b.n	8001712 <HAL_ADC_ConfigChannel+0x576>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	60fb      	str	r3, [r7, #12]
  return result;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	3b1e      	subs	r3, #30
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001712:	430b      	orrs	r3, r1
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	6892      	ldr	r2, [r2, #8]
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fb24 	bl	8000d66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_ADC_ConfigChannel+0x628>)
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d07c      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <HAL_ADC_ConfigChannel+0x62c>)
 800172c:	f7ff fa96 	bl	8000c5c <LL_ADC_GetCommonPathInternalCh>
 8001730:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_ADC_ConfigChannel+0x630>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d126      	bne.n	800178c <HAL_ADC_ConfigChannel+0x5f0>
 800173e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d120      	bne.n	800178c <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <HAL_ADC_ConfigChannel+0x634>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d167      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001758:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800175c:	4619      	mov	r1, r3
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <HAL_ADC_ConfigChannel+0x62c>)
 8001760:	f7ff fa69 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_ADC_ConfigChannel+0x638>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_ADC_ConfigChannel+0x63c>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099a      	lsrs	r2, r3, #6
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800177c:	e002      	b.n	8001784 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800178a:	e04b      	b.n	8001824 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_ADC_ConfigChannel+0x640>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d124      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x644>
 8001796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800179a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11e      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_ADC_ConfigChannel+0x634>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d13b      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b4:	4619      	mov	r1, r3
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <HAL_ADC_ConfigChannel+0x62c>)
 80017b8:	f7ff fa3d 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017bc:	e032      	b.n	8001824 <HAL_ADC_ConfigChannel+0x688>
 80017be:	bf00      	nop
 80017c0:	407f0000 	.word	0x407f0000
 80017c4:	80080000 	.word	0x80080000
 80017c8:	50040300 	.word	0x50040300
 80017cc:	c7520000 	.word	0xc7520000
 80017d0:	50040000 	.word	0x50040000
 80017d4:	20000000 	.word	0x20000000
 80017d8:	053e2d63 	.word	0x053e2d63
 80017dc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_ADC_ConfigChannel+0x69c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11c      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_ADC_ConfigChannel+0x6a0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d111      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001808:	4619      	mov	r1, r3
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <HAL_ADC_ConfigChannel+0x6a4>)
 800180c:	f7ff fa13 	bl	8000c36 <LL_ADC_SetCommonPathInternalCh>
 8001810:	e008      	b.n	8001824 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800182c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001830:	4618      	mov	r0, r3
 8001832:	3798      	adds	r7, #152	; 0x98
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	80000001 	.word	0x80000001
 800183c:	50040000 	.word	0x50040000
 8001840:	50040300 	.word	0x50040300

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff3e 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff8e 	bl	8001938 <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e098      	b.n	8001bac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_DMA_Init+0x150>)
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d80f      	bhi.n	8001aa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_DMA_Init+0x154>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_DMA_Init+0x158>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	009a      	lsls	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_DMA_Init+0x15c>)
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	e00e      	b.n	8001ac4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_DMA_Init+0x160>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a43      	ldr	r2, [pc, #268]	; (8001bc0 <HAL_DMA_Init+0x158>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	009a      	lsls	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <HAL_DMA_Init+0x164>)
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ade:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1e:	d039      	beq.n	8001b94 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_DMA_Init+0x15c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11a      	bne.n	8001b60 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_DMA_Init+0x168>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 031c 	and.w	r3, r3, #28
 8001b36:	210f      	movs	r1, #15
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4924      	ldr	r1, [pc, #144]	; (8001bd0 <HAL_DMA_Init+0x168>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_DMA_Init+0x168>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f003 031c 	and.w	r3, r3, #28
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	491d      	ldr	r1, [pc, #116]	; (8001bd0 <HAL_DMA_Init+0x168>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
 8001b5e:	e019      	b.n	8001b94 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_DMA_Init+0x16c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f003 031c 	and.w	r3, r3, #28
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4917      	ldr	r1, [pc, #92]	; (8001bd4 <HAL_DMA_Init+0x16c>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_DMA_Init+0x16c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 031c 	and.w	r3, r3, #28
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <HAL_DMA_Init+0x16c>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40020407 	.word	0x40020407
 8001bbc:	bffdfff8 	.word	0xbffdfff8
 8001bc0:	cccccccd 	.word	0xcccccccd
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	bffdfbf8 	.word	0xbffdfbf8
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	400200a8 	.word	0x400200a8
 8001bd4:	400204a8 	.word	0x400204a8

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d005      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e029      	b.n	8001c50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020e 	bic.w	r2, r2, #14
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f003 021c 	and.w	r2, r3, #28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
    }
  }
  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 031c 	and.w	r3, r3, #28
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d026      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x7a>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 021c 	and.w	r2, r3, #28
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2104      	movs	r1, #4
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d071      	beq.n	8001dae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001cd2:	e06c      	b.n	8001dae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f003 031c 	and.w	r3, r3, #28
 8001cdc:	2202      	movs	r2, #2
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d02e      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xec>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d029      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020a 	bic.w	r2, r2, #10
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f003 021c 	and.w	r2, r3, #28
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2102      	movs	r1, #2
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d038      	beq.n	8001dae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d44:	e033      	b.n	8001dae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f003 031c 	and.w	r3, r3, #28
 8001d4e:	2208      	movs	r2, #8
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02a      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x156>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d025      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f003 021c 	and.w	r2, r3, #28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
}
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e154      	b.n	8002072 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8146 	beq.w	800206c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d00b      	beq.n	8001e00 <HAL_GPIO_Init+0x48>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df4:	2b11      	cmp	r3, #17
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0xea>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a0 	beq.w	800206c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_GPIO_Init+0x2d8>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_GPIO_Init+0x2d8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6613      	str	r3, [r2, #96]	; 0x60
 8001f38:	4b55      	ldr	r3, [pc, #340]	; (8002090 <HAL_GPIO_Init+0x2d8>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f44:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_GPIO_Init+0x2dc>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f6e:	d019      	beq.n	8001fa4 <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1dc>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e008      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001f94:	2307      	movs	r3, #7
 8001f96:	e006      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e004      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb6:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_GPIO_Init+0x2dc>)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f aea3 	bne.w	8001dc8 <HAL_GPIO_Init+0x10>
  }
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	48000400 	.word	0x48000400
 800209c:	48000800 	.word	0x48000800
 80020a0:	48000c00 	.word	0x48000c00
 80020a4:	48001000 	.word	0x48001000
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	d130      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d038      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2232      	movs	r2, #50	; 0x32
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210c:	e002      	b.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d102      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f2      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002134:	d110      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e00f      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d007      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002150:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f000 bc11 	b.w	80029aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002188:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002192:	4b9e      	ldr	r3, [pc, #632]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80e4 	beq.w	8002372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4c>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	f040 808b 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 8087 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x64>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e3e8      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4b8b      	ldr	r3, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7e>
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	e005      	b.n	80021fe <HAL_RCC_OscConfig+0x8a>
 80021f2:	4b86      	ldr	r3, [pc, #536]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	4293      	cmp	r3, r2
 8002200:	d223      	bcs.n	800224a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd78 	bl	8002cfc <RCC_SetFlashLatencyFromMSIRange>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3c9      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b7d      	ldr	r3, [pc, #500]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4977      	ldr	r1, [pc, #476]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b75      	ldr	r3, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4972      	ldr	r1, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e025      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b70      	ldr	r3, [pc, #448]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6f      	ldr	r2, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	496a      	ldr	r1, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4965      	ldr	r1, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd38 	bl	8002cfc <RCC_SetFlashLatencyFromMSIRange>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e389      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002296:	f000 fc6f 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a5a      	ldr	r2, [pc, #360]	; (8002410 <HAL_RCC_OscConfig+0x29c>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa21 f303 	lsr.w	r3, r1, r3
 80022b2:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x2a0>)
 80022b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022b6:	4b58      	ldr	r3, [pc, #352]	; (8002418 <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fc50 	bl	8000b60 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d052      	beq.n	8002370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e36d      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022d6:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4c      	ldr	r2, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fc89 	bl	8000bf8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ea:	f7fe fc85 	bl	8000bf8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e356      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	493a      	ldr	r1, [pc, #232]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e01a      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x298>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7fe fc56 	bl	8000bf8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7fe fc52 	bl	8000bf8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e323      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1dc>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d073      	beq.n	8002466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x21c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d063      	beq.n	8002464 <HAL_RCC_OscConfig+0x2f0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d15f      	bne.n	8002464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e300      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x24c>
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0x288>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x270>
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x288>
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_RCC_OscConfig+0x298>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fbf8 	bl	8000bf8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	e010      	b.n	800242e <HAL_RCC_OscConfig+0x2ba>
 800240c:	40021000 	.word	0x40021000
 8002410:	08004128 	.word	0x08004128
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fbec 	bl	8000bf8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2bd      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	4baf      	ldr	r3, [pc, #700]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2a8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fbdc 	bl	8000bf8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fbd8 	bl	8000bf8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e2a9      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	4ba5      	ldr	r3, [pc, #660]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x2d0>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d060      	beq.n	8002534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x310>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002484:	4b99      	ldr	r3, [pc, #612]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x328>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e286      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	4990      	ldr	r1, [pc, #576]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	e040      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d023      	beq.n	8002502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a8b      	ldr	r2, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fb97 	bl	8000bf8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7fe fb93 	bl	8000bf8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e264      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	497c      	ldr	r1, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e018      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b7a      	ldr	r3, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a79      	ldr	r2, [pc, #484]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fb73 	bl	8000bf8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe fb6f 	bl	8000bf8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e240      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	4a67      	ldr	r2, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fb4e 	bl	8000bf8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fb4a 	bl	8000bf8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e21b      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x3ec>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fb31 	bl	8000bf8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7fe fb2d 	bl	8000bf8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1fe      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	4b4f      	ldr	r3, [pc, #316]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a6 	beq.w	8002714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025cc:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a43      	ldr	r2, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f4:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_OscConfig+0x57c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d118      	bne.n	8002632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x57c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x57c>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7fe faf4 	bl	8000bf8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe faf0 	bl	8000bf8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1c1      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_RCC_OscConfig+0x57c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x4d8>
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800264a:	e024      	b.n	8002696 <HAL_RCC_OscConfig+0x522>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d110      	bne.n	8002676 <HAL_RCC_OscConfig+0x502>
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a20      	ldr	r2, [pc, #128]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002674:	e00f      	b.n	8002696 <HAL_RCC_OscConfig+0x522>
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe faab 	bl	8000bf8 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe faa7 	bl	8000bf8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e176      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x578>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ed      	beq.n	80026a6 <HAL_RCC_OscConfig+0x532>
 80026ca:	e01a      	b.n	8002702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fa94 	bl	8000bf8 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fa90 	bl	8000bf8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d906      	bls.n	80026f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e15f      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	4baa      	ldr	r3, [pc, #680]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e8      	bne.n	80026d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4ba5      	ldr	r3, [pc, #660]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4aa4      	ldr	r2, [pc, #656]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03c      	beq.n	800279a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002728:	4b9d      	ldr	r3, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	4a9c      	ldr	r2, [pc, #624]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fa5e 	bl	8000bf8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7fe fa5a 	bl	8000bf8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e12b      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x5cc>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002762:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002768:	4a8d      	ldr	r2, [pc, #564]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fa41 	bl	8000bf8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe fa3d 	bl	8000bf8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e10e      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	4b84      	ldr	r3, [pc, #528]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800278e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8102 	beq.w	80029a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80c5 	bne.w	8002938 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ae:	4b7c      	ldr	r3, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d12c      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d123      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d113      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d067      	beq.n	80028ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d062      	beq.n	80028e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0bb      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800283e:	f7fe f9db 	bl	8000bf8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe f9d7 	bl	8000bf8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0a8      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002858:	4b51      	ldr	r3, [pc, #324]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCC_OscConfig+0x830>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002874:	3a01      	subs	r2, #1
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0552      	lsls	r2, r2, #21
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0652      	lsls	r2, r2, #25
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800289e:	06d2      	lsls	r2, r2, #27
 80028a0:	430a      	orrs	r2, r1
 80028a2:	493f      	ldr	r1, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a8:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7fe f99a 	bl	8000bf8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe f996 	bl	8000bf8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e067      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e6:	e05f      	b.n	80029a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e05e      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d157      	bne.n	80029a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002910:	f7fe f972 	bl	8000bf8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe f96e 	bl	8000bf8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e03f      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x7a4>
 8002936:	e037      	b.n	80029a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d02d      	beq.n	800299a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800295c:	f023 0303 	bic.w	r3, r3, #3
 8002960:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 8002968:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800296c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002970:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe f941 	bl	8000bf8 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe f93d 	bl	8000bf8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e00e      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCC_OscConfig+0x82c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x806>
 8002998:	e006      	b.n	80029a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e005      	b.n	80029aa <HAL_RCC_OscConfig+0x836>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0c8      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d910      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0207 	bic.w	r2, r3, #7
 80029de:	4961      	ldr	r1, [pc, #388]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b0      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d04c      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d121      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e09e      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d115      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e092      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e086      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e07e      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	493f      	ldr	r1, [pc, #252]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6e:	f7fe f8c3 	bl	8000bf8 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a76:	f7fe f8bf 	bl	8000bf8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e066      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 020c 	and.w	r2, r3, #12
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d1eb      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	492c      	ldr	r1, [pc, #176]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d210      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4924      	ldr	r1, [pc, #144]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_ClockConfig+0x1b0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e036      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4910      	ldr	r1, [pc, #64]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b2a:	f000 f825 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4601      	mov	r1, r0
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	fa21 f303 	lsr.w	r3, r1, r3
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f806 	bl	8000b60 <HAL_InitTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b58:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08004128 	.word	0x08004128
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d121      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d11e      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e004      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d133      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa4>
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0xaa>
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1e:	617b      	str	r3, [r7, #20]
      break;
 8002c20:	e005      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c24:	617b      	str	r3, [r7, #20]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	617b      	str	r3, [r7, #20]
      break;
 8002c2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	3301      	adds	r3, #1
 8002c3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	fb02 f203 	mul.w	r2, r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0e5b      	lsrs	r3, r3, #25
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3724      	adds	r7, #36	; 0x24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	08004140 	.word	0x08004140
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	017d7840 	.word	0x017d7840

08002c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4601      	mov	r1, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004138 	.word	0x08004138

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd4:	f7ff ffda 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08004138 	.word	0x08004138

08002cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d14:	f7ff f9ca 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d18:	6178      	str	r0, [r7, #20]
 8002d1a:	e014      	b.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d34:	f7ff f9ba 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4c:	d10b      	bne.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d919      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2ba0      	cmp	r3, #160	; 0xa0
 8002d58:	d902      	bls.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e013      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e010      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d902      	bls.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e00a      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d102      	bne.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d78:	2302      	movs	r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e004      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d101      	bne.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d84:	2301      	movs	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	4909      	ldr	r1, [pc, #36]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40022000 	.word	0x40022000

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc8:	2300      	movs	r3, #0
 8002dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d02f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de0:	d005      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de6:	d015      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002dec:	e00f      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dee:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a5c      	ldr	r2, [pc, #368]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfa:	e00c      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f9f0 	bl	80031e8 <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	74fb      	strb	r3, [r7, #19]
      break;
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e1c:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	494e      	ldr	r1, [pc, #312]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 809e 	beq.w	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a3f      	ldr	r2, [pc, #252]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a39      	ldr	r2, [pc, #228]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e88:	f7fd feb6 	bl	8000bf8 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fd feb2 	bl	8000bf8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ef      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d15a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01e      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002edc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fd fe72 	bl	8000bf8 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	e00b      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fd fe6e 	bl	8000bf8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d902      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f2e:	e006      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ec      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f5a:	e009      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	74bb      	strb	r3, [r7, #18]
 8002f60:	e006      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f70:	7c7b      	ldrb	r3, [r7, #17]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b9b      	ldr	r3, [pc, #620]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a9a      	ldr	r2, [pc, #616]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8e:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f023 0203 	bic.w	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4991      	ldr	r1, [pc, #580]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	f023 020c 	bic.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	4989      	ldr	r1, [pc, #548]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd2:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	4980      	ldr	r1, [pc, #512]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff4:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4978      	ldr	r1, [pc, #480]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	496f      	ldr	r1, [pc, #444]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4967      	ldr	r1, [pc, #412]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305a:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	495e      	ldr	r1, [pc, #376]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	4956      	ldr	r1, [pc, #344]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d028      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030c0:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	4945      	ldr	r1, [pc, #276]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030de:	d106      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ea:	60d3      	str	r3, [r2, #12]
 80030ec:	e011      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f6:	d10c      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f872 	bl	80031e8 <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d028      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	492d      	ldr	r1, [pc, #180]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313c:	d106      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003148:	60d3      	str	r3, [r2, #12]
 800314a:	e011      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003154:	d10c      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f843 	bl	80031e8 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01c      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d10c      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f820 	bl	80031e8 <RCCEx_PLLSAI1_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000

080031e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003202:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0203 	and.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d10d      	bne.n	800322e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
       ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
       ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d044      	beq.n	80032b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e041      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d00c      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x6e>
 800323c:	2b03      	cmp	r3, #3
 800323e:	d013      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x80>
 8003240:	2b01      	cmp	r3, #1
 8003242:	d120      	bne.n	8003286 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11d      	bne.n	800328c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e01a      	b.n	800328c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003266:	e013      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003268:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10f      	bne.n	8003294 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003284:	e006      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      break;
 800328a:	e004      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800328c:	bf00      	nop
 800328e:	e002      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003290:	bf00      	nop
 8003292:	e000      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003294:	bf00      	nop
    }

    if(status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10d      	bne.n	80032b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800329c:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	430b      	orrs	r3, r1
 80032b2:	4944      	ldr	r1, [pc, #272]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d17c      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ca:	f7fd fc95 	bl	8000bf8 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d0:	e009      	b.n	80032e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d2:	f7fd fc91 	bl	8000bf8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	73fb      	strb	r3, [r7, #15]
        break;
 80032e4:	e005      	b.n	80032f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e6:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ef      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d15f      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d110      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003306:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	0211      	lsls	r1, r2, #8
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68d2      	ldr	r2, [r2, #12]
 8003314:	06d2      	lsls	r2, r2, #27
 8003316:	430a      	orrs	r2, r1
 8003318:	492a      	ldr	r1, [pc, #168]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]
 800331e:	e027      	b.n	8003370 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d112      	bne.n	800334c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800332e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	0211      	lsls	r1, r2, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	0852      	lsrs	r2, r2, #1
 800333e:	3a01      	subs	r2, #1
 8003340:	0552      	lsls	r2, r2, #21
 8003342:	430a      	orrs	r2, r1
 8003344:	491f      	ldr	r1, [pc, #124]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	610b      	str	r3, [r1, #16]
 800334a:	e011      	b.n	8003370 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	0211      	lsls	r1, r2, #8
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6952      	ldr	r2, [r2, #20]
 8003362:	0852      	lsrs	r2, r2, #1
 8003364:	3a01      	subs	r2, #1
 8003366:	0652      	lsls	r2, r2, #25
 8003368:	430a      	orrs	r2, r1
 800336a:	4916      	ldr	r1, [pc, #88]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800337a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd fc3c 	bl	8000bf8 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003382:	e009      	b.n	8003398 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003384:	f7fd fc38 	bl	8000bf8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	73fb      	strb	r3, [r7, #15]
          break;
 8003396:	e005      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	4904      	ldr	r1, [pc, #16]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e040      	b.n	800345c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fad0 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f986 	bl	8003718 <UART_SetConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e022      	b.n	800345c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fc8e 	bl	8003d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fd15 	bl	8003e84 <UART_CheckIdleState>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f640 030f 	movw	r3, #2063	; 0x80f
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8114 	beq.w	80036da <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
      }
      return;
 80034ba:	e10e      	b.n	80036da <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80d6 	beq.w	8003670 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80cb 	beq.w	8003670 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_UART_IRQHandler+0x9e>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_UART_IRQHandler+0xc6>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_UART_IRQHandler+0xee>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2208      	movs	r2, #8
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	f043 0208 	orr.w	r2, r3, #8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <HAL_UART_IRQHandler+0x14a>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8093 	beq.w	80036de <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d004      	beq.n	80035fa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d031      	beq.n	800365e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fd02 	bl	8004004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d123      	bne.n	8003656 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d013      	beq.n	800364e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	4a30      	ldr	r2, [pc, #192]	; (80036ec <HAL_UART_IRQHandler+0x288>)
 800362c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fad0 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003648:	4610      	mov	r0, r2
 800364a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	e00e      	b.n	800366c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f858 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00a      	b.n	800366c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f854 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e006      	b.n	800366c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f850 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800366a:	e038      	b.n	80036de <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	bf00      	nop
    return;
 800366e:	e036      	b.n	80036de <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <HAL_UART_IRQHandler+0x232>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800368c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fd07 	bl	80040a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003694:	e026      	b.n	80036e4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d017      	beq.n	80036e2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
    }
    return;
 80036ba:	e012      	b.n	80036e2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <HAL_UART_IRQHandler+0x280>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fccd 	bl	8004070 <UART_EndTransmit_IT>
    return;
 80036d6:	bf00      	nop
 80036d8:	e004      	b.n	80036e4 <HAL_UART_IRQHandler+0x280>
      return;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_UART_IRQHandler+0x280>
    return;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_UART_IRQHandler+0x280>
    return;
 80036e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08004045 	.word	0x08004045

080036f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800371c:	b08a      	sub	sp, #40	; 0x28
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4bbc      	ldr	r3, [pc, #752]	; (8003a40 <UART_SetConfig+0x328>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	430b      	orrs	r3, r1
 8003758:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4ab2      	ldr	r2, [pc, #712]	; (8003a44 <UART_SetConfig+0x32c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	4313      	orrs	r3, r2
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4aa9      	ldr	r2, [pc, #676]	; (8003a48 <UART_SetConfig+0x330>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d126      	bne.n	80037f6 <UART_SetConfig+0xde>
 80037a8:	4ba8      	ldr	r3, [pc, #672]	; (8003a4c <UART_SetConfig+0x334>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d81a      	bhi.n	80037ec <UART_SetConfig+0xd4>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0xa4>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e0ab      	b.n	800392c <UART_SetConfig+0x214>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e0a7      	b.n	800392c <UART_SetConfig+0x214>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e0a3      	b.n	800392c <UART_SetConfig+0x214>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e09f      	b.n	800392c <UART_SetConfig+0x214>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	bf00      	nop
 80037f4:	e09a      	b.n	800392c <UART_SetConfig+0x214>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a95      	ldr	r2, [pc, #596]	; (8003a50 <UART_SetConfig+0x338>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d138      	bne.n	8003872 <UART_SetConfig+0x15a>
 8003800:	4b92      	ldr	r3, [pc, #584]	; (8003a4c <UART_SetConfig+0x334>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d82c      	bhi.n	8003868 <UART_SetConfig+0x150>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0xfc>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003849 	.word	0x08003849
 8003818:	08003869 	.word	0x08003869
 800381c:	08003869 	.word	0x08003869
 8003820:	08003869 	.word	0x08003869
 8003824:	08003859 	.word	0x08003859
 8003828:	08003869 	.word	0x08003869
 800382c:	08003869 	.word	0x08003869
 8003830:	08003869 	.word	0x08003869
 8003834:	08003851 	.word	0x08003851
 8003838:	08003869 	.word	0x08003869
 800383c:	08003869 	.word	0x08003869
 8003840:	08003869 	.word	0x08003869
 8003844:	08003861 	.word	0x08003861
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e06d      	b.n	800392c <UART_SetConfig+0x214>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e069      	b.n	800392c <UART_SetConfig+0x214>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e065      	b.n	800392c <UART_SetConfig+0x214>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e061      	b.n	800392c <UART_SetConfig+0x214>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	bf00      	nop
 8003870:	e05c      	b.n	800392c <UART_SetConfig+0x214>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <UART_SetConfig+0x33c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d125      	bne.n	80038c8 <UART_SetConfig+0x1b0>
 800387c:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <UART_SetConfig+0x334>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003886:	2b10      	cmp	r3, #16
 8003888:	d011      	beq.n	80038ae <UART_SetConfig+0x196>
 800388a:	2b10      	cmp	r3, #16
 800388c:	d802      	bhi.n	8003894 <UART_SetConfig+0x17c>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <UART_SetConfig+0x186>
 8003892:	e014      	b.n	80038be <UART_SetConfig+0x1a6>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d006      	beq.n	80038a6 <UART_SetConfig+0x18e>
 8003898:	2b30      	cmp	r3, #48	; 0x30
 800389a:	d00c      	beq.n	80038b6 <UART_SetConfig+0x19e>
 800389c:	e00f      	b.n	80038be <UART_SetConfig+0x1a6>
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e042      	b.n	800392c <UART_SetConfig+0x214>
 80038a6:	2302      	movs	r3, #2
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ac:	e03e      	b.n	800392c <UART_SetConfig+0x214>
 80038ae:	2304      	movs	r3, #4
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b4:	e03a      	b.n	800392c <UART_SetConfig+0x214>
 80038b6:	2308      	movs	r3, #8
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038bc:	e036      	b.n	800392c <UART_SetConfig+0x214>
 80038be:	2310      	movs	r3, #16
 80038c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c4:	bf00      	nop
 80038c6:	e031      	b.n	800392c <UART_SetConfig+0x214>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5d      	ldr	r2, [pc, #372]	; (8003a44 <UART_SetConfig+0x32c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d129      	bne.n	8003926 <UART_SetConfig+0x20e>
 80038d2:	4b5e      	ldr	r3, [pc, #376]	; (8003a4c <UART_SetConfig+0x334>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d014      	beq.n	800390c <UART_SetConfig+0x1f4>
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d802      	bhi.n	80038ee <UART_SetConfig+0x1d6>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <UART_SetConfig+0x1e4>
 80038ec:	e016      	b.n	800391c <UART_SetConfig+0x204>
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f2:	d007      	beq.n	8003904 <UART_SetConfig+0x1ec>
 80038f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f8:	d00c      	beq.n	8003914 <UART_SetConfig+0x1fc>
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x204>
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e013      	b.n	800392c <UART_SetConfig+0x214>
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x214>
 800390c:	2304      	movs	r3, #4
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e00b      	b.n	800392c <UART_SetConfig+0x214>
 8003914:	2308      	movs	r3, #8
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e007      	b.n	800392c <UART_SetConfig+0x214>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <UART_SetConfig+0x214>
 8003926:	2310      	movs	r3, #16
 8003928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a44      	ldr	r2, [pc, #272]	; (8003a44 <UART_SetConfig+0x32c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f040 80fb 	bne.w	8003b2e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800393c:	2b08      	cmp	r3, #8
 800393e:	d824      	bhi.n	800398a <UART_SetConfig+0x272>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x230>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	0800398b 	.word	0x0800398b
 8003950:	08003975 	.word	0x08003975
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800397b 	.word	0x0800397b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	0800398b 	.word	0x0800398b
 8003964:	0800398b 	.word	0x0800398b
 8003968:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800396c:	f7ff f99a 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003970:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003972:	e00d      	b.n	8003990 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <UART_SetConfig+0x340>)
 8003976:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003978:	e00a      	b.n	8003990 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff f8fd 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800397e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003980:	e006      	b.n	8003990 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003988:	e002      	b.n	8003990 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	76fb      	strb	r3, [r7, #27]
        break;
 800398e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 81c8 	beq.w	8003d28 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d305      	bcc.n	80039b4 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d902      	bls.n	80039ba <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	76fb      	strb	r3, [r7, #27]
 80039b8:	e1b6      	b.n	8003d28 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 80039ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039be:	2b08      	cmp	r3, #8
 80039c0:	f200 80a2 	bhi.w	8003b08 <UART_SetConfig+0x3f0>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0x2b4>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	08003b09 	.word	0x08003b09
 80039d4:	08003a5d 	.word	0x08003a5d
 80039d8:	08003b09 	.word	0x08003b09
 80039dc:	08003a91 	.word	0x08003a91
 80039e0:	08003b09 	.word	0x08003b09
 80039e4:	08003b09 	.word	0x08003b09
 80039e8:	08003b09 	.word	0x08003b09
 80039ec:	08003adf 	.word	0x08003adf
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7ff f958 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80039f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4619      	mov	r1, r3
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	f04f 0400 	mov.w	r4, #0
 8003a06:	0214      	lsls	r4, r2, #8
 8003a08:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a0c:	020b      	lsls	r3, r1, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6852      	ldr	r2, [r2, #4]
 8003a12:	0852      	lsrs	r2, r2, #1
 8003a14:	4611      	mov	r1, r2
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	eb13 0b01 	adds.w	fp, r3, r1
 8003a1e:	eb44 0c02 	adc.w	ip, r4, r2
 8003a22:	4658      	mov	r0, fp
 8003a24:	4661      	mov	r1, ip
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4623      	mov	r3, r4
 8003a32:	f7fc fbcb 	bl	80001cc <__aeabi_uldivmod>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a3c:	e067      	b.n	8003b0e <UART_SetConfig+0x3f6>
 8003a3e:	bf00      	nop
 8003a40:	efff69f3 	.word	0xefff69f3
 8003a44:	40008000 	.word	0x40008000
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40004400 	.word	0x40004400
 8003a54:	40004800 	.word	0x40004800
 8003a58:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	49ae      	ldr	r1, [pc, #696]	; (8003d20 <UART_SetConfig+0x608>)
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	eb13 0b01 	adds.w	fp, r3, r1
 8003a70:	eb44 0c02 	adc.w	ip, r4, r2
 8003a74:	4658      	mov	r0, fp
 8003a76:	4661      	mov	r1, ip
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	461a      	mov	r2, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	f7fc fba2 	bl	80001cc <__aeabi_uldivmod>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a8e:	e03e      	b.n	8003b0e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003a90:	f7ff f872 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8003a94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	0214      	lsls	r4, r2, #8
 8003aa8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003aac:	020b      	lsls	r3, r1, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6852      	ldr	r2, [r2, #4]
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	eb13 0b01 	adds.w	fp, r3, r1
 8003abe:	eb44 0c02 	adc.w	ip, r4, r2
 8003ac2:	4658      	mov	r0, fp
 8003ac4:	4661      	mov	r1, ip
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fc fb7b 	bl	80001cc <__aeabi_uldivmod>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003adc:	e017      	b.n	8003b0e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003aec:	f144 0100 	adc.w	r1, r4, #0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fc fb66 	bl	80001cc <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b06:	e002      	b.n	8003b0e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	76fb      	strb	r3, [r7, #27]
            break;
 8003b0c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b14:	d308      	bcc.n	8003b28 <UART_SetConfig+0x410>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1c:	d204      	bcs.n	8003b28 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e0ff      	b.n	8003d28 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	76fb      	strb	r3, [r7, #27]
 8003b2c:	e0fc      	b.n	8003d28 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	f040 8083 	bne.w	8003c40 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8003b3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d85e      	bhi.n	8003c00 <UART_SetConfig+0x4e8>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x430>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b8d 	.word	0x08003b8d
 8003b50:	08003bad 	.word	0x08003bad
 8003b54:	08003c01 	.word	0x08003c01
 8003b58:	08003bc9 	.word	0x08003bc9
 8003b5c:	08003c01 	.word	0x08003c01
 8003b60:	08003c01 	.word	0x08003c01
 8003b64:	08003c01 	.word	0x08003c01
 8003b68:	08003be9 	.word	0x08003be9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7ff f89a 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003b70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	005a      	lsls	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b8a:	e03c      	b.n	8003c06 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7ff f8a0 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003b90:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	005a      	lsls	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003baa:	e02c      	b.n	8003c06 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003bb6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6852      	ldr	r2, [r2, #4]
 8003bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bc6:	e01e      	b.n	8003c06 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc8:	f7fe ffd6 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8003bcc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	005a      	lsls	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003be6:	e00e      	b.n	8003c06 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bfe:	e002      	b.n	8003c06 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	76fb      	strb	r3, [r7, #27]
        break;
 8003c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b0f      	cmp	r3, #15
 8003c0a:	d916      	bls.n	8003c3a <UART_SetConfig+0x522>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d212      	bcs.n	8003c3a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f023 030f 	bic.w	r3, r3, #15
 8003c1c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	89fa      	ldrh	r2, [r7, #14]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	e076      	b.n	8003d28 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	76fb      	strb	r3, [r7, #27]
 8003c3e:	e073      	b.n	8003d28 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8003c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d85c      	bhi.n	8003d02 <UART_SetConfig+0x5ea>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x538>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003d03 	.word	0x08003d03
 8003c60:	08003ccd 	.word	0x08003ccd
 8003c64:	08003d03 	.word	0x08003d03
 8003c68:	08003d03 	.word	0x08003d03
 8003c6c:	08003d03 	.word	0x08003d03
 8003c70:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff f816 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003c78:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	085a      	lsrs	r2, r3, #1
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c90:	e03a      	b.n	8003d08 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c92:	f7ff f81d 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003c96:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085a      	lsrs	r2, r3, #1
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cae:	e02b      	b.n	8003d08 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003cba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6852      	ldr	r2, [r2, #4]
 8003cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cca:	e01d      	b.n	8003d08 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ccc:	f7fe ff54 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8003cd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	085a      	lsrs	r2, r3, #1
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	441a      	add	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ce8:	e00e      	b.n	8003d08 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d00:	e002      	b.n	8003d08 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	76fb      	strb	r3, [r7, #27]
        break;
 8003d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	d90a      	bls.n	8003d24 <UART_SetConfig+0x60c>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d206      	bcs.n	8003d24 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	e003      	b.n	8003d28 <UART_SetConfig+0x610>
 8003d20:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d34:	7efb      	ldrb	r3, [r7, #27]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3e:	d10a      	bne.n	8003e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e92:	f7fc feb1 	bl	8000bf8 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d10e      	bne.n	8003ec4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f82a 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e020      	b.n	8003f06 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d10e      	bne.n	8003ef0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f814 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e00a      	b.n	8003f06 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e05d      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d059      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fc fe66 	bl	8000bf8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11b      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e042      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02b      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d123      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00f      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d092      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800401a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fb4e 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fb2b 	bl	80036f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4e0d      	ldr	r6, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1ba4      	subs	r4, r4, r6
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2500      	movs	r5, #0
 80040c4:	42a5      	cmp	r5, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4e0b      	ldr	r6, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f820 	bl	8004110 <_init>
 80040d0:	1ba4      	subs	r4, r4, r6
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2500      	movs	r5, #0
 80040d6:	42a5      	cmp	r5, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e0:	4798      	blx	r3
 80040e2:	3501      	adds	r5, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ea:	4798      	blx	r3
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	08004178 	.word	0x08004178
 80040f4:	08004178 	.word	0x08004178
 80040f8:	08004178 	.word	0x08004178
 80040fc:	0800417c 	.word	0x0800417c

08004100 <memset>:
 8004100:	4402      	add	r2, r0
 8004102:	4603      	mov	r3, r0
 8004104:	4293      	cmp	r3, r2
 8004106:	d100      	bne.n	800410a <memset+0xa>
 8004108:	4770      	bx	lr
 800410a:	f803 1b01 	strb.w	r1, [r3], #1
 800410e:	e7f9      	b.n	8004104 <memset+0x4>

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
