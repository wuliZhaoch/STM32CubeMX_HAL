
L431_Temperature_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003108  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d4  080032d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032d4  080032d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d4  080032d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080032e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080032e8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087ca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001540  00000000  00000000  00028806  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b58  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000712d  00000000  00000000  0004b808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbe41  00000000  00000000  00052935  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  0011e7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800327c 	.word	0x0800327c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800327c 	.word	0x0800327c

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030a:	f1a4 0401 	sub.w	r4, r4, #1
 800030e:	d1e9      	bne.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2f>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000970:	bf24      	itt	cs
 8000972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097a:	d90d      	bls.n	8000998 <__aeabi_d2f+0x30>
 800097c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800098c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000990:	bf08      	it	eq
 8000992:	f020 0001 	biceq.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800099c:	d121      	bne.n	80009e2 <__aeabi_d2f+0x7a>
 800099e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a2:	bfbc      	itt	lt
 80009a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	4770      	bxlt	lr
 80009aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b2:	f1c2 0218 	rsb	r2, r2, #24
 80009b6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80009be:	fa20 f002 	lsr.w	r0, r0, r2
 80009c2:	bf18      	it	ne
 80009c4:	f040 0001 	orrne.w	r0, r0, #1
 80009c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d4:	ea40 000c 	orr.w	r0, r0, ip
 80009d8:	fa23 f302 	lsr.w	r3, r3, r2
 80009dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e0:	e7cc      	b.n	800097c <__aeabi_d2f+0x14>
 80009e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e6:	d107      	bne.n	80009f8 <__aeabi_d2f+0x90>
 80009e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ec:	bf1e      	ittt	ne
 80009ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f6:	4770      	bxne	lr
 80009f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <MX_ADC1_Init+0xc0>)
 8000a22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a82:	f000 fc61 	bl	8001348 <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a8c:	f000 f968 	bl	8000d60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_ADC1_Init+0xc4>)
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a94:	2306      	movs	r3, #6
 8000a96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9c:	237f      	movs	r3, #127	; 0x7f
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000aae:	f000 fe01 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000ab8:	f000 f952 	bl	8000d60 <Error_Handler>
  }

}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	50040000 	.word	0x50040000
 8000acc:	c7520000 	.word	0xc7520000

08000ad0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_ADC_MspInit+0x38>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_ADC_MspInit+0x3c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_ADC_MspInit+0x3c>)
 8000ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_ADC_MspInit+0x3c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	50040000 	.word	0x50040000
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_GPIO_Init+0x5c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 f9ac 	bl	8000ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f875 	bl	8000c68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  tempCal30 = ((int32_t)(*((uint16_t *)0x1fff75A8)));
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <main+0xd0>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <main+0xd4>)
 8000b86:	601a      	str	r2, [r3, #0]
  tempCal130 = ((int32_t)(*((uint16_t *)0x1fff75ca)));
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <main+0xd8>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <main+0xdc>)
 8000b90:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f7ff ffbd 	bl	8000b10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b96:	f7ff ff37 	bl	8000a08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000b9a:	482d      	ldr	r0, [pc, #180]	; (8000c50 <main+0xe0>)
 8000b9c:	f000 fd1a 	bl	80015d4 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000ba0:	482b      	ldr	r0, [pc, #172]	; (8000c50 <main+0xe0>)
 8000ba2:	f000 fd17 	bl	80015d4 <HAL_ADC_Start>
	  tmpReadValue = HAL_ADC_GetValue(&hadc1);
 8000ba6:	482a      	ldr	r0, [pc, #168]	; (8000c50 <main+0xe0>)
 8000ba8:	f000 fd77 	bl	800169a <HAL_ADC_GetValue>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <main+0xe4>)
 8000bb0:	601a      	str	r2, [r3, #0]
	  float tmpReadValue1 = ((float)tmpReadValue * 3.0)/4096;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <main+0xe4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	ee07 3a90 	vmov	s15, r3
 8000bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbe:	ee17 0a90 	vmov	r0, s15
 8000bc2:	f7ff fc67 	bl	8000494 <__aeabi_f2d>
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <main+0xe8>)
 8000bcc:	f7ff fcba 	bl	8000544 <__aeabi_dmul>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	460c      	mov	r4, r1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <main+0xec>)
 8000bde:	f7ff fddb 	bl	8000798 <__aeabi_ddiv>
 8000be2:	4603      	mov	r3, r0
 8000be4:	460c      	mov	r4, r1
 8000be6:	4618      	mov	r0, r3
 8000be8:	4621      	mov	r1, r4
 8000bea:	f7ff febd 	bl	8000968 <__aeabi_d2f>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	607b      	str	r3, [r7, #4]
	  HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f000 f9de 	bl	8000fb4 <HAL_Delay>
	  tmpResult = ((float) (((int32_t) tmpReadValue - tempCal30)) * 100
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <main+0xe4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <main+0xd4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000c60 <main+0xf0>
 8000c10:	ee67 6a87 	vmul.f32	s13, s15, s14
	                      / (float) (tempCal130 - tempCal30)) + 30;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <main+0xdc>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <main+0xd4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
	  tmpResult = ((float) (((int32_t) tmpReadValue - tempCal30)) * 100
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <main+0xf4>)
 8000c34:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(100);
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f000 f9bb 	bl	8000fb4 <HAL_Delay>
  {
 8000c3e:	e7af      	b.n	8000ba0 <main+0x30>
 8000c40:	1fff75a8 	.word	0x1fff75a8
 8000c44:	2000002c 	.word	0x2000002c
 8000c48:	1fff75ca 	.word	0x1fff75ca
 8000c4c:	20000030 	.word	0x20000030
 8000c50:	20000038 	.word	0x20000038
 8000c54:	20000028 	.word	0x20000028
 8000c58:	40080000 	.word	0x40080000
 8000c5c:	40b00000 	.word	0x40b00000
 8000c60:	42c80000 	.word	0x42c80000
 8000c64:	20000034 	.word	0x20000034

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ae      	sub	sp, #184	; 0xb8
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c72:	2244      	movs	r2, #68	; 0x44
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 faf8 	bl	800326c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	225c      	movs	r2, #92	; 0x5c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 faea 	bl	800326c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 f9e7 	bl	80020a4 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000cdc:	f000 f840 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fdc0 	bl	8002880 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d06:	f000 f82b 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d14:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d16:	2303      	movs	r3, #3
 8000d18:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8000d1e:	230e      	movs	r3, #14
 8000d20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d22:	2307      	movs	r3, #7
 8000d24:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d32:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 ff6e 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000d42:	f000 f80d 	bl	8000d60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d4a:	f001 f955 	bl	8001ff8 <HAL_PWREx_ControlVoltageScaling>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d54:	f000 f804 	bl	8000d60 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	37b8      	adds	r7, #184	; 0xb8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8b4 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <SystemInit+0x64>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <SystemInit+0x64>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <SystemInit+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <SystemInit+0x68>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <SystemInit+0x68>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <SystemInit+0x68>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <SystemInit+0x68>)
 8000e40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <SystemInit+0x68>)
 8000e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <SystemInit+0x68>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <SystemInit+0x68>)
 8000e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <SystemInit+0x68>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x64>)
 8000e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	40021000 	.word	0x40021000

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e86:	e003      	b.n	8000e90 <LoopCopyDataInit>

08000e88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8e:	3104      	adds	r1, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e98:	d3f6      	bcc.n	8000e88 <CopyDataInit>
	ldr	r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e9c:	e002      	b.n	8000ea4 <LoopFillZerobss>

08000e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea0:	f842 3b04 	str.w	r3, [r2], #4

08000ea4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <LoopForever+0x16>)
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea8:	d3f9      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eaa:	f7ff ffb3 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 f9b9 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff fe5d 	bl	8000b70 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ebc:	080032dc 	.word	0x080032dc
	ldr	r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ecc:	200000a0 	.word	0x200000a0

08000ed0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_IRQHandler>

08000ed2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f001 f849 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f80e 	bl	8000f04 <HAL_InitTick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	e001      	b.n	8000ef8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef4:	f7ff ff3c 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_InitTick+0x68>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d022      	beq.n	8000f5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_InitTick+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f848 	bl	8001fc2 <HAL_SYSTICK_Config>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10f      	bne.n	8000f58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	d809      	bhi.n	8000f52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295
 8000f46:	f001 f820 	bl	8001f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x70>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e007      	b.n	8000f62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e004      	b.n	8000f62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	20000008 	.word	0x20000008

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000009c 	.word	0x2000009c

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d004      	beq.n	8000fd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_Delay+0x40>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd8:	bf00      	nop
 8000fda:	f7ff ffdf 	bl	8000f9c <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d8f7      	bhi.n	8000fda <HAL_Delay+0x26>
  {
  }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	609a      	str	r2, [r3, #8]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001060:	b490      	push	{r4, r7}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3360      	adds	r3, #96	; 0x60
 8001072:	461a      	mov	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LL_ADC_SetOffset+0x40>)
 8001080:	4013      	ands	r3, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	4313      	orrs	r3, r2
 800108e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001092:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bc90      	pop	{r4, r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	03fff000 	.word	0x03fff000

080010a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010a4:	b490      	push	{r4, r7}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3360      	adds	r3, #96	; 0x60
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc90      	pop	{r4, r7}
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010cc:	b490      	push	{r4, r7}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3360      	adds	r3, #96	; 0x60
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc90      	pop	{r4, r7}
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010fc:	b490      	push	{r4, r7}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	461a      	mov	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	4413      	add	r3, r2
 800111a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	211f      	movs	r1, #31
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	401a      	ands	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	0e9b      	lsrs	r3, r3, #26
 8001132:	f003 011f 	and.w	r1, r3, #31
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f003 031f 	and.w	r3, r3, #31
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bc90      	pop	{r4, r7}
 800114c:	4770      	bx	lr

0800114e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800114e:	b490      	push	{r4, r7}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3314      	adds	r3, #20
 800115e:	461a      	mov	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0e5b      	lsrs	r3, r3, #25
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800116e:	6822      	ldr	r2, [r4, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	0d1b      	lsrs	r3, r3, #20
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	2107      	movs	r1, #7
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0d1b      	lsrs	r3, r3, #20
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bc90      	pop	{r4, r7}
 800119c:	4770      	bx	lr
	...

080011a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0318 	and.w	r3, r3, #24
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011c4:	40d9      	lsrs	r1, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	400b      	ands	r3, r1
 80011ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	0007ffff 	.word	0x0007ffff

080011e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e6:	f043 0204 	orr.w	r2, r3, #4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b04      	cmp	r3, #4
 800130c:	d101      	bne.n	8001312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b08      	cmp	r3, #8
 8001332:	d101      	bne.n	8001338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e12a      	b.n	80015b8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fbad 	bl	8000ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff3f 	bl	800120c <LL_ADC_IsDeepPowerDownEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff25 	bl	80011e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff5a 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d113      	bne.n	80013d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3e 	bl	8001234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013b8:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_ADC_Init+0x278>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <HAL_ADC_Init+0x27c>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff3e 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff77 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 800140c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 80c5 	bne.w	80015a6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 80c1 	bne.w	80015a6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800142c:	f043 0202 	orr.w	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff37 	bl	80012ac <LL_ADC_IsEnabled>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001444:	4860      	ldr	r0, [pc, #384]	; (80015c8 <HAL_ADC_Init+0x280>)
 8001446:	f7ff ff31 	bl	80012ac <LL_ADC_IsEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4619      	mov	r1, r3
 8001456:	485d      	ldr	r0, [pc, #372]	; (80015cc <HAL_ADC_Init+0x284>)
 8001458:	f7ff fdce 	bl	8000ff8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e5b      	ldrb	r3, [r3, #25]
 8001460:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001466:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800146c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001472:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d106      	bne.n	8001498 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	3b01      	subs	r3, #1
 8001490:	045b      	lsls	r3, r3, #17
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <HAL_ADC_Init+0x288>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff14 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80014d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff21 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 80014de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d13d      	bne.n	8001562 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d13a      	bne.n	8001562 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001508:	f023 0302 	bic.w	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	430b      	orrs	r3, r1
 8001514:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151c:	2b01      	cmp	r3, #1
 800151e:	d118      	bne.n	8001552 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800153c:	4311      	orrs	r1, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001542:	430a      	orrs	r2, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	e007      	b.n	8001562 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10c      	bne.n	8001584 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f023 010f 	bic.w	r1, r3, #15
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	e007      	b.n	8001594 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 020f 	bic.w	r2, r2, #15
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	f023 0303 	bic.w	r3, r3, #3
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	053e2d63 	.word	0x053e2d63
 80015c8:	50040000 	.word	0x50040000
 80015cc:	50040300 	.word	0x50040300
 80015d0:	fff0c007 	.word	0xfff0c007

080015d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe8a 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d14f      	bne.n	800168c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Start+0x26>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e04b      	b.n	8001692 <HAL_ADC_Start+0xbe>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fbaa 	bl	8001d5c <ADC_Enable>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d137      	bne.n	8001682 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001632:	d106      	bne.n	8001642 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f023 0206 	bic.w	r2, r3, #6
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	659a      	str	r2, [r3, #88]	; 0x58
 8001640:	e002      	b.n	8001648 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	221c      	movs	r2, #28
 800164e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe29 	bl	80012d2 <LL_ADC_REG_StartConversion>
 8001680:	e006      	b.n	8001690 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800168a:	e001      	b.n	8001690 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800168c:	2302      	movs	r3, #2
 800168e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a6      	sub	sp, #152	; 0x98
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x22>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e338      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x694>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fe09 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 831d 	bne.w	8001d2a <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d824      	bhi.n	8001742 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3b02      	subs	r3, #2
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d81b      	bhi.n	800173a <HAL_ADC_ConfigChannel+0x86>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <HAL_ADC_ConfigChannel+0x54>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	08001721 	.word	0x08001721
 8001710:	08001729 	.word	0x08001729
 8001714:	08001731 	.word	0x08001731
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	220c      	movs	r2, #12
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e011      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2212      	movs	r2, #18
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e00d      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2218      	movs	r2, #24
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	e009      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	e004      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2206      	movs	r2, #6
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	e000      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001742:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	f7ff fcd3 	bl	80010fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fdcd 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 8001760:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fdd9 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 800176e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 8148 	bne.w	8001a0c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800177c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 8143 	bne.w	8001a0c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	461a      	mov	r2, r3
 8001794:	f7ff fcdb 	bl	800114e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d00a      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017ca:	f7ff fc49 	bl	8001060 <LL_ADC_SetOffset>
 80017ce:	e11d      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc64 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x148>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc59 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	e012      	b.n	8001822 <HAL_ADC_ConfigChannel+0x16e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc4e 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ADC_ConfigChannel+0x186>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0e9b      	lsrs	r3, r3, #26
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	e00a      	b.n	8001850 <HAL_ADC_ConfigChannel+0x19c>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	429a      	cmp	r2, r3
 8001852:	d106      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc35 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc1b 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <HAL_ADC_ConfigChannel+0x1da>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc10 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	0e9b      	lsrs	r3, r3, #26
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	e010      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1fc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fc05 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x214>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	e00a      	b.n	80018de <HAL_ADC_ConfigChannel+0x22a>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	429a      	cmp	r2, r3
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fbee 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fbd4 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_ADC_ConfigChannel+0x268>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fbc9 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	e010      	b.n	800193e <HAL_ADC_ConfigChannel+0x28a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbbe 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x2a2>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	e00a      	b.n	800196c <HAL_ADC_ConfigChannel+0x2b8>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	429a      	cmp	r2, r3
 800196e:	d106      	bne.n	800197e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	2102      	movs	r1, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fba7 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2103      	movs	r1, #3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb8d 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x2f6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2103      	movs	r1, #3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb82 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	0e9b      	lsrs	r3, r3, #26
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	e010      	b.n	80019cc <HAL_ADC_ConfigChannel+0x318>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2103      	movs	r1, #3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb77 	bl	80010a4 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x330>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	e00a      	b.n	80019fa <HAL_ADC_ConfigChannel+0x346>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80019f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d106      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2103      	movs	r1, #3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb60 	bl	80010cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fc4b 	bl	80012ac <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 810c 	bne.w	8001c36 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff fbb8 	bl	80011a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4aa8      	ldr	r2, [pc, #672]	; (8001cd8 <HAL_ADC_ConfigChannel+0x624>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 80fd 	bne.w	8001c36 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x3b0>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	3301      	adds	r3, #1
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	bf94      	ite	ls
 8001a5c:	2301      	movls	r3, #1
 8001a5e:	2300      	movhi	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e012      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x3d6>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d064      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x3f6>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	069b      	lsls	r3, r3, #26
 8001aa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa8:	e00e      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x414>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	069b      	lsls	r3, r3, #26
 8001ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x434>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	e010      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x456>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x47c>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	3301      	adds	r3, #1
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	e011      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x4a0>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b54:	430b      	orrs	r3, r1
 8001b56:	e069      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x4c0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	e00e      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x4de>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	61fb      	str	r3, [r7, #28]
  return result;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	069b      	lsls	r3, r3, #26
 8001b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x4fe>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	e010      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x520>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  return result;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	ea42 0103 	orr.w	r1, r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10d      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x54c>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	3301      	adds	r3, #1
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b1e      	subs	r3, #30
 8001bf8:	051b      	lsls	r3, r3, #20
 8001bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	e014      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x576>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	60fb      	str	r3, [r7, #12]
  return result;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	3b1e      	subs	r3, #30
 8001c24:	051b      	lsls	r3, r3, #20
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	6892      	ldr	r2, [r2, #8]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7ff fa8c 	bl	800114e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_ADC_ConfigChannel+0x628>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07c      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c42:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <HAL_ADC_ConfigChannel+0x62c>)
 8001c44:	f7ff f9fe 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 8001c48:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_ADC_ConfigChannel+0x630>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d126      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x5f0>
 8001c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d120      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_ADC_ConfigChannel+0x634>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d167      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c74:	4619      	mov	r1, r3
 8001c76:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <HAL_ADC_ConfigChannel+0x62c>)
 8001c78:	f7ff f9d1 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_ADC_ConfigChannel+0x638>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_ADC_ConfigChannel+0x63c>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	099a      	lsrs	r2, r3, #6
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca2:	e04b      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_ADC_ConfigChannel+0x640>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d124      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x644>
 8001cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11e      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_ADC_ConfigChannel+0x634>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d13b      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <HAL_ADC_ConfigChannel+0x62c>)
 8001cd0:	f7ff f9a5 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd4:	e032      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
 8001cd6:	bf00      	nop
 8001cd8:	407f0000 	.word	0x407f0000
 8001cdc:	80080000 	.word	0x80080000
 8001ce0:	50040300 	.word	0x50040300
 8001ce4:	c7520000 	.word	0xc7520000
 8001ce8:	50040000 	.word	0x50040000
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	053e2d63 	.word	0x053e2d63
 8001cf4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_ADC_ConfigChannel+0x69c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d11c      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_ADC_ConfigChannel+0x6a0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <HAL_ADC_ConfigChannel+0x6a4>)
 8001d24:	f7ff f97b 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
 8001d28:	e008      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f043 0220 	orr.w	r2, r3, #32
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3798      	adds	r7, #152	; 0x98
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	80000001 	.word	0x80000001
 8001d54:	50040000 	.word	0x50040000
 8001d58:	50040300 	.word	0x50040300

08001d5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fa9f 	bl	80012ac <LL_ADC_IsEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d146      	bne.n	8001e02 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <ADC_Enable+0xb0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e032      	b.n	8001e04 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa6e 	bl	8001284 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f8f8 	bl	8000f9c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dae:	e021      	b.n	8001df4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa79 	bl	80012ac <LL_ADC_IsEnabled>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fa5d 	bl	8001284 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dca:	f7ff f8e7 	bl	8000f9c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d90d      	bls.n	8001df4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f043 0210 	orr.w	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e007      	b.n	8001e04 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d1d6      	bne.n	8001db0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	8000003f 	.word	0x8000003f

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff47 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff5c 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffb0 	bl	8001f30 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002006:	d130      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	d038      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2232      	movs	r2, #50	; 0x32
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203c:	e002      	b.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d102      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f2      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002064:	d110      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e00f      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002076:	d007      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002080:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002086:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40007000 	.word	0x40007000
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e3db      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4ba4      	ldr	r3, [pc, #656]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4ba1      	ldr	r3, [pc, #644]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80e1 	beq.w	800229a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_RCC_OscConfig+0x4a>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	f040 8088 	bne.w	80021f6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 8084 	bne.w	80021f6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ee:	4b96      	ldr	r3, [pc, #600]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e3b3      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_RCC_OscConfig+0x7c>
 8002116:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211e:	e005      	b.n	800212c <HAL_RCC_OscConfig+0x88>
 8002120:	4b89      	ldr	r3, [pc, #548]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	4293      	cmp	r3, r2
 800212e:	d223      	bcs.n	8002178 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fd0f 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e394      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002144:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a7f      	ldr	r2, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	497a      	ldr	r1, [pc, #488]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002162:	4b79      	ldr	r3, [pc, #484]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	4975      	ldr	r1, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e022      	b.n	80021be <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a72      	ldr	r2, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	496d      	ldr	r1, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	4968      	ldr	r1, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fcd2 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e357      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021be:	f000 fc41 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <HAL_RCC_OscConfig+0x2a8>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a5d      	ldr	r2, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021de:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <HAL_RCC_OscConfig+0x2b0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fe8e 	bl	8000f04 <HAL_InitTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d052      	beq.n	8002298 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	e33b      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d032      	beq.n	8002264 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220a:	f7fe fec7 	bl	8000f9c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002212:	f7fe fec3 	bl	8000f9c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e324      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002230:	4b45      	ldr	r3, [pc, #276]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a44      	ldr	r2, [pc, #272]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002236:	f043 0308 	orr.w	r3, r3, #8
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	493f      	ldr	r1, [pc, #252]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
 8002262:	e01a      	b.n	800229a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a37      	ldr	r2, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002270:	f7fe fe94 	bl	8000f9c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002278:	f7fe fe90 	bl	8000f9c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e2f1      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1d4>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d074      	beq.n	8002390 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x214>
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d10e      	bne.n	80022d0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d10b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d064      	beq.n	800238e <HAL_RCC_OscConfig+0x2ea>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d160      	bne.n	800238e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e2ce      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x244>
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0x280>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x268>
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x280>
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x2a4>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01c      	beq.n	8002366 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fe36 	bl	8000f9c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	e011      	b.n	8002358 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fe32 	bl	8000f9c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d90a      	bls.n	8002358 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e293      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	08003294 	.word	0x08003294
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002358:	4bae      	ldr	r3, [pc, #696]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0e7      	beq.n	8002334 <HAL_RCC_OscConfig+0x290>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fe19 	bl	8000f9c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236e:	f7fe fe15 	bl	8000f9c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e276      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002380:	4ba4      	ldr	r3, [pc, #656]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x2ca>
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d060      	beq.n	800245e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x30a>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d119      	bne.n	80023dc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ae:	4b99      	ldr	r3, [pc, #612]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x322>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e253      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b93      	ldr	r3, [pc, #588]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	498f      	ldr	r1, [pc, #572]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	e040      	b.n	800245e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fdd4 	bl	8000f9c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fdd0 	bl	8000f9c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e231      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240a:	4b82      	ldr	r3, [pc, #520]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	497b      	ldr	r1, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e018      	b.n	800245e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242c:	4b79      	ldr	r3, [pc, #484]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a78      	ldr	r2, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fdb0 	bl	8000f9c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fdac 	bl	8000f9c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e20d      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002452:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01c      	beq.n	80024ac <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4a66      	ldr	r2, [pc, #408]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fd8b 	bl	8000f9c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe fd87 	bl	8000f9c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1e8      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249c:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x3e6>
 80024aa:	e01b      	b.n	80024e4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd6e 	bl	8000f9c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fd6a 	bl	8000f9c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1cb      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d6:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ef      	bne.n	80024c4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a5 	beq.w	800263c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a43      	ldr	r2, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_OscConfig+0x574>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x574>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <HAL_RCC_OscConfig+0x574>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f7fe fd31 	bl	8000f9c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7fe fd2d 	bl	8000f9c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e18e      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	4b31      	ldr	r3, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x574>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_RCC_OscConfig+0x4d2>
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002574:	e024      	b.n	80025c0 <HAL_RCC_OscConfig+0x51c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b05      	cmp	r3, #5
 800257c:	d110      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4fc>
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x51c>
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fce8 	bl	8000f9c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fce4 	bl	8000f9c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e143      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x570>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ed      	beq.n	80025d0 <HAL_RCC_OscConfig+0x52c>
 80025f4:	e019      	b.n	800262a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fcd1 	bl	8000f9c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fccd 	bl	8000f9c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d905      	bls.n	800261c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e12c      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e9      	bne.n	80025fe <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a90      	ldr	r2, [pc, #576]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002650:	4b89      	ldr	r3, [pc, #548]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002656:	4a88      	ldr	r2, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fc9c 	bl	8000f9c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002668:	f7fe fc98 	bl	8000f9c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0f9      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 800267c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCC_OscConfig+0x5c4>
 8002688:	e01b      	b.n	80026c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 800268c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002690:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fc7f 	bl	8000f9c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a2:	f7fe fc7b 	bl	8000f9c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0dc      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b4:	4b70      	ldr	r3, [pc, #448]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80026b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80d0 	beq.w	800286c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	f000 808d 	beq.w	80027ee <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d15a      	bne.n	8002792 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80026e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fc58 	bl	8000f9c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fc54 	bl	8000f9c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0b5      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_OscConfig+0x7d8>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800271e:	3a01      	subs	r2, #1
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	4311      	orrs	r1, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002728:	0212      	lsls	r2, r2, #8
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002730:	0852      	lsrs	r2, r2, #1
 8002732:	3a01      	subs	r2, #1
 8002734:	0552      	lsls	r2, r2, #21
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800273c:	0852      	lsrs	r2, r2, #1
 800273e:	3a01      	subs	r2, #1
 8002740:	0652      	lsls	r2, r2, #25
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002748:	06d2      	lsls	r2, r2, #27
 800274a:	430a      	orrs	r2, r1
 800274c:	494a      	ldr	r1, [pc, #296]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a48      	ldr	r2, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a45      	ldr	r2, [pc, #276]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002768:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fc17 	bl	8000f9c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fc13 	bl	8000f9c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e074      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x6ce>
 8002790:	e06c      	b.n	800286c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a38      	ldr	r2, [pc, #224]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 8002798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a32      	ldr	r2, [pc, #200]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027b0:	f023 0303 	bic.w	r3, r3, #3
 80027b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fbe9 	bl	8000f9c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fbe5 	bl	8000f9c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e046      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x72a>
 80027ec:	e03e      	b.n	800286c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e039      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_RCC_OscConfig+0x7d4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	429a      	cmp	r2, r3
 800280c:	d12c      	bne.n	8002868 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	3b01      	subs	r3, #1
 800281a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d123      	bne.n	8002868 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d11b      	bne.n	8002868 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d113      	bne.n	8002868 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d109      	bne.n	8002868 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	019d808c 	.word	0x019d808c

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0c8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4961      	ldr	r1, [pc, #388]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b0      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04c      	beq.n	800296a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d121      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e09e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d115      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e092      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002908:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e086      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e07e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	493f      	ldr	r1, [pc, #252]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293a:	f7fe fb2f 	bl	8000f9c <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002940:	e00a      	b.n	8002958 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002942:	f7fe fb2b 	bl	8000f9c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e066      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 020c 	and.w	r2, r3, #12
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	429a      	cmp	r2, r3
 8002968:	d1eb      	bne.n	8002942 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	492c      	ldr	r1, [pc, #176]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d210      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4924      	ldr	r1, [pc, #144]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e036      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4918      	ldr	r1, [pc, #96]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4910      	ldr	r1, [pc, #64]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f6:	f000 f825 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029fa:	4601      	mov	r1, r0
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fa72 	bl	8000f04 <HAL_InitTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a24:	7afb      	ldrb	r3, [r7, #11]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08003294 	.word	0x08003294
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d11e      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e004      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d133      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0xaa>
 8002ae6:	e005      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aea:	617b      	str	r3, [r7, #20]
      break;
 8002aec:	e005      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002af0:	617b      	str	r3, [r7, #20]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	617b      	str	r3, [r7, #20]
      break;
 8002af8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	3301      	adds	r3, #1
 8002b06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	fb02 f203 	mul.w	r2, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0e5b      	lsrs	r3, r3, #25
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3724      	adds	r7, #36	; 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	080032a4 	.word	0x080032a4
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	017d7840 	.word	0x017d7840

08002b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b70:	f7ff fa34 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002b74:	6178      	str	r0, [r7, #20]
 8002b76:	e014      	b.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff fa24 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d10b      	bne.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d919      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb4:	d902      	bls.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e013      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e010      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d902      	bls.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bc8:	2303      	movs	r3, #3
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e00a      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d102      	bne.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e004      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d101      	bne.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40022000 	.word	0x40022000

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d02f      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c42:	d015      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c48:	e00f      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a5c      	ldr	r2, [pc, #368]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c56:	e00c      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f9f0 	bl	8003044 <RCCEx_PLLSAI1_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c68:	e003      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c78:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	494e      	ldr	r1, [pc, #312]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c8e:	e001      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 809e 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe f95a 	bl	8000f9c <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cea:	e009      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe f956 	bl	8000f9c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d15a      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01e      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d016      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f916 	bl	8000f9c <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d72:	e00b      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe f912 	bl	8000f9c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d902      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	74fb      	strb	r3, [r7, #19]
            break;
 8002d8a:	e006      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ec      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002db6:	e009      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
 8002dbc:	e006      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dcc:	7c7b      	ldrb	r3, [r7, #17]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b9b      	ldr	r3, [pc, #620]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a9a      	ldr	r2, [pc, #616]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dea:	4b95      	ldr	r3, [pc, #596]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 0203 	bic.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4991      	ldr	r1, [pc, #580]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 020c 	bic.w	r2, r3, #12
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	4989      	ldr	r1, [pc, #548]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e2e:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	4980      	ldr	r1, [pc, #512]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e50:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	4978      	ldr	r1, [pc, #480]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	496f      	ldr	r1, [pc, #444]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4967      	ldr	r1, [pc, #412]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb6:	4b62      	ldr	r3, [pc, #392]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	495e      	ldr	r1, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	4956      	ldr	r1, [pc, #344]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d028      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f1c:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2a:	4945      	ldr	r1, [pc, #276]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]
 8002f48:	e011      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f872 	bl	8003044 <RCCEx_PLLSAI1_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d028      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	492d      	ldr	r1, [pc, #180]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f98:	d106      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a28      	ldr	r2, [pc, #160]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa4:	60d3      	str	r3, [r2, #12]
 8002fa6:	e011      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f843 	bl	8003044 <RCCEx_PLLSAI1_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe6:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f820 	bl	8003044 <RCCEx_PLLSAI1_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	4904      	ldr	r1, [pc, #16]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003034:	7cbb      	ldrb	r3, [r7, #18]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0203 	and.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d10d      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
       ||
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003076:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
       ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d044      	beq.n	8003114 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e041      	b.n	8003114 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d00c      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x6e>
 8003098:	2b03      	cmp	r3, #3
 800309a:	d013      	beq.n	80030c4 <RCCEx_PLLSAI1_Config+0x80>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d120      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a0:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11d      	bne.n	80030e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e01a      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b2:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e013      	b.n	80030ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e0:	e006      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      break;
 80030e6:	e004      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030f8:	4b49      	ldr	r3, [pc, #292]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	3b01      	subs	r3, #1
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	430b      	orrs	r3, r1
 800310e:	4944      	ldr	r1, [pc, #272]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d17c      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003126:	f7fd ff39 	bl	8000f9c <HAL_GetTick>
 800312a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800312c:	e009      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312e:	f7fd ff35 	bl	8000f9c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	73fb      	strb	r3, [r7, #15]
        break;
 8003140:	e005      	b.n	800314e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003142:	4b37      	ldr	r3, [pc, #220]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ef      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15f      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d110      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003162:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	0211      	lsls	r1, r2, #8
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68d2      	ldr	r2, [r2, #12]
 8003170:	06d2      	lsls	r2, r2, #27
 8003172:	430a      	orrs	r2, r1
 8003174:	492a      	ldr	r1, [pc, #168]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
 800317a:	e027      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d112      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800318a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0211      	lsls	r1, r2, #8
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6912      	ldr	r2, [r2, #16]
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0552      	lsls	r2, r2, #21
 800319e:	430a      	orrs	r2, r1
 80031a0:	491f      	ldr	r1, [pc, #124]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	610b      	str	r3, [r1, #16]
 80031a6:	e011      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6952      	ldr	r2, [r2, #20]
 80031be:	0852      	lsrs	r2, r2, #1
 80031c0:	3a01      	subs	r2, #1
 80031c2:	0652      	lsls	r2, r2, #25
 80031c4:	430a      	orrs	r2, r1
 80031c6:	4916      	ldr	r1, [pc, #88]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd fee0 	bl	8000f9c <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031de:	e009      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e0:	f7fd fedc 	bl	8000f9c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d902      	bls.n	80031f4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	73fb      	strb	r3, [r7, #15]
          break;
 80031f2:	e005      	b.n	8003200 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ef      	beq.n	80031e0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	4e0d      	ldr	r6, [pc, #52]	; (800325c <__libc_init_array+0x38>)
 8003228:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <__libc_init_array+0x3c>)
 800322a:	1ba4      	subs	r4, r4, r6
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	2500      	movs	r5, #0
 8003230:	42a5      	cmp	r5, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	4e0b      	ldr	r6, [pc, #44]	; (8003264 <__libc_init_array+0x40>)
 8003236:	4c0c      	ldr	r4, [pc, #48]	; (8003268 <__libc_init_array+0x44>)
 8003238:	f000 f820 	bl	800327c <_init>
 800323c:	1ba4      	subs	r4, r4, r6
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	2500      	movs	r5, #0
 8003242:	42a5      	cmp	r5, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324c:	4798      	blx	r3
 800324e:	3501      	adds	r5, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003256:	4798      	blx	r3
 8003258:	3501      	adds	r5, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	080032d4 	.word	0x080032d4
 8003260:	080032d4 	.word	0x080032d4
 8003264:	080032d4 	.word	0x080032d4
 8003268:	080032d8 	.word	0x080032d8

0800326c <memset>:
 800326c:	4402      	add	r2, r0
 800326e:	4603      	mov	r3, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <_init>:
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	bf00      	nop
 8003280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003282:	bc08      	pop	{r3}
 8003284:	469e      	mov	lr, r3
 8003286:	4770      	bx	lr

08003288 <_fini>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr
