
08_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007350  08007350  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007350  08007350  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007350  08007350  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  24000010  08007368  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000110  08007368  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001812b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288d  00000000  00000000  00038169  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0003a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0003b620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036930  00000000  00000000  0003c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdb9  00000000  00000000  00072a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016033e  00000000  00000000  0007f829  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dfb67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003170  00000000  00000000  001dfbe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007320 	.word	0x08007320

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007320 	.word	0x08007320

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 fbea 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f004 fc78 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f006 feeb 	bl	800710c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	08007340 	.word	0x08007340
 8000348:	2400000c 	.word	0x2400000c
 800034c:	24000008 	.word	0x24000008

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fbcf 	bl	8001b1e <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f001 fb99 	bl	8001ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	24000004 	.word	0x24000004
 80003b4:	24000008 	.word	0x24000008
 80003b8:	24000000 	.word	0x24000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	24000004 	.word	0x24000004
 80003e0:	2400002c 	.word	0x2400002c

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	2400002c 	.word	0x2400002c

080003fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <HAL_GetREVID+0x14>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	0c1b      	lsrs	r3, r3, #16
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	5c001000 	.word	0x5c001000

08000414 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	431a      	orrs	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	609a      	str	r2, [r3, #8]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	609a      	str	r2, [r3, #8]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3360      	adds	r3, #96	; 0x60
 800048e:	461a      	mov	r2, r3
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000498:	6823      	ldr	r3, [r4, #0]
 800049a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	430b      	orrs	r3, r1
 80004a8:	4313      	orrs	r3, r2
 80004aa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc90      	pop	{r4, r7}
 80004b4:	4770      	bx	lr

080004b6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b085      	sub	sp, #20
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	60f8      	str	r0, [r7, #12]
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	f003 031f 	and.w	r3, r3, #31
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	611a      	str	r2, [r3, #16]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80004e8:	b490      	push	{r4, r7}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3360      	adds	r3, #96	; 0x60
 80004f8:	461a      	mov	r2, r3
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4313      	orrs	r3, r2
 800050c:	6023      	str	r3, [r4, #0]
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bc90      	pop	{r4, r7}
 8000516:	4770      	bx	lr

08000518 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000528:	2b00      	cmp	r3, #0
 800052a:	d101      	bne.n	8000530 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800052c:	2301      	movs	r3, #1
 800052e:	e000      	b.n	8000532 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3330      	adds	r3, #48	; 0x30
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 030c 	and.w	r3, r3, #12
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	f003 031f 	and.w	r3, r3, #31
 8000566:	211f      	movs	r1, #31
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	401a      	ands	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0e9b      	lsrs	r3, r3, #26
 8000574:	f003 011f 	and.w	r1, r3, #31
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	f003 031f 	and.w	r3, r3, #31
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	4313      	orrs	r3, r2
 8000584:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bc90      	pop	{r4, r7}
 800058e:	4770      	bx	lr

08000590 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	f023 0203 	bic.w	r2, r3, #3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	431a      	orrs	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60da      	str	r2, [r3, #12]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005b6:	b490      	push	{r4, r7}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3314      	adds	r3, #20
 80005c6:	461a      	mov	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	0e5b      	lsrs	r3, r3, #25
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	4413      	add	r3, r2
 80005d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005d6:	6822      	ldr	r2, [r4, #0]
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	0d1b      	lsrs	r3, r3, #20
 80005dc:	f003 031f 	and.w	r3, r3, #31
 80005e0:	2107      	movs	r1, #7
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	401a      	ands	r2, r3
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	0d1b      	lsrs	r3, r3, #20
 80005ee:	f003 031f 	and.w	r3, r3, #31
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bc90      	pop	{r4, r7}
 8000604:	4770      	bx	lr
	...

08000608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000620:	43db      	mvns	r3, r3
 8000622:	401a      	ands	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0318 	and.w	r3, r3, #24
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <LL_ADC_SetChannelSingleDiff+0x44>)
 800062c:	40d9      	lsrs	r1, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	400b      	ands	r3, r1
 8000632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000636:	431a      	orrs	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	000fffff 	.word	0x000fffff

08000650 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 031f 	and.w	r3, r3, #31
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <LL_ADC_DisableDeepPowerDown+0x20>)
 800067a:	4013      	ands	r3, r2
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	6093      	str	r3, [r2, #8]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	5fffffc0 	.word	0x5fffffc0

08000690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006a4:	d101      	bne.n	80006aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_ADC_EnableInternalRegulator+0x24>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	6fffffc0 	.word	0x6fffffc0

080006e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006f4:	d101      	bne.n	80006fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <LL_ADC_Enable+0x24>)
 8000716:	4013      	ands	r3, r2
 8000718:	f043 0201 	orr.w	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	7fffffc0 	.word	0x7fffffc0

08000730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <LL_ADC_IsEnabled+0x18>
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <LL_ADC_IsEnabled+0x1a>
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <LL_ADC_REG_StartConversion+0x24>)
 8000766:	4013      	ands	r3, r2
 8000768:	f043 0204 	orr.w	r2, r3, #4
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	7fffffc0 	.word	0x7fffffc0

08000780 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	2b04      	cmp	r3, #4
 8000792:	d101      	bne.n	8000798 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000794:	2301      	movs	r3, #1
 8000796:	e000      	b.n	800079a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d101      	bne.n	80007be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e18e      	b.n	8000b04 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f006 fabd 	bl	8006d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff3f 	bl	8000690 <LL_ADC_IsDeepPowerDownEnabled>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff25 	bl	800066c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff5a 	bl	80006e0 <LL_ADC_IsInternalRegulatorEnabled>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d113      	bne.n	800085a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff3e 	bl	80006b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800083c:	4b9a      	ldr	r3, [pc, #616]	; (8000aa8 <HAL_ADC_Init+0x2dc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	099b      	lsrs	r3, r3, #6
 8000842:	4a9a      	ldr	r2, [pc, #616]	; (8000aac <HAL_ADC_Init+0x2e0>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	099b      	lsrs	r3, r3, #6
 800084a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800084c:	e002      	b.n	8000854 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	3b01      	subs	r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f9      	bne.n	800084e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff3e 	bl	80006e0 <LL_ADC_IsInternalRegulatorEnabled>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800086e:	f043 0210 	orr.w	r2, r3, #16
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f043 0201 	orr.w	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff78 	bl	8000780 <LL_ADC_REG_IsConversionOngoing>
 8000890:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8129 	bne.w	8000af2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8125 	bne.w	8000af2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80008b0:	f043 0202 	orr.w	r2, r3, #2
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff37 	bl	8000730 <LL_ADC_IsEnabled>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d136      	bne.n	8000936 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a78      	ldr	r2, [pc, #480]	; (8000ab0 <HAL_ADC_Init+0x2e4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d004      	beq.n	80008dc <HAL_ADC_Init+0x110>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a77      	ldr	r2, [pc, #476]	; (8000ab4 <HAL_ADC_Init+0x2e8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d10e      	bne.n	80008fa <HAL_ADC_Init+0x12e>
 80008dc:	4874      	ldr	r0, [pc, #464]	; (8000ab0 <HAL_ADC_Init+0x2e4>)
 80008de:	f7ff ff27 	bl	8000730 <LL_ADC_IsEnabled>
 80008e2:	4604      	mov	r4, r0
 80008e4:	4873      	ldr	r0, [pc, #460]	; (8000ab4 <HAL_ADC_Init+0x2e8>)
 80008e6:	f7ff ff23 	bl	8000730 <LL_ADC_IsEnabled>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4323      	orrs	r3, r4
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	e008      	b.n	800090c <HAL_ADC_Init+0x140>
 80008fa:	486f      	ldr	r0, [pc, #444]	; (8000ab8 <HAL_ADC_Init+0x2ec>)
 80008fc:	f7ff ff18 	bl	8000730 <LL_ADC_IsEnabled>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf0c      	ite	eq
 8000906:	2301      	moveq	r3, #1
 8000908:	2300      	movne	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d012      	beq.n	8000936 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a66      	ldr	r2, [pc, #408]	; (8000ab0 <HAL_ADC_Init+0x2e4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d004      	beq.n	8000924 <HAL_ADC_Init+0x158>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a65      	ldr	r2, [pc, #404]	; (8000ab4 <HAL_ADC_Init+0x2e8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d101      	bne.n	8000928 <HAL_ADC_Init+0x15c>
 8000924:	4a65      	ldr	r2, [pc, #404]	; (8000abc <HAL_ADC_Init+0x2f0>)
 8000926:	e000      	b.n	800092a <HAL_ADC_Init+0x15e>
 8000928:	4a65      	ldr	r2, [pc, #404]	; (8000ac0 <HAL_ADC_Init+0x2f4>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	4610      	mov	r0, r2
 8000932:	f7ff fd6f 	bl	8000414 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000936:	f7ff fd61 	bl	80003fc <HAL_GetREVID>
 800093a:	4602      	mov	r2, r0
 800093c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000940:	429a      	cmp	r2, r3
 8000942:	d914      	bls.n	800096e <HAL_ADC_Init+0x1a2>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	2b10      	cmp	r3, #16
 800094a:	d110      	bne.n	800096e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7d5b      	ldrb	r3, [r3, #21]
 8000950:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000956:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800095c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7f1b      	ldrb	r3, [r3, #28]
 8000962:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000964:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000966:	f043 030c 	orr.w	r3, r3, #12
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e00d      	b.n	800098a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7d5b      	ldrb	r3, [r3, #21]
 8000972:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000978:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800097e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7f1b      	ldrb	r3, [r3, #28]
 8000984:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7f1b      	ldrb	r3, [r3, #28]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a1b      	ldr	r3, [r3, #32]
 8000996:	3b01      	subs	r3, #1
 8000998:	045b      	lsls	r3, r3, #17
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d009      	beq.n	80009bc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <HAL_ADC_Init+0x2f8>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	69b9      	ldr	r1, [r7, #24]
 80009cc:	430b      	orrs	r3, r1
 80009ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fed3 	bl	8000780 <LL_ADC_REG_IsConversionOngoing>
 80009da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fee0 	bl	80007a6 <LL_ADC_INJ_IsConversionOngoing>
 80009e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d14a      	bne.n	8000a84 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d147      	bne.n	8000a84 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7d1b      	ldrb	r3, [r3, #20]
 80009f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80009fe:	4313      	orrs	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <HAL_ADC_Init+0x2fc>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	69b9      	ldr	r1, [r7, #24]
 8000a12:	430b      	orrs	r3, r1
 8000a14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d11b      	bne.n	8000a58 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	691a      	ldr	r2, [r3, #16]
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_ADC_Init+0x300>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000a34:	3a01      	subs	r2, #1
 8000a36:	0411      	lsls	r1, r2, #16
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a42:	4311      	orrs	r1, r2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f042 0201 	orr.w	r2, r2, #1
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	e007      	b.n	8000a68 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 0201 	bic.w	r2, r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fd52 	bl	8001528 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d121      	bne.n	8000ad0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f023 010f 	bic.w	r1, r3, #15
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa4:	e01c      	b.n	8000ae0 <HAL_ADC_Init+0x314>
 8000aa6:	bf00      	nop
 8000aa8:	24000008 	.word	0x24000008
 8000aac:	053e2d63 	.word	0x053e2d63
 8000ab0:	40022000 	.word	0x40022000
 8000ab4:	40022100 	.word	0x40022100
 8000ab8:	58026000 	.word	0x58026000
 8000abc:	40022300 	.word	0x40022300
 8000ac0:	58026300 	.word	0x58026300
 8000ac4:	fff0c003 	.word	0xfff0c003
 8000ac8:	ffffbffc 	.word	0xffffbffc
 8000acc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 020f 	bic.w	r2, r2, #15
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae4:	f023 0303 	bic.w	r3, r3, #3
 8000ae8:	f043 0201 	orr.w	r2, r3, #1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
 8000af0:	e007      	b.n	8000b02 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af6:	f043 0210 	orr.w	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3724      	adds	r7, #36	; 0x24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd90      	pop	{r4, r7, pc}

08000b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a55      	ldr	r2, [pc, #340]	; (8000c74 <HAL_ADC_Start_DMA+0x168>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d004      	beq.n	8000b2c <HAL_ADC_Start_DMA+0x20>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a54      	ldr	r2, [pc, #336]	; (8000c78 <HAL_ADC_Start_DMA+0x16c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_ADC_Start_DMA+0x24>
 8000b2c:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <HAL_ADC_Start_DMA+0x170>)
 8000b2e:	e000      	b.n	8000b32 <HAL_ADC_Start_DMA+0x26>
 8000b30:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <HAL_ADC_Start_DMA+0x174>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd8c 	bl	8000650 <LL_ADC_GetMultimode>
 8000b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe1e 	bl	8000780 <LL_ADC_REG_IsConversionOngoing>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 808c 	bne.w	8000c64 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d101      	bne.n	8000b5a <HAL_ADC_Start_DMA+0x4e>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e087      	b.n	8000c6a <HAL_ADC_Start_DMA+0x15e>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d002      	beq.n	8000b74 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	d170      	bne.n	8000c56 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 fbbf 	bl	80012f8 <ADC_Enable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d163      	bne.n	8000c4c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_ADC_Start_DMA+0x178>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a37      	ldr	r2, [pc, #220]	; (8000c78 <HAL_ADC_Start_DMA+0x16c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d002      	beq.n	8000ba4 <HAL_ADC_Start_DMA+0x98>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	e000      	b.n	8000ba6 <HAL_ADC_Start_DMA+0x9a>
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ADC_Start_DMA+0x168>)
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d002      	beq.n	8000bb4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d105      	bne.n	8000bc0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	f023 0206 	bic.w	r2, r3, #6
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8000bd8:	e002      	b.n	8000be0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <HAL_ADC_Start_DMA+0x17c>)
 8000be6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_ADC_Start_DMA+0x180>)
 8000bee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_ADC_Start_DMA+0x184>)
 8000bf6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	221c      	movs	r2, #28
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0210 	orr.w	r2, r2, #16
 8000c16:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f7ff fcb4 	bl	8000590 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3340      	adds	r3, #64	; 0x40
 8000c32:	4619      	mov	r1, r3
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f001 fada 	bl	80021f0 <HAL_DMA_Start_IT>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fd87 	bl	8000758 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000c4a:	e00d      	b.n	8000c68 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8000c54:	e008      	b.n	8000c68 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000c62:	e001      	b.n	8000c68 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c64:	2302      	movs	r3, #2
 8000c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40022000 	.word	0x40022000
 8000c78:	40022100 	.word	0x40022100
 8000c7c:	40022300 	.word	0x40022300
 8000c80:	58026300 	.word	0x58026300
 8000c84:	fffff0fe 	.word	0xfffff0fe
 8000c88:	08001401 	.word	0x08001401
 8000c8c:	080014d9 	.word	0x080014d9
 8000c90:	080014f5 	.word	0x080014f5

08000c94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b099      	sub	sp, #100	; 0x64
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a99      	ldr	r2, [pc, #612]	; (8000f50 <HAL_ADC_ConfigChannel+0x280>)
 8000cea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_ConfigChannel+0x2a>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e2e6      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x5f8>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd3a 	bl	8000780 <LL_ADC_REG_IsConversionOngoing>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 82cb 	bne.w	80012aa <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d108      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x62>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0e9b      	lsrs	r3, r3, #26
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	e00f      	b.n	8000d52 <HAL_ADC_ConfigChannel+0x82>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 031f 	and.w	r3, r3, #31
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	69d1      	ldr	r1, [r2, #28]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f7ff fbe6 	bl	800053e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd02 	bl	8000780 <LL_ADC_REG_IsConversionOngoing>
 8000d7c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fd0f 	bl	80007a6 <LL_ADC_INJ_IsConversionOngoing>
 8000d88:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 80b3 	bne.w	8000ef8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 80af 	bne.w	8000ef8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f7ff fc05 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000dac:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <HAL_ADC_ConfigChannel+0x284>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_ADC_ConfigChannel+0x102>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	695a      	ldr	r2, [r3, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	e01d      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x13e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10b      	bne.n	8000df8 <HAL_ADC_ConfigChannel+0x128>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	e00a      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x13e>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d027      	beq.n	8000e68 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6919      	ldr	r1, [r3, #16]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e26:	f7ff fb29 	bl	800047c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	6919      	ldr	r1, [r3, #16]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	7e5b      	ldrb	r3, [r3, #25]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d102      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x170>
 8000e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e3e:	e000      	b.n	8000e42 <HAL_ADC_ConfigChannel+0x172>
 8000e40:	2300      	movs	r3, #0
 8000e42:	461a      	mov	r2, r3
 8000e44:	f7ff fb50 	bl	80004e8 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6919      	ldr	r1, [r3, #16]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	7e1b      	ldrb	r3, [r3, #24]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d102      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x18e>
 8000e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5c:	e000      	b.n	8000e60 <HAL_ADC_ConfigChannel+0x190>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	461a      	mov	r2, r3
 8000e62:	f7ff fb28 	bl	80004b6 <LL_ADC_SetDataRightShift>
 8000e66:	e047      	b.n	8000ef8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	069b      	lsls	r3, r3, #26
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d107      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e8a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	069b      	lsls	r3, r3, #26
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d107      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000eae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	069b      	lsls	r3, r3, #26
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d107      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ed2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	069b      	lsls	r3, r3, #26
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d107      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ef6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fc17 	bl	8000730 <LL_ADC_IsEnabled>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 81d9 	bne.w	80012bc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff fb76 	bl	8000608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_ADC_ConfigChannel+0x280>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 8101 	bne.w	800112a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10f      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x288>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0e9b      	lsrs	r3, r3, #26
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	bf94      	ite	ls
 8000f48:	2301      	movls	r3, #1
 8000f4a:	2300      	movhi	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	e016      	b.n	8000f7e <HAL_ADC_ConfigChannel+0x2ae>
 8000f50:	47ff0000 	.word	0x47ff0000
 8000f54:	5c001000 	.word	0x5c001000
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	bf94      	ite	ls
 8000f78:	2301      	movls	r3, #1
 8000f7a:	2300      	movhi	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d064      	beq.n	800104c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d107      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x2ce>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0e9b      	lsrs	r3, r3, #26
 8000f94:	3301      	adds	r3, #1
 8000f96:	069b      	lsls	r3, r3, #26
 8000f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f9c:	e00e      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x2ec>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	069b      	lsls	r3, r3, #26
 8000fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x30c>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0e9b      	lsrs	r3, r3, #26
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	e010      	b.n	8000ffe <HAL_ADC_ConfigChannel+0x32e>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	ea42 0103 	orr.w	r1, r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x354>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0e9b      	lsrs	r3, r3, #26
 8001014:	3301      	adds	r3, #1
 8001016:	f003 021f 	and.w	r2, r3, #31
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	051b      	lsls	r3, r3, #20
 8001022:	e011      	b.n	8001048 <HAL_ADC_ConfigChannel+0x378>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001048:	430b      	orrs	r3, r1
 800104a:	e069      	b.n	8001120 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x398>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0e9b      	lsrs	r3, r3, #26
 800105e:	3301      	adds	r3, #1
 8001060:	069b      	lsls	r3, r3, #26
 8001062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001066:	e00e      	b.n	8001086 <HAL_ADC_ConfigChannel+0x3b6>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	61fb      	str	r3, [r7, #28]
  return result;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	069b      	lsls	r3, r3, #26
 8001082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x3d6>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0e9b      	lsrs	r3, r3, #26
 8001098:	3301      	adds	r3, #1
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	e010      	b.n	80010c8 <HAL_ADC_ConfigChannel+0x3f8>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	617b      	str	r3, [r7, #20]
  return result;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	ea42 0103 	orr.w	r1, r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10d      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x424>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0e9b      	lsrs	r3, r3, #26
 80010de:	3301      	adds	r3, #1
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3b1e      	subs	r3, #30
 80010ec:	051b      	lsls	r3, r3, #20
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	e014      	b.n	800111e <HAL_ADC_ConfigChannel+0x44e>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	60fb      	str	r3, [r7, #12]
  return result;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	3301      	adds	r3, #1
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	3b1e      	subs	r3, #30
 8001118:	051b      	lsls	r3, r3, #20
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800111e:	430b      	orrs	r3, r1
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fa46 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f280 80c4 	bge.w	80012bc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d004      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x478>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a64      	ldr	r2, [pc, #400]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x47c>
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_ADC_ConfigChannel+0x608>)
 800114a:	e000      	b.n	800114e <HAL_ADC_ConfigChannel+0x47e>
 800114c:	4b63      	ldr	r3, [pc, #396]	; (80012dc <HAL_ADC_ConfigChannel+0x60c>)
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f986 	bl	8000460 <LL_ADC_GetCommonPathInternalCh>
 8001154:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d004      	beq.n	800116a <HAL_ADC_ConfigChannel+0x49a>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10e      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x4b8>
 800116a:	4859      	ldr	r0, [pc, #356]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 800116c:	f7ff fae0 	bl	8000730 <LL_ADC_IsEnabled>
 8001170:	4604      	mov	r4, r0
 8001172:	4858      	ldr	r0, [pc, #352]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 8001174:	f7ff fadc 	bl	8000730 <LL_ADC_IsEnabled>
 8001178:	4603      	mov	r3, r0
 800117a:	4323      	orrs	r3, r4
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e008      	b.n	800119a <HAL_ADC_ConfigChannel+0x4ca>
 8001188:	4855      	ldr	r0, [pc, #340]	; (80012e0 <HAL_ADC_ConfigChannel+0x610>)
 800118a:	f7ff fad1 	bl	8000730 <LL_ADC_IsEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d07b      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_ADC_ConfigChannel+0x614>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d12e      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x536>
 80011a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d129      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_ADC_ConfigChannel+0x610>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d17f      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x500>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x504>
 80011d0:	4a41      	ldr	r2, [pc, #260]	; (80012d8 <HAL_ADC_ConfigChannel+0x608>)
 80011d2:	e000      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x506>
 80011d4:	4a41      	ldr	r2, [pc, #260]	; (80012dc <HAL_ADC_ConfigChannel+0x60c>)
 80011d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f7ff f92b 	bl	800043a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011e4:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <HAL_ADC_ConfigChannel+0x618>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <HAL_ADC_ConfigChannel+0x61c>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80011f6:	e002      	b.n	80011fe <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f9      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001204:	e05a      	b.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <HAL_ADC_ConfigChannel+0x620>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d11e      	bne.n	800124e <HAL_ADC_ConfigChannel+0x57e>
 8001210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d119      	bne.n	800124e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <HAL_ADC_ConfigChannel+0x610>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d14b      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d004      	beq.n	8001238 <HAL_ADC_ConfigChannel+0x568>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_ADC_ConfigChannel+0x56c>
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_ADC_ConfigChannel+0x608>)
 800123a:	e000      	b.n	800123e <HAL_ADC_ConfigChannel+0x56e>
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_ADC_ConfigChannel+0x60c>)
 800123e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f7ff f8f7 	bl	800043a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800124c:	e036      	b.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <HAL_ADC_ConfigChannel+0x624>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d131      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
 8001258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d12c      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_ADC_ConfigChannel+0x610>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d127      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_ADC_ConfigChannel+0x600>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d004      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x5b0>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_ADC_ConfigChannel+0x604>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x5b4>
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_ADC_ConfigChannel+0x608>)
 8001282:	e000      	b.n	8001286 <HAL_ADC_ConfigChannel+0x5b6>
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_ConfigChannel+0x60c>)
 8001286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f7ff f8d3 	bl	800043a <LL_ADC_SetCommonPathInternalCh>
 8001294:	e012      	b.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129a:	f043 0220 	orr.w	r2, r3, #32
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012a8:	e008      	b.n	80012bc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f043 0220 	orr.w	r2, r3, #32
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80012c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3764      	adds	r7, #100	; 0x64
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40022100 	.word	0x40022100
 80012d8:	40022300 	.word	0x40022300
 80012dc:	58026300 	.word	0x58026300
 80012e0:	58026000 	.word	0x58026000
 80012e4:	cb840000 	.word	0xcb840000
 80012e8:	24000008 	.word	0x24000008
 80012ec:	053e2d63 	.word	0x053e2d63
 80012f0:	c7520000 	.word	0xc7520000
 80012f4:	cfb80000 	.word	0xcfb80000

080012f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fa13 	bl	8000730 <LL_ADC_IsEnabled>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d167      	bne.n	80013e0 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <ADC_Enable+0xf4>)
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00d      	beq.n	800133a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e053      	b.n	80013e2 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f9e2 	bl	8000708 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001344:	f7ff f84e 	bl	80003e4 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <ADC_Enable+0xf8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d004      	beq.n	800135e <ADC_Enable+0x66>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a26      	ldr	r2, [pc, #152]	; (80013f4 <ADC_Enable+0xfc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <ADC_Enable+0x6a>
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <ADC_Enable+0x100>)
 8001360:	e000      	b.n	8001364 <ADC_Enable+0x6c>
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <ADC_Enable+0x104>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f973 	bl	8000650 <LL_ADC_GetMultimode>
 800136a:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <ADC_Enable+0xfc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d002      	beq.n	800137c <ADC_Enable+0x84>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	e000      	b.n	800137e <ADC_Enable+0x86>
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <ADC_Enable+0xf8>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d129      	bne.n	80013e0 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800138c:	e021      	b.n	80013d2 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f9cc 	bl	8000730 <LL_ADC_IsEnabled>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d104      	bne.n	80013a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f9b0 	bl	8000708 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013a8:	f7ff f81c 	bl	80003e4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d90d      	bls.n	80013d2 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f043 0210 	orr.w	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e007      	b.n	80013e2 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d1d6      	bne.n	800138e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	8000003f 	.word	0x8000003f
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40022100 	.word	0x40022100
 80013f8:	40022300 	.word	0x40022300
 80013fc:	58026300 	.word	0x58026300

08001400 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001416:	2b00      	cmp	r3, #0
 8001418:	d14b      	bne.n	80014b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d021      	beq.n	8001478 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f86d 	bl	8000518 <LL_ADC_REG_IsTriggerSourceSWStart>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d032      	beq.n	80014aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d12b      	bne.n	80014aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
 8001476:	e018      	b.n	80014aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d111      	bne.n	80014aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7ff fbf2 	bl	8000c94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014b0:	e00e      	b.n	80014d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fbfc 	bl	8000cbc <HAL_ADC_ErrorCallback>
}
 80014c4:	e004      	b.n	80014d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fbde 	bl	8000ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f043 0204 	orr.w	r2, r3, #4
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fbce 	bl	8000cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a70      	ldr	r2, [pc, #448]	; (80016f8 <ADC_ConfigureBoostMode+0x1d0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d004      	beq.n	8001544 <ADC_ConfigureBoostMode+0x1c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <ADC_ConfigureBoostMode+0x1d4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d109      	bne.n	8001558 <ADC_ConfigureBoostMode+0x30>
 8001544:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <ADC_ConfigureBoostMode+0x1d8>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e008      	b.n	800156a <ADC_ConfigureBoostMode+0x42>
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <ADC_ConfigureBoostMode+0x1dc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01a      	beq.n	80015a4 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800156e:	f003 fca5 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8001572:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800157c:	d006      	beq.n	800158c <ADC_ConfigureBoostMode+0x64>
 800157e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001582:	d00b      	beq.n	800159c <ADC_ConfigureBoostMode+0x74>
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d000      	beq.n	800158c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800158a:	e05d      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	60fb      	str	r3, [r7, #12]
        break;
 800159a:	e055      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
        break;
 80015a2:	e051      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80015a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015a8:	f004 fb96 	bl	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ac:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80015b6:	d02a      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
 80015b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80015bc:	d813      	bhi.n	80015e6 <ADC_ConfigureBoostMode+0xbe>
 80015be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015c2:	d024      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
 80015c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015c8:	d806      	bhi.n	80015d8 <ADC_ConfigureBoostMode+0xb0>
 80015ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ce:	d01e      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
 80015d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015d4:	d01b      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80015d6:	e037      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80015d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015dc:	d017      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
 80015de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80015e2:	d014      	beq.n	800160e <ADC_ConfigureBoostMode+0xe6>
        break;
 80015e4:	e030      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80015e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80015ea:	d021      	beq.n	8001630 <ADC_ConfigureBoostMode+0x108>
 80015ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80015f0:	d806      	bhi.n	8001600 <ADC_ConfigureBoostMode+0xd8>
 80015f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80015f6:	d013      	beq.n	8001620 <ADC_ConfigureBoostMode+0xf8>
 80015f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015fc:	d014      	beq.n	8001628 <ADC_ConfigureBoostMode+0x100>
        break;
 80015fe:	e023      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001600:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001604:	d018      	beq.n	8001638 <ADC_ConfigureBoostMode+0x110>
 8001606:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800160a:	d019      	beq.n	8001640 <ADC_ConfigureBoostMode+0x118>
        break;
 800160c:	e01c      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	60fb      	str	r3, [r7, #12]
        break;
 800161e:	e013      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	60fb      	str	r3, [r7, #12]
      break;
 8001626:	e00f      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	60fb      	str	r3, [r7, #12]
        break;
 800162e:	e00b      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	099b      	lsrs	r3, r3, #6
 8001634:	60fb      	str	r3, [r7, #12]
        break;
 8001636:	e007      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	09db      	lsrs	r3, r3, #7
 800163c:	60fb      	str	r3, [r7, #12]
        break;
 800163e:	e003      	b.n	8001648 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	60fb      	str	r3, [r7, #12]
        break;
 8001646:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001648:	f7fe fed8 	bl	80003fc <HAL_GetREVID>
 800164c:	4602      	mov	r2, r0
 800164e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001652:	429a      	cmp	r2, r3
 8001654:	d815      	bhi.n	8001682 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <ADC_ConfigureBoostMode+0x1e0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d908      	bls.n	8001670 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800166c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800166e:	e03e      	b.n	80016ee <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167e:	609a      	str	r2, [r3, #8]
}
 8001680:	e035      	b.n	80016ee <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <ADC_ConfigureBoostMode+0x1e4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d808      	bhi.n	80016a2 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800169e:	609a      	str	r2, [r3, #8]
}
 80016a0:	e025      	b.n	80016ee <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <ADC_ConfigureBoostMode+0x1e8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d80a      	bhi.n	80016c0 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016bc:	609a      	str	r2, [r3, #8]
}
 80016be:	e016      	b.n	80016ee <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <ADC_ConfigureBoostMode+0x1ec>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d80a      	bhi.n	80016de <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	609a      	str	r2, [r3, #8]
}
 80016dc:	e007      	b.n	80016ee <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016ec:	609a      	str	r2, [r3, #8]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40022100 	.word	0x40022100
 8001700:	40022300 	.word	0x40022300
 8001704:	58026300 	.word	0x58026300
 8001708:	01312d00 	.word	0x01312d00
 800170c:	005f5e10 	.word	0x005f5e10
 8001710:	00bebc20 	.word	0x00bebc20
 8001714:	017d7840 	.word	0x017d7840

08001718 <LL_ADC_IsEnabled>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <LL_ADC_IsEnabled+0x18>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <LL_ADC_IsEnabled+0x1a>
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_ADC_REG_IsConversionOngoing>:
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b04      	cmp	r3, #4
 8001750:	d101      	bne.n	8001756 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b09f      	sub	sp, #124	; 0x7c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800177e:	2302      	movs	r3, #2
 8001780:	e0ba      	b.n	80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d102      	bne.n	800179a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001794:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	e001      	b.n	800179e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10b      	bne.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0220 	orr.w	r2, r3, #32
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e09d      	b.n	80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffbd 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 80017c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ffb7 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d17f      	bne.n	80018d6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80017d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d17c      	bne.n	80018d6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80017f0:	4b45      	ldr	r3, [pc, #276]	; (8001908 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80017f2:	e000      	b.n	80017f6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80017f4:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80017f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d039      	beq.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001810:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3a      	ldr	r2, [pc, #232]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d004      	beq.n	8001826 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10e      	bne.n	8001844 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8001826:	4836      	ldr	r0, [pc, #216]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001828:	f7ff ff76 	bl	8001718 <LL_ADC_IsEnabled>
 800182c:	4604      	mov	r4, r0
 800182e:	4835      	ldr	r0, [pc, #212]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001830:	f7ff ff72 	bl	8001718 <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	4323      	orrs	r3, r4
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e008      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001846:	f7ff ff67 	bl	8001718 <LL_ADC_IsEnabled>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d047      	beq.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800185a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001860:	4013      	ands	r3, r2
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6811      	ldr	r1, [r2, #0]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6892      	ldr	r2, [r2, #8]
 800186a:	430a      	orrs	r2, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001870:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001872:	e03a      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800187c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800187e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10e      	bne.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8001894:	481a      	ldr	r0, [pc, #104]	; (8001900 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001896:	f7ff ff3f 	bl	8001718 <LL_ADC_IsEnabled>
 800189a:	4604      	mov	r4, r0
 800189c:	4819      	ldr	r0, [pc, #100]	; (8001904 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800189e:	f7ff ff3b 	bl	8001718 <LL_ADC_IsEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4323      	orrs	r3, r4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e008      	b.n	80018c4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80018b4:	f7ff ff30 	bl	8001718 <LL_ADC_IsEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80018c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018d4:	e009      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80018e8:	e000      	b.n	80018ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	377c      	adds	r7, #124	; 0x7c
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	40022000 	.word	0x40022000
 8001904:	40022100 	.word	0x40022100
 8001908:	40022300 	.word	0x40022300
 800190c:	58026300 	.word	0x58026300
 8001910:	58026000 	.word	0x58026000
 8001914:	fffff0e0 	.word	0xfffff0e0

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <__NVIC_SetPriorityGrouping+0x40>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	4313      	orrs	r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x40>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00
 800195c:	05fa0000 	.word	0x05fa0000

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <__NVIC_EnableIRQ+0x38>)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	; (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	; (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	; 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f7ff ff8e 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff29 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff40 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff90 	bl	8001a0c <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5f 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff33 	bl	800197c <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa4 	bl	8001a74 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7fe fc50 	bl	80003e4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e316      	b.n	800217e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_DMA_Init+0x1b8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d04a      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_DMA_Init+0x1bc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d045      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_DMA_Init+0x1c0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d040      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a62      	ldr	r2, [pc, #392]	; (8001cfc <HAL_DMA_Init+0x1c4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d03b      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_DMA_Init+0x1c8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d036      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5f      	ldr	r2, [pc, #380]	; (8001d04 <HAL_DMA_Init+0x1cc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d031      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5d      	ldr	r2, [pc, #372]	; (8001d08 <HAL_DMA_Init+0x1d0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02c      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5c      	ldr	r2, [pc, #368]	; (8001d0c <HAL_DMA_Init+0x1d4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d027      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <HAL_DMA_Init+0x1d8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d022      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a59      	ldr	r2, [pc, #356]	; (8001d14 <HAL_DMA_Init+0x1dc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d01d      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_DMA_Init+0x1e0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d018      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_DMA_Init+0x1e4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_DMA_Init+0x1e8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00e      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a53      	ldr	r2, [pc, #332]	; (8001d24 <HAL_DMA_Init+0x1ec>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_DMA_Init+0x1f0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_DMA_Init+0xb8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_DMA_Init+0x1f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Init+0xbc>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_DMA_Init+0xbe>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 813b 	beq.w	8001e72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a37      	ldr	r2, [pc, #220]	; (8001cf0 <HAL_DMA_Init+0x1b8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d04a      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_DMA_Init+0x1bc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d045      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a34      	ldr	r2, [pc, #208]	; (8001cf8 <HAL_DMA_Init+0x1c0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d040      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a33      	ldr	r2, [pc, #204]	; (8001cfc <HAL_DMA_Init+0x1c4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d03b      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_DMA_Init+0x1c8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d036      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <HAL_DMA_Init+0x1cc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d031      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_DMA_Init+0x1d0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02c      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <HAL_DMA_Init+0x1d4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d027      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <HAL_DMA_Init+0x1d8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <HAL_DMA_Init+0x1dc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01d      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <HAL_DMA_Init+0x1e0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_DMA_Init+0x1e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_DMA_Init+0x1e8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <HAL_DMA_Init+0x1ec>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_DMA_Init+0x1f0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_DMA_Init+0x174>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_DMA_Init+0x1f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <HAL_DMA_Init+0x186>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e007      	b.n	8001cce <HAL_DMA_Init+0x196>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cce:	e02f      	b.n	8001d30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd0:	f7fe fb88 	bl	80003e4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d928      	bls.n	8001d30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e246      	b.n	800217e <HAL_DMA_Init+0x646>
 8001cf0:	40020010 	.word	0x40020010
 8001cf4:	40020028 	.word	0x40020028
 8001cf8:	40020040 	.word	0x40020040
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	40020070 	.word	0x40020070
 8001d04:	40020088 	.word	0x40020088
 8001d08:	400200a0 	.word	0x400200a0
 8001d0c:	400200b8 	.word	0x400200b8
 8001d10:	40020410 	.word	0x40020410
 8001d14:	40020428 	.word	0x40020428
 8001d18:	40020440 	.word	0x40020440
 8001d1c:	40020458 	.word	0x40020458
 8001d20:	40020470 	.word	0x40020470
 8001d24:	40020488 	.word	0x40020488
 8001d28:	400204a0 	.word	0x400204a0
 8001d2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1c8      	bne.n	8001cd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_DMA_Init+0x420>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d94:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <HAL_DMA_Init+0x424>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <HAL_DMA_Init+0x428>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da0:	d328      	bcc.n	8001df4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b28      	cmp	r3, #40	; 0x28
 8001da8:	d903      	bls.n	8001db2 <HAL_DMA_Init+0x27a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b2e      	cmp	r3, #46	; 0x2e
 8001db0:	d917      	bls.n	8001de2 <HAL_DMA_Init+0x2aa>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b3e      	cmp	r3, #62	; 0x3e
 8001db8:	d903      	bls.n	8001dc2 <HAL_DMA_Init+0x28a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b42      	cmp	r3, #66	; 0x42
 8001dc0:	d90f      	bls.n	8001de2 <HAL_DMA_Init+0x2aa>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b46      	cmp	r3, #70	; 0x46
 8001dc8:	d903      	bls.n	8001dd2 <HAL_DMA_Init+0x29a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b48      	cmp	r3, #72	; 0x48
 8001dd0:	d907      	bls.n	8001de2 <HAL_DMA_Init+0x2aa>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b4e      	cmp	r3, #78	; 0x4e
 8001dd8:	d905      	bls.n	8001de6 <HAL_DMA_Init+0x2ae>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b52      	cmp	r3, #82	; 0x52
 8001de0:	d801      	bhi.n	8001de6 <HAL_DMA_Init+0x2ae>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_Init+0x2b0>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 0307 	bic.w	r3, r3, #7
 8001e0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d117      	bne.n	8001e4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 fdcf 	bl	80039d4 <DMA_CheckFifoParam>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e197      	b.n	800217e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f001 fd0a 	bl	8003870 <DMA_CalcBaseAndBitshift>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	223f      	movs	r2, #63	; 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e0cd      	b.n	800200e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_DMA_Init+0x42c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <HAL_DMA_Init+0x430>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a38      	ldr	r2, [pc, #224]	; (8001f6c <HAL_DMA_Init+0x434>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a36      	ldr	r2, [pc, #216]	; (8001f70 <HAL_DMA_Init+0x438>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <HAL_DMA_Init+0x43c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <HAL_DMA_Init+0x440>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <HAL_DMA_Init+0x444>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_Init+0x38a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <HAL_DMA_Init+0x448>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_DMA_Init+0x38e>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_DMA_Init+0x390>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8097 	beq.w	8001ffc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <HAL_DMA_Init+0x42c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d021      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <HAL_DMA_Init+0x430>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01c      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <HAL_DMA_Init+0x434>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d017      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <HAL_DMA_Init+0x438>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d012      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_DMA_Init+0x43c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_DMA_Init+0x440>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d008      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_DMA_Init+0x444>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_Init+0x3e4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_DMA_Init+0x448>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_DMA_Init+0x44c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d020      	beq.n	8001f88 <HAL_DMA_Init+0x450>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d102      	bne.n	8001f54 <HAL_DMA_Init+0x41c>
 8001f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f52:	e01a      	b.n	8001f8a <HAL_DMA_Init+0x452>
 8001f54:	2300      	movs	r3, #0
 8001f56:	e018      	b.n	8001f8a <HAL_DMA_Init+0x452>
 8001f58:	fe10803f 	.word	0xfe10803f
 8001f5c:	5c001000 	.word	0x5c001000
 8001f60:	ffff0000 	.word	0xffff0000
 8001f64:	58025408 	.word	0x58025408
 8001f68:	5802541c 	.word	0x5802541c
 8001f6c:	58025430 	.word	0x58025430
 8001f70:	58025444 	.word	0x58025444
 8001f74:	58025458 	.word	0x58025458
 8001f78:	5802546c 	.word	0x5802546c
 8001f7c:	58025480 	.word	0x58025480
 8001f80:	58025494 	.word	0x58025494
 8001f84:	fffe000f 	.word	0xfffe000f
 8001f88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <HAL_DMA_Init+0x650>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_DMA_Init+0x654>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	009a      	lsls	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 fc45 	bl	8003870 <DMA_CalcBaseAndBitshift>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e008      	b.n	800200e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0b7      	b.n	800217e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5f      	ldr	r2, [pc, #380]	; (8002190 <HAL_DMA_Init+0x658>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d072      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_DMA_Init+0x65c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d06d      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5c      	ldr	r2, [pc, #368]	; (8002198 <HAL_DMA_Init+0x660>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d068      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a5a      	ldr	r2, [pc, #360]	; (800219c <HAL_DMA_Init+0x664>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d063      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a59      	ldr	r2, [pc, #356]	; (80021a0 <HAL_DMA_Init+0x668>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d05e      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_DMA_Init+0x66c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d059      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_DMA_Init+0x670>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d054      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a54      	ldr	r2, [pc, #336]	; (80021ac <HAL_DMA_Init+0x674>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d04f      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a53      	ldr	r2, [pc, #332]	; (80021b0 <HAL_DMA_Init+0x678>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04a      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_DMA_Init+0x67c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d045      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_DMA_Init+0x680>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d040      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <HAL_DMA_Init+0x684>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d03b      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <HAL_DMA_Init+0x688>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d036      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_DMA_Init+0x68c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d031      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4a      	ldr	r2, [pc, #296]	; (80021c8 <HAL_DMA_Init+0x690>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d02c      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <HAL_DMA_Init+0x694>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d027      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a47      	ldr	r2, [pc, #284]	; (80021d0 <HAL_DMA_Init+0x698>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <HAL_DMA_Init+0x69c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01d      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a44      	ldr	r2, [pc, #272]	; (80021d8 <HAL_DMA_Init+0x6a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a42      	ldr	r2, [pc, #264]	; (80021dc <HAL_DMA_Init+0x6a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_DMA_Init+0x6a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00e      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3f      	ldr	r2, [pc, #252]	; (80021e4 <HAL_DMA_Init+0x6ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <HAL_DMA_Init+0x6b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d004      	beq.n	80020fe <HAL_DMA_Init+0x5c6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <HAL_DMA_Init+0x6b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Init+0x5ca>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_DMA_Init+0x5cc>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d032      	beq.n	800216e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f001 fcdf 	bl	8003acc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	d102      	bne.n	800211c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002130:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_DMA_Init+0x624>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d80c      	bhi.n	800215c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 fd5c 	bl	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e008      	b.n	800216e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	a7fdabf8 	.word	0xa7fdabf8
 800218c:	cccccccd 	.word	0xcccccccd
 8002190:	40020010 	.word	0x40020010
 8002194:	40020028 	.word	0x40020028
 8002198:	40020040 	.word	0x40020040
 800219c:	40020058 	.word	0x40020058
 80021a0:	40020070 	.word	0x40020070
 80021a4:	40020088 	.word	0x40020088
 80021a8:	400200a0 	.word	0x400200a0
 80021ac:	400200b8 	.word	0x400200b8
 80021b0:	40020410 	.word	0x40020410
 80021b4:	40020428 	.word	0x40020428
 80021b8:	40020440 	.word	0x40020440
 80021bc:	40020458 	.word	0x40020458
 80021c0:	40020470 	.word	0x40020470
 80021c4:	40020488 	.word	0x40020488
 80021c8:	400204a0 	.word	0x400204a0
 80021cc:	400204b8 	.word	0x400204b8
 80021d0:	58025408 	.word	0x58025408
 80021d4:	5802541c 	.word	0x5802541c
 80021d8:	58025430 	.word	0x58025430
 80021dc:	58025444 	.word	0x58025444
 80021e0:	58025458 	.word	0x58025458
 80021e4:	5802546c 	.word	0x5802546c
 80021e8:	58025480 	.word	0x58025480
 80021ec:	58025494 	.word	0x58025494

080021f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e226      	b.n	800265a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_DMA_Start_IT+0x2a>
 8002216:	2302      	movs	r3, #2
 8002218:	e21f      	b.n	800265a <HAL_DMA_Start_IT+0x46a>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	f040 820a 	bne.w	8002644 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a68      	ldr	r2, [pc, #416]	; (80023e4 <HAL_DMA_Start_IT+0x1f4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04a      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_DMA_Start_IT+0x1f8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d045      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_DMA_Start_IT+0x1fc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d040      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a63      	ldr	r2, [pc, #396]	; (80023f0 <HAL_DMA_Start_IT+0x200>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d03b      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a62      	ldr	r2, [pc, #392]	; (80023f4 <HAL_DMA_Start_IT+0x204>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d036      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <HAL_DMA_Start_IT+0x208>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d031      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5f      	ldr	r2, [pc, #380]	; (80023fc <HAL_DMA_Start_IT+0x20c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d02c      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_DMA_Start_IT+0x210>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d027      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5c      	ldr	r2, [pc, #368]	; (8002404 <HAL_DMA_Start_IT+0x214>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5a      	ldr	r2, [pc, #360]	; (8002408 <HAL_DMA_Start_IT+0x218>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a59      	ldr	r2, [pc, #356]	; (800240c <HAL_DMA_Start_IT+0x21c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d018      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a57      	ldr	r2, [pc, #348]	; (8002410 <HAL_DMA_Start_IT+0x220>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a56      	ldr	r2, [pc, #344]	; (8002414 <HAL_DMA_Start_IT+0x224>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a54      	ldr	r2, [pc, #336]	; (8002418 <HAL_DMA_Start_IT+0x228>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a53      	ldr	r2, [pc, #332]	; (800241c <HAL_DMA_Start_IT+0x22c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Start_IT+0xee>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_DMA_Start_IT+0x230>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d108      	bne.n	80022f0 <HAL_DMA_Start_IT+0x100>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e007      	b.n	8002300 <HAL_DMA_Start_IT+0x110>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f001 f906 	bl	8003518 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_DMA_Start_IT+0x1f4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04a      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a33      	ldr	r2, [pc, #204]	; (80023e8 <HAL_DMA_Start_IT+0x1f8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d045      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a31      	ldr	r2, [pc, #196]	; (80023ec <HAL_DMA_Start_IT+0x1fc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d040      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <HAL_DMA_Start_IT+0x200>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d03b      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <HAL_DMA_Start_IT+0x204>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d036      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <HAL_DMA_Start_IT+0x208>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d031      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_DMA_Start_IT+0x20c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d02c      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_DMA_Start_IT+0x210>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d027      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_DMA_Start_IT+0x214>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d022      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_DMA_Start_IT+0x218>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d01d      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <HAL_DMA_Start_IT+0x21c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d018      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a24      	ldr	r2, [pc, #144]	; (8002410 <HAL_DMA_Start_IT+0x220>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a22      	ldr	r2, [pc, #136]	; (8002414 <HAL_DMA_Start_IT+0x224>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00e      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a21      	ldr	r2, [pc, #132]	; (8002418 <HAL_DMA_Start_IT+0x228>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_DMA_Start_IT+0x22c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_Start_IT+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <HAL_DMA_Start_IT+0x230>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Start_IT+0x1c0>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_DMA_Start_IT+0x1c2>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 021e 	bic.w	r2, r3, #30
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0216 	orr.w	r2, r2, #22
 80023c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03e      	beq.n	8002450 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0208 	orr.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e035      	b.n	8002450 <HAL_DMA_Start_IT+0x260>
 80023e4:	40020010 	.word	0x40020010
 80023e8:	40020028 	.word	0x40020028
 80023ec:	40020040 	.word	0x40020040
 80023f0:	40020058 	.word	0x40020058
 80023f4:	40020070 	.word	0x40020070
 80023f8:	40020088 	.word	0x40020088
 80023fc:	400200a0 	.word	0x400200a0
 8002400:	400200b8 	.word	0x400200b8
 8002404:	40020410 	.word	0x40020410
 8002408:	40020428 	.word	0x40020428
 800240c:	40020440 	.word	0x40020440
 8002410:	40020458 	.word	0x40020458
 8002414:	40020470 	.word	0x40020470
 8002418:	40020488 	.word	0x40020488
 800241c:	400204a0 	.word	0x400204a0
 8002420:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 020e 	bic.w	r2, r3, #14
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 020a 	orr.w	r2, r2, #10
 8002436:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0204 	orr.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a83      	ldr	r2, [pc, #524]	; (8002664 <HAL_DMA_Start_IT+0x474>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d072      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a82      	ldr	r2, [pc, #520]	; (8002668 <HAL_DMA_Start_IT+0x478>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d06d      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_DMA_Start_IT+0x47c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d068      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7f      	ldr	r2, [pc, #508]	; (8002670 <HAL_DMA_Start_IT+0x480>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d063      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7d      	ldr	r2, [pc, #500]	; (8002674 <HAL_DMA_Start_IT+0x484>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d05e      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7c      	ldr	r2, [pc, #496]	; (8002678 <HAL_DMA_Start_IT+0x488>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d059      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_DMA_Start_IT+0x48c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d054      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a79      	ldr	r2, [pc, #484]	; (8002680 <HAL_DMA_Start_IT+0x490>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04f      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a77      	ldr	r2, [pc, #476]	; (8002684 <HAL_DMA_Start_IT+0x494>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04a      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a76      	ldr	r2, [pc, #472]	; (8002688 <HAL_DMA_Start_IT+0x498>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d045      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a74      	ldr	r2, [pc, #464]	; (800268c <HAL_DMA_Start_IT+0x49c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d040      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_DMA_Start_IT+0x4a0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d03b      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a71      	ldr	r2, [pc, #452]	; (8002694 <HAL_DMA_Start_IT+0x4a4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d036      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a70      	ldr	r2, [pc, #448]	; (8002698 <HAL_DMA_Start_IT+0x4a8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d031      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_DMA_Start_IT+0x4ac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6d      	ldr	r2, [pc, #436]	; (80026a0 <HAL_DMA_Start_IT+0x4b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d027      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6b      	ldr	r2, [pc, #428]	; (80026a4 <HAL_DMA_Start_IT+0x4b4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d022      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_DMA_Start_IT+0x4b8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d01d      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a68      	ldr	r2, [pc, #416]	; (80026ac <HAL_DMA_Start_IT+0x4bc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a67      	ldr	r2, [pc, #412]	; (80026b0 <HAL_DMA_Start_IT+0x4c0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_DMA_Start_IT+0x4c4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_DMA_Start_IT+0x4c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a62      	ldr	r2, [pc, #392]	; (80026bc <HAL_DMA_Start_IT+0x4cc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a61      	ldr	r2, [pc, #388]	; (80026c0 <HAL_DMA_Start_IT+0x4d0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_DMA_Start_IT+0x354>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_DMA_Start_IT+0x356>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01a      	beq.n	8002580 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002566:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a37      	ldr	r2, [pc, #220]	; (8002664 <HAL_DMA_Start_IT+0x474>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d04a      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a36      	ldr	r2, [pc, #216]	; (8002668 <HAL_DMA_Start_IT+0x478>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d045      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_DMA_Start_IT+0x47c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d040      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a33      	ldr	r2, [pc, #204]	; (8002670 <HAL_DMA_Start_IT+0x480>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d03b      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_DMA_Start_IT+0x484>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d036      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_DMA_Start_IT+0x488>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d031      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2e      	ldr	r2, [pc, #184]	; (800267c <HAL_DMA_Start_IT+0x48c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02c      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_DMA_Start_IT+0x490>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d027      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <HAL_DMA_Start_IT+0x494>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <HAL_DMA_Start_IT+0x498>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01d      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_DMA_Start_IT+0x49c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d018      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_DMA_Start_IT+0x4a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_DMA_Start_IT+0x4a4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_DMA_Start_IT+0x4a8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_DMA_Start_IT+0x4ac>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_Start_IT+0x430>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <HAL_DMA_Start_IT+0x4b0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <HAL_DMA_Start_IT+0x442>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e012      	b.n	8002658 <HAL_DMA_Start_IT+0x468>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e009      	b.n	8002658 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40020010 	.word	0x40020010
 8002668:	40020028 	.word	0x40020028
 800266c:	40020040 	.word	0x40020040
 8002670:	40020058 	.word	0x40020058
 8002674:	40020070 	.word	0x40020070
 8002678:	40020088 	.word	0x40020088
 800267c:	400200a0 	.word	0x400200a0
 8002680:	400200b8 	.word	0x400200b8
 8002684:	40020410 	.word	0x40020410
 8002688:	40020428 	.word	0x40020428
 800268c:	40020440 	.word	0x40020440
 8002690:	40020458 	.word	0x40020458
 8002694:	40020470 	.word	0x40020470
 8002698:	40020488 	.word	0x40020488
 800269c:	400204a0 	.word	0x400204a0
 80026a0:	400204b8 	.word	0x400204b8
 80026a4:	58025408 	.word	0x58025408
 80026a8:	5802541c 	.word	0x5802541c
 80026ac:	58025430 	.word	0x58025430
 80026b0:	58025444 	.word	0x58025444
 80026b4:	58025458 	.word	0x58025458
 80026b8:	5802546c 	.word	0x5802546c
 80026bc:	58025480 	.word	0x58025480
 80026c0:	58025494 	.word	0x58025494

080026c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_DMA_IRQHandler+0x1ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a67      	ldr	r2, [pc, #412]	; (8002874 <HAL_DMA_IRQHandler+0x1b0>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_DMA_IRQHandler+0x1b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d04a      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_DMA_IRQHandler+0x1b8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d045      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	; (8002880 <HAL_DMA_IRQHandler+0x1bc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d040      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_DMA_IRQHandler+0x1c0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d03b      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a59      	ldr	r2, [pc, #356]	; (8002888 <HAL_DMA_IRQHandler+0x1c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d036      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_DMA_IRQHandler+0x1c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d031      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a56      	ldr	r2, [pc, #344]	; (8002890 <HAL_DMA_IRQHandler+0x1cc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d02c      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_DMA_IRQHandler+0x1d0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d027      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a53      	ldr	r2, [pc, #332]	; (8002898 <HAL_DMA_IRQHandler+0x1d4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d022      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <HAL_DMA_IRQHandler+0x1d8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01d      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_DMA_IRQHandler+0x1dc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d018      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_DMA_IRQHandler+0x1e0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_DMA_IRQHandler+0x1e4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_DMA_IRQHandler+0x1e8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_DMA_IRQHandler+0x1ec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_DMA_IRQHandler+0xd2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_DMA_IRQHandler+0x1f0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_DMA_IRQHandler+0xd6>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_DMA_IRQHandler+0xd8>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 842b 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2208      	movs	r2, #8
 80027ac:	409a      	lsls	r2, r3
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a2 	beq.w	80028fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <HAL_DMA_IRQHandler+0x1b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d04a      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2d      	ldr	r2, [pc, #180]	; (800287c <HAL_DMA_IRQHandler+0x1b8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d045      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_DMA_IRQHandler+0x1bc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d040      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <HAL_DMA_IRQHandler+0x1c0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d03b      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_DMA_IRQHandler+0x1c4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d036      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_DMA_IRQHandler+0x1c8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d031      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_DMA_IRQHandler+0x1cc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02c      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_DMA_IRQHandler+0x1d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d027      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_DMA_IRQHandler+0x1d4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d022      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	; (800289c <HAL_DMA_IRQHandler+0x1d8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d01d      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_DMA_IRQHandler+0x1dc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d018      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_DMA_IRQHandler+0x1e0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_DMA_IRQHandler+0x1e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_DMA_IRQHandler+0x1e8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_DMA_IRQHandler+0x1ec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_DMA_IRQHandler+0x194>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_DMA_IRQHandler+0x1f0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d12f      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x1f4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e02e      	b.n	80028cc <HAL_DMA_IRQHandler+0x208>
 800286e:	bf00      	nop
 8002870:	24000008 	.word	0x24000008
 8002874:	1b4e81b5 	.word	0x1b4e81b5
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2208      	movs	r2, #8
 80028ea:	409a      	lsls	r2, r3
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d06e      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_DMA_IRQHandler+0x3f8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a67      	ldr	r2, [pc, #412]	; (8002ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a66      	ldr	r2, [pc, #408]	; (8002ac4 <HAL_DMA_IRQHandler+0x400>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a64      	ldr	r2, [pc, #400]	; (8002ac8 <HAL_DMA_IRQHandler+0x404>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_DMA_IRQHandler+0x408>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a61      	ldr	r2, [pc, #388]	; (8002ad0 <HAL_DMA_IRQHandler+0x40c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a60      	ldr	r2, [pc, #384]	; (8002ad4 <HAL_DMA_IRQHandler+0x410>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5e      	ldr	r2, [pc, #376]	; (8002ad8 <HAL_DMA_IRQHandler+0x414>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_DMA_IRQHandler+0x418>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_DMA_IRQHandler+0x41c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5a      	ldr	r2, [pc, #360]	; (8002ae4 <HAL_DMA_IRQHandler+0x420>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_DMA_IRQHandler+0x424>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_DMA_IRQHandler+0x428>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_DMA_IRQHandler+0x42c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_DMA_IRQHandler+0x430>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2ee>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_DMA_IRQHandler+0x434>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10a      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x304>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e003      	b.n	80029d0 <HAL_DMA_IRQHandler+0x30c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 808f 	beq.w	8002b24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <HAL_DMA_IRQHandler+0x3f8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d04a      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d045      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a29      	ldr	r2, [pc, #164]	; (8002ac4 <HAL_DMA_IRQHandler+0x400>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d040      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_DMA_IRQHandler+0x404>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d03b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_DMA_IRQHandler+0x408>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d036      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_DMA_IRQHandler+0x40c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d031      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_DMA_IRQHandler+0x410>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d02c      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_DMA_IRQHandler+0x414>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d027      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <HAL_DMA_IRQHandler+0x418>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_DMA_IRQHandler+0x41c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_DMA_IRQHandler+0x420>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_DMA_IRQHandler+0x424>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_DMA_IRQHandler+0x428>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_DMA_IRQHandler+0x42c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_DMA_IRQHandler+0x430>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x3e2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_DMA_IRQHandler+0x434>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d12a      	bne.n	8002afc <HAL_DMA_IRQHandler+0x438>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e023      	b.n	8002b04 <HAL_DMA_IRQHandler+0x440>
 8002abc:	40020010 	.word	0x40020010
 8002ac0:	40020028 	.word	0x40020028
 8002ac4:	40020040 	.word	0x40020040
 8002ac8:	40020058 	.word	0x40020058
 8002acc:	40020070 	.word	0x40020070
 8002ad0:	40020088 	.word	0x40020088
 8002ad4:	400200a0 	.word	0x400200a0
 8002ad8:	400200b8 	.word	0x400200b8
 8002adc:	40020410 	.word	0x40020410
 8002ae0:	40020428 	.word	0x40020428
 8002ae4:	40020440 	.word	0x40020440
 8002ae8:	40020458 	.word	0x40020458
 8002aec:	40020470 	.word	0x40020470
 8002af0:	40020488 	.word	0x40020488
 8002af4:	400204a0 	.word	0x400204a0
 8002af8:	400204b8 	.word	0x400204b8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2204      	movs	r2, #4
 8002b12:	409a      	lsls	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a6 	beq.w	8002c86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a85      	ldr	r2, [pc, #532]	; (8002d54 <HAL_DMA_IRQHandler+0x690>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_DMA_IRQHandler+0x694>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a82      	ldr	r2, [pc, #520]	; (8002d5c <HAL_DMA_IRQHandler+0x698>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_DMA_IRQHandler+0x69c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7f      	ldr	r2, [pc, #508]	; (8002d64 <HAL_DMA_IRQHandler+0x6a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <HAL_DMA_IRQHandler+0x6a4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7c      	ldr	r2, [pc, #496]	; (8002d6c <HAL_DMA_IRQHandler+0x6a8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a7a      	ldr	r2, [pc, #488]	; (8002d70 <HAL_DMA_IRQHandler+0x6ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a79      	ldr	r2, [pc, #484]	; (8002d74 <HAL_DMA_IRQHandler+0x6b0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_DMA_IRQHandler+0x6b4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a76      	ldr	r2, [pc, #472]	; (8002d7c <HAL_DMA_IRQHandler+0x6b8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a74      	ldr	r2, [pc, #464]	; (8002d80 <HAL_DMA_IRQHandler+0x6bc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_DMA_IRQHandler+0x6c0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a71      	ldr	r2, [pc, #452]	; (8002d88 <HAL_DMA_IRQHandler+0x6c4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a70      	ldr	r2, [pc, #448]	; (8002d8c <HAL_DMA_IRQHandler+0x6c8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_IRQHandler+0x516>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_DMA_IRQHandler+0x6cc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x52c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e009      	b.n	8002c04 <HAL_DMA_IRQHandler+0x540>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03e      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2210      	movs	r2, #16
 8002c12:	409a      	lsls	r2, r3
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d024      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e01f      	b.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e016      	b.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2220      	movs	r2, #32
 8002c90:	409a      	lsls	r2, r3
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8110 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_DMA_IRQHandler+0x690>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d04a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_DMA_IRQHandler+0x694>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d045      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_DMA_IRQHandler+0x698>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d040      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_DMA_IRQHandler+0x69c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d03b      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <HAL_DMA_IRQHandler+0x6a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d036      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_DMA_IRQHandler+0x6a4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d031      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_DMA_IRQHandler+0x6a8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_DMA_IRQHandler+0x6ac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d027      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <HAL_DMA_IRQHandler+0x6b0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <HAL_DMA_IRQHandler+0x6b4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_DMA_IRQHandler+0x6b8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_DMA_IRQHandler+0x6bc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_DMA_IRQHandler+0x6c0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_DMA_IRQHandler+0x6c4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_DMA_IRQHandler+0x6c8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x678>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_DMA_IRQHandler+0x6cc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d12b      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x6d0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e02a      	b.n	8002da8 <HAL_DMA_IRQHandler+0x6e4>
 8002d52:	bf00      	nop
 8002d54:	40020010 	.word	0x40020010
 8002d58:	40020028 	.word	0x40020028
 8002d5c:	40020040 	.word	0x40020040
 8002d60:	40020058 	.word	0x40020058
 8002d64:	40020070 	.word	0x40020070
 8002d68:	40020088 	.word	0x40020088
 8002d6c:	400200a0 	.word	0x400200a0
 8002d70:	400200b8 	.word	0x400200b8
 8002d74:	40020410 	.word	0x40020410
 8002d78:	40020428 	.word	0x40020428
 8002d7c:	40020440 	.word	0x40020440
 8002d80:	40020458 	.word	0x40020458
 8002d84:	40020470 	.word	0x40020470
 8002d88:	40020488 	.word	0x40020488
 8002d8c:	400204a0 	.word	0x400204a0
 8002d90:	400204b8 	.word	0x400204b8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8087 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2220      	movs	r2, #32
 8002db8:	409a      	lsls	r2, r3
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d139      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x736>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	223f      	movs	r2, #63	; 0x3f
 8002e14:	409a      	lsls	r2, r3
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 834a 	beq.w	80034c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
          }
          return;
 8002e3c:	e344      	b.n	80034c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d018      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02c      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
 8002e6a:	e027      	b.n	8002ebc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
 8002e7c:	e01e      	b.n	8002ebc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0210 	bic.w	r2, r2, #16
 8002e9a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8306 	beq.w	80034d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8088 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_DMA_IRQHandler+0xa08>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a79      	ldr	r2, [pc, #484]	; (80030d0 <HAL_DMA_IRQHandler+0xa0c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d045      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a77      	ldr	r2, [pc, #476]	; (80030d4 <HAL_DMA_IRQHandler+0xa10>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a76      	ldr	r2, [pc, #472]	; (80030d8 <HAL_DMA_IRQHandler+0xa14>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03b      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a74      	ldr	r2, [pc, #464]	; (80030dc <HAL_DMA_IRQHandler+0xa18>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <HAL_DMA_IRQHandler+0xa1c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d031      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <HAL_DMA_IRQHandler+0xa20>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a70      	ldr	r2, [pc, #448]	; (80030e8 <HAL_DMA_IRQHandler+0xa24>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d027      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <HAL_DMA_IRQHandler+0xa28>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <HAL_DMA_IRQHandler+0xa2c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01d      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <HAL_DMA_IRQHandler+0xa30>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_DMA_IRQHandler+0xa34>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a68      	ldr	r2, [pc, #416]	; (80030fc <HAL_DMA_IRQHandler+0xa38>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a67      	ldr	r2, [pc, #412]	; (8003100 <HAL_DMA_IRQHandler+0xa3c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_DMA_IRQHandler+0xa40>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x8b8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a64      	ldr	r2, [pc, #400]	; (8003108 <HAL_DMA_IRQHandler+0xa44>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d108      	bne.n	8002f8e <HAL_DMA_IRQHandler+0x8ca>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e007      	b.n	8002f9e <HAL_DMA_IRQHandler+0x8da>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d307      	bcc.n	8002fba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f2      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x8da>
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002fba:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fda:	e003      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8272 	beq.w	80034d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e26c      	b.n	80034d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_DMA_IRQHandler+0xa48>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d022      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a42      	ldr	r2, [pc, #264]	; (8003110 <HAL_DMA_IRQHandler+0xa4c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d01d      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a40      	ldr	r2, [pc, #256]	; (8003114 <HAL_DMA_IRQHandler+0xa50>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3f      	ldr	r2, [pc, #252]	; (8003118 <HAL_DMA_IRQHandler+0xa54>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3d      	ldr	r2, [pc, #244]	; (800311c <HAL_DMA_IRQHandler+0xa58>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <HAL_DMA_IRQHandler+0xa5c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_DMA_IRQHandler+0xa60>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_DMA_IRQHandler+0x984>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a39      	ldr	r2, [pc, #228]	; (8003128 <HAL_DMA_IRQHandler+0xa64>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_DMA_IRQHandler+0x988>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_DMA_IRQHandler+0x98a>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 823f 	beq.w	80034d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2204      	movs	r2, #4
 8003066:	409a      	lsls	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80cd 	beq.w	800320c <HAL_DMA_IRQHandler+0xb48>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80c7 	beq.w	800320c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2204      	movs	r2, #4
 8003088:	409a      	lsls	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d049      	beq.n	800312c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8210 	beq.w	80034cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b4:	e20a      	b.n	80034cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8206 	beq.w	80034cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c8:	e200      	b.n	80034cc <HAL_DMA_IRQHandler+0xe08>
 80030ca:	bf00      	nop
 80030cc:	40020010 	.word	0x40020010
 80030d0:	40020028 	.word	0x40020028
 80030d4:	40020040 	.word	0x40020040
 80030d8:	40020058 	.word	0x40020058
 80030dc:	40020070 	.word	0x40020070
 80030e0:	40020088 	.word	0x40020088
 80030e4:	400200a0 	.word	0x400200a0
 80030e8:	400200b8 	.word	0x400200b8
 80030ec:	40020410 	.word	0x40020410
 80030f0:	40020428 	.word	0x40020428
 80030f4:	40020440 	.word	0x40020440
 80030f8:	40020458 	.word	0x40020458
 80030fc:	40020470 	.word	0x40020470
 8003100:	40020488 	.word	0x40020488
 8003104:	400204a0 	.word	0x400204a0
 8003108:	400204b8 	.word	0x400204b8
 800310c:	58025408 	.word	0x58025408
 8003110:	5802541c 	.word	0x5802541c
 8003114:	58025430 	.word	0x58025430
 8003118:	58025444 	.word	0x58025444
 800311c:	58025458 	.word	0x58025458
 8003120:	5802546c 	.word	0x5802546c
 8003124:	58025480 	.word	0x58025480
 8003128:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d160      	bne.n	80031f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8c      	ldr	r2, [pc, #560]	; (800336c <HAL_DMA_IRQHandler+0xca8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a8a      	ldr	r2, [pc, #552]	; (8003370 <HAL_DMA_IRQHandler+0xcac>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a89      	ldr	r2, [pc, #548]	; (8003374 <HAL_DMA_IRQHandler+0xcb0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a87      	ldr	r2, [pc, #540]	; (8003378 <HAL_DMA_IRQHandler+0xcb4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a86      	ldr	r2, [pc, #536]	; (800337c <HAL_DMA_IRQHandler+0xcb8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a84      	ldr	r2, [pc, #528]	; (8003380 <HAL_DMA_IRQHandler+0xcbc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a83      	ldr	r2, [pc, #524]	; (8003384 <HAL_DMA_IRQHandler+0xcc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a81      	ldr	r2, [pc, #516]	; (8003388 <HAL_DMA_IRQHandler+0xcc4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_DMA_IRQHandler+0xcc8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <HAL_DMA_IRQHandler+0xccc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7d      	ldr	r2, [pc, #500]	; (8003394 <HAL_DMA_IRQHandler+0xcd0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7b      	ldr	r2, [pc, #492]	; (8003398 <HAL_DMA_IRQHandler+0xcd4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_DMA_IRQHandler+0xcd8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a78      	ldr	r2, [pc, #480]	; (80033a0 <HAL_DMA_IRQHandler+0xcdc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <HAL_DMA_IRQHandler+0xce0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xb12>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a75      	ldr	r2, [pc, #468]	; (80033a8 <HAL_DMA_IRQHandler+0xce4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_DMA_IRQHandler+0xb24>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <HAL_DMA_IRQHandler+0xb34>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0204 	bic.w	r2, r2, #4
 80031f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8165 	beq.w	80034cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800320a:	e15f      	b.n	80034cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2202      	movs	r2, #2
 8003216:	409a      	lsls	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80c5 	beq.w	80033ac <HAL_DMA_IRQHandler+0xce8>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80bf 	beq.w	80033ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2202      	movs	r2, #2
 8003238:	409a      	lsls	r2, r3
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d018      	beq.n	800327a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 813a 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003264:	e134      	b.n	80034d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8130 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003278:	e12a      	b.n	80034d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d168      	bne.n	8003356 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a38      	ldr	r2, [pc, #224]	; (800336c <HAL_DMA_IRQHandler+0xca8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d04a      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a37      	ldr	r2, [pc, #220]	; (8003370 <HAL_DMA_IRQHandler+0xcac>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d045      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a35      	ldr	r2, [pc, #212]	; (8003374 <HAL_DMA_IRQHandler+0xcb0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d040      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a34      	ldr	r2, [pc, #208]	; (8003378 <HAL_DMA_IRQHandler+0xcb4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d03b      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_DMA_IRQHandler+0xcb8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d036      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a31      	ldr	r2, [pc, #196]	; (8003380 <HAL_DMA_IRQHandler+0xcbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d031      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <HAL_DMA_IRQHandler+0xcc0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02c      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_DMA_IRQHandler+0xcc4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d027      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2c      	ldr	r2, [pc, #176]	; (800338c <HAL_DMA_IRQHandler+0xcc8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_DMA_IRQHandler+0xccc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01d      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a29      	ldr	r2, [pc, #164]	; (8003394 <HAL_DMA_IRQHandler+0xcd0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_DMA_IRQHandler+0xcd4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_DMA_IRQHandler+0xcd8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_DMA_IRQHandler+0xcdc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_DMA_IRQHandler+0xce0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_IRQHandler+0xc60>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_DMA_IRQHandler+0xce4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d108      	bne.n	8003336 <HAL_DMA_IRQHandler+0xc72>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0214 	bic.w	r2, r2, #20
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_DMA_IRQHandler+0xc82>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 020a 	bic.w	r2, r2, #10
 8003344:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80b8 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003368:	e0b2      	b.n	80034d0 <HAL_DMA_IRQHandler+0xe0c>
 800336a:	bf00      	nop
 800336c:	40020010 	.word	0x40020010
 8003370:	40020028 	.word	0x40020028
 8003374:	40020040 	.word	0x40020040
 8003378:	40020058 	.word	0x40020058
 800337c:	40020070 	.word	0x40020070
 8003380:	40020088 	.word	0x40020088
 8003384:	400200a0 	.word	0x400200a0
 8003388:	400200b8 	.word	0x400200b8
 800338c:	40020410 	.word	0x40020410
 8003390:	40020428 	.word	0x40020428
 8003394:	40020440 	.word	0x40020440
 8003398:	40020458 	.word	0x40020458
 800339c:	40020470 	.word	0x40020470
 80033a0:	40020488 	.word	0x40020488
 80033a4:	400204a0 	.word	0x400204a0
 80033a8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2208      	movs	r2, #8
 80033b6:	409a      	lsls	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8088 	beq.w	80034d2 <HAL_DMA_IRQHandler+0xe0e>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8082 	beq.w	80034d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_DMA_IRQHandler+0xe14>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04a      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <HAL_DMA_IRQHandler+0xe18>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d045      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3e      	ldr	r2, [pc, #248]	; (80034e0 <HAL_DMA_IRQHandler+0xe1c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d040      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <HAL_DMA_IRQHandler+0xe20>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03b      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <HAL_DMA_IRQHandler+0xe24>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d036      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a39      	ldr	r2, [pc, #228]	; (80034ec <HAL_DMA_IRQHandler+0xe28>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <HAL_DMA_IRQHandler+0xe2c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d02c      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a36      	ldr	r2, [pc, #216]	; (80034f4 <HAL_DMA_IRQHandler+0xe30>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d027      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a35      	ldr	r2, [pc, #212]	; (80034f8 <HAL_DMA_IRQHandler+0xe34>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a33      	ldr	r2, [pc, #204]	; (80034fc <HAL_DMA_IRQHandler+0xe38>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_DMA_IRQHandler+0xe3c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a30      	ldr	r2, [pc, #192]	; (8003504 <HAL_DMA_IRQHandler+0xe40>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2f      	ldr	r2, [pc, #188]	; (8003508 <HAL_DMA_IRQHandler+0xe44>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2d      	ldr	r2, [pc, #180]	; (800350c <HAL_DMA_IRQHandler+0xe48>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <HAL_DMA_IRQHandler+0xe4c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_DMA_IRQHandler+0xdaa>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_DMA_IRQHandler+0xe50>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <HAL_DMA_IRQHandler+0xdbc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 021c 	bic.w	r2, r2, #28
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e007      	b.n	8003490 <HAL_DMA_IRQHandler+0xdcc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 020e 	bic.w	r2, r2, #14
 800348e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	e004      	b.n	80034d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8

08003518 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a84      	ldr	r2, [pc, #528]	; (8003748 <DMA_SetConfig+0x230>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d072      	beq.n	8003622 <DMA_SetConfig+0x10a>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a82      	ldr	r2, [pc, #520]	; (800374c <DMA_SetConfig+0x234>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d06d      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a81      	ldr	r2, [pc, #516]	; (8003750 <DMA_SetConfig+0x238>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d068      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <DMA_SetConfig+0x23c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d063      	beq.n	8003622 <DMA_SetConfig+0x10a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7e      	ldr	r2, [pc, #504]	; (8003758 <DMA_SetConfig+0x240>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d05e      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7c      	ldr	r2, [pc, #496]	; (800375c <DMA_SetConfig+0x244>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d059      	beq.n	8003622 <DMA_SetConfig+0x10a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <DMA_SetConfig+0x248>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d054      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a79      	ldr	r2, [pc, #484]	; (8003764 <DMA_SetConfig+0x24c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04f      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a78      	ldr	r2, [pc, #480]	; (8003768 <DMA_SetConfig+0x250>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d04a      	beq.n	8003622 <DMA_SetConfig+0x10a>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a76      	ldr	r2, [pc, #472]	; (800376c <DMA_SetConfig+0x254>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d045      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <DMA_SetConfig+0x258>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a73      	ldr	r2, [pc, #460]	; (8003774 <DMA_SetConfig+0x25c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d03b      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a72      	ldr	r2, [pc, #456]	; (8003778 <DMA_SetConfig+0x260>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d036      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a70      	ldr	r2, [pc, #448]	; (800377c <DMA_SetConfig+0x264>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d031      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6f      	ldr	r2, [pc, #444]	; (8003780 <DMA_SetConfig+0x268>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02c      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <DMA_SetConfig+0x26c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d027      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6c      	ldr	r2, [pc, #432]	; (8003788 <DMA_SetConfig+0x270>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d022      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <DMA_SetConfig+0x274>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01d      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a69      	ldr	r2, [pc, #420]	; (8003790 <DMA_SetConfig+0x278>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <DMA_SetConfig+0x27c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <DMA_SetConfig+0x10a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a66      	ldr	r2, [pc, #408]	; (8003798 <DMA_SetConfig+0x280>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a64      	ldr	r2, [pc, #400]	; (800379c <DMA_SetConfig+0x284>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <DMA_SetConfig+0x10a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <DMA_SetConfig+0x288>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <DMA_SetConfig+0x10a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <DMA_SetConfig+0x28c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <DMA_SetConfig+0x10e>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <DMA_SetConfig+0x110>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003634:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003646:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3e      	ldr	r2, [pc, #248]	; (8003748 <DMA_SetConfig+0x230>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3d      	ldr	r2, [pc, #244]	; (800374c <DMA_SetConfig+0x234>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <DMA_SetConfig+0x238>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <DMA_SetConfig+0x23c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a38      	ldr	r2, [pc, #224]	; (8003758 <DMA_SetConfig+0x240>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a37      	ldr	r2, [pc, #220]	; (800375c <DMA_SetConfig+0x244>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <DMA_SetConfig+0x248>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <DMA_SetConfig+0x24c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a32      	ldr	r2, [pc, #200]	; (8003768 <DMA_SetConfig+0x250>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a31      	ldr	r2, [pc, #196]	; (800376c <DMA_SetConfig+0x254>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <DMA_SetConfig+0x258>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <DMA_SetConfig+0x25c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <DMA_SetConfig+0x260>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <DMA_SetConfig+0x264>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <DMA_SetConfig+0x268>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <DMA_SetConfig+0x1d0>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a28      	ldr	r2, [pc, #160]	; (8003784 <DMA_SetConfig+0x26c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <DMA_SetConfig+0x1d4>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <DMA_SetConfig+0x1d6>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d05a      	beq.n	80037a8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	223f      	movs	r2, #63	; 0x3f
 80036fc:	409a      	lsls	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003710:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d108      	bne.n	8003734 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003732:	e087      	b.n	8003844 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
}
 8003744:	e07e      	b.n	8003844 <DMA_SetConfig+0x32c>
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	58025408 	.word	0x58025408
 800378c:	5802541c 	.word	0x5802541c
 8003790:	58025430 	.word	0x58025430
 8003794:	58025444 	.word	0x58025444
 8003798:	58025458 	.word	0x58025458
 800379c:	5802546c 	.word	0x5802546c
 80037a0:	58025480 	.word	0x58025480
 80037a4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <DMA_SetConfig+0x338>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <DMA_SetConfig+0x33c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01d      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <DMA_SetConfig+0x340>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a24      	ldr	r2, [pc, #144]	; (800385c <DMA_SetConfig+0x344>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <DMA_SetConfig+0x348>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <DMA_SetConfig+0x34c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <DMA_SetConfig+0x350>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <DMA_SetConfig+0x2e0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <DMA_SetConfig+0x354>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <DMA_SetConfig+0x2e4>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <DMA_SetConfig+0x2e6>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d020      	beq.n	8003844 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d108      	bne.n	8003834 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	60da      	str	r2, [r3, #12]
}
 8003832:	e007      	b.n	8003844 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	58025408 	.word	0x58025408
 8003854:	5802541c 	.word	0x5802541c
 8003858:	58025430 	.word	0x58025430
 800385c:	58025444 	.word	0x58025444
 8003860:	58025458 	.word	0x58025458
 8003864:	5802546c 	.word	0x5802546c
 8003868:	58025480 	.word	0x58025480
 800386c:	58025494 	.word	0x58025494

08003870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a42      	ldr	r2, [pc, #264]	; (8003988 <DMA_CalcBaseAndBitshift+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04a      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a41      	ldr	r2, [pc, #260]	; (800398c <DMA_CalcBaseAndBitshift+0x11c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d045      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3f      	ldr	r2, [pc, #252]	; (8003990 <DMA_CalcBaseAndBitshift+0x120>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d040      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a3e      	ldr	r2, [pc, #248]	; (8003994 <DMA_CalcBaseAndBitshift+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d03b      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <DMA_CalcBaseAndBitshift+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d036      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <DMA_CalcBaseAndBitshift+0x12c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d031      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a39      	ldr	r2, [pc, #228]	; (80039a0 <DMA_CalcBaseAndBitshift+0x130>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02c      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <DMA_CalcBaseAndBitshift+0x134>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d027      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a36      	ldr	r2, [pc, #216]	; (80039a8 <DMA_CalcBaseAndBitshift+0x138>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a35      	ldr	r2, [pc, #212]	; (80039ac <DMA_CalcBaseAndBitshift+0x13c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d01d      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a33      	ldr	r2, [pc, #204]	; (80039b0 <DMA_CalcBaseAndBitshift+0x140>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a32      	ldr	r2, [pc, #200]	; (80039b4 <DMA_CalcBaseAndBitshift+0x144>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a30      	ldr	r2, [pc, #192]	; (80039b8 <DMA_CalcBaseAndBitshift+0x148>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2f      	ldr	r2, [pc, #188]	; (80039bc <DMA_CalcBaseAndBitshift+0x14c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <DMA_CalcBaseAndBitshift+0x150>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <DMA_CalcBaseAndBitshift+0xa8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <DMA_CalcBaseAndBitshift+0x154>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <DMA_CalcBaseAndBitshift+0xac>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <DMA_CalcBaseAndBitshift+0xae>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d024      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3b10      	subs	r3, #16
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <DMA_CalcBaseAndBitshift+0x158>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	4a24      	ldr	r2, [pc, #144]	; (80039cc <DMA_CalcBaseAndBitshift+0x15c>)
 800393c:	5cd3      	ldrb	r3, [r2, r3]
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d908      	bls.n	800395c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <DMA_CalcBaseAndBitshift+0x160>)
 8003952:	4013      	ands	r3, r2
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	659a      	str	r2, [r3, #88]	; 0x58
 800395a:	e00d      	b.n	8003978 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <DMA_CalcBaseAndBitshift+0x160>)
 8003964:	4013      	ands	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
 800396a:	e005      	b.n	8003978 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	08007338 	.word	0x08007338
 80039d0:	fffffc00 	.word	0xfffffc00

080039d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d120      	bne.n	8003a2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d858      	bhi.n	8003aa2 <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <DMA_CheckFifoParam+0x24>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003aa3 	.word	0x08003aa3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d048      	beq.n	8003aa6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a18:	e045      	b.n	8003aa6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a22:	d142      	bne.n	8003aaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a28:	e03f      	b.n	8003aaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d123      	bne.n	8003a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d838      	bhi.n	8003aae <DMA_CheckFifoParam+0xda>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <DMA_CheckFifoParam+0x70>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a5b 	.word	0x08003a5b
 8003a4c:	08003a55 	.word	0x08003a55
 8003a50:	08003a6d 	.word	0x08003a6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
        break;
 8003a58:	e030      	b.n	8003abc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d025      	beq.n	8003ab2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a6a:	e022      	b.n	8003ab2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a74:	d11f      	bne.n	8003ab6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a7a:	e01c      	b.n	8003ab6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <DMA_CheckFifoParam+0xb6>
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d003      	beq.n	8003a90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a88:	e018      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a8e:	e015      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8003aa0:	e00b      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e00a      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e008      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e006      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        break;
 8003aae:	bf00      	nop
 8003ab0:	e004      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e002      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <DMA_CheckFifoParam+0xe8>
    break;
 8003aba:	bf00      	nop
    }
  }

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a36      	ldr	r2, [pc, #216]	; (8003bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01d      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a32      	ldr	r2, [pc, #200]	; (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01a      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3b08      	subs	r3, #8
 8003b3c:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b68:	e024      	b.n	8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3b10      	subs	r3, #16
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d806      	bhi.n	8003b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d902      	bls.n	8003b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ba4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2201      	movs	r2, #1
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	5802541c 	.word	0x5802541c
 8003bc8:	58025430 	.word	0x58025430
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025458 	.word	0x58025458
 8003bd4:	5802546c 	.word	0x5802546c
 8003bd8:	58025480 	.word	0x58025480
 8003bdc:	58025494 	.word	0x58025494
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	16009600 	.word	0x16009600
 8003be8:	58025880 	.word	0x58025880
 8003bec:	aaaaaaab 	.word	0xaaaaaaab
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	4002040f 	.word	0x4002040f
 8003bf8:	10008200 	.word	0x10008200
 8003bfc:	40020880 	.word	0x40020880

08003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04a      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d847      	bhi.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c88:	671a      	str	r2, [r3, #112]	; 0x70
 8003c8a:	e009      	b.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	58025408 	.word	0x58025408
 8003cbc:	5802541c 	.word	0x5802541c
 8003cc0:	58025430 	.word	0x58025430
 8003cc4:	58025444 	.word	0x58025444
 8003cc8:	58025458 	.word	0x58025458
 8003ccc:	5802546c 	.word	0x5802546c
 8003cd0:	58025480 	.word	0x58025480
 8003cd4:	58025494 	.word	0x58025494
 8003cd8:	1600963f 	.word	0x1600963f
 8003cdc:	58025940 	.word	0x58025940
 8003ce0:	1000823f 	.word	0x1000823f
 8003ce4:	40020940 	.word	0x40020940

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cf6:	4b89      	ldr	r3, [pc, #548]	; (8003f1c <HAL_GPIO_Init+0x234>)
 8003cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cfa:	e194      	b.n	8004026 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8186 	beq.w	8004020 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d00b      	beq.n	8003d34 <HAL_GPIO_Init+0x4c>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d28:	2b11      	cmp	r3, #17
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b12      	cmp	r3, #18
 8003d32:	d130      	bne.n	8003d96 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0201 	and.w	r2, r3, #1
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0xee>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b12      	cmp	r3, #18
 8003dd4:	d123      	bne.n	8003e1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0203 	and.w	r2, r3, #3
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80e0 	beq.w	8004020 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_GPIO_Init+0x238>)
 8003e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e66:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <HAL_GPIO_Init+0x238>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e70:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <HAL_GPIO_Init+0x238>)
 8003e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7e:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <HAL_GPIO_Init+0x23c>)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	3302      	adds	r3, #2
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <HAL_GPIO_Init+0x240>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d052      	beq.n	8003f50 <HAL_GPIO_Init+0x268>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_GPIO_Init+0x244>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <HAL_GPIO_Init+0x22e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_GPIO_Init+0x248>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d02b      	beq.n	8003f12 <HAL_GPIO_Init+0x22a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_GPIO_Init+0x24c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d025      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_GPIO_Init+0x250>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01f      	beq.n	8003f0a <HAL_GPIO_Init+0x222>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_GPIO_Init+0x254>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d019      	beq.n	8003f06 <HAL_GPIO_Init+0x21e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <HAL_GPIO_Init+0x258>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_GPIO_Init+0x21a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_GPIO_Init+0x25c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00d      	beq.n	8003efe <HAL_GPIO_Init+0x216>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_GPIO_Init+0x260>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <HAL_GPIO_Init+0x212>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <HAL_GPIO_Init+0x264>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_GPIO_Init+0x20e>
 8003ef2:	2309      	movs	r3, #9
 8003ef4:	e02d      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	e02b      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003efa:	2308      	movs	r3, #8
 8003efc:	e029      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003efe:	2307      	movs	r3, #7
 8003f00:	e027      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f02:	2306      	movs	r3, #6
 8003f04:	e025      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f06:	2305      	movs	r3, #5
 8003f08:	e023      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	e021      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e01f      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e01d      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e01b      	b.n	8003f52 <HAL_GPIO_Init+0x26a>
 8003f1a:	bf00      	nop
 8003f1c:	58000080 	.word	0x58000080
 8003f20:	58024400 	.word	0x58024400
 8003f24:	58000400 	.word	0x58000400
 8003f28:	58020000 	.word	0x58020000
 8003f2c:	58020400 	.word	0x58020400
 8003f30:	58020800 	.word	0x58020800
 8003f34:	58020c00 	.word	0x58020c00
 8003f38:	58021000 	.word	0x58021000
 8003f3c:	58021400 	.word	0x58021400
 8003f40:	58021800 	.word	0x58021800
 8003f44:	58021c00 	.word	0x58021c00
 8003f48:	58022000 	.word	0x58022000
 8003f4c:	58022400 	.word	0x58022400
 8003f50:	2300      	movs	r3, #0
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	f002 0203 	and.w	r2, r2, #3
 8003f58:	0092      	lsls	r2, r2, #2
 8003f5a:	4093      	lsls	r3, r2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f62:	4938      	ldr	r1, [pc, #224]	; (8004044 <HAL_GPIO_Init+0x35c>)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	3302      	adds	r3, #2
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3301      	adds	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f ae63 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8004036:	bf00      	nop
 8004038:	3724      	adds	r7, #36	; 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	58000400 	.word	0x58000400

08004048 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d00a      	beq.n	8004072 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_PWREx_ConfigSupply+0x70>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d001      	beq.n	800406e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e01f      	b.n	80040ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e01d      	b.n	80040ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 0207 	bic.w	r2, r3, #7
 800407a:	490f      	ldr	r1, [pc, #60]	; (80040b8 <HAL_PWREx_ConfigSupply+0x70>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004082:	f7fc f9af 	bl	80003e4 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004088:	e009      	b.n	800409e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800408a:	f7fc f9ab 	bl	80003e4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004098:	d901      	bls.n	800409e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e007      	b.n	80040ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_PWREx_ConfigSupply+0x70>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	d1ee      	bne.n	800408a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	58024800 	.word	0x58024800

080040bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	; 0x30
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e3c4      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040dc:	4ba2      	ldr	r3, [pc, #648]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040e6:	4ba0      	ldr	r3, [pc, #640]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d007      	beq.n	8004102 <HAL_RCC_OscConfig+0x46>
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b18      	cmp	r3, #24
 80040f6:	d110      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d10b      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004102:	4b99      	ldr	r3, [pc, #612]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d06c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x12c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d168      	bne.n	80041e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e39e      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x76>
 8004124:	4b90      	ldr	r3, [pc, #576]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a8f      	ldr	r2, [pc, #572]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e02e      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a8a      	ldr	r2, [pc, #552]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b88      	ldr	r3, [pc, #544]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a87      	ldr	r2, [pc, #540]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e01d      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0xbc>
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a81      	ldr	r2, [pc, #516]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e00b      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004178:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a7a      	ldr	r2, [pc, #488]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b78      	ldr	r3, [pc, #480]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a77      	ldr	r2, [pc, #476]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fc f924 	bl	80003e4 <HAL_GetTick>
 800419c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a0:	f7fc f920 	bl	80003e4 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e352      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b2:	4b6d      	ldr	r3, [pc, #436]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe4>
 80041be:	e014      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fc f910 	bl	80003e4 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fc f90c 	bl	80003e4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e33e      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041da:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x10c>
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8092 	beq.w	800431c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004200:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004202:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_RCC_OscConfig+0x162>
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	2b18      	cmp	r3, #24
 8004212:	d12d      	bne.n	8004270 <HAL_RCC_OscConfig+0x1b4>
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d128      	bne.n	8004270 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421e:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x17a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e310      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	f7fc f8e1 	bl	80003fc <HAL_GetREVID>
 800423a:	4602      	mov	r2, r0
 800423c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004240:	429a      	cmp	r2, r3
 8004242:	d80a      	bhi.n	800425a <HAL_RCC_OscConfig+0x19e>
 8004244:	4b48      	ldr	r3, [pc, #288]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	4945      	ldr	r1, [pc, #276]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	e060      	b.n	800431c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b43      	ldr	r3, [pc, #268]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	493f      	ldr	r1, [pc, #252]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426e:	e055      	b.n	800431c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d038      	beq.n	80042ea <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 0219 	bic.w	r2, r3, #25
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4938      	ldr	r1, [pc, #224]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fc f8ab 	bl	80003e4 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004292:	f7fc f8a7 	bl	80003e4 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e2d9      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a4:	4b30      	ldr	r3, [pc, #192]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	f7fc f8a4 	bl	80003fc <HAL_GetREVID>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d80a      	bhi.n	80042d4 <HAL_RCC_OscConfig+0x218>
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	031b      	lsls	r3, r3, #12
 80042cc:	4926      	ldr	r1, [pc, #152]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
 80042d2:	e023      	b.n	800431c <HAL_RCC_OscConfig+0x260>
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	4921      	ldr	r1, [pc, #132]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	e018      	b.n	800431c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fc f875 	bl	80003e4 <HAL_GetTick>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fc f871 	bl	80003e4 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e2a3      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8091 	beq.w	800444c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d007      	beq.n	8004350 <HAL_RCC_OscConfig+0x294>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b18      	cmp	r3, #24
 8004344:	d12f      	bne.n	80043a6 <HAL_RCC_OscConfig+0x2ea>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d12a      	bne.n	80043a6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <HAL_RCC_OscConfig+0x2b0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d003      	beq.n	800436c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e277      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
 8004368:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800436c:	f7fc f846 	bl	80003fc <HAL_GetREVID>
 8004370:	4602      	mov	r2, r0
 8004372:	f241 0303 	movw	r3, #4099	; 0x1003
 8004376:	429a      	cmp	r2, r3
 8004378:	d80a      	bhi.n	8004390 <HAL_RCC_OscConfig+0x2d4>
 800437a:	4ba2      	ldr	r3, [pc, #648]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	069b      	lsls	r3, r3, #26
 8004388:	499e      	ldr	r1, [pc, #632]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800438e:	e05d      	b.n	800444c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004390:	4b9c      	ldr	r3, [pc, #624]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	4999      	ldr	r1, [pc, #612]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a4:	e052      	b.n	800444c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d035      	beq.n	800441a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043ae:	4b95      	ldr	r3, [pc, #596]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a94      	ldr	r2, [pc, #592]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fc f813 	bl	80003e4 <HAL_GetTick>
 80043be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043c2:	f7fc f80f 	bl	80003e4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e241      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043d4:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043e0:	f7fc f80c 	bl	80003fc <HAL_GetREVID>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d80a      	bhi.n	8004404 <HAL_RCC_OscConfig+0x348>
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	069b      	lsls	r3, r3, #26
 80043fc:	4981      	ldr	r1, [pc, #516]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
 8004402:	e023      	b.n	800444c <HAL_RCC_OscConfig+0x390>
 8004404:	4b7f      	ldr	r3, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	497c      	ldr	r1, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004414:	4313      	orrs	r3, r2
 8004416:	60cb      	str	r3, [r1, #12]
 8004418:	e018      	b.n	800444c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800441a:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a79      	ldr	r2, [pc, #484]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fb ffdd 	bl	80003e4 <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800442e:	f7fb ffd9 	bl	80003e4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e20b      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004440:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d036      	beq.n	80044c6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004464:	4a67      	ldr	r2, [pc, #412]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fb ffba 	bl	80003e4 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004474:	f7fb ffb6 	bl	80003e4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1e8      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004486:	4b5f      	ldr	r3, [pc, #380]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x3b8>
 8004492:	e018      	b.n	80044c6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004494:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004498:	4a5a      	ldr	r2, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fb ffa0 	bl	80003e4 <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fb ff9c 	bl	80003e4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1ce      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ba:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d036      	beq.n	8004540 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d019      	beq.n	800450e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044da:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a49      	ldr	r2, [pc, #292]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80044e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044e6:	f7fb ff7d 	bl	80003e4 <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80044ee:	f7fb ff79 	bl	80003e4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1ab      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x432>
 800450c:	e018      	b.n	8004540 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3c      	ldr	r2, [pc, #240]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004518:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800451a:	f7fb ff63 	bl	80003e4 <HAL_GetTick>
 800451e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004522:	f7fb ff5f 	bl	80003e4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e191      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8086 	beq.w	800465a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <HAL_RCC_OscConfig+0x54c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <HAL_RCC_OscConfig+0x54c>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800455a:	f7fb ff43 	bl	80003e4 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fb ff3f 	bl	80003e4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	; 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e171      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_OscConfig+0x54c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x4da>
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	e02d      	b.n	80045f2 <HAL_RCC_OscConfig+0x536>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4fc>
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	e01c      	b.n	80045f2 <HAL_RCC_OscConfig+0x536>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10c      	bne.n	80045da <HAL_RCC_OscConfig+0x51e>
 80045c0:	4b10      	ldr	r3, [pc, #64]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	e00b      	b.n	80045f2 <HAL_RCC_OscConfig+0x536>
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x548>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01a      	beq.n	8004630 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fb fef3 	bl	80003e4 <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004600:	e00f      	b.n	8004622 <HAL_RCC_OscConfig+0x566>
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fb feea 	bl	80003e4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e11a      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004622:	4b8f      	ldr	r3, [pc, #572]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0ee      	beq.n	800460c <HAL_RCC_OscConfig+0x550>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fb fed8 	bl	80003e4 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fb fed4 	bl	80003e4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e104      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800464e:	4b84      	ldr	r3, [pc, #528]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1ee      	bne.n	8004638 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80f9 	beq.w	8004856 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004664:	4b7e      	ldr	r3, [pc, #504]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466c:	2b18      	cmp	r3, #24
 800466e:	f000 80b4 	beq.w	80047da <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b02      	cmp	r3, #2
 8004678:	f040 8095 	bne.w	80047a6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b78      	ldr	r3, [pc, #480]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a77      	ldr	r2, [pc, #476]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fb feac 	bl	80003e4 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004690:	f7fb fea8 	bl	80003e4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0da      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046a2:	4b6f      	ldr	r3, [pc, #444]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ae:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80046b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b2:	4b6c      	ldr	r3, [pc, #432]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	430a      	orrs	r2, r1
 80046c2:	4967      	ldr	r1, [pc, #412]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	628b      	str	r3, [r1, #40]	; 0x28
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	3b01      	subs	r3, #1
 80046ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	3b01      	subs	r3, #1
 80046d8:	025b      	lsls	r3, r3, #9
 80046da:	b29b      	uxth	r3, r3
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	3b01      	subs	r3, #1
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	3b01      	subs	r3, #1
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046f8:	4959      	ldr	r1, [pc, #356]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80046fe:	4b58      	ldr	r3, [pc, #352]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a57      	ldr	r2, [pc, #348]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800470a:	4b55      	ldr	r3, [pc, #340]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470e:	4b56      	ldr	r3, [pc, #344]	; (8004868 <HAL_RCC_OscConfig+0x7ac>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004716:	00d2      	lsls	r2, r2, #3
 8004718:	4951      	ldr	r1, [pc, #324]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800471e:	4b50      	ldr	r3, [pc, #320]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f023 020c 	bic.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	494d      	ldr	r1, [pc, #308]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004730:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	f023 0202 	bic.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	4948      	ldr	r1, [pc, #288]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4a46      	ldr	r2, [pc, #280]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474e:	4b44      	ldr	r3, [pc, #272]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a43      	ldr	r2, [pc, #268]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800475a:	4b41      	ldr	r3, [pc, #260]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 8004778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fb fe31 	bl	80003e4 <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fb fe2d 	bl	80003e4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e05f      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x6ca>
 80047a4:	e057      	b.n	8004856 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80047ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fb fe17 	bl	80003e4 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fb fe13 	bl	80003e4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e045      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x6fe>
 80047d8:	e03d      	b.n	8004856 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <HAL_RCC_OscConfig+0x7a4>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d031      	beq.n	8004852 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d12a      	bne.n	8004852 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d122      	bne.n	8004852 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d11a      	bne.n	8004852 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0a5b      	lsrs	r3, r3, #9
 8004820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d111      	bne.n	8004852 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d108      	bne.n	8004852 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	0e1b      	lsrs	r3, r3, #24
 8004844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3730      	adds	r7, #48	; 0x30
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	58024400 	.word	0x58024400
 8004864:	fffffc0c 	.word	0xfffffc0c
 8004868:	ffff0007 	.word	0xffff0007

0800486c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e19c      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b8a      	ldr	r3, [pc, #552]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d910      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b87      	ldr	r3, [pc, #540]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 020f 	bic.w	r2, r3, #15
 8004896:	4985      	ldr	r1, [pc, #532]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b83      	ldr	r3, [pc, #524]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e184      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d010      	beq.n	80048de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d908      	bls.n	80048de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048cc:	4b78      	ldr	r3, [pc, #480]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	4975      	ldr	r1, [pc, #468]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	4b70      	ldr	r3, [pc, #448]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d908      	bls.n	800490c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048fa:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	496a      	ldr	r1, [pc, #424]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004924:	429a      	cmp	r2, r3
 8004926:	d908      	bls.n	800493a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004928:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	495e      	ldr	r1, [pc, #376]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004936:	4313      	orrs	r3, r2
 8004938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004952:	429a      	cmp	r2, r3
 8004954:	d908      	bls.n	8004968 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004956:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4953      	ldr	r1, [pc, #332]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004964:	4313      	orrs	r3, r2
 8004966:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	4b4d      	ldr	r3, [pc, #308]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	429a      	cmp	r2, r3
 8004982:	d908      	bls.n	8004996 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f023 020f 	bic.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4947      	ldr	r1, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004992:	4313      	orrs	r3, r2
 8004994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d055      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049a2:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4940      	ldr	r1, [pc, #256]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049bc:	4b3c      	ldr	r3, [pc, #240]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d121      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0f6      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d115      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0ea      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ec:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0de      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fc:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0d6      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f023 0207 	bic.w	r2, r3, #7
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4925      	ldr	r1, [pc, #148]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fb fce1 	bl	80003e4 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a26:	f7fb fcdd 	bl	80003e4 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0be      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d1eb      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d010      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d208      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f023 020f 	bic.w	r2, r3, #15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d214      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 020f 	bic.w	r2, r3, #15
 8004a92:	4906      	ldr	r1, [pc, #24]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <HAL_RCC_ClockConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e086      	b.n	8004bba <HAL_RCC_ClockConfig+0x34e>
 8004aac:	52002000 	.word	0x52002000
 8004ab0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d208      	bcs.n	8004ae2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ad0:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d208      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004afe:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	492e      	ldr	r1, [pc, #184]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d208      	bcs.n	8004b3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4922      	ldr	r1, [pc, #136]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d208      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4917      	ldr	r1, [pc, #92]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b6c:	f000 f834 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004b70:	4601      	mov	r1, r0
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <HAL_RCC_ClockConfig+0x35c>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	fa21 f303 	lsr.w	r3, r1, r3
 8004b88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_RCC_ClockConfig+0x358>)
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_RCC_ClockConfig+0x35c>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x360>)
 8004ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x364>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_RCC_ClockConfig+0x368>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fbce 	bl	8000350 <HAL_InitTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	08007340 	.word	0x08007340
 8004bcc:	2400000c 	.word	0x2400000c
 8004bd0:	24000008 	.word	0x24000008
 8004bd4:	24000000 	.word	0x24000000

08004bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bde:	4baf      	ldr	r3, [pc, #700]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be6:	2b18      	cmp	r3, #24
 8004be8:	f200 814e 	bhi.w	8004e88 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c59 	.word	0x08004c59
 8004bf8:	08004e89 	.word	0x08004e89
 8004bfc:	08004e89 	.word	0x08004e89
 8004c00:	08004e89 	.word	0x08004e89
 8004c04:	08004e89 	.word	0x08004e89
 8004c08:	08004e89 	.word	0x08004e89
 8004c0c:	08004e89 	.word	0x08004e89
 8004c10:	08004e89 	.word	0x08004e89
 8004c14:	08004c7f 	.word	0x08004c7f
 8004c18:	08004e89 	.word	0x08004e89
 8004c1c:	08004e89 	.word	0x08004e89
 8004c20:	08004e89 	.word	0x08004e89
 8004c24:	08004e89 	.word	0x08004e89
 8004c28:	08004e89 	.word	0x08004e89
 8004c2c:	08004e89 	.word	0x08004e89
 8004c30:	08004e89 	.word	0x08004e89
 8004c34:	08004c85 	.word	0x08004c85
 8004c38:	08004e89 	.word	0x08004e89
 8004c3c:	08004e89 	.word	0x08004e89
 8004c40:	08004e89 	.word	0x08004e89
 8004c44:	08004e89 	.word	0x08004e89
 8004c48:	08004e89 	.word	0x08004e89
 8004c4c:	08004e89 	.word	0x08004e89
 8004c50:	08004e89 	.word	0x08004e89
 8004c54:	08004c8b 	.word	0x08004c8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c58:	4b90      	ldr	r3, [pc, #576]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c64:	4b8d      	ldr	r3, [pc, #564]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	4a8c      	ldr	r2, [pc, #560]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c76:	e10a      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c78:	4b89      	ldr	r3, [pc, #548]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c7a:	61bb      	str	r3, [r7, #24]
    break;
 8004c7c:	e107      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c7e:	4b89      	ldr	r3, [pc, #548]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c80:	61bb      	str	r3, [r7, #24]
    break;
 8004c82:	e104      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004c84:	4b88      	ldr	r3, [pc, #544]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004c86:	61bb      	str	r3, [r7, #24]
    break;
 8004c88:	e101      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c8a:	4b84      	ldr	r3, [pc, #528]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c94:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	08db      	lsrs	r3, r3, #3
 8004cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80da 	beq.w	8004e82 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d05a      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d302      	bcc.n	8004cde <HAL_RCC_GetSysClockFreq+0x106>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d078      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x1f6>
 8004cdc:	e099      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02d      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cea:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	4a6a      	ldr	r2, [pc, #424]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d14:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d28:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004eb0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d6c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d88:	e065      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004eb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004db0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dcc:	e043      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004eb8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004df4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e10:	e021      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004eb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e38:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e54:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	0a5b      	lsrs	r3, r3, #9
 8004e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e60:	3301      	adds	r3, #1
 8004e62:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	ee17 3a90 	vmov	r3, s15
 8004e7e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e80:	e005      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
    break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004e8a:	61bb      	str	r3, [r7, #24]
    break;
 8004e8c:	bf00      	nop
  }

  return sysclockfreq;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3724      	adds	r7, #36	; 0x24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	03d09000 	.word	0x03d09000
 8004ea4:	003d0900 	.word	0x003d0900
 8004ea8:	017d7840 	.word	0x017d7840
 8004eac:	46000000 	.word	0x46000000
 8004eb0:	4c742400 	.word	0x4c742400
 8004eb4:	4a742400 	.word	0x4a742400
 8004eb8:	4bbebc20 	.word	0x4bbebc20

08004ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ec2:	f7ff fe89 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ed4:	5cd3      	ldrb	r3, [r2, r3]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	fa21 f303 	lsr.w	r3, r1, r3
 8004ede:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ef8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004efa:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f00:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	08007340 	.word	0x08007340
 8004f14:	2400000c 	.word	0x2400000c
 8004f18:	24000008 	.word	0x24000008

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03d      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f40:	d013      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f46:	d802      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f4c:	e01f      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f52:	d013      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f58:	d01c      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f5a:	e018      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5c:	4baf      	ldr	r3, [pc, #700]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4aae      	ldr	r2, [pc, #696]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f68:	e015      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fd23 	bl	80069bc <RCCEx_PLL2_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 fdcc 	bl	8006b20 <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
      break;
 8004f92:	e000      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f9c:	4b9f      	ldr	r3, [pc, #636]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa8:	499c      	ldr	r1, [pc, #624]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	650b      	str	r3, [r1, #80]	; 0x50
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d03d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d826      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe5 	.word	0x08004fe5
 8004fd4:	08004ff3 	.word	0x08004ff3
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	4b8d      	ldr	r3, [pc, #564]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	4a8c      	ldr	r2, [pc, #560]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ff0:	e015      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 fcdf 	bl	80069bc <RCCEx_PLL2_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005002:	e00c      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fd88 	bl	8006b20 <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
      break;
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800501c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005024:	4b7d      	ldr	r3, [pc, #500]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	f023 0207 	bic.w	r2, r3, #7
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	497a      	ldr	r1, [pc, #488]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005032:	4313      	orrs	r3, r2
 8005034:	650b      	str	r3, [r1, #80]	; 0x50
 8005036:	e001      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005044:	2b00      	cmp	r3, #0
 8005046:	d03e      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d01c      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d804      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d00d      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800505c:	e01e      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d01f      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d01e      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005068:	e018      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506a:	4b6c      	ldr	r3, [pc, #432]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	4a6b      	ldr	r2, [pc, #428]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005076:	e017      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fc9c 	bl	80069bc <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005088:	e00e      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fd45 	bl	8006b20 <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800509a:	e005      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	e002      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80050a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050ae:	4b5b      	ldr	r3, [pc, #364]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	4958      	ldr	r1, [pc, #352]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	650b      	str	r3, [r1, #80]	; 0x50
 80050c0:	e001      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d044      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050dc:	d01f      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80050de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e2:	d805      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d00e      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80050ee:	e01f      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80050f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050f4:	d01f      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80050f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050fa:	d01e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050fc:	e018      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fe:	4b47      	ldr	r3, [pc, #284]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	4a46      	ldr	r2, [pc, #280]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800510a:	e017      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f001 fc52 	bl	80069bc <RCCEx_PLL2_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800511c:	e00e      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3324      	adds	r3, #36	; 0x24
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fcfb 	bl	8006b20 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800512e:	e005      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e002      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800513a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005142:	4b36      	ldr	r3, [pc, #216]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005150:	4932      	ldr	r1, [pc, #200]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005152:	4313      	orrs	r3, r2
 8005154:	658b      	str	r3, [r1, #88]	; 0x58
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005164:	2b00      	cmp	r3, #0
 8005166:	d044      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800516e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005172:	d01f      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005178:	d805      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800517e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005182:	d00e      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005184:	e01f      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800518a:	d01f      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800518c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005190:	d01e      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005192:	e018      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4a20      	ldr	r2, [pc, #128]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051a0:	e017      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fc07 	bl	80069bc <RCCEx_PLL2_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051b2:	e00e      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 fcb0 	bl	8006b20 <RCCEx_PLL3_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c4:	e005      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051e6:	490d      	ldr	r1, [pc, #52]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	658b      	str	r3, [r1, #88]	; 0x58
 80051ec:	e001      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d035      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	2b10      	cmp	r3, #16
 8005204:	d00c      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005206:	2b10      	cmp	r3, #16
 8005208:	d802      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01b      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800520e:	e017      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d00c      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d018      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005218:	e012      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800521a:	bf00      	nop
 800521c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	4baf      	ldr	r3, [pc, #700]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4aae      	ldr	r2, [pc, #696]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800522c:	e00e      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f001 fbc1 	bl	80069bc <RCCEx_PLL2_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800523e:	e005      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
      break;
 8005244:	e002      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800524a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005252:	4ba3      	ldr	r3, [pc, #652]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525e:	49a0      	ldr	r1, [pc, #640]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005264:	e001      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d042      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527e:	d01f      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005284:	d805      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	d00e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005290:	e01f      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005296:	d01f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529c:	d01e      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800529e:	e018      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a0:	4b8f      	ldr	r3, [pc, #572]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	4a8e      	ldr	r2, [pc, #568]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052ac:	e017      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fb81 	bl	80069bc <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052be:	e00e      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 fc2a 	bl	8006b20 <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052d0:	e005      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
      break;
 80052d6:	e002      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80052dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052e4:	4b7e      	ldr	r3, [pc, #504]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	497b      	ldr	r1, [pc, #492]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	650b      	str	r3, [r1, #80]	; 0x50
 80052f6:	e001      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d042      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005310:	d01b      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005316:	d805      	bhi.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d022      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005322:	e01b      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005328:	d01d      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800532a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800532e:	d01c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005330:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005334:	d01b      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005336:	e011      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	2101      	movs	r1, #1
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fb3c 	bl	80069bc <RCCEx_PLL2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005348:	e012      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3324      	adds	r3, #36	; 0x24
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fbe5 	bl	8006b20 <RCCEx_PLL3_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800535a:	e009      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
      break;
 8005360:	e006      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005362:	bf00      	nop
 8005364:	e004      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005366:	bf00      	nop
 8005368:	e002      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800536e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005376:	4b5a      	ldr	r3, [pc, #360]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	4957      	ldr	r1, [pc, #348]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	650b      	str	r3, [r1, #80]	; 0x50
 8005388:	e001      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d044      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a4:	d01b      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d805      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d022      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80053b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80053b6:	e01b      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d01d      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80053be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c2:	d01c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80053c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c8:	d01b      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80053ca:	e011      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 faf2 	bl	80069bc <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053dc:	e012      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fb9b 	bl	8006b20 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053ee:	e009      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800540a:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005418:	4931      	ldr	r1, [pc, #196]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	658b      	str	r3, [r1, #88]	; 0x58
 800541e:	e001      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02d      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005438:	d005      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800543a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543e:	d009      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005444:	e00f      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4b26      	ldr	r3, [pc, #152]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005452:	e00c      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f001 faae 	bl	80069bc <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
      break;
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800546c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005480:	4917      	ldr	r1, [pc, #92]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	650b      	str	r3, [r1, #80]	; 0x50
 8005486:	e001      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d035      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	2b03      	cmp	r3, #3
 800549e:	d81b      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054e5 	.word	0x080054e5
 80054ac:	080054b9 	.word	0x080054b9
 80054b0:	080054c7 	.word	0x080054c7
 80054b4:	080054e5 	.word	0x080054e5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054c4:	e00f      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 fa75 	bl	80069bc <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054d6:	e006      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
      break;
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
      break;
 80054e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054ec:	4bba      	ldr	r3, [pc, #744]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	f023 0203 	bic.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f8:	49b7      	ldr	r1, [pc, #732]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054fe:	e001      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8086 	beq.w	800561e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005512:	4bb2      	ldr	r3, [pc, #712]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4ab1      	ldr	r2, [pc, #708]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800551e:	f7fa ff61 	bl	80003e4 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005524:	e009      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fa ff5d 	bl	80003e4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d902      	bls.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	75fb      	strb	r3, [r7, #23]
        break;
 8005538:	e005      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800553a:	4ba8      	ldr	r3, [pc, #672]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ef      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d166      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800554c:	4ba2      	ldr	r3, [pc, #648]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800554e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005556:	4053      	eors	r3, r2
 8005558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555c:	2b00      	cmp	r3, #0
 800555e:	d013      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005560:	4b9d      	ldr	r3, [pc, #628]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800556a:	4b9b      	ldr	r3, [pc, #620]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a9a      	ldr	r2, [pc, #616]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005576:	4b98      	ldr	r3, [pc, #608]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a97      	ldr	r2, [pc, #604]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800557c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005580:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005582:	4a95      	ldr	r2, [pc, #596]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d115      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fa ff26 	bl	80003e4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800559a:	e00b      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fa ff22 	bl	80003e4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d902      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	75fb      	strb	r3, [r7, #23]
            break;
 80055b2:	e005      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055b4:	4b88      	ldr	r3, [pc, #544]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ed      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d126      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d4:	d10d      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80055d6:	4b80      	ldr	r3, [pc, #512]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055e4:	0919      	lsrs	r1, r3, #4
 80055e6:	4b7e      	ldr	r3, [pc, #504]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80055e8:	400b      	ands	r3, r1
 80055ea:	497b      	ldr	r1, [pc, #492]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	610b      	str	r3, [r1, #16]
 80055f0:	e005      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80055f2:	4b79      	ldr	r3, [pc, #484]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4a78      	ldr	r2, [pc, #480]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055fc:	6113      	str	r3, [r2, #16]
 80055fe:	4b76      	ldr	r3, [pc, #472]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560c:	4972      	ldr	r1, [pc, #456]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	670b      	str	r3, [r1, #112]	; 0x70
 8005612:	e004      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	75bb      	strb	r3, [r7, #22]
 8005618:	e001      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d07d      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562e:	2b28      	cmp	r3, #40	; 0x28
 8005630:	d866      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	08005707 	.word	0x08005707
 800563c:	08005701 	.word	0x08005701
 8005640:	08005701 	.word	0x08005701
 8005644:	08005701 	.word	0x08005701
 8005648:	08005701 	.word	0x08005701
 800564c:	08005701 	.word	0x08005701
 8005650:	08005701 	.word	0x08005701
 8005654:	08005701 	.word	0x08005701
 8005658:	080056dd 	.word	0x080056dd
 800565c:	08005701 	.word	0x08005701
 8005660:	08005701 	.word	0x08005701
 8005664:	08005701 	.word	0x08005701
 8005668:	08005701 	.word	0x08005701
 800566c:	08005701 	.word	0x08005701
 8005670:	08005701 	.word	0x08005701
 8005674:	08005701 	.word	0x08005701
 8005678:	080056ef 	.word	0x080056ef
 800567c:	08005701 	.word	0x08005701
 8005680:	08005701 	.word	0x08005701
 8005684:	08005701 	.word	0x08005701
 8005688:	08005701 	.word	0x08005701
 800568c:	08005701 	.word	0x08005701
 8005690:	08005701 	.word	0x08005701
 8005694:	08005701 	.word	0x08005701
 8005698:	08005707 	.word	0x08005707
 800569c:	08005701 	.word	0x08005701
 80056a0:	08005701 	.word	0x08005701
 80056a4:	08005701 	.word	0x08005701
 80056a8:	08005701 	.word	0x08005701
 80056ac:	08005701 	.word	0x08005701
 80056b0:	08005701 	.word	0x08005701
 80056b4:	08005701 	.word	0x08005701
 80056b8:	08005707 	.word	0x08005707
 80056bc:	08005701 	.word	0x08005701
 80056c0:	08005701 	.word	0x08005701
 80056c4:	08005701 	.word	0x08005701
 80056c8:	08005701 	.word	0x08005701
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005701 	.word	0x08005701
 80056d4:	08005701 	.word	0x08005701
 80056d8:	08005707 	.word	0x08005707
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	2101      	movs	r1, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f96a 	bl	80069bc <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056ec:	e00c      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3324      	adds	r3, #36	; 0x24
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 fa13 	bl	8006b20 <RCCEx_PLL3_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
      break;
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800570e:	4b32      	ldr	r3, [pc, #200]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	492f      	ldr	r1, [pc, #188]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800571c:	4313      	orrs	r3, r2
 800571e:	654b      	str	r3, [r1, #84]	; 0x54
 8005720:	e001      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d037      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005736:	2b05      	cmp	r3, #5
 8005738:	d820      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005783 	.word	0x08005783
 8005744:	08005759 	.word	0x08005759
 8005748:	0800576b 	.word	0x0800576b
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f92c 	bl	80069bc <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005768:	e00c      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3324      	adds	r3, #36	; 0x24
 800576e:	2101      	movs	r1, #1
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f9d5 	bl	8006b20 <RCCEx_PLL3_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	75fb      	strb	r3, [r7, #23]
      break;
 8005780:	e000      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f023 0207 	bic.w	r2, r3, #7
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	4910      	ldr	r1, [pc, #64]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	654b      	str	r3, [r1, #84]	; 0x54
 800579c:	e001      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d040      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d827      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	0800580f 	.word	0x0800580f
 80057c4:	080057e5 	.word	0x080057e5
 80057c8:	080057f7 	.word	0x080057f7
 80057cc:	0800580f 	.word	0x0800580f
 80057d0:	0800580f 	.word	0x0800580f
 80057d4:	0800580f 	.word	0x0800580f
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58024800 	.word	0x58024800
 80057e0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f8e6 	bl	80069bc <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80057f4:	e00c      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f98f 	bl	8006b20 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005806:	e003      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
      break;
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800580e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005816:	4bb2      	ldr	r3, [pc, #712]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f023 0207 	bic.w	r2, r3, #7
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005824:	49ae      	ldr	r1, [pc, #696]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	658b      	str	r3, [r1, #88]	; 0x58
 800582a:	e001      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d044      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005846:	d01b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584c:	d805      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d022      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005858:	e01b      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d01d      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005864:	d01c      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800586a:	d01b      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800586c:	e011      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f8a1 	bl	80069bc <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800587e:	e012      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	2102      	movs	r1, #2
 8005886:	4618      	mov	r0, r3
 8005888:	f001 f94a 	bl	8006b20 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005890:	e009      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	e006      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005898:	bf00      	nop
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ac:	4b8c      	ldr	r3, [pc, #560]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ba:	4989      	ldr	r1, [pc, #548]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	654b      	str	r3, [r1, #84]	; 0x54
 80058c0:	e001      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d044      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058dc:	d01b      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80058de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e2:	d805      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d022      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80058e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80058ee:	e01b      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d01d      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80058f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058fa:	d01c      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80058fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005900:	d01b      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005902:	e011      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f001 f856 	bl	80069bc <RCCEx_PLL2_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005914:	e012      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f8ff 	bl	8006b20 <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005926:	e009      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
      break;
 800592c:	e006      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800592e:	bf00      	nop
 8005930:	e004      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800593a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005942:	4b67      	ldr	r3, [pc, #412]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005950:	4963      	ldr	r1, [pc, #396]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	658b      	str	r3, [r1, #88]	; 0x58
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d044      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800596e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005972:	d01b      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005978:	d805      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005984:	e01b      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598a:	d01d      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800598c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005990:	d01c      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005992:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005996:	d01b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005998:	e011      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f80b 	bl	80069bc <RCCEx_PLL2_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059aa:	e012      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f8b4 	bl	8006b20 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059bc:	e009      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
      break;
 80059c2:	e006      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059c4:	bf00      	nop
 80059c6:	e004      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059c8:	bf00      	nop
 80059ca:	e002      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059cc:	bf00      	nop
 80059ce:	e000      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059d8:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e6:	493e      	ldr	r1, [pc, #248]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	658b      	str	r3, [r1, #88]	; 0x58
 80059ec:	e001      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a08:	d10a      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3324      	adds	r3, #36	; 0x24
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f885 	bl	8006b20 <RCCEx_PLL3_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a20:	4b2f      	ldr	r3, [pc, #188]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2e:	492c      	ldr	r1, [pc, #176]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4a:	d10a      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3324      	adds	r3, #36	; 0x24
 8005a50:	2102      	movs	r1, #2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 f864 	bl	8006b20 <RCCEx_PLL3_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a62:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a70:	491b      	ldr	r1, [pc, #108]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d032      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d00d      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a92:	d016      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d111      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 ff8c 	bl	80069bc <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3324      	adds	r3, #36	; 0x24
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f835 	bl	8006b20 <RCCEx_PLL3_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ad8:	4901      	ldr	r1, [pc, #4]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	658b      	str	r3, [r1, #88]	; 0x58
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02f      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005afe:	d00c      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005b00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b04:	d015      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0a:	d10f      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4b71      	ldr	r3, [pc, #452]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a70      	ldr	r2, [pc, #448]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b18:	e00c      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3324      	adds	r3, #36	; 0x24
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fffd 	bl	8006b20 <RCCEx_PLL3_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b3a:	4b66      	ldr	r3, [pc, #408]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b48:	4962      	ldr	r1, [pc, #392]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	654b      	str	r3, [r1, #84]	; 0x54
 8005b4e:	e001      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d029      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6c:	d007      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005b6e:	e00f      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b58      	ldr	r3, [pc, #352]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b7c:	e00b      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ff19 	bl	80069bc <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b9c:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	494a      	ldr	r1, [pc, #296]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bae:	e001      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 ffaa 	bl	8006b20 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02f      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf0:	d802      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005bf6:	e00d      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfc:	d00f      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d00e      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c06:	4b33      	ldr	r3, [pc, #204]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	4a32      	ldr	r2, [pc, #200]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c12:	e007      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	e004      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c36:	4927      	ldr	r1, [pc, #156]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	654b      	str	r3, [r1, #84]	; 0x54
 8005c3c:	e001      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c4e:	4b21      	ldr	r3, [pc, #132]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	491e      	ldr	r1, [pc, #120]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c78:	4916      	ldr	r1, [pc, #88]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c94:	6113      	str	r3, [r2, #16]
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ca0:	490c      	ldr	r1, [pc, #48]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da08      	bge.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005cc0:	7dbb      	ldrb	r3, [r7, #22]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	58024400 	.word	0x58024400

08005cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b090      	sub	sp, #64	; 0x40
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d150      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ce8:	4ba1      	ldr	r3, [pc, #644]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d844      	bhi.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d15 	.word	0x08005d15
 8005d04:	08005d25 	.word	0x08005d25
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d45 	.word	0x08005d45
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fd03 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d22:	e241      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d24:	f107 0318 	add.w	r3, r7, #24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fa63 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d32:	e239      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fba7 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d42:	e231      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d44:	4b8a      	ldr	r3, [pc, #552]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d54:	4b87      	ldr	r3, [pc, #540]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d58:	e226      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d60:	d102      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005d62:	4b85      	ldr	r3, [pc, #532]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d66:	e21f      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005d70:	4b82      	ldr	r3, [pc, #520]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d74:	e218      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7a:	e215      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d7c:	4b80      	ldr	r3, [pc, #512]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d80:	e212      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d86:	bf00      	nop
 8005d88:	e20e      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d90:	d14f      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005d92:	4b77      	ldr	r3, [pc, #476]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005d9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d01c      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005da2:	2b80      	cmp	r3, #128	; 0x80
 8005da4:	d804      	bhi.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d00e      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005dae:	e03c      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005db0:	2bc0      	cmp	r3, #192	; 0xc0
 8005db2:	d037      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db8:	d018      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005dba:	e036      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fcaf 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dca:	e1ed      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dcc:	f107 0318 	add.w	r3, r7, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fa0f 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dda:	e1e5      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ddc:	f107 030c 	add.w	r3, r7, #12
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fb53 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dea:	e1dd      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dec:	4b60      	ldr	r3, [pc, #384]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005dfc:	4b5d      	ldr	r3, [pc, #372]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e00:	e1d2      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e08:	d102      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005e0a:	4b5b      	ldr	r3, [pc, #364]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e0e:	e1cb      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e16:	d102      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005e18:	4b58      	ldr	r3, [pc, #352]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e1c:	e1c4      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e22:	e1c1      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e24:	4b56      	ldr	r3, [pc, #344]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e28:	e1be      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e2e:	bf00      	nop
 8005e30:	e1ba      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e38:	d153      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005e3a:	4b4d      	ldr	r3, [pc, #308]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4a:	d01f      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e50:	d805      	bhi.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5a:	d00f      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005e5c:	e03d      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e62:	d037      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e68:	d018      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005e6a:	e036      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fc57 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e7a:	e195      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7c:	f107 0318 	add.w	r3, r7, #24
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 f9b7 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8a:	e18d      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fafb 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e9a:	e185      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e9c:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005eac:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005eb0:	e17a      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb8:	d102      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005eba:	4b2f      	ldr	r3, [pc, #188]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebe:	e173      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec6:	d102      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ecc:	e16c      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed2:	e169      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed8:	e166      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ede:	bf00      	nop
 8005ee0:	e162      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee8:	d15d      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005eea:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005ef2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005efa:	d01f      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f00:	d805      	bhi.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f0a:	d00f      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005f0c:	e047      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005f0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f12:	d041      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f18:	d018      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005f1a:	e040      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fbff 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f2a:	e13d      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2c:	f107 0318 	add.w	r3, r7, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f95f 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f3a:	e135      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 faa3 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4a:	e12d      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005f60:	e122      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005f6a:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f6e:	e11b      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005f70:	58024400 	.word	0x58024400
 8005f74:	03d09000 	.word	0x03d09000
 8005f78:	003d0900 	.word	0x003d0900
 8005f7c:	017d7840 	.word	0x017d7840
 8005f80:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8a:	d102      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005f8c:	4b89      	ldr	r3, [pc, #548]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f90:	e10a      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f96:	e107      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f98:	4b87      	ldr	r3, [pc, #540]	; (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f9c:	e104      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa2:	bf00      	nop
 8005fa4:	e100      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fac:	d153      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005fae:	4b83      	ldr	r3, [pc, #524]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbe:	d01f      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d805      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	d00f      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005fd0:	e03d      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd6:	d037      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fdc:	d018      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005fde:	e036      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fb9d 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fee:	e0db      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff0:	f107 0318 	add.w	r3, r7, #24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f8fd 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffe:	e0d3      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa41 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800600e:	e0cb      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006010:	4b6a      	ldr	r3, [pc, #424]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006018:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006020:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006024:	e0c0      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602c:	d102      	bne.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800602e:	4b65      	ldr	r3, [pc, #404]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006032:	e0b9      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800603a:	d102      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800603c:	4b5d      	ldr	r3, [pc, #372]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006040:	e0b2      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006046:	e0af      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006048:	4b5b      	ldr	r3, [pc, #364]	; (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800604c:	e0ac      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006052:	bf00      	nop
 8006054:	e0a8      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800605c:	d13d      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800605e:	4b57      	ldr	r3, [pc, #348]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606e:	d00c      	beq.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006074:	d011      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d12b      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f8b8 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006088:	e08e      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	4618      	mov	r0, r3
 8006090:	f000 f9fc 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e086      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800609a:	4b48      	ldr	r3, [pc, #288]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80060aa:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80060ae:	e07b      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060b6:	d102      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060bc:	e074      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c4:	d102      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80060c6:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ca:	e06d      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d0:	e06a      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d6:	bf00      	nop
 80060d8:	e066      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e0:	d11f      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80060e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d008      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fb10 	bl	8006724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006108:	e04e      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f870 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006118:	e046      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800611e:	bf00      	nop
 8006120:	e042      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006128:	d13c      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613a:	d01e      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800613c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006140:	d805      	bhi.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800614a:	d00e      	beq.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800614c:	e026      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006152:	d01d      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006158:	d01d      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800615a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800615e:	d014      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006160:	e01c      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006162:	f000 f831 	bl	80061c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006166:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006168:	e01e      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616a:	f107 0318 	add.w	r3, r7, #24
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f840 	bl	80061f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006178:	e016      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f984 	bl	800648c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006188:	e00e      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800618e:	e00b      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006194:	e008      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800619a:	e005      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061a0:	bf00      	nop
 80061a2:	e001      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80061a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3740      	adds	r7, #64	; 0x40
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	017d7840 	.word	0x017d7840
 80061b8:	00bb8000 	.word	0x00bb8000
 80061bc:	58024400 	.word	0x58024400
 80061c0:	03d09000 	.word	0x03d09000
 80061c4:	003d0900 	.word	0x003d0900

080061c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061cc:	f7fe fe76 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 80061d0:	4601      	mov	r1, r0
 80061d2:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	58024400 	.word	0x58024400
 80061f0:	08007340 	.word	0x08007340

080061f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061fc:	4b9d      	ldr	r3, [pc, #628]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006206:	4b9b      	ldr	r3, [pc, #620]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	0b1b      	lsrs	r3, r3, #12
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006210:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006212:	4b98      	ldr	r3, [pc, #608]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	091b      	lsrs	r3, r3, #4
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800621e:	4b95      	ldr	r3, [pc, #596]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 810a 	beq.w	8006456 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d05a      	beq.n	80062fe <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006248:	2b01      	cmp	r3, #1
 800624a:	d302      	bcc.n	8006252 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800624c:	2b02      	cmp	r3, #2
 800624e:	d078      	beq.n	8006342 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006250:	e099      	b.n	8006386 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d02d      	beq.n	80062ba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800625e:	4b85      	ldr	r3, [pc, #532]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	4a83      	ldr	r2, [pc, #524]	; (8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006288:	4b7a      	ldr	r3, [pc, #488]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006298:	ed97 6a03 	vldr	s12, [r7, #12]
 800629c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80062a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062b8:	e087      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80062c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062cc:	4b69      	ldr	r3, [pc, #420]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80062e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fc:	e065      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800630c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006310:	4b58      	ldr	r3, [pc, #352]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006320:	ed97 6a03 	vldr	s12, [r7, #12]
 8006324:	eddf 5a55 	vldr	s11, [pc, #340]	; 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006340:	e043      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006354:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006364:	ed97 6a03 	vldr	s12, [r7, #12]
 8006368:	eddf 5a44 	vldr	s11, [pc, #272]	; 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800636c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006384:	e021      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006390:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006398:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80063b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063c8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80063ca:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	0a5b      	lsrs	r3, r3, #9
 80063d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f0:	ee17 2a90 	vmov	r2, s15
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800640e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006412:	edd7 6a07 	vldr	s13, [r7, #28]
 8006416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641e:	ee17 2a90 	vmov	r2, s15
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	0e1b      	lsrs	r3, r3, #24
 800642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006440:	edd7 6a07 	vldr	s13, [r7, #28]
 8006444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644c:	ee17 2a90 	vmov	r2, s15
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006454:	e008      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	58024400 	.word	0x58024400
 8006478:	03d09000 	.word	0x03d09000
 800647c:	46000000 	.word	0x46000000
 8006480:	4c742400 	.word	0x4c742400
 8006484:	4a742400 	.word	0x4a742400
 8006488:	4bbebc20 	.word	0x4bbebc20

0800648c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	; 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006494:	4b9d      	ldr	r3, [pc, #628]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800649e:	4b9b      	ldr	r3, [pc, #620]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	0d1b      	lsrs	r3, r3, #20
 80064a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064aa:	4b98      	ldr	r3, [pc, #608]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	0a1b      	lsrs	r3, r3, #8
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80064b6:	4b95      	ldr	r3, [pc, #596]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 810a 	beq.w	80066ee <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d05a      	beq.n	8006596 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d302      	bcc.n	80064ea <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d078      	beq.n	80065da <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80064e8:	e099      	b.n	800661e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ea:	4b88      	ldr	r3, [pc, #544]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d02d      	beq.n	8006552 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064f6:	4b85      	ldr	r3, [pc, #532]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	4a83      	ldr	r2, [pc, #524]	; (8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006520:	4b7a      	ldr	r3, [pc, #488]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006530:	ed97 6a03 	vldr	s12, [r7, #12]
 8006534:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006550:	e087      	b.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006718 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006564:	4b69      	ldr	r3, [pc, #420]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006574:	ed97 6a03 	vldr	s12, [r7, #12]
 8006578:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800657c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006594:	e065      	b.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80065a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a8:	4b58      	ldr	r3, [pc, #352]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80065c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065d8:	e043      	b.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80065e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ec:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006600:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800661c:	e021      	b.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800662c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006640:	ed97 6a03 	vldr	s12, [r7, #12]
 8006644:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006660:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006662:	4b2a      	ldr	r3, [pc, #168]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	0a5b      	lsrs	r3, r3, #9
 8006668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006688:	ee17 2a90 	vmov	r2, s15
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b6:	ee17 2a90 	vmov	r2, s15
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	0e1b      	lsrs	r3, r3, #24
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e4:	ee17 2a90 	vmov	r2, s15
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066ec:	e008      	b.n	8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
}
 8006700:	bf00      	nop
 8006702:	3724      	adds	r7, #36	; 0x24
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	58024400 	.word	0x58024400
 8006710:	03d09000 	.word	0x03d09000
 8006714:	46000000 	.word	0x46000000
 8006718:	4c742400 	.word	0x4c742400
 800671c:	4a742400 	.word	0x4a742400
 8006720:	4bbebc20 	.word	0x4bbebc20

08006724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800672c:	4b9d      	ldr	r3, [pc, #628]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006736:	4b9b      	ldr	r3, [pc, #620]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006742:	4b98      	ldr	r3, [pc, #608]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800674c:	4b95      	ldr	r3, [pc, #596]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 810a 	beq.w	8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d05a      	beq.n	800682c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006776:	2b01      	cmp	r3, #1
 8006778:	d302      	bcc.n	8006780 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800677a:	2b02      	cmp	r3, #2
 800677c:	d078      	beq.n	8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800677e:	e099      	b.n	80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006780:	4b88      	ldr	r3, [pc, #544]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02d      	beq.n	80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800678c:	4b85      	ldr	r3, [pc, #532]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	08db      	lsrs	r3, r3, #3
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	4a84      	ldr	r2, [pc, #528]	; (80069a8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
 800679c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b6:	4b7b      	ldr	r3, [pc, #492]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80067ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067e6:	e087      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80067f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fa:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680a:	ed97 6a03 	vldr	s12, [r7, #12]
 800680e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800682a:	e065      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800683a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683e:	4b59      	ldr	r3, [pc, #356]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006852:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800686e:	e043      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800687e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006882:	4b48      	ldr	r3, [pc, #288]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006892:	ed97 6a03 	vldr	s12, [r7, #12]
 8006896:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b2:	e021      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80068c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c6:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80068de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068f6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80068f8:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	0a5b      	lsrs	r3, r3, #9
 80068fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800690e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006912:	edd7 6a07 	vldr	s13, [r7, #28]
 8006916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691e:	ee17 2a90 	vmov	r2, s15
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006926:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800693c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006940:	edd7 6a07 	vldr	s13, [r7, #28]
 8006944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694c:	ee17 2a90 	vmov	r2, s15
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006954:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800696a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800696e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697a:	ee17 2a90 	vmov	r2, s15
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006982:	e008      	b.n	8006996 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	609a      	str	r2, [r3, #8]
}
 8006996:	bf00      	nop
 8006998:	3724      	adds	r7, #36	; 0x24
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	58024400 	.word	0x58024400
 80069a8:	03d09000 	.word	0x03d09000
 80069ac:	46000000 	.word	0x46000000
 80069b0:	4c742400 	.word	0x4c742400
 80069b4:	4a742400 	.word	0x4a742400
 80069b8:	4bbebc20 	.word	0x4bbebc20

080069bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ca:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d101      	bne.n	80069da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e099      	b.n	8006b0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069da:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a4e      	ldr	r2, [pc, #312]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 80069e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e6:	f7f9 fcfd 	bl	80003e4 <HAL_GetTick>
 80069ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069ec:	e008      	b.n	8006a00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069ee:	f7f9 fcf9 	bl	80003e4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e086      	b.n	8006b0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a00:	4b45      	ldr	r3, [pc, #276]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f0      	bne.n	80069ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a0c:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	031b      	lsls	r3, r3, #12
 8006a1a:	493f      	ldr	r1, [pc, #252]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a50:	4931      	ldr	r1, [pc, #196]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a56:	4b30      	ldr	r3, [pc, #192]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	492d      	ldr	r1, [pc, #180]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f023 0220 	bic.w	r2, r3, #32
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	4928      	ldr	r1, [pc, #160]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a7a:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a80:	f023 0310 	bic.w	r3, r3, #16
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a86:	4b24      	ldr	r3, [pc, #144]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <RCCEx_PLL2_Config+0x160>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	69d2      	ldr	r2, [r2, #28]
 8006a92:	00d2      	lsls	r2, r2, #3
 8006a94:	4920      	ldr	r1, [pc, #128]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a9a:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006aa0:	f043 0310 	orr.w	r3, r3, #16
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab8:	e00f      	b.n	8006ada <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ac0:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006acc:	e005      	b.n	8006ada <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae6:	f7f9 fc7d 	bl	80003e4 <HAL_GetTick>
 8006aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aec:	e008      	b.n	8006b00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006aee:	f7f9 fc79 	bl	80003e4 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e006      	b.n	8006b0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <RCCEx_PLL2_Config+0x15c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	ffff0007 	.word	0xffff0007

08006b20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b2e:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d101      	bne.n	8006b3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e099      	b.n	8006c72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b3e:	4b4f      	ldr	r3, [pc, #316]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4e      	ldr	r2, [pc, #312]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4a:	f7f9 fc4b 	bl	80003e4 <HAL_GetTick>
 8006b4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b52:	f7f9 fc47 	bl	80003e4 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e086      	b.n	8006c72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b64:	4b45      	ldr	r3, [pc, #276]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b70:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	051b      	lsls	r3, r3, #20
 8006b7e:	493f      	ldr	r1, [pc, #252]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	628b      	str	r3, [r1, #40]	; 0x28
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	025b      	lsls	r3, r3, #9
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	061b      	lsls	r3, r3, #24
 8006bb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bb4:	4931      	ldr	r1, [pc, #196]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bba:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	492d      	ldr	r1, [pc, #180]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bcc:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	4928      	ldr	r1, [pc, #160]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bde:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bee:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <RCCEx_PLL3_Config+0x160>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	69d2      	ldr	r2, [r2, #28]
 8006bf6:	00d2      	lsls	r2, r2, #3
 8006bf8:	4920      	ldr	r1, [pc, #128]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bfe:	4b1f      	ldr	r3, [pc, #124]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c1c:	e00f      	b.n	8006c3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d106      	bne.n	8006c32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c24:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	4a14      	ldr	r2, [pc, #80]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c30:	e005      	b.n	8006c3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a0e      	ldr	r2, [pc, #56]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4a:	f7f9 fbcb 	bl	80003e4 <HAL_GetTick>
 8006c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c50:	e008      	b.n	8006c64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c52:	f7f9 fbc7 	bl	80003e4 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e006      	b.n	8006c72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <RCCEx_PLL3_Config+0x15c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	58024400 	.word	0x58024400
 8006c80:	ffff0007 	.word	0xffff0007

08006c84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c96:	463b      	mov	r3, r7
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	611a      	str	r2, [r3, #16]
 8006ca4:	615a      	str	r2, [r3, #20]
 8006ca6:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006ca8:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006caa:	4a30      	ldr	r2, [pc, #192]	; (8006d6c <MX_ADC1_Init+0xe8>)
 8006cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cb0:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8006cb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006cb6:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cb8:	2208      	movs	r2, #8
 8006cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006cbc:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006cc2:	4b29      	ldr	r3, [pc, #164]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006cce:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8006cd4:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ce0:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ce6:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cee:	2203      	movs	r2, #3
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006d06:	4818      	ldr	r0, [pc, #96]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006d08:	f7f9 fd60 	bl	80007cc <HAL_ADC_Init>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8006d12:	f000 f9f3 	bl	80070fc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006d1a:	f107 031c 	add.w	r3, r7, #28
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4811      	ldr	r0, [pc, #68]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006d22:	f7fa fd1f 	bl	8001764 <HAL_ADCEx_MultiModeConfigChannel>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006d2c:	f000 f9e6 	bl	80070fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006d30:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <MX_ADC1_Init+0xec>)
 8006d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006d34:	2306      	movs	r3, #6
 8006d36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006d3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006d40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006d42:	2304      	movs	r3, #4
 8006d44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4806      	ldr	r0, [pc, #24]	; (8006d68 <MX_ADC1_Init+0xe4>)
 8006d50:	f7f9 ffbe 	bl	8000cd0 <HAL_ADC_ConfigChannel>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8006d5a:	f000 f9cf 	bl	80070fc <Error_Handler>
  }

}
 8006d5e:	bf00      	nop
 8006d60:	3728      	adds	r7, #40	; 0x28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	24000030 	.word	0x24000030
 8006d6c:	40022000 	.word	0x40022000
 8006d70:	25b00200 	.word	0x25b00200

08006d74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <HAL_ADC_MspInit+0xe0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d159      	bne.n	8006e4a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006d9e:	f043 0320 	orr.w	r3, r3, #32
 8006da2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db4:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dba:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dc4:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <HAL_ADC_MspInit+0xe4>)
 8006dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	4619      	mov	r1, r3
 8006de4:	481d      	ldr	r0, [pc, #116]	; (8006e5c <HAL_ADC_MspInit+0xe8>)
 8006de6:	f7fc ff7f 	bl	8003ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006dec:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <HAL_ADC_MspInit+0xf0>)
 8006dee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006df2:	2209      	movs	r2, #9
 8006df4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006e2e:	480c      	ldr	r0, [pc, #48]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e30:	f7fa fe82 	bl	8001b38 <HAL_DMA_Init>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8006e3a:	f000 f95f 	bl	80070fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e42:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e44:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <HAL_ADC_MspInit+0xec>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3728      	adds	r7, #40	; 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40022000 	.word	0x40022000
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	58020400 	.word	0x58020400
 8006e60:	24000094 	.word	0x24000094
 8006e64:	40020010 	.word	0x40020010

08006e68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <MX_DMA_Init+0x3c>)
 8006e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e74:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <MX_DMA_Init+0x3c>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <MX_DMA_Init+0x3c>)
 8006e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	200b      	movs	r0, #11
 8006e92:	f7fa fe1c 	bl	8001ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006e96:	200b      	movs	r0, #11
 8006e98:	f7fa fe33 	bl	8001b02 <HAL_NVIC_EnableIRQ>

}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	58024400 	.word	0x58024400

08006ea8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eb4:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006eb6:	f043 0304 	orr.w	r3, r3, #4
 8006eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006ef2:	f043 0302 	orr.w	r3, r3, #2
 8006ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <MX_GPIO_Init+0x6c>)
 8006efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]

}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	58024400 	.word	0x58024400

08006f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f1c:	f7f9 f9dc 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f20:	f000 f810 	bl	8006f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f24:	f7ff ffc0 	bl	8006ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006f28:	f7ff ff9e 	bl	8006e68 <MX_DMA_Init>
  MX_ADC1_Init();
 8006f2c:	f7ff feaa 	bl	8006c84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_Value, 1);
 8006f30:	2201      	movs	r2, #1
 8006f32:	4902      	ldr	r1, [pc, #8]	; (8006f3c <main+0x24>)
 8006f34:	4802      	ldr	r0, [pc, #8]	; (8006f40 <main+0x28>)
 8006f36:	f7f9 fde9 	bl	8000b0c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006f3a:	e7fe      	b.n	8006f3a <main+0x22>
 8006f3c:	2400010c 	.word	0x2400010c
 8006f40:	24000030 	.word	0x24000030

08006f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b0cc      	sub	sp, #304	; 0x130
 8006f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006f4e:	224c      	movs	r2, #76	; 0x4c
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f9dc 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f9d5 	bl	8007310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	23bc      	movs	r3, #188	; 0xbc
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2100      	movs	r1, #0
 8006f72:	f000 f9cd 	bl	8007310 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006f76:	2002      	movs	r0, #2
 8006f78:	f7fd f866 	bl	8004048 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	4b5b      	ldr	r3, [pc, #364]	; (80070f0 <SystemClock_Config+0x1ac>)
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	4a5a      	ldr	r2, [pc, #360]	; (80070f0 <SystemClock_Config+0x1ac>)
 8006f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f8c:	6193      	str	r3, [r2, #24]
 8006f8e:	4b58      	ldr	r3, [pc, #352]	; (80070f0 <SystemClock_Config+0x1ac>)
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8006f96:	1d3b      	adds	r3, r7, #4
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	4b56      	ldr	r3, [pc, #344]	; (80070f4 <SystemClock_Config+0x1b0>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4a55      	ldr	r2, [pc, #340]	; (80070f4 <SystemClock_Config+0x1b0>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fa6:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <SystemClock_Config+0x1b0>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	f003 0201 	and.w	r2, r3, #1
 8006fae:	1d3b      	adds	r3, r7, #4
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006fb6:	bf00      	nop
 8006fb8:	4b4d      	ldr	r3, [pc, #308]	; (80070f0 <SystemClock_Config+0x1ac>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc4:	d1f8      	bne.n	8006fb8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006fc6:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <SystemClock_Config+0x1b4>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	4a4a      	ldr	r2, [pc, #296]	; (80070f8 <SystemClock_Config+0x1b4>)
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006fea:	2302      	movs	r3, #2
 8006fec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8006ff0:	2305      	movs	r3, #5
 8006ff2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8006ff6:	23c0      	movs	r3, #192	; 0xc0
 8006ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007002:	2302      	movs	r3, #2
 8007004:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007008:	2302      	movs	r3, #2
 800700a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800700e:	2308      	movs	r3, #8
 8007010:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007014:	2300      	movs	r3, #0
 8007016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007020:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fd f849 	bl	80040bc <HAL_RCC_OscConfig>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8007030:	f000 f864 	bl	80070fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007034:	233f      	movs	r3, #63	; 0x3f
 8007036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800703a:	2303      	movs	r3, #3
 800703c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007046:	2308      	movs	r3, #8
 8007048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800704c:	2340      	movs	r3, #64	; 0x40
 800704e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007052:	2340      	movs	r3, #64	; 0x40
 8007054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007066:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800706a:	2104      	movs	r1, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fbfd 	bl	800486c <HAL_RCC_ClockConfig>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8007078:	f000 f840 	bl	80070fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007084:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	2202      	movs	r2, #2
 800708c:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800708e:	f107 0308 	add.w	r3, r7, #8
 8007092:	220c      	movs	r2, #12
 8007094:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007096:	f107 0308 	add.w	r3, r7, #8
 800709a:	2201      	movs	r2, #1
 800709c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800709e:	f107 0308 	add.w	r3, r7, #8
 80070a2:	2202      	movs	r2, #2
 80070a4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	2202      	movs	r2, #2
 80070ac:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	22c0      	movs	r2, #192	; 0xc0
 80070b4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	2220      	movs	r2, #32
 80070bc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	2200      	movs	r2, #0
 80070c4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070d0:	f107 0308 	add.w	r3, r7, #8
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fd ff21 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <SystemClock_Config+0x1a0>
  {
    Error_Handler();
 80070e0:	f000 f80c 	bl	80070fc <Error_Handler>
  }
}
 80070e4:	bf00      	nop
 80070e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	58024800 	.word	0x58024800
 80070f4:	58000400 	.word	0x58000400
 80070f8:	58024400 	.word	0x58024400

080070fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007100:	bf00      	nop
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_MspInit+0x30>)
 8007114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007118:	4a08      	ldr	r2, [pc, #32]	; (800713c <HAL_MspInit+0x30>)
 800711a:	f043 0302 	orr.w	r3, r3, #2
 800711e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_MspInit+0x30>)
 8007124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	58024400 	.word	0x58024400

08007140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800714e:	b480      	push	{r7}
 8007150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007152:	e7fe      	b.n	8007152 <HardFault_Handler+0x4>

08007154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007158:	e7fe      	b.n	8007158 <MemManage_Handler+0x4>

0800715a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800715a:	b480      	push	{r7}
 800715c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800715e:	e7fe      	b.n	800715e <BusFault_Handler+0x4>

08007160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007164:	e7fe      	b.n	8007164 <UsageFault_Handler+0x4>

08007166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800716a:	bf00      	nop
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007182:	b480      	push	{r7}
 8007184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007194:	f7f9 f912 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}

0800719c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80071a0:	4802      	ldr	r0, [pc, #8]	; (80071ac <DMA1_Stream0_IRQHandler+0x10>)
 80071a2:	f7fb fa8f 	bl	80026c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80071a6:	bf00      	nop
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	24000094 	.word	0x24000094

080071b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80071b4:	4b29      	ldr	r3, [pc, #164]	; (800725c <SystemInit+0xac>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	4a28      	ldr	r2, [pc, #160]	; (800725c <SystemInit+0xac>)
 80071bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80071c4:	4b26      	ldr	r3, [pc, #152]	; (8007260 <SystemInit+0xb0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a25      	ldr	r2, [pc, #148]	; (8007260 <SystemInit+0xb0>)
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80071d0:	4b23      	ldr	r3, [pc, #140]	; (8007260 <SystemInit+0xb0>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80071d6:	4b22      	ldr	r3, [pc, #136]	; (8007260 <SystemInit+0xb0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4921      	ldr	r1, [pc, #132]	; (8007260 <SystemInit+0xb0>)
 80071dc:	4b21      	ldr	r3, [pc, #132]	; (8007264 <SystemInit+0xb4>)
 80071de:	4013      	ands	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80071e2:	4b1f      	ldr	r3, [pc, #124]	; (8007260 <SystemInit+0xb0>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <SystemInit+0xb0>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80071ee:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <SystemInit+0xb0>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <SystemInit+0xb0>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80071fa:	4b19      	ldr	r3, [pc, #100]	; (8007260 <SystemInit+0xb0>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007200:	4b17      	ldr	r3, [pc, #92]	; (8007260 <SystemInit+0xb0>)
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <SystemInit+0xb0>)
 8007208:	2200      	movs	r2, #0
 800720a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800720c:	4b14      	ldr	r3, [pc, #80]	; (8007260 <SystemInit+0xb0>)
 800720e:	2200      	movs	r2, #0
 8007210:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007212:	4b13      	ldr	r3, [pc, #76]	; (8007260 <SystemInit+0xb0>)
 8007214:	2200      	movs	r2, #0
 8007216:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007218:	4b11      	ldr	r3, [pc, #68]	; (8007260 <SystemInit+0xb0>)
 800721a:	2200      	movs	r2, #0
 800721c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800721e:	4b10      	ldr	r3, [pc, #64]	; (8007260 <SystemInit+0xb0>)
 8007220:	2200      	movs	r2, #0
 8007222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <SystemInit+0xb0>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <SystemInit+0xb0>)
 800722a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800722e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <SystemInit+0xb0>)
 8007232:	2200      	movs	r2, #0
 8007234:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007236:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <SystemInit+0xb8>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <SystemInit+0xbc>)
 800723c:	4013      	ands	r3, r2
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007242:	d202      	bcs.n	800724a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <SystemInit+0xc0>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <SystemInit+0xac>)
 800724c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007250:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	e000ed00 	.word	0xe000ed00
 8007260:	58024400 	.word	0x58024400
 8007264:	eaf6ed7f 	.word	0xeaf6ed7f
 8007268:	5c001000 	.word	0x5c001000
 800726c:	ffff0000 	.word	0xffff0000
 8007270:	51008108 	.word	0x51008108

08007274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800727a:	e003      	b.n	8007284 <LoopCopyDataInit>

0800727c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800727e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007282:	3104      	adds	r1, #4

08007284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007284:	480b      	ldr	r0, [pc, #44]	; (80072b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800728a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800728c:	d3f6      	bcc.n	800727c <CopyDataInit>
  ldr  r2, =_sbss
 800728e:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007290:	e002      	b.n	8007298 <LoopFillZerobss>

08007292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007294:	f842 3b04 	str.w	r3, [r2], #4

08007298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800729a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800729c:	d3f9      	bcc.n	8007292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800729e:	f7ff ff87 	bl	80071b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072a2:	f000 f811 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072a6:	f7ff fe37 	bl	8006f18 <main>
  bx  lr    
 80072aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072ac:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80072b0:	08007358 	.word	0x08007358
  ldr  r0, =_sdata
 80072b4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80072b8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80072bc:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80072c0:	24000110 	.word	0x24000110

080072c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072c4:	e7fe      	b.n	80072c4 <ADC3_IRQHandler>
	...

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4e0d      	ldr	r6, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1ba4      	subs	r4, r4, r6
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2500      	movs	r5, #0
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4e0b      	ldr	r6, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f000 f820 	bl	8007320 <_init>
 80072e0:	1ba4      	subs	r4, r4, r6
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2500      	movs	r5, #0
 80072e6:	42a5      	cmp	r5, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f0:	4798      	blx	r3
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fa:	4798      	blx	r3
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	08007350 	.word	0x08007350
 8007304:	08007350 	.word	0x08007350
 8007308:	08007350 	.word	0x08007350
 800730c:	08007354 	.word	0x08007354

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <_init>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr

0800732c <_fini>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	bf00      	nop
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr
