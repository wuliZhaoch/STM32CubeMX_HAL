
L431_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003340  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800351c  0800351c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08003530  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003530  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e696  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002184  00000000  00000000  0002e6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212c2  00000000  00000000  00031f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b492  00000000  00000000  00053202  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7088  00000000  00000000  0005e694  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012571c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f98  00000000  00000000  00125798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080034b4 	.word	0x080034b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080034b4 	.word	0x080034b4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f96e 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f002 fe71 	bl	80031d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d022      	beq.n	8000556 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_InitTick+0x6c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f980 	bl	800082a <HAL_SYSTICK_Config>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10f      	bne.n	8000550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d809      	bhi.n	800054a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	f04f 30ff 	mov.w	r0, #4294967295
 800053e:	f000 f946 	bl	80007ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e007      	b.n	800055a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e004      	b.n	800055a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x1c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x1c>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000028 	.word	0x20000028
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d004      	beq.n	80005d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d0:	bf00      	nop
 80005d2:	f7ff ffdf 	bl	8000594 <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8f7      	bhi.n	80005d2 <HAL_Delay+0x26>
  {
  }
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <__NVIC_SystemReset+0x20>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800075c:	4903      	ldr	r1, [pc, #12]	; (800076c <__NVIC_SystemReset+0x20>)
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_SystemReset+0x24>)
 8000760:	4313      	orrs	r3, r2
 8000762:	60cb      	str	r3, [r1, #12]
 8000764:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <__NVIC_SystemReset+0x1c>
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	05fa0004 	.word	0x05fa0004

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff7a 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff15 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff2a 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff7a 	bl	80006e4 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff49 	bl	8000690 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff1d 	bl	8000654 <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000826:	f7ff ff91 	bl	800074c <__NVIC_SystemReset>

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff9e 	bl	8000774 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b02      	cmp	r3, #2
 8000858:	d005      	beq.n	8000866 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2204      	movs	r2, #4
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e029      	b.n	80008ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 020e 	bic.w	r2, r2, #14
 8000874:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 0201 	bic.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f003 021c 	and.w	r2, r3, #28
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2201      	movs	r2, #1
 800089e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d003      	beq.n	80008ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	4798      	blx	r3
    }
  }
  return status;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d2:	e154      	b.n	8000b7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 8146 	beq.w	8000b78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0x38>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b12      	cmp	r3, #18
 80008fa:	d123      	bne.n	8000944 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	08da      	lsrs	r2, r3, #3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	08da      	lsrs	r2, r3, #3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3208      	adds	r2, #8
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0203 	and.w	r2, r3, #3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d00b      	beq.n	8000998 <HAL_GPIO_Init+0xd4>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d007      	beq.n	8000998 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098c:	2b11      	cmp	r3, #17
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b12      	cmp	r3, #18
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 80a0 	beq.w	8000b78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a38:	4b58      	ldr	r3, [pc, #352]	; (8000b9c <HAL_GPIO_Init+0x2d8>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	4a57      	ldr	r2, [pc, #348]	; (8000b9c <HAL_GPIO_Init+0x2d8>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6613      	str	r3, [r2, #96]	; 0x60
 8000a44:	4b55      	ldr	r3, [pc, #340]	; (8000b9c <HAL_GPIO_Init+0x2d8>)
 8000a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a50:	4a53      	ldr	r2, [pc, #332]	; (8000ba0 <HAL_GPIO_Init+0x2dc>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	220f      	movs	r2, #15
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a7a:	d019      	beq.n	8000ab0 <HAL_GPIO_Init+0x1ec>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <HAL_GPIO_Init+0x2e0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d013      	beq.n	8000aac <HAL_GPIO_Init+0x1e8>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <HAL_GPIO_Init+0x2e4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1e4>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a47      	ldr	r2, [pc, #284]	; (8000bac <HAL_GPIO_Init+0x2e8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1e0>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <HAL_GPIO_Init+0x2ec>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1dc>
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	e008      	b.n	8000ab2 <HAL_GPIO_Init+0x1ee>
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x1ee>
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	e004      	b.n	8000ab2 <HAL_GPIO_Init+0x1ee>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x1ee>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <HAL_GPIO_Init+0x1ee>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	f002 0203 	and.w	r2, r2, #3
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	4093      	lsls	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac2:	4937      	ldr	r1, [pc, #220]	; (8000ba0 <HAL_GPIO_Init+0x2dc>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000af4:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b48:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_GPIO_Init+0x2f0>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f47f aea3 	bne.w	80008d4 <HAL_GPIO_Init+0x10>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	371c      	adds	r7, #28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000c00 	.word	0x48000c00
 8000bb0:	48001000 	.word	0x48001000
 8000bb4:	40010400 	.word	0x40010400

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd4:	e002      	b.n	8000bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40007000 	.word	0x40007000

08000c08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40007000 	.word	0x40007000

08000c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c32:	d130      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c40:	d038      	beq.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2232      	movs	r2, #50	; 0x32
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c68:	e002      	b.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7c:	d102      	bne.n	8000c84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f2      	bne.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c90:	d110      	bne.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e00f      	b.n	8000cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca2:	d007      	beq.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40007000 	.word	0x40007000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	431bde83 	.word	0x431bde83

08000cd0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 0307 	bic.w	r3, r3, #7
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000cfc:	bf30      	wfi
 8000cfe:	e002      	b.n	8000d06 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000d00:	bf40      	sev
    __WFE();
 8000d02:	bf20      	wfe
    __WFE();
 8000d04:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6113      	str	r3, [r2, #16]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40007000 	.word	0x40007000
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e3db      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3a:	4ba4      	ldr	r3, [pc, #656]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d44:	4ba1      	ldr	r3, [pc, #644]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80e1 	beq.w	8000f1e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_RCC_OscConfig+0x4a>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b0c      	cmp	r3, #12
 8000d66:	f040 8088 	bne.w	8000e7a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 8084 	bne.w	8000e7a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d72:	4b96      	ldr	r3, [pc, #600]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x62>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e3b3      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <HAL_RCC_OscConfig+0x7c>
 8000d9a:	4b8c      	ldr	r3, [pc, #560]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	e005      	b.n	8000db0 <HAL_RCC_OscConfig+0x88>
 8000da4:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d223      	bcs.n	8000dfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fd47 	bl	800184c <RCC_SetFlashLatencyFromMSIRange>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e394      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7f      	ldr	r2, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	497a      	ldr	r1, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	4975      	ldr	r1, [pc, #468]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e022      	b.n	8000e42 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfc:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a72      	ldr	r2, [pc, #456]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b70      	ldr	r3, [pc, #448]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	496d      	ldr	r1, [pc, #436]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1a:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	4968      	ldr	r1, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fd0a 	bl	800184c <RCC_SetFlashLatencyFromMSIRange>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e357      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e42:	f000 fc41 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8000e46:	4601      	mov	r1, r0
 8000e48:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <HAL_RCC_OscConfig+0x2a8>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	4a5d      	ldr	r2, [pc, #372]	; (8000fd4 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x2b0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb48 	bl	80004fc <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d052      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	e33b      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d032      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fb81 	bl	8000594 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e96:	f7ff fb7d 	bl	8000594 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e324      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb4:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	493f      	ldr	r1, [pc, #252]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	493a      	ldr	r1, [pc, #232]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
 8000ee6:	e01a      	b.n	8000f1e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fb4e 	bl	8000594 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000efc:	f7ff fb4a 	bl	8000594 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e2f1      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1d4>
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d074      	beq.n	8001014 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x214>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d10e      	bne.n	8000f54 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d064      	beq.n	8001012 <HAL_RCC_OscConfig+0x2ea>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d160      	bne.n	8001012 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e2ce      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x244>
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e01d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x280>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x268>
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x280>
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01c      	beq.n	8000fea <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff faf0 	bl	8000594 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb6:	e011      	b.n	8000fdc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff faec 	bl	8000594 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d90a      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e293      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	080034cc 	.word	0x080034cc
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fdc:	4bae      	ldr	r3, [pc, #696]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e7      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x290>
 8000fe8:	e014      	b.n	8001014 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fad3 	bl	8000594 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff facf 	bl	8000594 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e276      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001004:	4ba4      	ldr	r3, [pc, #656]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2ca>
 8001010:	e000      	b.n	8001014 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001012:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d060      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x30a>
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d119      	bne.n	8001060 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d116      	bne.n	8001060 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001032:	4b99      	ldr	r3, [pc, #612]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_RCC_OscConfig+0x322>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e253      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104a:	4b93      	ldr	r3, [pc, #588]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	498f      	ldr	r1, [pc, #572]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105e:	e040      	b.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d023      	beq.n	80010b0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a8a      	ldr	r2, [pc, #552]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fa8e 	bl	8000594 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fa8a 	bl	8000594 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e231      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	497b      	ldr	r1, [pc, #492]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
 80010ae:	e018      	b.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b0:	4b79      	ldr	r3, [pc, #484]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a78      	ldr	r2, [pc, #480]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fa6a 	bl	8000594 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fa66 	bl	8000594 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e20d      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03c      	beq.n	8001168 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01c      	beq.n	8001130 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f6:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fc:	4a66      	ldr	r2, [pc, #408]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff fa45 	bl	8000594 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fa41 	bl	8000594 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1e8      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001120:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0ef      	beq.n	800110e <HAL_RCC_OscConfig+0x3e6>
 800112e:	e01b      	b.n	8001168 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001130:	4b59      	ldr	r3, [pc, #356]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001136:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff fa28 	bl	8000594 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fa24 	bl	8000594 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1cb      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ef      	bne.n	8001148 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a5 	beq.w	80012c0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a43      	ldr	r2, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a3a      	ldr	r2, [pc, #232]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff f9eb 	bl	8000594 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff f9e7 	bl	8000594 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e18e      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_RCC_OscConfig+0x4d2>
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f8:	e024      	b.n	8001244 <HAL_RCC_OscConfig+0x51c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d110      	bne.n	8001224 <HAL_RCC_OscConfig+0x4fc>
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001222:	e00f      	b.n	8001244 <HAL_RCC_OscConfig+0x51c>
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff f9a2 	bl	8000594 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff f99e 	bl	8000594 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e143      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ed      	beq.n	8001254 <HAL_RCC_OscConfig+0x52c>
 8001278:	e019      	b.n	80012ae <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff f98b 	bl	8000594 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	e00e      	b.n	80012a0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff f987 	bl	8000594 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d905      	bls.n	80012a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e12c      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
 8001298:	40021000 	.word	0x40021000
 800129c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a0:	4b96      	ldr	r3, [pc, #600]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1e9      	bne.n	8001282 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80012ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d03c      	beq.n	8001346 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01c      	beq.n	800130e <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012d4:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012da:	4a88      	ldr	r2, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff f956 	bl	8000594 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ec:	f7ff f952 	bl	8000594 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0f9      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ef      	beq.n	80012ec <HAL_RCC_OscConfig+0x5c4>
 800130c:	e01b      	b.n	8001346 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800130e:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001314:	4a79      	ldr	r2, [pc, #484]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff f939 	bl	8000594 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001326:	f7ff f935 	bl	8000594 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0dc      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001338:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 800133a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ef      	bne.n	8001326 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80d0 	beq.w	80014f0 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	f000 808d 	beq.w	8001472 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	2b02      	cmp	r3, #2
 800135e:	d15a      	bne.n	8001416 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff f912 	bl	8000594 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff f90e 	bl	8000594 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e0b5      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001392:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_RCC_OscConfig+0x7d8>)
 8001398:	4013      	ands	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013a2:	3a01      	subs	r2, #1
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	4311      	orrs	r1, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ac:	0212      	lsls	r2, r2, #8
 80013ae:	4311      	orrs	r1, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013b4:	0852      	lsrs	r2, r2, #1
 80013b6:	3a01      	subs	r2, #1
 80013b8:	0552      	lsls	r2, r2, #21
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013c0:	0852      	lsrs	r2, r2, #1
 80013c2:	3a01      	subs	r2, #1
 80013c4:	0652      	lsls	r2, r2, #25
 80013c6:	4311      	orrs	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013cc:	06d2      	lsls	r2, r2, #27
 80013ce:	430a      	orrs	r2, r1
 80013d0:	494a      	ldr	r1, [pc, #296]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80013dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	4a45      	ldr	r2, [pc, #276]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 80013e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff f8d1 	bl	8000594 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f8cd 	bl	8000594 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e074      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001408:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x6ce>
 8001414:	e06c      	b.n	80014f0 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 800141c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001420:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001434:	f023 0303 	bic.w	r3, r3, #3
 8001438:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001440:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff f8a3 	bl	8000594 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f89f 	bl	8000594 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e046      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x72a>
 8001470:	e03e      	b.n	80014f0 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e039      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_RCC_OscConfig+0x7d4>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 0203 	and.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	429a      	cmp	r2, r3
 8001490:	d12c      	bne.n	80014ec <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	3b01      	subs	r3, #1
 800149e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d123      	bne.n	80014ec <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d11b      	bne.n	80014ec <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014be:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d113      	bne.n	80014ec <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d109      	bne.n	80014ec <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	019d808c 	.word	0x019d808c

08001504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0c8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4961      	ldr	r1, [pc, #388]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0b0      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d04c      	beq.n	80015ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d107      	bne.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d121      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e09e      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d107      	bne.n	8001584 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d115      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e092      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e086      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e07e      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 0203 	bic.w	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	493f      	ldr	r1, [pc, #252]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015be:	f7fe ffe9 	bl	8000594 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c6:	f7fe ffe5 	bl	8000594 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e066      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 020c 	and.w	r2, r3, #12
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d1eb      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	492c      	ldr	r1, [pc, #176]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d210      	bcs.n	800163c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0207 	bic.w	r2, r3, #7
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e036      	b.n	80016aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4910      	ldr	r1, [pc, #64]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167a:	f000 f825 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 800167e:	4601      	mov	r1, r0
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa21 f303 	lsr.w	r3, r1, r3
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff2c 	bl	80004fc <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016a8:	7afb      	ldrb	r3, [r7, #11]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080034cc 	.word	0x080034cc
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000000 	.word	0x20000000

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d121      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11e      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e005      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d102      	bne.n	8001746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e004      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d101      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800174e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d133      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0xa4>
 8001766:	2b03      	cmp	r3, #3
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0xaa>
 800176a:	e005      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800176e:	617b      	str	r3, [r7, #20]
      break;
 8001770:	e005      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001774:	617b      	str	r3, [r7, #20]
      break;
 8001776:	e002      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	617b      	str	r3, [r7, #20]
      break;
 800177c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	fb02 f203 	mul.w	r2, r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_GetSysClockFreq+0x104>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0e5b      	lsrs	r3, r3, #25
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017be:	69bb      	ldr	r3, [r7, #24]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3724      	adds	r7, #36	; 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	080034e4 	.word	0x080034e4
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	017d7840 	.word	0x017d7840

080017dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008

080017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80017f8:	f7ff fff0 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017fc:	4601      	mov	r1, r0
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_RCC_GetPCLK1Freq+0x28>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	080034dc 	.word	0x080034dc

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001824:	f7ff ffda 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0adb      	lsrs	r3, r3, #11
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	080034dc 	.word	0x080034dc

0800184c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001864:	f7ff f9d0 	bl	8000c08 <HAL_PWREx_GetVoltageRange>
 8001868:	6178      	str	r0, [r7, #20]
 800186a:	e014      	b.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	4a24      	ldr	r2, [pc, #144]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	6593      	str	r3, [r2, #88]	; 0x58
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001884:	f7ff f9c0 	bl	8000c08 <HAL_PWREx_GetVoltageRange>
 8001888:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189c:	d10b      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d919      	bls.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2ba0      	cmp	r3, #160	; 0xa0
 80018a8:	d902      	bls.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	e013      	b.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018b0:	2301      	movs	r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e010      	b.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d902      	bls.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018bc:	2303      	movs	r3, #3
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e00a      	b.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b80      	cmp	r3, #128	; 0x80
 80018c6:	d102      	bne.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e004      	b.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b70      	cmp	r3, #112	; 0x70
 80018d2:	d101      	bne.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d4:	2301      	movs	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 0207 	bic.w	r2, r3, #7
 80018e0:	4909      	ldr	r1, [pc, #36]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	40022000 	.word	0x40022000

0800190c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001914:	2300      	movs	r3, #0
 8001916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001918:	2300      	movs	r3, #0
 800191a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02f      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001930:	d005      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001932:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001936:	d015      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800193c:	e00f      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800194a:	e00c      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f9f0 	bl	8001d38 <RCCEx_PLLSAI1_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800195c:	e003      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	74fb      	strb	r3, [r7, #19]
      break;
 8001962:	e000      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800196c:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	494e      	ldr	r1, [pc, #312]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001982:	e001      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001984:	7cfb      	ldrb	r3, [r7, #19]
 8001986:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 809e 	beq.w	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800199a:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00d      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a39      	ldr	r2, [pc, #228]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019d8:	f7fe fddc 	bl	8000594 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019de:	e009      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7fe fdd8 	bl	8000594 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d902      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	74fb      	strb	r3, [r7, #19]
        break;
 80019f2:	e005      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ef      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d15a      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01e      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d019      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d016      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7fe fd98 	bl	8000594 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	e00b      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7fe fd94 	bl	8000594 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d902      	bls.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	74fb      	strb	r3, [r7, #19]
            break;
 8001a7e:	e006      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ec      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10b      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4904      	ldr	r1, [pc, #16]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
 8001aae:	74bb      	strb	r3, [r7, #18]
 8001ab0:	e006      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac0:	7c7b      	ldrb	r3, [r7, #17]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b9b      	ldr	r3, [pc, #620]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	4a9a      	ldr	r2, [pc, #616]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ade:	4b95      	ldr	r3, [pc, #596]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae4:	f023 0203 	bic.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4991      	ldr	r1, [pc, #580]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	f023 020c 	bic.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	4989      	ldr	r1, [pc, #548]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b22:	4b84      	ldr	r3, [pc, #528]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	4980      	ldr	r1, [pc, #512]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	4978      	ldr	r1, [pc, #480]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	496f      	ldr	r1, [pc, #444]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4967      	ldr	r1, [pc, #412]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	495e      	ldr	r1, [pc, #376]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	4956      	ldr	r1, [pc, #344]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bee:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	494d      	ldr	r1, [pc, #308]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d028      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	4945      	ldr	r1, [pc, #276]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a3f      	ldr	r2, [pc, #252]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3a:	60d3      	str	r3, [r2, #12]
 8001c3c:	e011      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f872 	bl	8001d38 <RCCEx_PLLSAI1_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8001c5e:	7cfb      	ldrb	r3, [r7, #19]
 8001c60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	492d      	ldr	r1, [pc, #180]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c98:	60d3      	str	r3, [r2, #12]
 8001c9a:	e011      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2101      	movs	r1, #1
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f843 	bl	8001d38 <RCCEx_PLLSAI1_Config>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	4916      	ldr	r1, [pc, #88]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f820 	bl	8001d38 <RCCEx_PLLSAI1_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d18:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	4904      	ldr	r1, [pc, #16]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d28:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d018      	beq.n	8001d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d52:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d10d      	bne.n	8001d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
       ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
       ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d044      	beq.n	8001e08 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e041      	b.n	8001e08 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d00c      	beq.n	8001da6 <RCCEx_PLLSAI1_Config+0x6e>
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d013      	beq.n	8001db8 <RCCEx_PLLSAI1_Config+0x80>
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d120      	bne.n	8001dd6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11d      	bne.n	8001ddc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da4:	e01a      	b.n	8001ddc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db6:	e013      	b.n	8001de0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10f      	bne.n	8001de4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001dd4:	e006      	b.n	8001de4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dda:	e004      	b.n	8001de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ddc:	bf00      	nop
 8001dde:	e002      	b.n	8001de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001de0:	bf00      	nop
 8001de2:	e000      	b.n	8001de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001de4:	bf00      	nop
    }

    if(status == HAL_OK)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	430b      	orrs	r3, r1
 8001e02:	4944      	ldr	r1, [pc, #272]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d17c      	bne.n	8001f08 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a40      	ldr	r2, [pc, #256]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1a:	f7fe fbbb 	bl	8000594 <HAL_GetTick>
 8001e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e20:	e009      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e22:	f7fe fbb7 	bl	8000594 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d902      	bls.n	8001e36 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	73fb      	strb	r3, [r7, #15]
        break;
 8001e34:	e005      	b.n	8001e42 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ef      	bne.n	8001e22 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d15f      	bne.n	8001f08 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d110      	bne.n	8001e70 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001e56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	0211      	lsls	r1, r2, #8
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68d2      	ldr	r2, [r2, #12]
 8001e64:	06d2      	lsls	r2, r2, #27
 8001e66:	430a      	orrs	r2, r1
 8001e68:	492a      	ldr	r1, [pc, #168]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	610b      	str	r3, [r1, #16]
 8001e6e:	e027      	b.n	8001ec0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d112      	bne.n	8001e9c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6892      	ldr	r2, [r2, #8]
 8001e86:	0211      	lsls	r1, r2, #8
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6912      	ldr	r2, [r2, #16]
 8001e8c:	0852      	lsrs	r2, r2, #1
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0552      	lsls	r2, r2, #21
 8001e92:	430a      	orrs	r2, r1
 8001e94:	491f      	ldr	r1, [pc, #124]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	610b      	str	r3, [r1, #16]
 8001e9a:	e011      	b.n	8001ec0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6892      	ldr	r2, [r2, #8]
 8001eac:	0211      	lsls	r1, r2, #8
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6952      	ldr	r2, [r2, #20]
 8001eb2:	0852      	lsrs	r2, r2, #1
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	0652      	lsls	r2, r2, #25
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4916      	ldr	r1, [pc, #88]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fb62 	bl	8000594 <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ed2:	e009      	b.n	8001ee8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ed4:	f7fe fb5e 	bl	8000594 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d902      	bls.n	8001ee8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8001ee6:	e005      	b.n	8001ef4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ef      	beq.n	8001ed4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4904      	ldr	r1, [pc, #16]	; (8001f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06f      	beq.n	800200a <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f001 f926 	bl	8003190 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	22ca      	movs	r2, #202	; 0xca
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2253      	movs	r2, #83	; 0x53
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f87f 	bl	8002060 <RTC_EnterInitMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d14e      	bne.n	800200a <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f7e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	041a      	lsls	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f883 	bl	80020c8 <RTC_ExitInitMode>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11e      	bne.n	800200a <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0203 	bic.w	r2, r2, #3
 8001fda:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800202a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800202c:	f7fe fab2 	bl	8000594 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002032:	e009      	b.n	8002048 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002034:	f7fe faae 	bl	8000594 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002042:	d901      	bls.n	8002048 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e007      	b.n	8002058 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d120      	bne.n	80020bc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f04f 32ff 	mov.w	r2, #4294967295
 8002082:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002084:	f7fe fa86 	bl	8000594 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800208a:	e00d      	b.n	80020a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800208c:	f7fe fa82 	bl	8000594 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800209a:	d905      	bls.n	80020a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2203      	movs	r2, #3
 80020a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <RTC_EnterInitMode+0x5c>
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d1e7      	bne.n	800208c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <RTC_ExitInitMode+0x78>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <RTC_ExitInitMode+0x78>)
 80020da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020de:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <RTC_ExitInitMode+0x78>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff91 	bl	8002014 <HAL_RTC_WaitForSynchro>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01e      	beq.n	8002136 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e017      	b.n	8002136 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <RTC_ExitInitMode+0x78>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <RTC_ExitInitMode+0x78>)
 800210c:	f023 0320 	bic.w	r3, r3, #32
 8002110:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff7e 	bl	8002014 <HAL_RTC_WaitForSynchro>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <RTC_ExitInitMode+0x78>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <RTC_ExitInitMode+0x78>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40002800 	.word	0x40002800

08002144 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800215a:	2302      	movs	r3, #2
 800215c:	e07f      	b.n	800225e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	22ca      	movs	r2, #202	; 0xca
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2253      	movs	r2, #83	; 0x53
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800219e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d120      	bne.n	80021f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80021ae:	f7fe f9f1 	bl	8000594 <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80021b4:	e015      	b.n	80021e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021b6:	f7fe f9ed 	bl	8000594 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c4:	d90d      	bls.n	80021e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	22ff      	movs	r2, #255	; 0xff
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e03d      	b.n	800225e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0e2      	beq.n	80021b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 0107 	bic.w	r1, r3, #7
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002216:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800221e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002222:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002232:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002242:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	22ff      	movs	r2, #255	; 0xff
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002276:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800227a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800229a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f80b 	bl	80022b8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e040      	b.n	8002360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f001 f83e 	bl	8003370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f970 	bl	80025f0 <UART_SetConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fc56 	bl	8002bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fcdd 	bl	8002d18 <UART_CheckIdleState>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d113      	bne.n	80023be <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80ff 	beq.w	80025b2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
      }
      return;
 80023bc:	e0f9      	b.n	80025b2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80c1 	beq.w	8002548 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b6 	beq.w	8002548 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <HAL_UART_IRQHandler+0x9c>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <HAL_UART_IRQHandler+0xc4>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <HAL_UART_IRQHandler+0xec>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2204      	movs	r2, #4
 8002446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d013      	beq.n	8002486 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2208      	movs	r2, #8
 8002478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800247e:	f043 0208 	orr.w	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8093 	beq.w	80025b6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d004      	beq.n	80024d2 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d031      	beq.n	8002536 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fcad 	bl	8002e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d123      	bne.n	800252e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d013      	beq.n	8002526 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002502:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <HAL_UART_IRQHandler+0x25c>)
 8002504:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f999 	bl	8000842 <HAL_DMA_Abort_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002524:	e00e      	b.n	8002544 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f858 	bl	80025dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	e00a      	b.n	8002544 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f854 	bl	80025dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e006      	b.n	8002544 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f850 	bl	80025dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002542:	e038      	b.n	80025b6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	bf00      	nop
    return;
 8002546:	e036      	b.n	80025b6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_UART_IRQHandler+0x206>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fcb2 	bl	8002ed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800256c:	e026      	b.n	80025bc <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002586:	2b00      	cmp	r3, #0
 8002588:	d017      	beq.n	80025ba <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
    }
    return;
 8002592:	e012      	b.n	80025ba <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <HAL_UART_IRQHandler+0x254>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fc78 	bl	8002e9e <UART_EndTransmit_IT>
    return;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <HAL_UART_IRQHandler+0x254>
      return;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <HAL_UART_IRQHandler+0x254>
    return;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <HAL_UART_IRQHandler+0x254>
    return;
 80025ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08002e73 	.word	0x08002e73

080025c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4313      	orrs	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4baf      	ldr	r3, [pc, #700]	; (80028e4 <UART_SetConfig+0x2f4>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	69f9      	ldr	r1, [r7, #28]
 800262e:	430b      	orrs	r3, r1
 8002630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4aa5      	ldr	r2, [pc, #660]	; (80028e8 <UART_SetConfig+0x2f8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	4313      	orrs	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a9c      	ldr	r2, [pc, #624]	; (80028ec <UART_SetConfig+0x2fc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d121      	bne.n	80026c4 <UART_SetConfig+0xd4>
 8002680:	4b9b      	ldr	r3, [pc, #620]	; (80028f0 <UART_SetConfig+0x300>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b03      	cmp	r3, #3
 800268c:	d816      	bhi.n	80026bc <UART_SetConfig+0xcc>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <UART_SetConfig+0xa4>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026ab 	.word	0x080026ab
 80026a0:	080026b7 	.word	0x080026b7
 80026a4:	2301      	movs	r3, #1
 80026a6:	76fb      	strb	r3, [r7, #27]
 80026a8:	e098      	b.n	80027dc <UART_SetConfig+0x1ec>
 80026aa:	2302      	movs	r3, #2
 80026ac:	76fb      	strb	r3, [r7, #27]
 80026ae:	e095      	b.n	80027dc <UART_SetConfig+0x1ec>
 80026b0:	2304      	movs	r3, #4
 80026b2:	76fb      	strb	r3, [r7, #27]
 80026b4:	e092      	b.n	80027dc <UART_SetConfig+0x1ec>
 80026b6:	2308      	movs	r3, #8
 80026b8:	76fb      	strb	r3, [r7, #27]
 80026ba:	e08f      	b.n	80027dc <UART_SetConfig+0x1ec>
 80026bc:	2310      	movs	r3, #16
 80026be:	76fb      	strb	r3, [r7, #27]
 80026c0:	bf00      	nop
 80026c2:	e08b      	b.n	80027dc <UART_SetConfig+0x1ec>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a8a      	ldr	r2, [pc, #552]	; (80028f4 <UART_SetConfig+0x304>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d134      	bne.n	8002738 <UART_SetConfig+0x148>
 80026ce:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <UART_SetConfig+0x300>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d829      	bhi.n	8002730 <UART_SetConfig+0x140>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <UART_SetConfig+0xf4>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	08002719 	.word	0x08002719
 80026e8:	08002731 	.word	0x08002731
 80026ec:	08002731 	.word	0x08002731
 80026f0:	08002731 	.word	0x08002731
 80026f4:	08002725 	.word	0x08002725
 80026f8:	08002731 	.word	0x08002731
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002731 	.word	0x08002731
 8002704:	0800271f 	.word	0x0800271f
 8002708:	08002731 	.word	0x08002731
 800270c:	08002731 	.word	0x08002731
 8002710:	08002731 	.word	0x08002731
 8002714:	0800272b 	.word	0x0800272b
 8002718:	2300      	movs	r3, #0
 800271a:	76fb      	strb	r3, [r7, #27]
 800271c:	e05e      	b.n	80027dc <UART_SetConfig+0x1ec>
 800271e:	2302      	movs	r3, #2
 8002720:	76fb      	strb	r3, [r7, #27]
 8002722:	e05b      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002724:	2304      	movs	r3, #4
 8002726:	76fb      	strb	r3, [r7, #27]
 8002728:	e058      	b.n	80027dc <UART_SetConfig+0x1ec>
 800272a:	2308      	movs	r3, #8
 800272c:	76fb      	strb	r3, [r7, #27]
 800272e:	e055      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002730:	2310      	movs	r3, #16
 8002732:	76fb      	strb	r3, [r7, #27]
 8002734:	bf00      	nop
 8002736:	e051      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <UART_SetConfig+0x308>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d120      	bne.n	8002784 <UART_SetConfig+0x194>
 8002742:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <UART_SetConfig+0x300>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800274c:	2b10      	cmp	r3, #16
 800274e:	d00f      	beq.n	8002770 <UART_SetConfig+0x180>
 8002750:	2b10      	cmp	r3, #16
 8002752:	d802      	bhi.n	800275a <UART_SetConfig+0x16a>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0x174>
 8002758:	e010      	b.n	800277c <UART_SetConfig+0x18c>
 800275a:	2b20      	cmp	r3, #32
 800275c:	d005      	beq.n	800276a <UART_SetConfig+0x17a>
 800275e:	2b30      	cmp	r3, #48	; 0x30
 8002760:	d009      	beq.n	8002776 <UART_SetConfig+0x186>
 8002762:	e00b      	b.n	800277c <UART_SetConfig+0x18c>
 8002764:	2300      	movs	r3, #0
 8002766:	76fb      	strb	r3, [r7, #27]
 8002768:	e038      	b.n	80027dc <UART_SetConfig+0x1ec>
 800276a:	2302      	movs	r3, #2
 800276c:	76fb      	strb	r3, [r7, #27]
 800276e:	e035      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002770:	2304      	movs	r3, #4
 8002772:	76fb      	strb	r3, [r7, #27]
 8002774:	e032      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002776:	2308      	movs	r3, #8
 8002778:	76fb      	strb	r3, [r7, #27]
 800277a:	e02f      	b.n	80027dc <UART_SetConfig+0x1ec>
 800277c:	2310      	movs	r3, #16
 800277e:	76fb      	strb	r3, [r7, #27]
 8002780:	bf00      	nop
 8002782:	e02b      	b.n	80027dc <UART_SetConfig+0x1ec>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <UART_SetConfig+0x2f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d124      	bne.n	80027d8 <UART_SetConfig+0x1e8>
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <UART_SetConfig+0x300>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279c:	d012      	beq.n	80027c4 <UART_SetConfig+0x1d4>
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d802      	bhi.n	80027aa <UART_SetConfig+0x1ba>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <UART_SetConfig+0x1c8>
 80027a8:	e012      	b.n	80027d0 <UART_SetConfig+0x1e0>
 80027aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ae:	d006      	beq.n	80027be <UART_SetConfig+0x1ce>
 80027b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027b4:	d009      	beq.n	80027ca <UART_SetConfig+0x1da>
 80027b6:	e00b      	b.n	80027d0 <UART_SetConfig+0x1e0>
 80027b8:	2300      	movs	r3, #0
 80027ba:	76fb      	strb	r3, [r7, #27]
 80027bc:	e00e      	b.n	80027dc <UART_SetConfig+0x1ec>
 80027be:	2302      	movs	r3, #2
 80027c0:	76fb      	strb	r3, [r7, #27]
 80027c2:	e00b      	b.n	80027dc <UART_SetConfig+0x1ec>
 80027c4:	2304      	movs	r3, #4
 80027c6:	76fb      	strb	r3, [r7, #27]
 80027c8:	e008      	b.n	80027dc <UART_SetConfig+0x1ec>
 80027ca:	2308      	movs	r3, #8
 80027cc:	76fb      	strb	r3, [r7, #27]
 80027ce:	e005      	b.n	80027dc <UART_SetConfig+0x1ec>
 80027d0:	2310      	movs	r3, #16
 80027d2:	76fb      	strb	r3, [r7, #27]
 80027d4:	bf00      	nop
 80027d6:	e001      	b.n	80027dc <UART_SetConfig+0x1ec>
 80027d8:	2310      	movs	r3, #16
 80027da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a41      	ldr	r2, [pc, #260]	; (80028e8 <UART_SetConfig+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 80f4 	bne.w	80029d0 <UART_SetConfig+0x3e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027e8:	7efb      	ldrb	r3, [r7, #27]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d823      	bhi.n	8002836 <UART_SetConfig+0x246>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <UART_SetConfig+0x204>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002819 	.word	0x08002819
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002821 	.word	0x08002821
 8002800:	08002837 	.word	0x08002837
 8002804:	08002827 	.word	0x08002827
 8002808:	08002837 	.word	0x08002837
 800280c:	08002837 	.word	0x08002837
 8002810:	08002837 	.word	0x08002837
 8002814:	0800282f 	.word	0x0800282f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002818:	f7fe ffec 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800281e:	e00d      	b.n	800283c <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <UART_SetConfig+0x30c>)
 8002822:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002824:	e00a      	b.n	800283c <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002826:	f7fe ff4f 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 800282a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800282c:	e006      	b.n	800283c <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002834:	e002      	b.n	800283c <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	74fb      	strb	r3, [r7, #19]
        break;
 800283a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 81b9 	beq.w	8002bb6 <UART_SetConfig+0x5c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d305      	bcc.n	8002860 <UART_SetConfig+0x270>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d902      	bls.n	8002866 <UART_SetConfig+0x276>
      {
        ret = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	74fb      	strb	r3, [r7, #19]
 8002864:	e1a7      	b.n	8002bb6 <UART_SetConfig+0x5c6>
      }
      else
      {
        switch (clocksource)
 8002866:	7efb      	ldrb	r3, [r7, #27]
 8002868:	2b08      	cmp	r3, #8
 800286a:	f200 809e 	bhi.w	80029aa <UART_SetConfig+0x3ba>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <UART_SetConfig+0x284>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002899 	.word	0x08002899
 8002878:	080029ab 	.word	0x080029ab
 800287c:	08002901 	.word	0x08002901
 8002880:	080029ab 	.word	0x080029ab
 8002884:	08002935 	.word	0x08002935
 8002888:	080029ab 	.word	0x080029ab
 800288c:	080029ab 	.word	0x080029ab
 8002890:	080029ab 	.word	0x080029ab
 8002894:	08002981 	.word	0x08002981
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002898:	f7fe ffac 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 800289c:	4603      	mov	r3, r0
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	f04f 0400 	mov.w	r4, #0
 80028ac:	0214      	lsls	r4, r2, #8
 80028ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80028b2:	020b      	lsls	r3, r1, #8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6852      	ldr	r2, [r2, #4]
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	4611      	mov	r1, r2
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	eb13 0b01 	adds.w	fp, r3, r1
 80028c4:	eb44 0c02 	adc.w	ip, r4, r2
 80028c8:	4658      	mov	r0, fp
 80028ca:	4661      	mov	r1, ip
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	f7fd fc78 	bl	80001cc <__aeabi_uldivmod>
 80028dc:	4603      	mov	r3, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80028e2:	e065      	b.n	80029b0 <UART_SetConfig+0x3c0>
 80028e4:	efff69f3 	.word	0xefff69f3
 80028e8:	40008000 	.word	0x40008000
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004800 	.word	0x40004800
 80028fc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	49b1      	ldr	r1, [pc, #708]	; (8002bd0 <UART_SetConfig+0x5e0>)
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	eb13 0b01 	adds.w	fp, r3, r1
 8002914:	eb44 0c02 	adc.w	ip, r4, r2
 8002918:	4658      	mov	r0, fp
 800291a:	4661      	mov	r1, ip
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f04f 0400 	mov.w	r4, #0
 8002924:	461a      	mov	r2, r3
 8002926:	4623      	mov	r3, r4
 8002928:	f7fd fc50 	bl	80001cc <__aeabi_uldivmod>
 800292c:	4603      	mov	r3, r0
 800292e:	460c      	mov	r4, r1
 8002930:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002932:	e03d      	b.n	80029b0 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002934:	f7fe fec8 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	f04f 0400 	mov.w	r4, #0
 8002948:	0214      	lsls	r4, r2, #8
 800294a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800294e:	020b      	lsls	r3, r1, #8
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6852      	ldr	r2, [r2, #4]
 8002954:	0852      	lsrs	r2, r2, #1
 8002956:	4611      	mov	r1, r2
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	eb13 0b01 	adds.w	fp, r3, r1
 8002960:	eb44 0c02 	adc.w	ip, r4, r2
 8002964:	4658      	mov	r0, fp
 8002966:	4661      	mov	r1, ip
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	461a      	mov	r2, r3
 8002972:	4623      	mov	r3, r4
 8002974:	f7fd fc2a 	bl	80001cc <__aeabi_uldivmod>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800297e:	e017      	b.n	80029b0 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800298e:	f144 0100 	adc.w	r1, r4, #0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f04f 0400 	mov.w	r4, #0
 800299a:	461a      	mov	r2, r3
 800299c:	4623      	mov	r3, r4
 800299e:	f7fd fc15 	bl	80001cc <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80029a8:	e002      	b.n	80029b0 <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	74fb      	strb	r3, [r7, #19]
            break;
 80029ae:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b6:	d308      	bcc.n	80029ca <UART_SetConfig+0x3da>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029be:	d204      	bcs.n	80029ca <UART_SetConfig+0x3da>
        {
          huart->Instance->BRR = usartdiv;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	e0f5      	b.n	8002bb6 <UART_SetConfig+0x5c6>
        }
        else
        {
          ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	74fb      	strb	r3, [r7, #19]
 80029ce:	e0f2      	b.n	8002bb6 <UART_SetConfig+0x5c6>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	d17f      	bne.n	8002ada <UART_SetConfig+0x4ea>
  {
    switch (clocksource)
 80029da:	7efb      	ldrb	r3, [r7, #27]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d85c      	bhi.n	8002a9a <UART_SetConfig+0x4aa>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0x3f8>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a0d 	.word	0x08002a0d
 80029ec:	08002a2b 	.word	0x08002a2b
 80029f0:	08002a49 	.word	0x08002a49
 80029f4:	08002a9b 	.word	0x08002a9b
 80029f8:	08002a65 	.word	0x08002a65
 80029fc:	08002a9b 	.word	0x08002a9b
 8002a00:	08002a9b 	.word	0x08002a9b
 8002a04:	08002a9b 	.word	0x08002a9b
 8002a08:	08002a83 	.word	0x08002a83
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a0c:	f7fe fef2 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 8002a10:	4603      	mov	r3, r0
 8002a12:	005a      	lsls	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a28:	e03a      	b.n	8002aa0 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a2a:	f7fe fef9 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	005a      	lsls	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a46:	e02b      	b.n	8002aa0 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002a52:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6852      	ldr	r2, [r2, #4]
 8002a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a62:	e01d      	b.n	8002aa0 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a64:	f7fe fe30 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	005a      	lsls	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a80:	e00e      	b.n	8002aa0 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a98:	e002      	b.n	8002aa0 <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d916      	bls.n	8002ad4 <UART_SetConfig+0x4e4>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d212      	bcs.n	8002ad4 <UART_SetConfig+0x4e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f023 030f 	bic.w	r3, r3, #15
 8002ab6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	897a      	ldrh	r2, [r7, #10]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e070      	b.n	8002bb6 <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	74fb      	strb	r3, [r7, #19]
 8002ad8:	e06d      	b.n	8002bb6 <UART_SetConfig+0x5c6>
    }
  }
  else
  {
    switch (clocksource)
 8002ada:	7efb      	ldrb	r3, [r7, #27]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d859      	bhi.n	8002b94 <UART_SetConfig+0x5a4>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <UART_SetConfig+0x4f8>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b29 	.word	0x08002b29
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002b95 	.word	0x08002b95
 8002af8:	08002b61 	.word	0x08002b61
 8002afc:	08002b95 	.word	0x08002b95
 8002b00:	08002b95 	.word	0x08002b95
 8002b04:	08002b95 	.word	0x08002b95
 8002b08:	08002b7d 	.word	0x08002b7d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b0c:	f7fe fe72 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b26:	e038      	b.n	8002b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b28:	f7fe fe7a 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b42:	e02a      	b.n	8002b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6852      	ldr	r2, [r2, #4]
 8002b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b5e:	e01c      	b.n	8002b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b60:	f7fe fdb2 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	441a      	add	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b7a:	e00e      	b.n	8002b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b92:	e002      	b.n	8002b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	74fb      	strb	r3, [r7, #19]
        break;
 8002b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d908      	bls.n	8002bb2 <UART_SetConfig+0x5c2>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d204      	bcs.n	8002bb2 <UART_SetConfig+0x5c2>
    {
      huart->Instance->BRR = usartdiv;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	60da      	str	r2, [r3, #12]
 8002bb0:	e001      	b.n	8002bb6 <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	f4240000 	.word	0xf4240000

08002bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01a      	beq.n	8002cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd2:	d10a      	bne.n	8002cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d26:	f7fd fc35 	bl	8000594 <HAL_GetTick>
 8002d2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d10e      	bne.n	8002d58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f82a 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e020      	b.n	8002d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d10e      	bne.n	8002d84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f814 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00a      	b.n	8002d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	e02a      	b.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d026      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fd fbea 	bl	8000594 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11b      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002de0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e00f      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d0c5      	beq.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e48:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fba3 	bl	80025dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fb80 	bl	80025c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f36:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <MX_GPIO_Init+0xbc>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pins : PAPin PAPin */
      GPIO_InitStruct.Pin = SW_12V_Pin|SW_5V_Pin;
 8002f42:	2303      	movs	r3, #3
 8002f44:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5c:	f7fd fcb2 	bl	80008c4 <HAL_GPIO_Init>

      /*Configure GPIO pins : PAPin PAPin PAPin */
      GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002f60:	2370      	movs	r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f7a:	f7fd fca3 	bl	80008c4 <HAL_GPIO_Init>
      HAL_GPIO_WritePin(GPIOA, SW_12V_Pin|SW_5V_Pin, GPIO_PIN_SET);
 8002f7e:	2201      	movs	r2, #1
 8002f80:	2103      	movs	r1, #3
 8002f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f86:	f7fd fe17 	bl	8000bb8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA,LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2170      	movs	r1, #112	; 0x70
 8002f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f92:	f7fd fe11 	bl	8000bb8 <HAL_GPIO_WritePin>

}
 8002f96:	bf00      	nop
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa8:	f7fd fa90 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fac:	f000 f836 	bl	800301c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fb0:	f7ff ff98 	bl	8002ee4 <MX_GPIO_Init>
  MX_RTC_Init();
 8002fb4:	f000 f8b8 	bl	8003128 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002fb8:	f000 f9aa 	bl	8003310 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(10000);
 8002fbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8002fc0:	f7fd faf4 	bl	80005ac <HAL_Delay>
      __HAL_RCC_USART1_CLK_DISABLE();
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <main+0x70>)
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <main+0x70>)
 8002fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fce:	6613      	str	r3, [r2, #96]	; 0x60
      HAL_GPIO_WritePin(GPIOA, SW_12V_Pin|SW_5V_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2103      	movs	r1, #3
 8002fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd8:	f7fd fdee 	bl	8000bb8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2170      	movs	r1, #112	; 0x70
 8002fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe4:	f7fd fde8 	bl	8000bb8 <HAL_GPIO_WritePin>
      __HAL_RCC_GPIOA_CLK_DISABLE();
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <main+0x70>)
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	4a09      	ldr	r2, [pc, #36]	; (8003014 <main+0x70>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
      __HAL_RCC_GPIOB_CLK_DISABLE();
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <main+0x70>)
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <main+0x70>)
 8002ffa:	f023 0302 	bic.w	r3, r3, #2
 8002ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8003000:	2204      	movs	r2, #4
 8003002:	2114      	movs	r1, #20
 8003004:	4804      	ldr	r0, [pc, #16]	; (8003018 <main+0x74>)
 8003006:	f7ff f89d 	bl	8002144 <HAL_RTCEx_SetWakeUpTimer_IT>
//      HAL_PWR_EnterSTANDBYMode();
      HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFE);
 800300a:	2002      	movs	r0, #2
 800300c:	f7fd fe60 	bl	8000cd0 <HAL_PWREx_EnterSTOP2Mode>
      HAL_Delay(10000);
 8003010:	e7d4      	b.n	8002fbc <main+0x18>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	2000002c 	.word	0x2000002c

0800301c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0ae      	sub	sp, #184	; 0xb8
 8003020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003022:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003026:	2244      	movs	r2, #68	; 0x44
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fa3a 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003030:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	225c      	movs	r2, #92	; 0x5c
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fa2c 	bl	80034a4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800304c:	f7fd fdcc 	bl	8000be8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <SystemClock_Config+0xf4>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a2e      	ldr	r2, [pc, #184]	; (8003110 <SystemClock_Config+0xf4>)
 8003058:	f023 0318 	bic.w	r3, r3, #24
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003060:	2305      	movs	r3, #5
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800306a:	2301      	movs	r3, #1
 800306c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003074:	2303      	movs	r3, #3
 8003076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 800307a:	2305      	movs	r3, #5
 800307c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003080:	2320      	movs	r3, #32
 8003082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003086:	2307      	movs	r3, #7
 8003088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800308c:	2302      	movs	r3, #2
 800308e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003098:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fe43 	bl	8000d28 <HAL_RCC_OscConfig>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80030a8:	f000 f836 	bl	8003118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ac:	230f      	movs	r3, #15
 80030ae:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030b0:	2303      	movs	r3, #3
 80030b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030b8:	2300      	movs	r3, #0
 80030ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030bc:	2300      	movs	r3, #0
 80030be:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80030c4:	2104      	movs	r1, #4
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fa1c 	bl	8001504 <HAL_RCC_ClockConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80030d2:	f000 f821 	bl	8003118 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <SystemClock_Config+0xf8>)
 80030d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fc10 	bl	800190c <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80030f2:	f000 f811 	bl	8003118 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030fa:	f7fd fd93 	bl	8000c24 <HAL_PWREx_ControlVoltageScaling>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003104:	f000 f808 	bl	8003118 <Error_Handler>
  }
}
 8003108:	bf00      	nop
 800310a:	37b8      	adds	r7, #184	; 0xb8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	00020001 	.word	0x00020001

08003118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_RTC_Init+0x60>)
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <MX_RTC_Init+0x64>)
 8003130:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_RTC_Init+0x60>)
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_RTC_Init+0x60>)
 800313a:	227f      	movs	r2, #127	; 0x7f
 800313c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <MX_RTC_Init+0x60>)
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <MX_RTC_Init+0x60>)
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_RTC_Init+0x60>)
 800314c:	2200      	movs	r2, #0
 800314e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <MX_RTC_Init+0x60>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_RTC_Init+0x60>)
 8003158:	2200      	movs	r2, #0
 800315a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800315c:	480a      	ldr	r0, [pc, #40]	; (8003188 <MX_RTC_Init+0x60>)
 800315e:	f7fe fedb 	bl	8001f18 <HAL_RTC_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003168:	f7ff ffd6 	bl	8003118 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800316c:	2204      	movs	r2, #4
 800316e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_RTC_Init+0x60>)
 8003174:	f7fe ffe6 	bl	8002144 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800317e:	f7ff ffcb 	bl	8003118 <Error_Handler>
  }

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000002c 	.word	0x2000002c
 800318c:	40002800 	.word	0x40002800

08003190 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <HAL_RTC_MspInit+0x3c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10f      	bne.n	80031c2 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RTC_MspInit+0x40>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <HAL_RTC_MspInit+0x40>)
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2003      	movs	r0, #3
 80031b8:	f7fd fb09 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80031bc:	2003      	movs	r0, #3
 80031be:	f7fd fb22 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40002800 	.word	0x40002800
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_MspInit+0x44>)
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_MspInit+0x44>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6613      	str	r3, [r2, #96]	; 0x60
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_MspInit+0x44>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_MspInit+0x44>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_MspInit+0x44>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_MspInit+0x44>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322e:	e7fe      	b.n	800322e <HardFault_Handler+0x4>

08003230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003234:	e7fe      	b.n	8003234 <MemManage_Handler+0x4>

08003236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800323a:	e7fe      	b.n	800323a <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler+0x4>

08003242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003270:	f7fd f97e 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
    HAL_NVIC_SystemReset();
 800327c:	f7fd fad1 	bl	8000822 <HAL_NVIC_SystemReset>
  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <RTC_WKUP_IRQHandler+0x14>)
 8003282:	f7fe fff3 	bl	800226c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000002c 	.word	0x2000002c

08003290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <USART1_IRQHandler+0x10>)
 8003296:	f7ff f867 	bl	8002368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000050 	.word	0x20000050

080032a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <SystemInit+0x64>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <SystemInit+0x64>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <SystemInit+0x68>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <SystemInit+0x68>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <SystemInit+0x68>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <SystemInit+0x68>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <SystemInit+0x68>)
 80032d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80032d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80032d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <SystemInit+0x68>)
 80032dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <SystemInit+0x68>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <SystemInit+0x68>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <SystemInit+0x68>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <SystemInit+0x64>)
 80032f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032fa:	609a      	str	r2, [r3, #8]
#endif
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00
 800330c:	40021000 	.word	0x40021000

08003310 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003316:	4a15      	ldr	r2, [pc, #84]	; (800336c <MX_USART1_UART_Init+0x5c>)
 8003318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <MX_USART1_UART_Init+0x58>)
 800331c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <MX_USART1_UART_Init+0x58>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003336:	220c      	movs	r2, #12
 8003338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <MX_USART1_UART_Init+0x58>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <MX_USART1_UART_Init+0x58>)
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003352:	4805      	ldr	r0, [pc, #20]	; (8003368 <MX_USART1_UART_Init+0x58>)
 8003354:	f7fe ffba 	bl	80022cc <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800335e:	f7ff fedb 	bl	8003118 <Error_Handler>
  }

}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000050 	.word	0x20000050
 800336c:	40013800 	.word	0x40013800

08003370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_UART_MspInit+0x90>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d131      	bne.n	80033f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_UART_MspInit+0x94>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_UART_MspInit+0x94>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	6613      	str	r3, [r2, #96]	; 0x60
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_UART_MspInit+0x94>)
 80033a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_UART_MspInit+0x94>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_UART_MspInit+0x94>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_UART_MspInit+0x94>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033d4:	2307      	movs	r3, #7
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4619      	mov	r1, r3
 80033de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e2:	f7fd fa6f 	bl	80008c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	2025      	movs	r0, #37	; 0x25
 80033ec:	f7fd f9ef 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033f0:	2025      	movs	r0, #37	; 0x25
 80033f2:	f7fd fa08 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033f6:	bf00      	nop
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40013800 	.word	0x40013800
 8003404:	40021000 	.word	0x40021000

08003408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003440 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800340c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800340e:	e003      	b.n	8003418 <LoopCopyDataInit>

08003410 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003412:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003414:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003416:	3104      	adds	r1, #4

08003418 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003418:	480b      	ldr	r0, [pc, #44]	; (8003448 <LoopForever+0xa>)
	ldr	r3, =_edata
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <LoopForever+0xe>)
	adds	r2, r0, r1
 800341c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800341e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003420:	d3f6      	bcc.n	8003410 <CopyDataInit>
	ldr	r2, =_sbss
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003424:	e002      	b.n	800342c <LoopFillZerobss>

08003426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003426:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003428:	f842 3b04 	str.w	r3, [r2], #4

0800342c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <LoopForever+0x16>)
	cmp	r2, r3
 800342e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003430:	d3f9      	bcc.n	8003426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003432:	f7ff ff37 	bl	80032a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003436:	f000 f811 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800343a:	f7ff fdb3 	bl	8002fa4 <main>

0800343e <LoopForever>:

LoopForever:
    b LoopForever
 800343e:	e7fe      	b.n	800343e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003440:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003444:	08003524 	.word	0x08003524
	ldr	r0, =_sdata
 8003448:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800344c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003450:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003454:	200000d0 	.word	0x200000d0

08003458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003458:	e7fe      	b.n	8003458 <ADC1_IRQHandler>
	...

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	4e0d      	ldr	r6, [pc, #52]	; (8003494 <__libc_init_array+0x38>)
 8003460:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003462:	1ba4      	subs	r4, r4, r6
 8003464:	10a4      	asrs	r4, r4, #2
 8003466:	2500      	movs	r5, #0
 8003468:	42a5      	cmp	r5, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	4e0b      	ldr	r6, [pc, #44]	; (800349c <__libc_init_array+0x40>)
 800346e:	4c0c      	ldr	r4, [pc, #48]	; (80034a0 <__libc_init_array+0x44>)
 8003470:	f000 f820 	bl	80034b4 <_init>
 8003474:	1ba4      	subs	r4, r4, r6
 8003476:	10a4      	asrs	r4, r4, #2
 8003478:	2500      	movs	r5, #0
 800347a:	42a5      	cmp	r5, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003484:	4798      	blx	r3
 8003486:	3501      	adds	r5, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800348e:	4798      	blx	r3
 8003490:	3501      	adds	r5, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	0800351c 	.word	0x0800351c
 8003498:	0800351c 	.word	0x0800351c
 800349c:	0800351c 	.word	0x0800351c
 80034a0:	08003520 	.word	0x08003520

080034a4 <memset>:
 80034a4:	4402      	add	r2, r0
 80034a6:	4603      	mov	r3, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
