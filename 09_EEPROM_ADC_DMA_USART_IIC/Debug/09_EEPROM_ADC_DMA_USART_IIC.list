
09_EEPROM_ADC_DMA_USART_IIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaa0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800ed40  0800ed40  0001ed40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c4  0800f0c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0c4  0800f0c4  0001f0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0cc  0800f0cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0cc  0800f0cc  0001f0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0d0  0800f0d0  0001f0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800f0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  240001e4  0800f2b8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000474  0800f2b8  00020474  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b82b  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000434a  00000000  00000000  0004ba3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  0004fd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001688  00000000  00000000  000515c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b0e9  00000000  00000000  00052c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018286  00000000  00000000  0008dd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173b6d  00000000  00000000  000a5fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00219b2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007390  00000000  00000000  00219ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ed28 	.word	0x0800ed28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800ed28 	.word	0x0800ed28

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f001 fe8d 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800069a:	f005 fb7d 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 800069e:	4601      	mov	r1, r0
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_Init+0x60>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <HAL_Init+0x64>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa21 f303 	lsr.w	r3, r1, r3
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <HAL_Init+0x68>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_Init+0x68>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_Init+0x60>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	490b      	ldr	r1, [pc, #44]	; (80006f4 <HAL_Init+0x64>)
 80006c8:	5ccb      	ldrb	r3, [r1, r3]
 80006ca:	f003 031f 	and.w	r3, r3, #31
 80006ce:	fa22 f303 	lsr.w	r3, r2, r3
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_Init+0x6c>)
 80006d4:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f812 	bl	8000700 <HAL_InitTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e002      	b.n	80006ec <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006e6:	f00b fb93 	bl	800be10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400
 80006f4:	0800edf0 	.word	0x0800edf0
 80006f8:	24000008 	.word	0x24000008
 80006fc:	2400000c 	.word	0x2400000c

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_InitTick+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e021      	b.n	8000758 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_InitTick+0x64>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fe75 	bl	800241a <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f001 fe3f 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x68>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000004 	.word	0x24000004
 8000764:	24000008 	.word	0x24000008
 8000768:	24000000 	.word	0x24000000

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	24000004 	.word	0x24000004
 8000790:	24000220 	.word	0x24000220

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	24000220 	.word	0x24000220

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff ffee 	bl	8000794 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_Delay+0x40>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffde 	bl	8000794 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	24000004 	.word	0x24000004

080007f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_GetREVID+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	0c1b      	lsrs	r3, r3, #16
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	5c001000 	.word	0x5c001000

08000808 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	609a      	str	r2, [r3, #8]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	431a      	orrs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000870:	b490      	push	{r4, r7}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3360      	adds	r3, #96	; 0x60
 8000882:	461a      	mov	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	430b      	orrs	r3, r1
 800089c:	4313      	orrs	r3, r2
 800089e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc90      	pop	{r4, r7}
 80008a8:	4770      	bx	lr

080008aa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f003 031f 	and.w	r3, r3, #31
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	431a      	orrs	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	611a      	str	r2, [r3, #16]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80008dc:	b490      	push	{r4, r7}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3360      	adds	r3, #96	; 0x60
 80008ec:	461a      	mov	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4313      	orrs	r3, r2
 8000900:	6023      	str	r3, [r4, #0]
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bc90      	pop	{r4, r7}
 800090a:	4770      	bx	lr

0800090c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000932:	b490      	push	{r4, r7}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3330      	adds	r3, #48	; 0x30
 8000942:	461a      	mov	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	f003 030c 	and.w	r3, r3, #12
 800094e:	4413      	add	r3, r2
 8000950:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	f003 031f 	and.w	r3, r3, #31
 800095a:	211f      	movs	r1, #31
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	401a      	ands	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	0e9b      	lsrs	r3, r3, #26
 8000968:	f003 011f 	and.w	r1, r3, #31
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bc90      	pop	{r4, r7}
 8000982:	4770      	bx	lr

08000984 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009aa:	b490      	push	{r4, r7}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3314      	adds	r3, #20
 80009ba:	461a      	mov	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	0e5b      	lsrs	r3, r3, #25
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	4413      	add	r3, r2
 80009c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	0d1b      	lsrs	r3, r3, #20
 80009d0:	f003 031f 	and.w	r3, r3, #31
 80009d4:	2107      	movs	r1, #7
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	401a      	ands	r2, r3
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	0d1b      	lsrs	r3, r3, #20
 80009e2:	f003 031f 	and.w	r3, r3, #31
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc90      	pop	{r4, r7}
 80009f8:	4770      	bx	lr
	...

080009fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a14:	43db      	mvns	r3, r3
 8000a16:	401a      	ands	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0318 	and.w	r3, r3, #24
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	400b      	ands	r3, r1
 8000a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	000fffff 	.word	0x000fffff

08000a44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 031f 	and.w	r3, r3, #31
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6093      	str	r3, [r2, #8]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	5fffffc0 	.word	0x5fffffc0

08000aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab4:	d101      	bne.n	8000aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <LL_ADC_EnableInternalRegulator+0x24>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	6fffffc0 	.word	0x6fffffc0

08000af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b04:	d101      	bne.n	8000b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <LL_ADC_Enable+0x24>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	7fffffc0 	.word	0x7fffffc0

08000b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <LL_ADC_IsEnabled+0x18>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <LL_ADC_IsEnabled+0x1a>
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <LL_ADC_REG_StartConversion+0x24>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	f043 0204 	orr.w	r2, r3, #4
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	7fffffc0 	.word	0x7fffffc0

08000b90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d101      	bne.n	8000ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d101      	bne.n	8000bce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e18e      	b.n	8000f14 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d109      	bne.n	8000c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f00a fcb7 	bl	800b578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff3f 	bl	8000aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff25 	bl	8000a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff5a 	bl	8000af0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d113      	bne.n	8000c6a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff3e 	bl	8000ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c4c:	4b9a      	ldr	r3, [pc, #616]	; (8000eb8 <HAL_ADC_Init+0x2dc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	099b      	lsrs	r3, r3, #6
 8000c52:	4a9a      	ldr	r2, [pc, #616]	; (8000ebc <HAL_ADC_Init+0x2e0>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	099b      	lsrs	r3, r3, #6
 8000c5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c5c:	e002      	b.n	8000c64 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff3e 	bl	8000af0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10d      	bne.n	8000c96 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7e:	f043 0210 	orr.w	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f043 0201 	orr.w	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff78 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 8000ca0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8129 	bne.w	8000f02 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8125 	bne.w	8000f02 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cc0:	f043 0202 	orr.w	r2, r3, #2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff37 	bl	8000b40 <LL_ADC_IsEnabled>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d136      	bne.n	8000d46 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a78      	ldr	r2, [pc, #480]	; (8000ec0 <HAL_ADC_Init+0x2e4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d004      	beq.n	8000cec <HAL_ADC_Init+0x110>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a77      	ldr	r2, [pc, #476]	; (8000ec4 <HAL_ADC_Init+0x2e8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d10e      	bne.n	8000d0a <HAL_ADC_Init+0x12e>
 8000cec:	4874      	ldr	r0, [pc, #464]	; (8000ec0 <HAL_ADC_Init+0x2e4>)
 8000cee:	f7ff ff27 	bl	8000b40 <LL_ADC_IsEnabled>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <HAL_ADC_Init+0x2e8>)
 8000cf6:	f7ff ff23 	bl	8000b40 <LL_ADC_IsEnabled>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf0c      	ite	eq
 8000d02:	2301      	moveq	r3, #1
 8000d04:	2300      	movne	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	e008      	b.n	8000d1c <HAL_ADC_Init+0x140>
 8000d0a:	486f      	ldr	r0, [pc, #444]	; (8000ec8 <HAL_ADC_Init+0x2ec>)
 8000d0c:	f7ff ff18 	bl	8000b40 <LL_ADC_IsEnabled>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d012      	beq.n	8000d46 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a66      	ldr	r2, [pc, #408]	; (8000ec0 <HAL_ADC_Init+0x2e4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d004      	beq.n	8000d34 <HAL_ADC_Init+0x158>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <HAL_ADC_Init+0x2e8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d101      	bne.n	8000d38 <HAL_ADC_Init+0x15c>
 8000d34:	4a65      	ldr	r2, [pc, #404]	; (8000ecc <HAL_ADC_Init+0x2f0>)
 8000d36:	e000      	b.n	8000d3a <HAL_ADC_Init+0x15e>
 8000d38:	4a65      	ldr	r2, [pc, #404]	; (8000ed0 <HAL_ADC_Init+0x2f4>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4610      	mov	r0, r2
 8000d42:	f7ff fd61 	bl	8000808 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000d46:	f7ff fd53 	bl	80007f0 <HAL_GetREVID>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d914      	bls.n	8000d7e <HAL_ADC_Init+0x1a2>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	d110      	bne.n	8000d7e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d5b      	ldrb	r3, [r3, #21]
 8000d60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000d6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7f1b      	ldrb	r3, [r3, #28]
 8000d72:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000d74:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d76:	f043 030c 	orr.w	r3, r3, #12
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e00d      	b.n	8000d9a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7d5b      	ldrb	r3, [r3, #21]
 8000d82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000d8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f1b      	ldrb	r3, [r3, #28]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d106      	bne.n	8000db0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	045b      	lsls	r3, r3, #17
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d009      	beq.n	8000dcc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <HAL_ADC_Init+0x2f8>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fed3 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 8000dea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fee0 	bl	8000bb6 <LL_ADC_INJ_IsConversionOngoing>
 8000df6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d14a      	bne.n	8000e94 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d147      	bne.n	8000e94 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7d1b      	ldrb	r3, [r3, #20]
 8000e08:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_ADC_Init+0x2fc>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	69b9      	ldr	r1, [r7, #24]
 8000e22:	430b      	orrs	r3, r1
 8000e24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11b      	bne.n	8000e68 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_ADC_Init+0x300>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000e44:	3a01      	subs	r2, #1
 8000e46:	0411      	lsls	r1, r2, #16
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e4c:	4311      	orrs	r1, r2
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e52:	4311      	orrs	r1, r2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0201 	orr.w	r2, r2, #1
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	e007      	b.n	8000e78 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 ff8e 	bl	8001db0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d121      	bne.n	8000ee0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f023 010f 	bic.w	r1, r3, #15
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb4:	e01c      	b.n	8000ef0 <HAL_ADC_Init+0x314>
 8000eb6:	bf00      	nop
 8000eb8:	24000008 	.word	0x24000008
 8000ebc:	053e2d63 	.word	0x053e2d63
 8000ec0:	40022000 	.word	0x40022000
 8000ec4:	40022100 	.word	0x40022100
 8000ec8:	58026000 	.word	0x58026000
 8000ecc:	40022300 	.word	0x40022300
 8000ed0:	58026300 	.word	0x58026300
 8000ed4:	fff0c003 	.word	0xfff0c003
 8000ed8:	ffffbffc 	.word	0xffffbffc
 8000edc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020f 	bic.w	r2, r2, #15
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef4:	f023 0303 	bic.w	r3, r3, #3
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
 8000f00:	e007      	b.n	8000f12 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f06:	f043 0210 	orr.w	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3724      	adds	r7, #36	; 0x24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_ADC_Start_DMA+0x158>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_Start_DMA+0x20>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_ADC_Start_DMA+0x15c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_Start_DMA+0x24>
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	; (800107c <HAL_ADC_Start_DMA+0x160>)
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_Start_DMA+0x26>
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_ADC_Start_DMA+0x164>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd7e 	bl	8000a44 <LL_ADC_GetMultimode>
 8000f48:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fe1e 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 8084 	bne.w	8001064 <HAL_ADC_Start_DMA+0x148>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x4e>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e07f      	b.n	800106a <HAL_ADC_Start_DMA+0x14e>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d002      	beq.n	8000f84 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d168      	bne.n	8001056 <HAL_ADC_Start_DMA+0x13a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 fdfb 	bl	8001b80 <ADC_Enable>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d15b      	bne.n	800104c <HAL_ADC_Start_DMA+0x130>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f98:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_ADC_Start_DMA+0x168>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <HAL_ADC_Start_DMA+0x15c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d002      	beq.n	8000fb4 <HAL_ADC_Start_DMA+0x98>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	e000      	b.n	8000fb6 <HAL_ADC_Start_DMA+0x9a>
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_ADC_Start_DMA+0x158>)
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d002      	beq.n	8000fc4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f023 0206 	bic.w	r2, r3, #6
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_ADC_Start_DMA+0x16c>)
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_ADC_Start_DMA+0x170>)
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_ADC_Start_DMA+0x174>)
 8001006:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	221c      	movs	r2, #28
 800100e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0210 	orr.w	r2, r2, #16
 8001026:	605a      	str	r2, [r3, #4]


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3340      	adds	r3, #64	; 0x40
 8001032:	4619      	mov	r1, r3
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f001 fc4e 	bl	80028d8 <HAL_DMA_Start_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd8f 	bl	8000b68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800104a:	e00d      	b.n	8001068 <HAL_ADC_Start_DMA+0x14c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001054:	e008      	b.n	8001068 <HAL_ADC_Start_DMA+0x14c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001062:	e001      	b.n	8001068 <HAL_ADC_Start_DMA+0x14c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001064:	2302      	movs	r3, #2
 8001066:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001068:	7dfb      	ldrb	r3, [r7, #23]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000
 8001078:	40022100 	.word	0x40022100
 800107c:	40022300 	.word	0x40022300
 8001080:	58026300 	.word	0x58026300
 8001084:	fffff0fe 	.word	0xfffff0fe
 8001088:	08001c89 	.word	0x08001c89
 800108c:	08001d61 	.word	0x08001d61
 8001090:	08001d7d 	.word	0x08001d7d

08001094 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_ADC_IRQHandler+0x240>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d004      	beq.n	80010c4 <HAL_ADC_IRQHandler+0x30>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a86      	ldr	r2, [pc, #536]	; (80012d8 <HAL_ADC_IRQHandler+0x244>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_IRQHandler+0x34>
 80010c4:	4b85      	ldr	r3, [pc, #532]	; (80012dc <HAL_ADC_IRQHandler+0x248>)
 80010c6:	e000      	b.n	80010ca <HAL_ADC_IRQHandler+0x36>
 80010c8:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <HAL_ADC_IRQHandler+0x24c>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fcba 	bl	8000a44 <LL_ADC_GetMultimode>
 80010d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d017      	beq.n	800110c <HAL_ADC_IRQHandler+0x78>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d012      	beq.n	800110c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 ffa4 	bl	800204c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2202      	movs	r2, #2
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <HAL_ADC_IRQHandler+0x8c>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10a      	bne.n	8001136 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8083 	beq.w	8001232 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d07d      	beq.n	8001232 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fbda 	bl	800090c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d062      	beq.n	8001224 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a5d      	ldr	r2, [pc, #372]	; (80012d8 <HAL_ADC_IRQHandler+0x244>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d002      	beq.n	800116e <HAL_ADC_IRQHandler+0xda>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	e000      	b.n	8001170 <HAL_ADC_IRQHandler+0xdc>
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_ADC_IRQHandler+0x240>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	4293      	cmp	r3, r2
 8001176:	d008      	beq.n	800118a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d002      	beq.n	800118a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b09      	cmp	r3, #9
 8001188:	d104      	bne.n	8001194 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	623b      	str	r3, [r7, #32]
 8001192:	e00c      	b.n	80011ae <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_ADC_IRQHandler+0x244>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d002      	beq.n	80011a4 <HAL_ADC_IRQHandler+0x110>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_IRQHandler+0x112>
 80011a4:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_ADC_IRQHandler+0x240>)
 80011a6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d135      	bne.n	8001224 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d12e      	bne.n	8001224 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fce0 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11a      	bne.n	800120c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 020c 	bic.w	r2, r2, #12
 80011e4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
 800120a:	e00b      	b.n	8001224 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001210:	f043 0210 	orr.w	r2, r3, #16
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f96f 	bl	8001508 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_ADC_IRQHandler+0x1b2>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10b      	bne.n	800125e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a0 	beq.w	8001392 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 809a 	beq.w	8001392 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb82 	bl	8000984 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001280:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb40 	bl	800090c <LL_ADC_REG_IsTriggerSourceSWStart>
 800128c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_ADC_IRQHandler+0x244>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d002      	beq.n	800129e <HAL_ADC_IRQHandler+0x20a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	e000      	b.n	80012a0 <HAL_ADC_IRQHandler+0x20c>
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_ADC_IRQHandler+0x240>)
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d008      	beq.n	80012ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	d002      	beq.n	80012ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d104      	bne.n	80012c4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	e014      	b.n	80012ee <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <HAL_ADC_IRQHandler+0x244>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00a      	beq.n	80012e4 <HAL_ADC_IRQHandler+0x250>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	e008      	b.n	80012e6 <HAL_ADC_IRQHandler+0x252>
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40022100 	.word	0x40022100
 80012dc:	40022300 	.word	0x40022300
 80012e0:	58026300 	.word	0x58026300
 80012e4:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <HAL_ADC_IRQHandler+0x464>)
 80012e6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10c      	bne.n	800130e <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d142      	bne.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d03f      	beq.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d13a      	bne.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d133      	bne.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d12e      	bne.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc43 	bl	8000bb6 <LL_ADC_INJ_IsConversionOngoing>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11a      	bne.n	800136c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001344:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d112      	bne.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
 800136a:	e00b      	b.n	8001384 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fe39 	bl	8001ffc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2260      	movs	r2, #96	; 0x60
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001398:	2b00      	cmp	r3, #0
 800139a:	d011      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x32c>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f8bc 	bl	8001530 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d012      	beq.n	80013f0 <HAL_ADC_IRQHandler+0x35c>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00d      	beq.n	80013f0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fe1f 	bl	8002024 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <HAL_ADC_IRQHandler+0x38c>
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00d      	beq.n	8001420 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fe11 	bl	8002038 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d043      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x41e>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d03e      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800143c:	2301      	movs	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e021      	b.n	8001486 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d015      	beq.n	8001474 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_ADC_IRQHandler+0x464>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_ADC_IRQHandler+0x3c8>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_ADC_IRQHandler+0x468>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_ADC_IRQHandler+0x3cc>
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_ADC_IRQHandler+0x46c>)
 800145e:	e000      	b.n	8001462 <HAL_ADC_IRQHandler+0x3ce>
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_ADC_IRQHandler+0x470>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fafc 	bl	8000a60 <LL_ADC_GetMultiDMATransfer>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800146e:	2301      	movs	r3, #1
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e008      	b.n	8001486 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }

    if (overrun_error == 1UL)
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10e      	bne.n	80014aa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f043 0202 	orr.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f84d 	bl	8001544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <HAL_ADC_IRQHandler+0x45a>
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d013      	beq.n	80014ee <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f043 0208 	orr.w	r2, r3, #8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fd91 	bl	8002010 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022100 	.word	0x40022100
 8001500:	40022300 	.word	0x40022300
 8001504:	58026300 	.word	0x58026300

08001508 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b099      	sub	sp, #100	; 0x64
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a99      	ldr	r2, [pc, #612]	; (80017d8 <HAL_ADC_ConfigChannel+0x280>)
 8001572:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x2a>
 800157e:	2302      	movs	r3, #2
 8001580:	e2e6      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x5f8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fafe 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 82cb 	bne.w	8001b32 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d108      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x62>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0e9b      	lsrs	r3, r3, #26
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2201      	movs	r2, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	e00f      	b.n	80015da <HAL_ADC_ConfigChannel+0x82>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2201      	movs	r2, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	69d1      	ldr	r1, [r2, #28]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	f7ff f99c 	bl	8000932 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fac6 	bl	8000b90 <LL_ADC_REG_IsConversionOngoing>
 8001604:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fad3 	bl	8000bb6 <LL_ADC_INJ_IsConversionOngoing>
 8001610:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 80b3 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800161a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 80af 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	f7ff f9bb 	bl	80009aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_ADC_ConfigChannel+0x284>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800163c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001640:	d10b      	bne.n	800165a <HAL_ADC_ConfigChannel+0x102>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	e01d      	b.n	8001696 <HAL_ADC_ConfigChannel+0x13e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x128>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	e00a      	b.n	8001696 <HAL_ADC_ConfigChannel+0x13e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d027      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6919      	ldr	r1, [r3, #16]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ae:	f7ff f8df 	bl	8000870 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	7e5b      	ldrb	r3, [r3, #25]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x170>
 80016c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016c6:	e000      	b.n	80016ca <HAL_ADC_ConfigChannel+0x172>
 80016c8:	2300      	movs	r3, #0
 80016ca:	461a      	mov	r2, r3
 80016cc:	f7ff f906 	bl	80008dc <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6919      	ldr	r1, [r3, #16]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x18e>
 80016e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e4:	e000      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x190>
 80016e6:	2300      	movs	r3, #0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff f8de 	bl	80008aa <LL_ADC_SetDataRightShift>
 80016ee:	e047      	b.n	8001780 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	069b      	lsls	r3, r3, #26
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001712:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800171a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	069b      	lsls	r3, r3, #26
 8001724:	429a      	cmp	r2, r3
 8001726:	d107      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001736:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800173e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	069b      	lsls	r3, r3, #26
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800175a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	069b      	lsls	r3, r3, #26
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800177e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9db 	bl	8000b40 <LL_ADC_IsEnabled>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 81d9 	bne.w	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	461a      	mov	r2, r3
 80017a0:	f7ff f92c 	bl	80009fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_ADC_ConfigChannel+0x280>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	f040 8101 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x288>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0e9b      	lsrs	r3, r3, #26
 80017c6:	3301      	adds	r3, #1
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	bf94      	ite	ls
 80017d0:	2301      	movls	r3, #1
 80017d2:	2300      	movhi	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e016      	b.n	8001806 <HAL_ADC_ConfigChannel+0x2ae>
 80017d8:	47ff0000 	.word	0x47ff0000
 80017dc:	5c001000 	.word	0x5c001000
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80017ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	bf94      	ite	ls
 8001800:	2301      	movls	r3, #1
 8001802:	2300      	movhi	r3, #0
 8001804:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001806:	2b00      	cmp	r3, #0
 8001808:	d064      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001812:	2b00      	cmp	r3, #0
 8001814:	d107      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x2ce>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	3301      	adds	r3, #1
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001824:	e00e      	b.n	8001844 <HAL_ADC_ConfigChannel+0x2ec>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	069b      	lsls	r3, r3, #26
 8001840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x30c>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e9b      	lsrs	r3, r3, #26
 8001856:	3301      	adds	r3, #1
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	e010      	b.n	8001886 <HAL_ADC_ConfigChannel+0x32e>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	ea42 0103 	orr.w	r1, r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x354>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	3301      	adds	r3, #1
 800189e:	f003 021f 	and.w	r2, r3, #31
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	051b      	lsls	r3, r3, #20
 80018aa:	e011      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x378>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	430b      	orrs	r3, r1
 80018d2:	e069      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ee:	e00e      	b.n	800190e <HAL_ADC_ConfigChannel+0x3b6>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	61fb      	str	r3, [r7, #28]
  return result;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3301      	adds	r3, #1
 8001908:	069b      	lsls	r3, r3, #26
 800190a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_ConfigChannel+0x3d6>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0e9b      	lsrs	r3, r3, #26
 8001920:	3301      	adds	r3, #1
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	e010      	b.n	8001950 <HAL_ADC_ConfigChannel+0x3f8>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	617b      	str	r3, [r7, #20]
  return result;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	ea42 0103 	orr.w	r1, r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10d      	bne.n	800197c <HAL_ADC_ConfigChannel+0x424>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0e9b      	lsrs	r3, r3, #26
 8001966:	3301      	adds	r3, #1
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	3b1e      	subs	r3, #30
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197a:	e014      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x44e>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	60fb      	str	r3, [r7, #12]
  return result;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	3b1e      	subs	r3, #30
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a6:	430b      	orrs	r3, r1
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7fe fffc 	bl	80009aa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f280 80c4 	bge.w	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x478>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a64      	ldr	r2, [pc, #400]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x47c>
 80019d0:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_ADC_ConfigChannel+0x608>)
 80019d2:	e000      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x47e>
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_ADC_ConfigChannel+0x60c>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe ff3c 	bl	8000854 <LL_ADC_GetCommonPathInternalCh>
 80019dc:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_ConfigChannel+0x49a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5b      	ldr	r2, [pc, #364]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x4b8>
 80019f2:	4859      	ldr	r0, [pc, #356]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 80019f4:	f7ff f8a4 	bl	8000b40 <LL_ADC_IsEnabled>
 80019f8:	4604      	mov	r4, r0
 80019fa:	4858      	ldr	r0, [pc, #352]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 80019fc:	f7ff f8a0 	bl	8000b40 <LL_ADC_IsEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4323      	orrs	r3, r4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e008      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x4ca>
 8001a10:	4855      	ldr	r0, [pc, #340]	; (8001b68 <HAL_ADC_ConfigChannel+0x610>)
 8001a12:	f7ff f895 	bl	8000b40 <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d07b      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <HAL_ADC_ConfigChannel+0x614>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d12e      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x536>
 8001a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d129      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_ADC_ConfigChannel+0x610>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d17f      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0x500>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a42      	ldr	r2, [pc, #264]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x504>
 8001a58:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <HAL_ADC_ConfigChannel+0x608>)
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x506>
 8001a5c:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_ADC_ConfigChannel+0x60c>)
 8001a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7fe fee1 	bl	800082e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_ADC_ConfigChannel+0x618>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	4a40      	ldr	r2, [pc, #256]	; (8001b74 <HAL_ADC_ConfigChannel+0x61c>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001a7e:	e002      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f9      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a8c:	e05a      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_ADC_ConfigChannel+0x620>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d11e      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x57e>
 8001a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <HAL_ADC_ConfigChannel+0x610>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d14b      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0x568>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x56c>
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_ADC_ConfigChannel+0x608>)
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x56e>
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_ADC_ConfigChannel+0x60c>)
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f7fe fead 	bl	800082e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ad4:	e036      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_ADC_ConfigChannel+0x624>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d131      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
 8001ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d12c      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_ADC_ConfigChannel+0x610>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d127      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <HAL_ADC_ConfigChannel+0x600>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x5b0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_ADC_ConfigChannel+0x604>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x5b4>
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <HAL_ADC_ConfigChannel+0x608>)
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x5b6>
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_ADC_ConfigChannel+0x60c>)
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7fe fe89 	bl	800082e <LL_ADC_SetCommonPathInternalCh>
 8001b1c:	e012      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b30:	e008      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3764      	adds	r7, #100	; 0x64
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	40022100 	.word	0x40022100
 8001b60:	40022300 	.word	0x40022300
 8001b64:	58026300 	.word	0x58026300
 8001b68:	58026000 	.word	0x58026000
 8001b6c:	cb840000 	.word	0xcb840000
 8001b70:	24000008 	.word	0x24000008
 8001b74:	053e2d63 	.word	0x053e2d63
 8001b78:	c7520000 	.word	0xc7520000
 8001b7c:	cfb80000 	.word	0xcfb80000

08001b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ffd7 	bl	8000b40 <LL_ADC_IsEnabled>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d167      	bne.n	8001c68 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <ADC_Enable+0xf4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f043 0210 	orr.w	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e053      	b.n	8001c6a <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe ffa6 	bl	8000b18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe fde2 	bl	8000794 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <ADC_Enable+0xf8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <ADC_Enable+0x66>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <ADC_Enable+0xfc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <ADC_Enable+0x6a>
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <ADC_Enable+0x100>)
 8001be8:	e000      	b.n	8001bec <ADC_Enable+0x6c>
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <ADC_Enable+0x104>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ff29 	bl	8000a44 <LL_ADC_GetMultimode>
 8001bf2:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <ADC_Enable+0xfc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d002      	beq.n	8001c04 <ADC_Enable+0x84>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e000      	b.n	8001c06 <ADC_Enable+0x86>
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <ADC_Enable+0xf8>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d129      	bne.n	8001c68 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c14:	e021      	b.n	8001c5a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff90 	bl	8000b40 <LL_ADC_IsEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe ff74 	bl	8000b18 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c30:	f7fe fdb0 	bl	8000794 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d90d      	bls.n	8001c5a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e007      	b.n	8001c6a <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d1d6      	bne.n	8001c16 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	8000003f 	.word	0x8000003f
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40022100 	.word	0x40022100
 8001c80:	40022300 	.word	0x40022300
 8001c84:	58026300 	.word	0x58026300

08001c88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d14b      	bne.n	8001d3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d021      	beq.n	8001d00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fe23 	bl	800090c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d032      	beq.n	8001d32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d12b      	bne.n	8001d32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11f      	bne.n	8001d32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
 8001cfe:	e018      	b.n	8001d32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d111      	bne.n	8001d32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fbe8 	bl	8001508 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d38:	e00e      	b.n	8001d58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fbfc 	bl	8001544 <HAL_ADC_ErrorCallback>
}
 8001d4c:	e004      	b.n	8001d58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fbd4 	bl	800151c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fbce 	bl	8001544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a74      	ldr	r2, [pc, #464]	; (8001f90 <ADC_ConfigureBoostMode+0x1e0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <ADC_ConfigureBoostMode+0x1c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a73      	ldr	r2, [pc, #460]	; (8001f94 <ADC_ConfigureBoostMode+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d109      	bne.n	8001de0 <ADC_ConfigureBoostMode+0x30>
 8001dcc:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <ADC_ConfigureBoostMode+0x1e8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e008      	b.n	8001df2 <ADC_ConfigureBoostMode+0x42>
 8001de0:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <ADC_ConfigureBoostMode+0x1ec>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01a      	beq.n	8001e2c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001df6:	f004 f941 	bl	800607c <HAL_RCC_GetHCLKFreq>
 8001dfa:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e04:	d006      	beq.n	8001e14 <ADC_ConfigureBoostMode+0x64>
 8001e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e0a:	d00b      	beq.n	8001e24 <ADC_ConfigureBoostMode+0x74>
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d000      	beq.n	8001e14 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8001e12:	e05d      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	60fb      	str	r3, [r7, #12]
        break;
 8001e22:	e055      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	60fb      	str	r3, [r7, #12]
        break;
 8001e2a:	e051      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e30:	f005 f85c 	bl	8006eec <HAL_RCCEx_GetPeriphCLKFreq>
 8001e34:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e3e:	d02a      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
 8001e40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e44:	d813      	bhi.n	8001e6e <ADC_ConfigureBoostMode+0xbe>
 8001e46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e4a:	d024      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
 8001e4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e50:	d806      	bhi.n	8001e60 <ADC_ConfigureBoostMode+0xb0>
 8001e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e56:	d01e      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
 8001e58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e5c:	d01b      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8001e5e:	e037      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e64:	d017      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
 8001e66:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e6a:	d014      	beq.n	8001e96 <ADC_ConfigureBoostMode+0xe6>
        break;
 8001e6c:	e030      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001e6e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e72:	d021      	beq.n	8001eb8 <ADC_ConfigureBoostMode+0x108>
 8001e74:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e78:	d806      	bhi.n	8001e88 <ADC_ConfigureBoostMode+0xd8>
 8001e7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e7e:	d013      	beq.n	8001ea8 <ADC_ConfigureBoostMode+0xf8>
 8001e80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e84:	d014      	beq.n	8001eb0 <ADC_ConfigureBoostMode+0x100>
        break;
 8001e86:	e023      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001e88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e8c:	d018      	beq.n	8001ec0 <ADC_ConfigureBoostMode+0x110>
 8001e8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001e92:	d019      	beq.n	8001ec8 <ADC_ConfigureBoostMode+0x118>
        break;
 8001e94:	e01c      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
        break;
 8001ea6:	e013      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
      break;
 8001eae:	e00f      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	60fb      	str	r3, [r7, #12]
        break;
 8001eb6:	e00b      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	60fb      	str	r3, [r7, #12]
        break;
 8001ebe:	e007      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	09db      	lsrs	r3, r3, #7
 8001ec4:	60fb      	str	r3, [r7, #12]
        break;
 8001ec6:	e003      	b.n	8001ed0 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	60fb      	str	r3, [r7, #12]
        break;
 8001ece:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001ed0:	f7fe fc8e 	bl	80007f0 <HAL_GetREVID>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f241 0303 	movw	r3, #4099	; 0x1003
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d815      	bhi.n	8001f0a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <ADC_ConfigureBoostMode+0x1f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d908      	bls.n	8001ef8 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef4:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8001ef6:	e047      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	e03e      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <ADC_ConfigureBoostMode+0x1f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d808      	bhi.n	8001f2a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	e02e      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <ADC_ConfigureBoostMode+0x1f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d90e      	bls.n	8001f50 <ADC_ConfigureBoostMode+0x1a0>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <ADC_ConfigureBoostMode+0x1f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d80a      	bhi.n	8001f50 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e01b      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <ADC_ConfigureBoostMode+0x1f8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d90e      	bls.n	8001f76 <ADC_ConfigureBoostMode+0x1c6>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <ADC_ConfigureBoostMode+0x1fc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d80a      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e008      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001f84:	609a      	str	r2, [r3, #8]
}
 8001f86:	e7ff      	b.n	8001f88 <ADC_ConfigureBoostMode+0x1d8>
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40022100 	.word	0x40022100
 8001f98:	40022300 	.word	0x40022300
 8001f9c:	58026300 	.word	0x58026300
 8001fa0:	01312d00 	.word	0x01312d00
 8001fa4:	005f5e10 	.word	0x005f5e10
 8001fa8:	00bebc20 	.word	0x00bebc20
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <LL_ADC_IsEnabled>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b09f      	sub	sp, #124	; 0x7c
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800207a:	2302      	movs	r3, #2
 800207c:	e0ba      	b.n	80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a5c      	ldr	r2, [pc, #368]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002090:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e001      	b.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e09d      	b.n	80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff8b 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80020c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff85 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d17f      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d17c      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80020ee:	e000      	b.n	80020f2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80020f0:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d039      	beq.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80020fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d004      	beq.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10e      	bne.n	8002140 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002122:	4836      	ldr	r0, [pc, #216]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002124:	f7ff ff44 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002128:	4604      	mov	r4, r0
 800212a:	4835      	ldr	r0, [pc, #212]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800212c:	f7ff ff40 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	4323      	orrs	r3, r4
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e008      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002140:	4832      	ldr	r0, [pc, #200]	; (800220c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002142:	f7ff ff35 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d047      	beq.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800215c:	4013      	ands	r3, r2
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	430a      	orrs	r2, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800216e:	e03a      	b.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10e      	bne.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002190:	481a      	ldr	r0, [pc, #104]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002192:	f7ff ff0d 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002196:	4604      	mov	r4, r0
 8002198:	4819      	ldr	r0, [pc, #100]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800219a:	f7ff ff09 	bl	8001fb0 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	4323      	orrs	r3, r4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e008      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80021ae:	4817      	ldr	r0, [pc, #92]	; (800220c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80021b0:	f7ff fefe 	bl	8001fb0 <LL_ADC_IsEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d0:	e009      	b.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80021e4:	e000      	b.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	377c      	adds	r7, #124	; 0x7c
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}
 80021fc:	40022000 	.word	0x40022000
 8002200:	40022100 	.word	0x40022100
 8002204:	40022300 	.word	0x40022300
 8002208:	58026300 	.word	0x58026300
 800220c:	58026000 	.word	0x58026000
 8002210:	fffff0e0 	.word	0xfffff0e0

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	4313      	orrs	r3, r2
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	05fa0000 	.word	0x05fa0000

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff40 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff90 	bl	8002308 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5f 	bl	80022b4 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff33 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa4 	bl	8002370 <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7fe f9aa 	bl	8000794 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e228      	b.n	800289e <HAL_DMA_Init+0x46a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a66      	ldr	r2, [pc, #408]	; (80025ec <HAL_DMA_Init+0x1b8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d04a      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a65      	ldr	r2, [pc, #404]	; (80025f0 <HAL_DMA_Init+0x1bc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d045      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_DMA_Init+0x1c0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d040      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a62      	ldr	r2, [pc, #392]	; (80025f8 <HAL_DMA_Init+0x1c4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d03b      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_DMA_Init+0x1c8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d036      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5f      	ldr	r2, [pc, #380]	; (8002600 <HAL_DMA_Init+0x1cc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d031      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5d      	ldr	r2, [pc, #372]	; (8002604 <HAL_DMA_Init+0x1d0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02c      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <HAL_DMA_Init+0x1d4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d027      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_DMA_Init+0x1d8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d022      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a59      	ldr	r2, [pc, #356]	; (8002610 <HAL_DMA_Init+0x1dc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d01d      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_DMA_Init+0x1e0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d018      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_DMA_Init+0x1e4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a54      	ldr	r2, [pc, #336]	; (800261c <HAL_DMA_Init+0x1e8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a53      	ldr	r2, [pc, #332]	; (8002620 <HAL_DMA_Init+0x1ec>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_DMA_Init+0x1f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_Init+0xb8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_DMA_Init+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_DMA_Init+0xbc>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_DMA_Init+0xbe>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 810b 	beq.w	800270e <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a37      	ldr	r2, [pc, #220]	; (80025ec <HAL_DMA_Init+0x1b8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <HAL_DMA_Init+0x1bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_DMA_Init+0x1c0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_DMA_Init+0x1c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	; (80025fc <HAL_DMA_Init+0x1c8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_DMA_Init+0x1cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_DMA_Init+0x1d0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_DMA_Init+0x1d4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_DMA_Init+0x1d8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_DMA_Init+0x1dc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_DMA_Init+0x1e0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_DMA_Init+0x1e4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	; (800261c <HAL_DMA_Init+0x1e8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_DMA_Init+0x1ec>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_DMA_Init+0x1f0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Init+0x174>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_DMA_Init+0x1f4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <HAL_DMA_Init+0x186>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e007      	b.n	80025ca <HAL_DMA_Init+0x196>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025ca:	e02f      	b.n	800262c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025cc:	f7fe f8e2 	bl	8000794 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d928      	bls.n	800262c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2220      	movs	r2, #32
 80025de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2203      	movs	r2, #3
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e158      	b.n	800289e <HAL_DMA_Init+0x46a>
 80025ec:	40020010 	.word	0x40020010
 80025f0:	40020028 	.word	0x40020028
 80025f4:	40020040 	.word	0x40020040
 80025f8:	40020058 	.word	0x40020058
 80025fc:	40020070 	.word	0x40020070
 8002600:	40020088 	.word	0x40020088
 8002604:	400200a0 	.word	0x400200a0
 8002608:	400200b8 	.word	0x400200b8
 800260c:	40020410 	.word	0x40020410
 8002610:	40020428 	.word	0x40020428
 8002614:	40020440 	.word	0x40020440
 8002618:	40020458 	.word	0x40020458
 800261c:	40020470 	.word	0x40020470
 8002620:	40020488 	.word	0x40020488
 8002624:	400204a0 	.word	0x400204a0
 8002628:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1c8      	bne.n	80025cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4b98      	ldr	r3, [pc, #608]	; (80028a8 <HAL_DMA_Init+0x474>)
 8002646:	4013      	ands	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002652:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2b04      	cmp	r3, #4
 800267e:	d107      	bne.n	8002690 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4313      	orrs	r3, r2
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d117      	bne.n	80026ea <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f001 fd6f 	bl	80041b0 <DMA_CheckFifoParam>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0d9      	b.n	800289e <HAL_DMA_Init+0x46a>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 fcaa 	bl	800404c <DMA_CalcBaseAndBitshift>
 80026f8:	4603      	mov	r3, r0
 80026fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e08c      	b.n	8002828 <HAL_DMA_Init+0x3f4>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a66      	ldr	r2, [pc, #408]	; (80028ac <HAL_DMA_Init+0x478>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_Init+0x32a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a64      	ldr	r2, [pc, #400]	; (80028b0 <HAL_DMA_Init+0x47c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_Init+0x32a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <HAL_DMA_Init+0x480>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_Init+0x32a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a61      	ldr	r2, [pc, #388]	; (80028b8 <HAL_DMA_Init+0x484>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_Init+0x32a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a60      	ldr	r2, [pc, #384]	; (80028bc <HAL_DMA_Init+0x488>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Init+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <HAL_DMA_Init+0x48c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_Init+0x32a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_DMA_Init+0x490>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_Init+0x32a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5b      	ldr	r2, [pc, #364]	; (80028c8 <HAL_DMA_Init+0x494>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_DMA_Init+0x32e>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_DMA_Init+0x330>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d056      	beq.n	8002816 <HAL_DMA_Init+0x3e2>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_DMA_Init+0x498>)
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Init+0x36e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d102      	bne.n	800279e <HAL_DMA_Init+0x36a>
 8002798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800279c:	e002      	b.n	80027a4 <HAL_DMA_Init+0x370>
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_DMA_Init+0x370>
 80027a2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68d2      	ldr	r2, [r2, #12]
 80027a8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80027aa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 80027b2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 80027ba:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 80027c2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 80027ca:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 80027d2:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_DMA_Init+0x49c>)
 80027ea:	4413      	add	r3, r2
 80027ec:	4a39      	ldr	r2, [pc, #228]	; (80028d4 <HAL_DMA_Init+0x4a0>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 fc26 	bl	800404c <DMA_CalcBaseAndBitshift>
 8002800:	4603      	mov	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e008      	b.n	8002828 <HAL_DMA_Init+0x3f4>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e03a      	b.n	800289e <HAL_DMA_Init+0x46a>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f001 fd3d 	bl	80042a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d102      	bne.n	800283c <HAL_DMA_Init+0x408>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002850:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_DMA_Init+0x448>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d80c      	bhi.n	800287c <HAL_DMA_Init+0x448>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 fdba 	bl	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e008      	b.n	800288e <HAL_DMA_Init+0x45a>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	fe10803f 	.word	0xfe10803f
 80028ac:	58025408 	.word	0x58025408
 80028b0:	5802541c 	.word	0x5802541c
 80028b4:	58025430 	.word	0x58025430
 80028b8:	58025444 	.word	0x58025444
 80028bc:	58025458 	.word	0x58025458
 80028c0:	5802546c 	.word	0x5802546c
 80028c4:	58025480 	.word	0x58025480
 80028c8:	58025494 	.word	0x58025494
 80028cc:	fffe000f 	.word	0xfffe000f
 80028d0:	a7fdabf8 	.word	0xa7fdabf8
 80028d4:	cccccccd 	.word	0xcccccccd

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e1a9      	b.n	8002c48 <HAL_DMA_Start_IT+0x370>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x2a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e1a2      	b.n	8002c48 <HAL_DMA_Start_IT+0x370>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 818d 	bne.w	8002c32 <HAL_DMA_Start_IT+0x35a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_DMA_Start_IT+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a63      	ldr	r2, [pc, #396]	; (8002ad8 <HAL_DMA_Start_IT+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a62      	ldr	r2, [pc, #392]	; (8002adc <HAL_DMA_Start_IT+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a60      	ldr	r2, [pc, #384]	; (8002ae0 <HAL_DMA_Start_IT+0x208>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5f      	ldr	r2, [pc, #380]	; (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_DMA_Start_IT+0x214>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_DMA_Start_IT+0x220>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_DMA_Start_IT+0x224>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_DMA_Start_IT+0x228>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_DMA_Start_IT+0x22c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_DMA_Start_IT+0x230>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_Start_IT+0x100>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e007      	b.n	80029e8 <HAL_DMA_Start_IT+0x110>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 fa0e 	bl	8003e10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a34      	ldr	r2, [pc, #208]	; (8002acc <HAL_DMA_Start_IT+0x1f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a33      	ldr	r2, [pc, #204]	; (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a30      	ldr	r2, [pc, #192]	; (8002ad8 <HAL_DMA_Start_IT+0x200>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <HAL_DMA_Start_IT+0x204>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ae0 <HAL_DMA_Start_IT+0x208>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <HAL_DMA_Start_IT+0x214>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_DMA_Start_IT+0x220>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_DMA_Start_IT+0x224>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <HAL_DMA_Start_IT+0x228>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <HAL_DMA_Start_IT+0x22c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_DMA_Start_IT+0x230>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Start_IT+0x1c0>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_Start_IT+0x1c2>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 021e 	bic.w	r2, r3, #30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0216 	orr.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0208 	orr.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e035      	b.n	8002b38 <HAL_DMA_Start_IT+0x260>
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020e 	bic.w	r2, r3, #14
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 020a 	orr.w	r2, r2, #10
 8002b1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0204 	orr.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Check if DMAMUX Synchronization is enabled */
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_DMA_Start_IT+0x27e>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b54:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DMA_Start_IT+0x296>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a37      	ldr	r2, [pc, #220]	; (8002c50 <HAL_DMA_Start_IT+0x378>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <HAL_DMA_Start_IT+0x37c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_DMA_Start_IT+0x380>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <HAL_DMA_Start_IT+0x384>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_DMA_Start_IT+0x388>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_DMA_Start_IT+0x38c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_DMA_Start_IT+0x390>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	; (8002c6c <HAL_DMA_Start_IT+0x394>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <HAL_DMA_Start_IT+0x398>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <HAL_DMA_Start_IT+0x39c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_DMA_Start_IT+0x3a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_DMA_Start_IT+0x3a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <HAL_DMA_Start_IT+0x3a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <HAL_DMA_Start_IT+0x3ac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_DMA_Start_IT+0x3b0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Start_IT+0x336>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_DMA_Start_IT+0x3b4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_Start_IT+0x348>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e012      	b.n	8002c46 <HAL_DMA_Start_IT+0x36e>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e009      	b.n	8002c46 <HAL_DMA_Start_IT+0x36e>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40020010 	.word	0x40020010
 8002c54:	40020028 	.word	0x40020028
 8002c58:	40020040 	.word	0x40020040
 8002c5c:	40020058 	.word	0x40020058
 8002c60:	40020070 	.word	0x40020070
 8002c64:	40020088 	.word	0x40020088
 8002c68:	400200a0 	.word	0x400200a0
 8002c6c:	400200b8 	.word	0x400200b8
 8002c70:	40020410 	.word	0x40020410
 8002c74:	40020428 	.word	0x40020428
 8002c78:	40020440 	.word	0x40020440
 8002c7c:	40020458 	.word	0x40020458
 8002c80:	40020470 	.word	0x40020470
 8002c84:	40020488 	.word	0x40020488
 8002c88:	400204a0 	.word	0x400204a0
 8002c8c:	400204b8 	.word	0x400204b8

08002c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e188      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e17d      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a8c      	ldr	r2, [pc, #560]	; (8002ef0 <HAL_DMA_Abort_IT+0x260>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a8b      	ldr	r2, [pc, #556]	; (8002ef4 <HAL_DMA_Abort_IT+0x264>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a89      	ldr	r2, [pc, #548]	; (8002ef8 <HAL_DMA_Abort_IT+0x268>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a88      	ldr	r2, [pc, #544]	; (8002efc <HAL_DMA_Abort_IT+0x26c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a86      	ldr	r2, [pc, #536]	; (8002f00 <HAL_DMA_Abort_IT+0x270>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a85      	ldr	r2, [pc, #532]	; (8002f04 <HAL_DMA_Abort_IT+0x274>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <HAL_DMA_Abort_IT+0x278>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a82      	ldr	r2, [pc, #520]	; (8002f0c <HAL_DMA_Abort_IT+0x27c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_DMA_Abort_IT+0x280>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7f      	ldr	r2, [pc, #508]	; (8002f14 <HAL_DMA_Abort_IT+0x284>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <HAL_DMA_Abort_IT+0x288>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	; (8002f1c <HAL_DMA_Abort_IT+0x28c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_DMA_Abort_IT+0x290>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a79      	ldr	r2, [pc, #484]	; (8002f24 <HAL_DMA_Abort_IT+0x294>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_DMA_Abort_IT+0x298>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a76      	ldr	r2, [pc, #472]	; (8002f2c <HAL_DMA_Abort_IT+0x29c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Abort_IT+0xcc>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_Abort_IT+0xce>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d065      	beq.n	8002e2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_DMA_Abort_IT+0x260>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5e      	ldr	r2, [pc, #376]	; (8002ef4 <HAL_DMA_Abort_IT+0x264>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5d      	ldr	r2, [pc, #372]	; (8002ef8 <HAL_DMA_Abort_IT+0x268>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5b      	ldr	r2, [pc, #364]	; (8002efc <HAL_DMA_Abort_IT+0x26c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5a      	ldr	r2, [pc, #360]	; (8002f00 <HAL_DMA_Abort_IT+0x270>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_DMA_Abort_IT+0x274>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <HAL_DMA_Abort_IT+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <HAL_DMA_Abort_IT+0x27c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a54      	ldr	r2, [pc, #336]	; (8002f10 <HAL_DMA_Abort_IT+0x280>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_DMA_Abort_IT+0x284>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a51      	ldr	r2, [pc, #324]	; (8002f18 <HAL_DMA_Abort_IT+0x288>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a4f      	ldr	r2, [pc, #316]	; (8002f1c <HAL_DMA_Abort_IT+0x28c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <HAL_DMA_Abort_IT+0x290>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_DMA_Abort_IT+0x294>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <HAL_DMA_Abort_IT+0x298>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x17a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a49      	ldr	r2, [pc, #292]	; (8002f2c <HAL_DMA_Abort_IT+0x29c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_Abort_IT+0x18c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e0ca      	b.n	8002fb2 <HAL_DMA_Abort_IT+0x322>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e0c1      	b.n	8002fb2 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 020e 	bic.w	r2, r2, #14
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_DMA_Abort_IT+0x260>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04a      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_DMA_Abort_IT+0x264>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d045      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_DMA_Abort_IT+0x268>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d040      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_DMA_Abort_IT+0x26c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d03b      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <HAL_DMA_Abort_IT+0x270>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d036      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <HAL_DMA_Abort_IT+0x274>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d031      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_DMA_Abort_IT+0x278>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d02c      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <HAL_DMA_Abort_IT+0x27c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d027      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_DMA_Abort_IT+0x280>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_DMA_Abort_IT+0x284>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_DMA_Abort_IT+0x288>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <HAL_DMA_Abort_IT+0x28c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_DMA_Abort_IT+0x290>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_DMA_Abort_IT+0x294>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_DMA_Abort_IT+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_DMA_Abort_IT+0x24e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_DMA_Abort_IT+0x29c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d128      	bne.n	8002f30 <HAL_DMA_Abort_IT+0x2a0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e027      	b.n	8002f40 <HAL_DMA_Abort_IT+0x2b0>
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f6e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f86:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f90:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_DMA_IRQHandler+0x1ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_DMA_IRQHandler+0x1b0>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5f      	ldr	r2, [pc, #380]	; (8003170 <HAL_DMA_IRQHandler+0x1b4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d04a      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <HAL_DMA_IRQHandler+0x1b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d045      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_DMA_IRQHandler+0x1bc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d040      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5a      	ldr	r2, [pc, #360]	; (800317c <HAL_DMA_IRQHandler+0x1c0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03b      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a59      	ldr	r2, [pc, #356]	; (8003180 <HAL_DMA_IRQHandler+0x1c4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d036      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_DMA_IRQHandler+0x1c8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_DMA_IRQHandler+0x1cc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d02c      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_DMA_IRQHandler+0x1d0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_DMA_IRQHandler+0x1d4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a51      	ldr	r2, [pc, #324]	; (8003194 <HAL_DMA_IRQHandler+0x1d8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a50      	ldr	r2, [pc, #320]	; (8003198 <HAL_DMA_IRQHandler+0x1dc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_DMA_IRQHandler+0x1e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4d      	ldr	r2, [pc, #308]	; (80031a0 <HAL_DMA_IRQHandler+0x1e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_DMA_IRQHandler+0xd2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_DMA_IRQHandler+0x1f0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_DMA_IRQHandler+0xd6>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_DMA_IRQHandler+0xd8>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 842b 	beq.w	80038f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2208      	movs	r2, #8
 80030a4:	409a      	lsls	r2, r3
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80a2 	beq.w	80031f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_DMA_IRQHandler+0x1b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d04a      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_DMA_IRQHandler+0x1b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d045      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_DMA_IRQHandler+0x1bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_DMA_IRQHandler+0x1c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d03b      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_DMA_IRQHandler+0x1c4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d036      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_DMA_IRQHandler+0x1c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d031      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <HAL_DMA_IRQHandler+0x1cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02c      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a24      	ldr	r2, [pc, #144]	; (800318c <HAL_DMA_IRQHandler+0x1d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d027      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_DMA_IRQHandler+0x1d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_DMA_IRQHandler+0x1d8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01d      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_DMA_IRQHandler+0x1dc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_DMA_IRQHandler+0x1e0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_DMA_IRQHandler+0x1e4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_IRQHandler+0x194>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_DMA_IRQHandler+0x1f0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d12f      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x1f4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e02e      	b.n	80031c4 <HAL_DMA_IRQHandler+0x208>
 8003166:	bf00      	nop
 8003168:	24000008 	.word	0x24000008
 800316c:	1b4e81b5 	.word	0x1b4e81b5
 8003170:	40020010 	.word	0x40020010
 8003174:	40020028 	.word	0x40020028
 8003178:	40020040 	.word	0x40020040
 800317c:	40020058 	.word	0x40020058
 8003180:	40020070 	.word	0x40020070
 8003184:	40020088 	.word	0x40020088
 8003188:	400200a0 	.word	0x400200a0
 800318c:	400200b8 	.word	0x400200b8
 8003190:	40020410 	.word	0x40020410
 8003194:	40020428 	.word	0x40020428
 8003198:	40020440 	.word	0x40020440
 800319c:	40020458 	.word	0x40020458
 80031a0:	40020470 	.word	0x40020470
 80031a4:	40020488 	.word	0x40020488
 80031a8:	400204a0 	.word	0x400204a0
 80031ac:	400204b8 	.word	0x400204b8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0204 	bic.w	r2, r2, #4
 80031d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2208      	movs	r2, #8
 80031e2:	409a      	lsls	r2, r3
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06e      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a67      	ldr	r2, [pc, #412]	; (80033b8 <HAL_DMA_IRQHandler+0x3fc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a66      	ldr	r2, [pc, #408]	; (80033bc <HAL_DMA_IRQHandler+0x400>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a64      	ldr	r2, [pc, #400]	; (80033c0 <HAL_DMA_IRQHandler+0x404>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a63      	ldr	r2, [pc, #396]	; (80033c4 <HAL_DMA_IRQHandler+0x408>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a61      	ldr	r2, [pc, #388]	; (80033c8 <HAL_DMA_IRQHandler+0x40c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a60      	ldr	r2, [pc, #384]	; (80033cc <HAL_DMA_IRQHandler+0x410>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5e      	ldr	r2, [pc, #376]	; (80033d0 <HAL_DMA_IRQHandler+0x414>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5d      	ldr	r2, [pc, #372]	; (80033d4 <HAL_DMA_IRQHandler+0x418>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <HAL_DMA_IRQHandler+0x41c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5a      	ldr	r2, [pc, #360]	; (80033dc <HAL_DMA_IRQHandler+0x420>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_DMA_IRQHandler+0x424>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_DMA_IRQHandler+0x428>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_DMA_IRQHandler+0x42c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_DMA_IRQHandler+0x430>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2ee>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_DMA_IRQHandler+0x434>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10a      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x304>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e003      	b.n	80032c8 <HAL_DMA_IRQHandler+0x30c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2204      	movs	r2, #4
 80032f2:	409a      	lsls	r2, r3
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808f 	beq.w	800341c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d04a      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_DMA_IRQHandler+0x3fc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d045      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_DMA_IRQHandler+0x400>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d040      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_DMA_IRQHandler+0x404>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d03b      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_DMA_IRQHandler+0x408>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d036      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_DMA_IRQHandler+0x40c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_DMA_IRQHandler+0x410>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d02c      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_DMA_IRQHandler+0x414>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d027      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_DMA_IRQHandler+0x418>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_DMA_IRQHandler+0x41c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DMA_IRQHandler+0x420>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_DMA_IRQHandler+0x424>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_DMA_IRQHandler+0x428>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <HAL_DMA_IRQHandler+0x42c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_DMA_IRQHandler+0x430>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_DMA_IRQHandler+0x3e2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <HAL_DMA_IRQHandler+0x434>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d12a      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x438>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e023      	b.n	80033fc <HAL_DMA_IRQHandler+0x440>
 80033b4:	40020010 	.word	0x40020010
 80033b8:	40020028 	.word	0x40020028
 80033bc:	40020040 	.word	0x40020040
 80033c0:	40020058 	.word	0x40020058
 80033c4:	40020070 	.word	0x40020070
 80033c8:	40020088 	.word	0x40020088
 80033cc:	400200a0 	.word	0x400200a0
 80033d0:	400200b8 	.word	0x400200b8
 80033d4:	40020410 	.word	0x40020410
 80033d8:	40020428 	.word	0x40020428
 80033dc:	40020440 	.word	0x40020440
 80033e0:	40020458 	.word	0x40020458
 80033e4:	40020470 	.word	0x40020470
 80033e8:	40020488 	.word	0x40020488
 80033ec:	400204a0 	.word	0x400204a0
 80033f0:	400204b8 	.word	0x400204b8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2210      	movs	r2, #16
 8003426:	409a      	lsls	r2, r3
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a6 	beq.w	800357e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a85      	ldr	r2, [pc, #532]	; (800364c <HAL_DMA_IRQHandler+0x690>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a83      	ldr	r2, [pc, #524]	; (8003650 <HAL_DMA_IRQHandler+0x694>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a82      	ldr	r2, [pc, #520]	; (8003654 <HAL_DMA_IRQHandler+0x698>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a80      	ldr	r2, [pc, #512]	; (8003658 <HAL_DMA_IRQHandler+0x69c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7f      	ldr	r2, [pc, #508]	; (800365c <HAL_DMA_IRQHandler+0x6a0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a7d      	ldr	r2, [pc, #500]	; (8003660 <HAL_DMA_IRQHandler+0x6a4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7c      	ldr	r2, [pc, #496]	; (8003664 <HAL_DMA_IRQHandler+0x6a8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a7a      	ldr	r2, [pc, #488]	; (8003668 <HAL_DMA_IRQHandler+0x6ac>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a79      	ldr	r2, [pc, #484]	; (800366c <HAL_DMA_IRQHandler+0x6b0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a77      	ldr	r2, [pc, #476]	; (8003670 <HAL_DMA_IRQHandler+0x6b4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a76      	ldr	r2, [pc, #472]	; (8003674 <HAL_DMA_IRQHandler+0x6b8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a74      	ldr	r2, [pc, #464]	; (8003678 <HAL_DMA_IRQHandler+0x6bc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <HAL_DMA_IRQHandler+0x6c0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a71      	ldr	r2, [pc, #452]	; (8003680 <HAL_DMA_IRQHandler+0x6c4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a70      	ldr	r2, [pc, #448]	; (8003684 <HAL_DMA_IRQHandler+0x6c8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x516>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_DMA_IRQHandler+0x6cc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10a      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x52c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e009      	b.n	80034fc <HAL_DMA_IRQHandler+0x540>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03e      	beq.n	800357e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2210      	movs	r2, #16
 800350a:	409a      	lsls	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d108      	bne.n	800353e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d024      	beq.n	800357e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e01f      	b.n	800357e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01b      	beq.n	800357e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
 800354e:	e016      	b.n	800357e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2220      	movs	r2, #32
 8003588:	409a      	lsls	r2, r3
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8110 	beq.w	80037b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <HAL_DMA_IRQHandler+0x690>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d04a      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_DMA_IRQHandler+0x694>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d045      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <HAL_DMA_IRQHandler+0x698>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d040      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a28      	ldr	r2, [pc, #160]	; (8003658 <HAL_DMA_IRQHandler+0x69c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d03b      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_DMA_IRQHandler+0x6a0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d036      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a25      	ldr	r2, [pc, #148]	; (8003660 <HAL_DMA_IRQHandler+0x6a4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_DMA_IRQHandler+0x6a8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <HAL_DMA_IRQHandler+0x6ac>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d027      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a20      	ldr	r2, [pc, #128]	; (800366c <HAL_DMA_IRQHandler+0x6b0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d022      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_DMA_IRQHandler+0x6b4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d01d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_DMA_IRQHandler+0x6b8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d018      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_DMA_IRQHandler+0x6bc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_DMA_IRQHandler+0x6c0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_DMA_IRQHandler+0x6c4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_DMA_IRQHandler+0x6c8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_DMA_IRQHandler+0x678>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_DMA_IRQHandler+0x6cc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d12b      	bne.n	800368c <HAL_DMA_IRQHandler+0x6d0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e02a      	b.n	80036a0 <HAL_DMA_IRQHandler+0x6e4>
 800364a:	bf00      	nop
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020040 	.word	0x40020040
 8003658:	40020058 	.word	0x40020058
 800365c:	40020070 	.word	0x40020070
 8003660:	40020088 	.word	0x40020088
 8003664:	400200a0 	.word	0x400200a0
 8003668:	400200b8 	.word	0x400200b8
 800366c:	40020410 	.word	0x40020410
 8003670:	40020428 	.word	0x40020428
 8003674:	40020440 	.word	0x40020440
 8003678:	40020458 	.word	0x40020458
 800367c:	40020470 	.word	0x40020470
 8003680:	40020488 	.word	0x40020488
 8003684:	400204a0 	.word	0x400204a0
 8003688:	400204b8 	.word	0x400204b8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8087 	beq.w	80037b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2220      	movs	r2, #32
 80036b0:	409a      	lsls	r2, r3
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d139      	bne.n	8003736 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0216 	bic.w	r2, r2, #22
 80036d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x736>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	223f      	movs	r2, #63	; 0x3f
 800370c:	409a      	lsls	r2, r3
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 834a 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
          }
          return;
 8003734:	e344      	b.n	8003dc0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d018      	beq.n	8003776 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
 8003762:	e027      	b.n	80037b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e01e      	b.n	80037b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0210 	bic.w	r2, r2, #16
 8003792:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8306 	beq.w	8003dca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8088 	beq.w	80038dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2204      	movs	r2, #4
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7a      	ldr	r2, [pc, #488]	; (80039c4 <HAL_DMA_IRQHandler+0xa08>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a79      	ldr	r2, [pc, #484]	; (80039c8 <HAL_DMA_IRQHandler+0xa0c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a77      	ldr	r2, [pc, #476]	; (80039cc <HAL_DMA_IRQHandler+0xa10>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a76      	ldr	r2, [pc, #472]	; (80039d0 <HAL_DMA_IRQHandler+0xa14>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a74      	ldr	r2, [pc, #464]	; (80039d4 <HAL_DMA_IRQHandler+0xa18>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a73      	ldr	r2, [pc, #460]	; (80039d8 <HAL_DMA_IRQHandler+0xa1c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a71      	ldr	r2, [pc, #452]	; (80039dc <HAL_DMA_IRQHandler+0xa20>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a70      	ldr	r2, [pc, #448]	; (80039e0 <HAL_DMA_IRQHandler+0xa24>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6e      	ldr	r2, [pc, #440]	; (80039e4 <HAL_DMA_IRQHandler+0xa28>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6d      	ldr	r2, [pc, #436]	; (80039e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6b      	ldr	r2, [pc, #428]	; (80039ec <HAL_DMA_IRQHandler+0xa30>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6a      	ldr	r2, [pc, #424]	; (80039f0 <HAL_DMA_IRQHandler+0xa34>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a68      	ldr	r2, [pc, #416]	; (80039f4 <HAL_DMA_IRQHandler+0xa38>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <HAL_DMA_IRQHandler+0xa3c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_DMA_IRQHandler+0xa40>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_IRQHandler+0x8b8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a64      	ldr	r2, [pc, #400]	; (8003a00 <HAL_DMA_IRQHandler+0xa44>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <HAL_DMA_IRQHandler+0x8ca>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e007      	b.n	8003896 <HAL_DMA_IRQHandler+0x8da>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	429a      	cmp	r2, r3
 80038a0:	d307      	bcc.n	80038b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <HAL_DMA_IRQHandler+0x8da>
 80038b0:	e000      	b.n	80038b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038b2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038d2:	e003      	b.n	80038dc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8272 	beq.w	8003dca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
 80038ee:	e26c      	b.n	8003dca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <HAL_DMA_IRQHandler+0xa48>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d022      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a42      	ldr	r2, [pc, #264]	; (8003a08 <HAL_DMA_IRQHandler+0xa4c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a40      	ldr	r2, [pc, #256]	; (8003a0c <HAL_DMA_IRQHandler+0xa50>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d018      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3f      	ldr	r2, [pc, #252]	; (8003a10 <HAL_DMA_IRQHandler+0xa54>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <HAL_DMA_IRQHandler+0xa58>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_DMA_IRQHandler+0xa5c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <HAL_DMA_IRQHandler+0xa60>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_DMA_IRQHandler+0x984>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a39      	ldr	r2, [pc, #228]	; (8003a20 <HAL_DMA_IRQHandler+0xa64>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_DMA_IRQHandler+0x988>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_DMA_IRQHandler+0x98a>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 823f 	beq.w	8003dca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2204      	movs	r2, #4
 800395e:	409a      	lsls	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80cd 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xb48>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80c7 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d049      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8210 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ac:	e20a      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8206 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c0:	e200      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xe08>
 80039c2:	bf00      	nop
 80039c4:	40020010 	.word	0x40020010
 80039c8:	40020028 	.word	0x40020028
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40020058 	.word	0x40020058
 80039d4:	40020070 	.word	0x40020070
 80039d8:	40020088 	.word	0x40020088
 80039dc:	400200a0 	.word	0x400200a0
 80039e0:	400200b8 	.word	0x400200b8
 80039e4:	40020410 	.word	0x40020410
 80039e8:	40020428 	.word	0x40020428
 80039ec:	40020440 	.word	0x40020440
 80039f0:	40020458 	.word	0x40020458
 80039f4:	40020470 	.word	0x40020470
 80039f8:	40020488 	.word	0x40020488
 80039fc:	400204a0 	.word	0x400204a0
 8003a00:	400204b8 	.word	0x400204b8
 8003a04:	58025408 	.word	0x58025408
 8003a08:	5802541c 	.word	0x5802541c
 8003a0c:	58025430 	.word	0x58025430
 8003a10:	58025444 	.word	0x58025444
 8003a14:	58025458 	.word	0x58025458
 8003a18:	5802546c 	.word	0x5802546c
 8003a1c:	58025480 	.word	0x58025480
 8003a20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d160      	bne.n	8003af0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a8c      	ldr	r2, [pc, #560]	; (8003c64 <HAL_DMA_IRQHandler+0xca8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_DMA_IRQHandler+0xcac>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a89      	ldr	r2, [pc, #548]	; (8003c6c <HAL_DMA_IRQHandler+0xcb0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_DMA_IRQHandler+0xcb4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a86      	ldr	r2, [pc, #536]	; (8003c74 <HAL_DMA_IRQHandler+0xcb8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a84      	ldr	r2, [pc, #528]	; (8003c78 <HAL_DMA_IRQHandler+0xcbc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a83      	ldr	r2, [pc, #524]	; (8003c7c <HAL_DMA_IRQHandler+0xcc0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <HAL_DMA_IRQHandler+0xcc4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a80      	ldr	r2, [pc, #512]	; (8003c84 <HAL_DMA_IRQHandler+0xcc8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7e      	ldr	r2, [pc, #504]	; (8003c88 <HAL_DMA_IRQHandler+0xccc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <HAL_DMA_IRQHandler+0xcd0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a7b      	ldr	r2, [pc, #492]	; (8003c90 <HAL_DMA_IRQHandler+0xcd4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7a      	ldr	r2, [pc, #488]	; (8003c94 <HAL_DMA_IRQHandler+0xcd8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a78      	ldr	r2, [pc, #480]	; (8003c98 <HAL_DMA_IRQHandler+0xcdc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a77      	ldr	r2, [pc, #476]	; (8003c9c <HAL_DMA_IRQHandler+0xce0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_IRQHandler+0xb12>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a75      	ldr	r2, [pc, #468]	; (8003ca0 <HAL_DMA_IRQHandler+0xce4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0xb24>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0208 	bic.w	r2, r2, #8
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_DMA_IRQHandler+0xb34>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0204 	bic.w	r2, r2, #4
 8003aee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8165 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b02:	e15f      	b.n	8003dc4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80c5 	beq.w	8003ca4 <HAL_DMA_IRQHandler+0xce8>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80bf 	beq.w	8003ca4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2202      	movs	r2, #2
 8003b30:	409a      	lsls	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 813a 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b5c:	e134      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8130 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b70:	e12a      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d168      	bne.n	8003c4e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_DMA_IRQHandler+0xca8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_DMA_IRQHandler+0xcac>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d045      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a35      	ldr	r2, [pc, #212]	; (8003c6c <HAL_DMA_IRQHandler+0xcb0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d040      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <HAL_DMA_IRQHandler+0xcb4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <HAL_DMA_IRQHandler+0xcb8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a31      	ldr	r2, [pc, #196]	; (8003c78 <HAL_DMA_IRQHandler+0xcbc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <HAL_DMA_IRQHandler+0xcc0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02c      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <HAL_DMA_IRQHandler+0xcc4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <HAL_DMA_IRQHandler+0xcc8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	; (8003c88 <HAL_DMA_IRQHandler+0xccc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <HAL_DMA_IRQHandler+0xcd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_DMA_IRQHandler+0xcd4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <HAL_DMA_IRQHandler+0xcd8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <HAL_DMA_IRQHandler+0xcdc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <HAL_DMA_IRQHandler+0xce0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xc60>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <HAL_DMA_IRQHandler+0xce4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0xc72>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0214 	bic.w	r2, r2, #20
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e007      	b.n	8003c3e <HAL_DMA_IRQHandler+0xc82>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 020a 	bic.w	r2, r2, #10
 8003c3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80b8 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c60:	e0b2      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xe0c>
 8003c62:	bf00      	nop
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2208      	movs	r2, #8
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8088 	beq.w	8003dca <HAL_DMA_IRQHandler+0xe0e>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8082 	beq.w	8003dca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a41      	ldr	r2, [pc, #260]	; (8003dd0 <HAL_DMA_IRQHandler+0xe14>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d04a      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <HAL_DMA_IRQHandler+0xe18>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d045      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a3e      	ldr	r2, [pc, #248]	; (8003dd8 <HAL_DMA_IRQHandler+0xe1c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d040      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <HAL_DMA_IRQHandler+0xe20>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d03b      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <HAL_DMA_IRQHandler+0xe24>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d036      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <HAL_DMA_IRQHandler+0xe28>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_DMA_IRQHandler+0xe2c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d02c      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a36      	ldr	r2, [pc, #216]	; (8003dec <HAL_DMA_IRQHandler+0xe30>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d027      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <HAL_DMA_IRQHandler+0xe34>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <HAL_DMA_IRQHandler+0xe38>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01d      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <HAL_DMA_IRQHandler+0xe3c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <HAL_DMA_IRQHandler+0xe40>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <HAL_DMA_IRQHandler+0xe44>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <HAL_DMA_IRQHandler+0xe48>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <HAL_DMA_IRQHandler+0xe4c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xdaa>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_DMA_IRQHandler+0xe50>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d108      	bne.n	8003d78 <HAL_DMA_IRQHandler+0xdbc>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 021c 	bic.w	r2, r2, #28
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e007      	b.n	8003d88 <HAL_DMA_IRQHandler+0xdcc>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 020e 	bic.w	r2, r2, #14
 8003d86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
 8003dbe:	e004      	b.n	8003dca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40020010 	.word	0x40020010
 8003dd4:	40020028 	.word	0x40020028
 8003dd8:	40020040 	.word	0x40020040
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	40020070 	.word	0x40020070
 8003de4:	40020088 	.word	0x40020088
 8003de8:	400200a0 	.word	0x400200a0
 8003dec:	400200b8 	.word	0x400200b8
 8003df0:	40020410 	.word	0x40020410
 8003df4:	40020428 	.word	0x40020428
 8003df8:	40020440 	.word	0x40020440
 8003dfc:	40020458 	.word	0x40020458
 8003e00:	40020470 	.word	0x40020470
 8003e04:	40020488 	.word	0x40020488
 8003e08:	400204a0 	.word	0x400204a0
 8003e0c:	400204b8 	.word	0x400204b8

08003e10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	613b      	str	r3, [r7, #16]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e32:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <DMA_SetConfig+0x36>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e44:	605a      	str	r2, [r3, #4]
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a68      	ldr	r2, [pc, #416]	; (8003fec <DMA_SetConfig+0x1dc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a66      	ldr	r2, [pc, #408]	; (8003ff0 <DMA_SetConfig+0x1e0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a65      	ldr	r2, [pc, #404]	; (8003ff4 <DMA_SetConfig+0x1e4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a63      	ldr	r2, [pc, #396]	; (8003ff8 <DMA_SetConfig+0x1e8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a62      	ldr	r2, [pc, #392]	; (8003ffc <DMA_SetConfig+0x1ec>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a60      	ldr	r2, [pc, #384]	; (8004000 <DMA_SetConfig+0x1f0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5f      	ldr	r2, [pc, #380]	; (8004004 <DMA_SetConfig+0x1f4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a5d      	ldr	r2, [pc, #372]	; (8004008 <DMA_SetConfig+0x1f8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a5c      	ldr	r2, [pc, #368]	; (800400c <DMA_SetConfig+0x1fc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <DMA_SetConfig+0x200>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a59      	ldr	r2, [pc, #356]	; (8004014 <DMA_SetConfig+0x204>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a57      	ldr	r2, [pc, #348]	; (8004018 <DMA_SetConfig+0x208>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a56      	ldr	r2, [pc, #344]	; (800401c <DMA_SetConfig+0x20c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <DMA_SetConfig+0x210>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a53      	ldr	r2, [pc, #332]	; (8004024 <DMA_SetConfig+0x214>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <DMA_SetConfig+0xd6>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <DMA_SetConfig+0x218>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <DMA_SetConfig+0xda>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <DMA_SetConfig+0xdc>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d029      	beq.n	8003f44 <DMA_SetConfig+0x134>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	223f      	movs	r2, #63	; 0x3f
 8003efa:	409a      	lsls	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d108      	bne.n	8003f32 <DMA_SetConfig+0x122>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f30:	e056      	b.n	8003fe0 <DMA_SetConfig+0x1d0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]
}
 8003f42:	e04d      	b.n	8003fe0 <DMA_SetConfig+0x1d0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a38      	ldr	r2, [pc, #224]	; (800402c <DMA_SetConfig+0x21c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a37      	ldr	r2, [pc, #220]	; (8004030 <DMA_SetConfig+0x220>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <DMA_SetConfig+0x224>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a34      	ldr	r2, [pc, #208]	; (8004038 <DMA_SetConfig+0x228>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a32      	ldr	r2, [pc, #200]	; (800403c <DMA_SetConfig+0x22c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <DMA_SetConfig+0x230>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <DMA_SetConfig+0x234>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <DMA_SetConfig+0x184>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <DMA_SetConfig+0x238>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <DMA_SetConfig+0x188>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <DMA_SetConfig+0x18a>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <DMA_SetConfig+0x1d0>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d108      	bne.n	8003fd0 <DMA_SetConfig+0x1c0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
}
 8003fce:	e007      	b.n	8003fe0 <DMA_SetConfig+0x1d0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494

0800404c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <DMA_CalcBaseAndBitshift+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a41      	ldr	r2, [pc, #260]	; (8004168 <DMA_CalcBaseAndBitshift+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3f      	ldr	r2, [pc, #252]	; (800416c <DMA_CalcBaseAndBitshift+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3e      	ldr	r2, [pc, #248]	; (8004170 <DMA_CalcBaseAndBitshift+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <DMA_CalcBaseAndBitshift+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <DMA_CalcBaseAndBitshift+0x12c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a39      	ldr	r2, [pc, #228]	; (800417c <DMA_CalcBaseAndBitshift+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a38      	ldr	r2, [pc, #224]	; (8004180 <DMA_CalcBaseAndBitshift+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a36      	ldr	r2, [pc, #216]	; (8004184 <DMA_CalcBaseAndBitshift+0x138>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <DMA_CalcBaseAndBitshift+0x13c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a33      	ldr	r2, [pc, #204]	; (800418c <DMA_CalcBaseAndBitshift+0x140>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a32      	ldr	r2, [pc, #200]	; (8004190 <DMA_CalcBaseAndBitshift+0x144>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a30      	ldr	r2, [pc, #192]	; (8004194 <DMA_CalcBaseAndBitshift+0x148>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <DMA_CalcBaseAndBitshift+0x14c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2d      	ldr	r2, [pc, #180]	; (800419c <DMA_CalcBaseAndBitshift+0x150>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <DMA_CalcBaseAndBitshift+0x154>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <DMA_CalcBaseAndBitshift+0xac>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <DMA_CalcBaseAndBitshift+0xae>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d024      	beq.n	8004148 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b10      	subs	r3, #16
 8004106:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <DMA_CalcBaseAndBitshift+0x158>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004118:	5cd3      	ldrb	r3, [r2, r3]
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d908      	bls.n	8004138 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <DMA_CalcBaseAndBitshift+0x160>)
 800412e:	4013      	ands	r3, r2
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58
 8004136:	e00d      	b.n	8004154 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <DMA_CalcBaseAndBitshift+0x160>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	e005      	b.n	8004154 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40020010 	.word	0x40020010
 8004168:	40020028 	.word	0x40020028
 800416c:	40020040 	.word	0x40020040
 8004170:	40020058 	.word	0x40020058
 8004174:	40020070 	.word	0x40020070
 8004178:	40020088 	.word	0x40020088
 800417c:	400200a0 	.word	0x400200a0
 8004180:	400200b8 	.word	0x400200b8
 8004184:	40020410 	.word	0x40020410
 8004188:	40020428 	.word	0x40020428
 800418c:	40020440 	.word	0x40020440
 8004190:	40020458 	.word	0x40020458
 8004194:	40020470 	.word	0x40020470
 8004198:	40020488 	.word	0x40020488
 800419c:	400204a0 	.word	0x400204a0
 80041a0:	400204b8 	.word	0x400204b8
 80041a4:	aaaaaaab 	.word	0xaaaaaaab
 80041a8:	0800ede8 	.word	0x0800ede8
 80041ac:	fffffc00 	.word	0xfffffc00

080041b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d120      	bne.n	8004206 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d858      	bhi.n	800427e <DMA_CheckFifoParam+0xce>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <DMA_CheckFifoParam+0x24>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f7 	.word	0x080041f7
 80041dc:	080041e5 	.word	0x080041e5
 80041e0:	0800427f 	.word	0x0800427f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d048      	beq.n	8004282 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f4:	e045      	b.n	8004282 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041fe:	d142      	bne.n	8004286 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004204:	e03f      	b.n	8004286 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	d123      	bne.n	8004258 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	2b03      	cmp	r3, #3
 8004216:	d838      	bhi.n	800428a <DMA_CheckFifoParam+0xda>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <DMA_CheckFifoParam+0x70>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004237 	.word	0x08004237
 8004228:	08004231 	.word	0x08004231
 800422c:	08004249 	.word	0x08004249
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
        break;
 8004234:	e030      	b.n	8004298 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d025      	beq.n	800428e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004246:	e022      	b.n	800428e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004250:	d11f      	bne.n	8004292 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004256:	e01c      	b.n	8004292 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	2b02      	cmp	r3, #2
 800425e:	d902      	bls.n	8004266 <DMA_CheckFifoParam+0xb6>
 8004260:	2b03      	cmp	r3, #3
 8004262:	d003      	beq.n	800426c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004264:	e018      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e015      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
    break;
 800427c:	e00b      	b.n	8004296 <DMA_CheckFifoParam+0xe6>
        break;
 800427e:	bf00      	nop
 8004280:	e00a      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004282:	bf00      	nop
 8004284:	e008      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004286:	bf00      	nop
 8004288:	e006      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 800428a:	bf00      	nop
 800428c:	e004      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
    break;
 8004296:	bf00      	nop
    }
  }

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01a      	beq.n	8004346 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b08      	subs	r3, #8
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004334:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004344:	e024      	b.n	8004390 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3b10      	subs	r3, #16
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d806      	bhi.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d902      	bls.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3308      	adds	r3, #8
 800436c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	58025408 	.word	0x58025408
 80043a0:	5802541c 	.word	0x5802541c
 80043a4:	58025430 	.word	0x58025430
 80043a8:	58025444 	.word	0x58025444
 80043ac:	58025458 	.word	0x58025458
 80043b0:	5802546c 	.word	0x5802546c
 80043b4:	58025480 	.word	0x58025480
 80043b8:	58025494 	.word	0x58025494
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	16009600 	.word	0x16009600
 80043c4:	58025880 	.word	0x58025880
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	400204b8 	.word	0x400204b8
 80043d0:	4002040f 	.word	0x4002040f
 80043d4:	10008200 	.word	0x10008200
 80043d8:	40020880 	.word	0x40020880

080043dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d04a      	beq.n	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d847      	bhi.n	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a24      	ldr	r2, [pc, #144]	; (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004464:	671a      	str	r2, [r3, #112]	; 0x70
 8004466:	e009      	b.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800447a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	58025408 	.word	0x58025408
 8004498:	5802541c 	.word	0x5802541c
 800449c:	58025430 	.word	0x58025430
 80044a0:	58025444 	.word	0x58025444
 80044a4:	58025458 	.word	0x58025458
 80044a8:	5802546c 	.word	0x5802546c
 80044ac:	58025480 	.word	0x58025480
 80044b0:	58025494 	.word	0x58025494
 80044b4:	1600963f 	.word	0x1600963f
 80044b8:	58025940 	.word	0x58025940
 80044bc:	1000823f 	.word	0x1000823f
 80044c0:	40020940 	.word	0x40020940

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_GPIO_Init+0x234>)
 80044d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044d6:	e194      	b.n	8004802 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8186 	beq.w	80047fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x3c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b12      	cmp	r3, #18
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d00b      	beq.n	800459c <HAL_GPIO_Init+0xd8>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d007      	beq.n	800459c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004590:	2b11      	cmp	r3, #17
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b12      	cmp	r3, #18
 800459a:	d130      	bne.n	80045fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d2:	2201      	movs	r2, #1
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f003 0201 	and.w	r2, r3, #1
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80e0 	beq.w	80047fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x238>)
 800463e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004642:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <HAL_GPIO_Init+0x238>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800464c:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_GPIO_Init+0x238>)
 800464e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_GPIO_Init+0x23c>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <HAL_GPIO_Init+0x240>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d052      	beq.n	800472c <HAL_GPIO_Init+0x268>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <HAL_GPIO_Init+0x244>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_GPIO_Init+0x22e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_GPIO_Init+0x248>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <HAL_GPIO_Init+0x22a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_GPIO_Init+0x24c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x226>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_GPIO_Init+0x250>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x222>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_GPIO_Init+0x254>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x21e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_GPIO_Init+0x258>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x21a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_GPIO_Init+0x25c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x216>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_GPIO_Init+0x260>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x212>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_GPIO_Init+0x264>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x20e>
 80046ce:	2309      	movs	r3, #9
 80046d0:	e02d      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046d2:	230a      	movs	r3, #10
 80046d4:	e02b      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046d6:	2308      	movs	r3, #8
 80046d8:	e029      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046da:	2307      	movs	r3, #7
 80046dc:	e027      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046de:	2306      	movs	r3, #6
 80046e0:	e025      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e023      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e021      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e01f      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e01d      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e01b      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046f6:	bf00      	nop
 80046f8:	58000080 	.word	0x58000080
 80046fc:	58024400 	.word	0x58024400
 8004700:	58000400 	.word	0x58000400
 8004704:	58020000 	.word	0x58020000
 8004708:	58020400 	.word	0x58020400
 800470c:	58020800 	.word	0x58020800
 8004710:	58020c00 	.word	0x58020c00
 8004714:	58021000 	.word	0x58021000
 8004718:	58021400 	.word	0x58021400
 800471c:	58021800 	.word	0x58021800
 8004720:	58021c00 	.word	0x58021c00
 8004724:	58022000 	.word	0x58022000
 8004728:	58022400 	.word	0x58022400
 800472c:	2300      	movs	r3, #0
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	f002 0203 	and.w	r2, r2, #3
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	4093      	lsls	r3, r2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473e:	4938      	ldr	r1, [pc, #224]	; (8004820 <HAL_GPIO_Init+0x35c>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f ae63 	bne.w	80044d8 <HAL_GPIO_Init+0x14>
  }
}
 8004812:	bf00      	nop
 8004814:	3724      	adds	r7, #36	; 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	58000400 	.word	0x58000400

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004840:	e003      	b.n	800484a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	887b      	ldrh	r3, [r7, #2]
 8004868:	401a      	ands	r2, r3
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	041a      	lsls	r2, r3, #16
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004878:	e002      	b.n	8004880 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f006 fffc 	bl	800b8b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	; 0x24
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	e006      	b.n	8004914 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004912:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d104      	bne.n	8004926 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004924:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_I2C_Init+0x11c>)
 8004932:	430b      	orrs	r3, r1
 8004934:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004944:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	ea42 0103 	orr.w	r1, r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69d9      	ldr	r1, [r3, #28]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	02008000 	.word	0x02008000

080049ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	460b      	mov	r3, r1
 80049ba:	817b      	strh	r3, [r7, #10]
 80049bc:	4613      	mov	r3, r2
 80049be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	f040 80da 	bne.w	8004b82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_I2C_Master_Transmit+0x30>
 80049d8:	2302      	movs	r3, #2
 80049da:	e0d3      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049e4:	f7fb fed6 	bl	8000794 <HAL_GetTick>
 80049e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2319      	movs	r3, #25
 80049f0:	2201      	movs	r2, #1
 80049f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f9e6 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0be      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2210      	movs	r2, #16
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	893a      	ldrh	r2, [r7, #8]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2bff      	cmp	r3, #255	; 0xff
 8004a36:	d90e      	bls.n	8004a56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	22ff      	movs	r2, #255	; 0xff
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	8979      	ldrh	r1, [r7, #10]
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <HAL_I2C_Master_Transmit+0x1e0>)
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fb48 	bl	80050e4 <I2C_TransferConfig>
 8004a54:	e06c      	b.n	8004b30 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_I2C_Master_Transmit+0x1e0>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fb37 	bl	80050e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004a76:	e05b      	b.n	8004b30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	6a39      	ldr	r1, [r7, #32]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f9e3 	bl	8004e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e07b      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d034      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0x184>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d130      	bne.n	8004b30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2180      	movs	r1, #128	; 0x80
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f975 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e04d      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2bff      	cmp	r3, #255	; 0xff
 8004af0:	d90e      	bls.n	8004b10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	8979      	ldrh	r1, [r7, #10]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 faeb 	bl	80050e4 <I2C_TransferConfig>
 8004b0e:	e00f      	b.n	8004b30 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	8979      	ldrh	r1, [r7, #10]
 8004b22:	2300      	movs	r3, #0
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fada 	bl	80050e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d19e      	bne.n	8004a78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6a39      	ldr	r1, [r7, #32]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f9c2 	bl	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01a      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2220      	movs	r2, #32
 8004b54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_I2C_Master_Transmit+0x1e4>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	80002000 	.word	0x80002000
 8004b90:	fe00e800 	.word	0xfe00e800

08004b94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	817b      	strh	r3, [r7, #10]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	f040 80db 	bne.w	8004d6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2C_Master_Receive+0x30>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0d4      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fb fde2 	bl	8000794 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2319      	movs	r3, #25
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f8f2 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0bf      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2222      	movs	r2, #34	; 0x22
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	893a      	ldrh	r2, [r7, #8]
 8004c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2bff      	cmp	r3, #255	; 0xff
 8004c1e:	d90e      	bls.n	8004c3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	22ff      	movs	r2, #255	; 0xff
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	8979      	ldrh	r1, [r7, #10]
 8004c2e:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <HAL_I2C_Master_Receive+0x1e4>)
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa54 	bl	80050e4 <I2C_TransferConfig>
 8004c3c:	e06d      	b.n	8004d1a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	8979      	ldrh	r1, [r7, #10]
 8004c50:	4b49      	ldr	r3, [pc, #292]	; (8004d78 <HAL_I2C_Master_Receive+0x1e4>)
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa43 	bl	80050e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004c5e:	e05c      	b.n	8004d1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	6a39      	ldr	r1, [r7, #32]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f96b 	bl	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e07c      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d034      	beq.n	8004d1a <HAL_I2C_Master_Receive+0x186>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d130      	bne.n	8004d1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f880 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e04d      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2bff      	cmp	r3, #255	; 0xff
 8004cda:	d90e      	bls.n	8004cfa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	2300      	movs	r3, #0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f9f6 	bl	80050e4 <I2C_TransferConfig>
 8004cf8:	e00f      	b.n	8004d1a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f9e5 	bl	80050e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d19d      	bne.n	8004c60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	6a39      	ldr	r1, [r7, #32]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f8cd 	bl	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e01a      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <HAL_I2C_Master_Receive+0x1e8>)
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	80002400 	.word	0x80002400
 8004d7c:	fe00e800 	.word	0xfe00e800

08004d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d103      	bne.n	8004d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d007      	beq.n	8004dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	619a      	str	r2, [r3, #24]
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd8:	e022      	b.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d01e      	beq.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de2:	f7fb fcd7 	bl	8000794 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e00f      	b.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d0cd      	beq.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e54:	e02c      	b.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f8dc 	bl	8005018 <I2C_IsAcknowledgeFailed>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02a      	b.n	8004ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d01e      	beq.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fb fc8f 	bl	8000794 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d1cb      	bne.n	8004e56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ed4:	e028      	b.n	8004f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f89c 	bl	8005018 <I2C_IsAcknowledgeFailed>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e026      	b.n	8004f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fb fc53 	bl	8000794 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d113      	bne.n	8004f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e007      	b.n	8004f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d1cf      	bne.n	8004ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f4c:	e055      	b.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f860 	bl	8005018 <I2C_IsAcknowledgeFailed>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e053      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d129      	bne.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d105      	bne.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e03f      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e022      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc4:	f7fb fbe6 	bl	8000794 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d302      	bcc.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d1a2      	bne.n	8004f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	fe00e800 	.word	0xfe00e800

08005018 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b10      	cmp	r3, #16
 8005030:	d151      	bne.n	80050d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005032:	e022      	b.n	800507a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d01e      	beq.n	800507a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fb fbaa 	bl	8000794 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <I2C_IsAcknowledgeFailed+0x3a>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e02e      	b.n	80050d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b20      	cmp	r3, #32
 8005086:	d1d5      	bne.n	8005034 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2220      	movs	r2, #32
 8005096:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fe71 	bl	8004d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	fe00e800 	.word	0xfe00e800

080050e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	4613      	mov	r3, r2
 80050f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	0d5b      	lsrs	r3, r3, #21
 8005100:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <I2C_TransferConfig+0x58>)
 8005106:	430b      	orrs	r3, r1
 8005108:	43db      	mvns	r3, r3
 800510a:	ea02 0103 	and.w	r1, r2, r3
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005114:	7a7b      	ldrb	r3, [r7, #9]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	431a      	orrs	r2, r3
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	03ff63ff 	.word	0x03ff63ff

08005140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	d138      	bne.n	80051c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005160:	2302      	movs	r3, #2
 8005162:	e032      	b.n	80051ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d139      	bne.n	8005260 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e033      	b.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005228:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8005278:	4b18      	ldr	r3, [pc, #96]	; (80052dc <HAL_PWREx_ConfigSupply+0x6c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b04      	cmp	r3, #4
 8005282:	d008      	beq.n	8005296 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <HAL_PWREx_ConfigSupply+0x6c>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e01d      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_PWREx_ConfigSupply+0x6c>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 0207 	bic.w	r2, r3, #7
 800529e:	490f      	ldr	r1, [pc, #60]	; (80052dc <HAL_PWREx_ConfigSupply+0x6c>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a6:	f7fb fa75 	bl	8000794 <HAL_GetTick>
 80052aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80052ac:	e009      	b.n	80052c2 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80052ae:	f7fb fa71 	bl	8000794 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052bc:	d901      	bls.n	80052c2 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e007      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_PWREx_ConfigSupply+0x6c>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ce:	d1ee      	bne.n	80052ae <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	58024800 	.word	0x58024800

080052e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e3a4      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8087 	beq.w	800540e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800530a:	4b98      	ldr	r3, [pc, #608]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	2b10      	cmp	r3, #16
 8005314:	d007      	beq.n	8005326 <HAL_RCC_OscConfig+0x46>
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	2b18      	cmp	r3, #24
 800531a:	d110      	bne.n	800533e <HAL_RCC_OscConfig+0x5e>
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d10b      	bne.n	800533e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005326:	4b91      	ldr	r3, [pc, #580]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d06c      	beq.n	800540c <HAL_RCC_OscConfig+0x12c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d168      	bne.n	800540c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e37e      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005346:	d106      	bne.n	8005356 <HAL_RCC_OscConfig+0x76>
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a87      	ldr	r2, [pc, #540]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	e02e      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x98>
 800535e:	4b83      	ldr	r3, [pc, #524]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a82      	ldr	r2, [pc, #520]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b80      	ldr	r3, [pc, #512]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7f      	ldr	r2, [pc, #508]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e01d      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0xbc>
 8005382:	4b7a      	ldr	r3, [pc, #488]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a79      	ldr	r2, [pc, #484]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b77      	ldr	r3, [pc, #476]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a76      	ldr	r2, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 800539c:	4b73      	ldr	r3, [pc, #460]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a72      	ldr	r2, [pc, #456]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b70      	ldr	r3, [pc, #448]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6f      	ldr	r2, [pc, #444]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80053ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fb f9ea 	bl	8000794 <HAL_GetTick>
 80053c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fb f9e6 	bl	8000794 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e332      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d6:	4b65      	ldr	r3, [pc, #404]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0xe4>
 80053e2:	e014      	b.n	800540e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fb f9d6 	bl	8000794 <HAL_GetTick>
 80053e8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fb f9d2 	bl	8000794 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e31e      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053fe:	4b5b      	ldr	r3, [pc, #364]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x10c>
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80b0 	beq.w	800557c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541c:	4b53      	ldr	r3, [pc, #332]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005424:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005426:	4b51      	ldr	r3, [pc, #324]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_RCC_OscConfig+0x162>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b18      	cmp	r3, #24
 8005436:	d149      	bne.n	80054cc <HAL_RCC_OscConfig+0x1ec>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d144      	bne.n	80054cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005442:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_RCC_OscConfig+0x17a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e2f0      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800545a:	4b44      	ldr	r3, [pc, #272]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 0219 	bic.w	r2, r3, #25
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	4941      	ldr	r1, [pc, #260]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fb f992 	bl	8000794 <HAL_GetTick>
 8005470:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005474:	f7fb f98e 	bl	8000794 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e2da      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005492:	f7fb f9ad 	bl	80007f0 <HAL_GetREVID>
 8005496:	4602      	mov	r2, r0
 8005498:	f241 0303 	movw	r3, #4099	; 0x1003
 800549c:	429a      	cmp	r2, r3
 800549e:	d80a      	bhi.n	80054b6 <HAL_RCC_OscConfig+0x1d6>
 80054a0:	4b32      	ldr	r3, [pc, #200]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	492f      	ldr	r1, [pc, #188]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b4:	e062      	b.n	800557c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b2d      	ldr	r3, [pc, #180]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	4929      	ldr	r1, [pc, #164]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ca:	e057      	b.n	800557c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d038      	beq.n	8005546 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054d4:	4b25      	ldr	r3, [pc, #148]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 0219 	bic.w	r2, r3, #25
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4922      	ldr	r1, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fb f955 	bl	8000794 <HAL_GetTick>
 80054ea:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fb f951 	bl	8000794 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e29d      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005500:	4b1a      	ldr	r3, [pc, #104]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	f7fb f970 	bl	80007f0 <HAL_GetREVID>
 8005510:	4602      	mov	r2, r0
 8005512:	f241 0303 	movw	r3, #4099	; 0x1003
 8005516:	429a      	cmp	r2, r3
 8005518:	d80a      	bhi.n	8005530 <HAL_RCC_OscConfig+0x250>
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	031b      	lsls	r3, r3, #12
 8005528:	4910      	ldr	r1, [pc, #64]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]
 800552e:	e025      	b.n	800557c <HAL_RCC_OscConfig+0x29c>
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	061b      	lsls	r3, r3, #24
 800553e:	490b      	ldr	r1, [pc, #44]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
 8005544:	e01a      	b.n	800557c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <HAL_RCC_OscConfig+0x28c>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fb f91f 	bl	8000794 <HAL_GetTick>
 8005556:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555a:	f7fb f91b 	bl	8000794 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d903      	bls.n	8005570 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e267      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
 800556c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005570:	4ba0      	ldr	r3, [pc, #640]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ee      	bne.n	800555a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 808f 	beq.w	80056a8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558a:	4b9a      	ldr	r3, [pc, #616]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005592:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005594:	4b97      	ldr	r3, [pc, #604]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d007      	beq.n	80055b0 <HAL_RCC_OscConfig+0x2d0>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b18      	cmp	r3, #24
 80055a4:	d12d      	bne.n	8005602 <HAL_RCC_OscConfig+0x322>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d128      	bne.n	8005602 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b0:	4b90      	ldr	r3, [pc, #576]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2e8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e239      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c8:	f7fb f912 	bl	80007f0 <HAL_GetREVID>
 80055cc:	4602      	mov	r2, r0
 80055ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d80a      	bhi.n	80055ec <HAL_RCC_OscConfig+0x30c>
 80055d6:	4b87      	ldr	r3, [pc, #540]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	069b      	lsls	r3, r3, #26
 80055e4:	4983      	ldr	r1, [pc, #524]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ea:	e05d      	b.n	80056a8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ec:	4b81      	ldr	r3, [pc, #516]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	497e      	ldr	r1, [pc, #504]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005600:	e052      	b.n	80056a8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d035      	beq.n	8005676 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800560a:	4b7a      	ldr	r3, [pc, #488]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a79      	ldr	r2, [pc, #484]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fb f8bd 	bl	8000794 <HAL_GetTick>
 800561a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800561e:	f7fb f8b9 	bl	8000794 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e205      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005630:	4b70      	ldr	r3, [pc, #448]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800563c:	f7fb f8d8 	bl	80007f0 <HAL_GetREVID>
 8005640:	4602      	mov	r2, r0
 8005642:	f241 0303 	movw	r3, #4099	; 0x1003
 8005646:	429a      	cmp	r2, r3
 8005648:	d80a      	bhi.n	8005660 <HAL_RCC_OscConfig+0x380>
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	069b      	lsls	r3, r3, #26
 8005658:	4966      	ldr	r1, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
 800565e:	e023      	b.n	80056a8 <HAL_RCC_OscConfig+0x3c8>
 8005660:	4b64      	ldr	r3, [pc, #400]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	4961      	ldr	r1, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005670:	4313      	orrs	r3, r2
 8005672:	60cb      	str	r3, [r1, #12]
 8005674:	e018      	b.n	80056a8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005676:	4b5f      	ldr	r3, [pc, #380]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5e      	ldr	r2, [pc, #376]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fb f887 	bl	8000794 <HAL_GetTick>
 8005686:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800568a:	f7fb f883 	bl	8000794 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e1cf      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800569c:	4b55      	ldr	r3, [pc, #340]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f0      	bne.n	800568a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d036      	beq.n	8005722 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d019      	beq.n	80056f0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056bc:	4b4d      	ldr	r3, [pc, #308]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80056be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c0:	4a4c      	ldr	r2, [pc, #304]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fb f864 	bl	8000794 <HAL_GetTick>
 80056cc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fb f860 	bl	8000794 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1ac      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056e2:	4b44      	ldr	r3, [pc, #272]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x3f0>
 80056ee:	e018      	b.n	8005722 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	4a3f      	ldr	r2, [pc, #252]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fb f84a 	bl	8000794 <HAL_GetTick>
 8005700:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005704:	f7fb f846 	bl	8000794 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e192      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005716:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d036      	beq.n	800579c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d019      	beq.n	800576a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005736:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2e      	ldr	r2, [pc, #184]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800573c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005742:	f7fb f827 	bl	8000794 <HAL_GetTick>
 8005746:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800574a:	f7fb f823 	bl	8000794 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e16f      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800575c:	4b25      	ldr	r3, [pc, #148]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCC_OscConfig+0x46a>
 8005768:	e018      	b.n	800579c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800576a:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005776:	f7fb f80d 	bl	8000794 <HAL_GetTick>
 800577a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800577e:	f7fb f809 	bl	8000794 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e155      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005790:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f0      	bne.n	800577e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCC_OscConfig+0x518>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <HAL_RCC_OscConfig+0x518>)
 80057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b6:	f7fa ffed 	bl	8000794 <HAL_GetTick>
 80057ba:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057be:	f7fa ffe9 	bl	8000794 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	; 0x64
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e135      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_OscConfig+0x518>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10b      	bne.n	80057fc <HAL_RCC_OscConfig+0x51c>
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	4a02      	ldr	r2, [pc, #8]	; (80057f4 <HAL_RCC_OscConfig+0x514>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6713      	str	r3, [r2, #112]	; 0x70
 80057f0:	e032      	b.n	8005858 <HAL_RCC_OscConfig+0x578>
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58024800 	.word	0x58024800
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10c      	bne.n	800581e <HAL_RCC_OscConfig+0x53e>
 8005804:	4b8f      	ldr	r3, [pc, #572]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	4a8e      	ldr	r2, [pc, #568]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6713      	str	r3, [r2, #112]	; 0x70
 8005810:	4b8c      	ldr	r3, [pc, #560]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005814:	4a8b      	ldr	r2, [pc, #556]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005816:	f023 0304 	bic.w	r3, r3, #4
 800581a:	6713      	str	r3, [r2, #112]	; 0x70
 800581c:	e01c      	b.n	8005858 <HAL_RCC_OscConfig+0x578>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b05      	cmp	r3, #5
 8005824:	d10c      	bne.n	8005840 <HAL_RCC_OscConfig+0x560>
 8005826:	4b87      	ldr	r3, [pc, #540]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a86      	ldr	r2, [pc, #536]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800582c:	f043 0304 	orr.w	r3, r3, #4
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
 8005832:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a83      	ldr	r2, [pc, #524]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
 800583e:	e00b      	b.n	8005858 <HAL_RCC_OscConfig+0x578>
 8005840:	4b80      	ldr	r3, [pc, #512]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a7f      	ldr	r2, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	4b7d      	ldr	r3, [pc, #500]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a7c      	ldr	r2, [pc, #496]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fa ff98 	bl	8000794 <HAL_GetTick>
 8005864:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005866:	e00a      	b.n	800587e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005868:	f7fa ff94 	bl	8000794 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e0de      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800587e:	4b71      	ldr	r3, [pc, #452]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ee      	beq.n	8005868 <HAL_RCC_OscConfig+0x588>
 800588a:	e014      	b.n	80058b6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fa ff82 	bl	8000794 <HAL_GetTick>
 8005890:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005892:	e00a      	b.n	80058aa <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fa ff7e 	bl	8000794 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e0c8      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058aa:	4b66      	ldr	r3, [pc, #408]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1ee      	bne.n	8005894 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80bd 	beq.w	8005a3a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058c0:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c8:	2b18      	cmp	r3, #24
 80058ca:	f000 80b4 	beq.w	8005a36 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	f040 8095 	bne.w	8005a02 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d8:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80058de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fa ff56 	bl	8000794 <HAL_GetTick>
 80058e8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fa ff52 	bl	8000794 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e09e      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058fe:	4b51      	ldr	r3, [pc, #324]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800590a:	4b4e      	ldr	r3, [pc, #312]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800590c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590e:	4b4e      	ldr	r3, [pc, #312]	; (8005a48 <HAL_RCC_OscConfig+0x768>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	430a      	orrs	r2, r1
 800591e:	4949      	ldr	r1, [pc, #292]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005920:	4313      	orrs	r3, r2
 8005922:	628b      	str	r3, [r1, #40]	; 0x28
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	3b01      	subs	r3, #1
 800592a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	3b01      	subs	r3, #1
 8005934:	025b      	lsls	r3, r3, #9
 8005936:	b29b      	uxth	r3, r3
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	3b01      	subs	r3, #1
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	3b01      	subs	r3, #1
 800594e:	061b      	lsls	r3, r3, #24
 8005950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005954:	493b      	ldr	r1, [pc, #236]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005956:	4313      	orrs	r3, r2
 8005958:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	4a39      	ldr	r2, [pc, #228]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596a:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <HAL_RCC_OscConfig+0x76c>)
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005972:	00d2      	lsls	r2, r2, #3
 8005974:	4933      	ldr	r1, [pc, #204]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005976:	4313      	orrs	r3, r2
 8005978:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800597a:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f023 020c 	bic.w	r2, r3, #12
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	492f      	ldr	r1, [pc, #188]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005988:	4313      	orrs	r3, r2
 800598a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800598c:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	f023 0202 	bic.w	r2, r3, #2
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	492a      	ldr	r1, [pc, #168]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 800599a:	4313      	orrs	r3, r2
 800599c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800599e:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059b6:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fa fedb 	bl	8000794 <HAL_GetTick>
 80059de:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fa fed7 	bl	8000794 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e023      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x702>
 8005a00:	e01b      	b.n	8005a3a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a0f      	ldr	r2, [pc, #60]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fa fec1 	bl	8000794 <HAL_GetTick>
 8005a12:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fa febd 	bl	8000794 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e009      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_OscConfig+0x764>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f0      	bne.n	8005a16 <HAL_RCC_OscConfig+0x736>
 8005a34:	e001      	b.n	8005a3a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	; 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	58024400 	.word	0x58024400
 8005a48:	fffffc0c 	.word	0xfffffc0c
 8005a4c:	ffff0007 	.word	0xffff0007

08005a50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e18d      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a64:	4b8a      	ldr	r3, [pc, #552]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d910      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b87      	ldr	r3, [pc, #540]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 020f 	bic.w	r2, r3, #15
 8005a7a:	4985      	ldr	r1, [pc, #532]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b83      	ldr	r3, [pc, #524]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e175      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d908      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab0:	4b78      	ldr	r3, [pc, #480]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4975      	ldr	r1, [pc, #468]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	4b70      	ldr	r3, [pc, #448]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d908      	bls.n	8005af0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ade:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	496a      	ldr	r1, [pc, #424]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	4b64      	ldr	r3, [pc, #400]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d908      	bls.n	8005b1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	495e      	ldr	r1, [pc, #376]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d010      	beq.n	8005b4c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d908      	bls.n	8005b4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	4953      	ldr	r1, [pc, #332]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d010      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	4b4d      	ldr	r3, [pc, #308]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d908      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f023 020f 	bic.w	r2, r3, #15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4947      	ldr	r1, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d055      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b86:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4940      	ldr	r1, [pc, #256]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba0:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d121      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0e7      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bb8:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d115      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0db      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd0:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0cf      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0c7      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf0:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f023 0207 	bic.w	r2, r3, #7
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4925      	ldr	r1, [pc, #148]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fa fdc7 	bl	8000794 <HAL_GetTick>
 8005c06:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0a:	f7fa fdc3 	bl	8000794 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0af      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c20:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d1eb      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d208      	bcs.n	8005c60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f023 020f 	bic.w	r2, r3, #15
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	490e      	ldr	r1, [pc, #56]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d214      	bcs.n	8005c98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 020f 	bic.w	r2, r3, #15
 8005c76:	4906      	ldr	r1, [pc, #24]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e077      	b.n	8005d80 <HAL_RCC_ClockConfig+0x330>
 8005c90:	52002000 	.word	0x52002000
 8005c94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d010      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d208      	bcs.n	8005cc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cb4:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	4931      	ldr	r1, [pc, #196]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d208      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4926      	ldr	r1, [pc, #152]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d208      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	491a      	ldr	r1, [pc, #104]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d010      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69da      	ldr	r2, [r3, #28]
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d208      	bcs.n	8005d50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	490f      	ldr	r1, [pc, #60]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d50:	f000 f822 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 8005d54:	4601      	mov	r1, r0
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_RCC_ClockConfig+0x338>)
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <HAL_RCC_ClockConfig+0x33c>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	fa21 f303 	lsr.w	r3, r1, r3
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <HAL_RCC_ClockConfig+0x340>)
 8005d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <HAL_RCC_ClockConfig+0x344>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fa fcc3 	bl	8000700 <HAL_InitTick>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	0800edf0 	.word	0x0800edf0
 8005d90:	24000008 	.word	0x24000008
 8005d94:	24000000 	.word	0x24000000

08005d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9e:	4baf      	ldr	r3, [pc, #700]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da6:	2b18      	cmp	r3, #24
 8005da8:	f200 814e 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08006049 	.word	0x08006049
 8005dbc:	08006049 	.word	0x08006049
 8005dc0:	08006049 	.word	0x08006049
 8005dc4:	08006049 	.word	0x08006049
 8005dc8:	08006049 	.word	0x08006049
 8005dcc:	08006049 	.word	0x08006049
 8005dd0:	08006049 	.word	0x08006049
 8005dd4:	08005e3f 	.word	0x08005e3f
 8005dd8:	08006049 	.word	0x08006049
 8005ddc:	08006049 	.word	0x08006049
 8005de0:	08006049 	.word	0x08006049
 8005de4:	08006049 	.word	0x08006049
 8005de8:	08006049 	.word	0x08006049
 8005dec:	08006049 	.word	0x08006049
 8005df0:	08006049 	.word	0x08006049
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08006049 	.word	0x08006049
 8005dfc:	08006049 	.word	0x08006049
 8005e00:	08006049 	.word	0x08006049
 8005e04:	08006049 	.word	0x08006049
 8005e08:	08006049 	.word	0x08006049
 8005e0c:	08006049 	.word	0x08006049
 8005e10:	08006049 	.word	0x08006049
 8005e14:	08005e4b 	.word	0x08005e4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e18:	4b90      	ldr	r3, [pc, #576]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e24:	4b8d      	ldr	r3, [pc, #564]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	4a8c      	ldr	r2, [pc, #560]	; (8006060 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
 8005e34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e36:	e10a      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e38:	4b89      	ldr	r3, [pc, #548]	; (8006060 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e3a:	61bb      	str	r3, [r7, #24]
    break;
 8005e3c:	e107      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e3e:	4b89      	ldr	r3, [pc, #548]	; (8006064 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005e40:	61bb      	str	r3, [r7, #24]
    break;
 8005e42:	e104      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e44:	4b88      	ldr	r3, [pc, #544]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005e46:	61bb      	str	r3, [r7, #24]
    break;
 8005e48:	e101      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4a:	4b84      	ldr	r3, [pc, #528]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e54:	4b81      	ldr	r3, [pc, #516]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e60:	4b7e      	ldr	r3, [pc, #504]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e6a:	4b7c      	ldr	r3, [pc, #496]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6e:	08db      	lsrs	r3, r3, #3
 8005e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80da 	beq.w	8006042 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d05a      	beq.n	8005f4a <HAL_RCC_GetSysClockFreq+0x1b2>
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d302      	bcc.n	8005e9e <HAL_RCC_GetSysClockFreq+0x106>
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d078      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0x1f6>
 8005e9c:	e099      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02d      	beq.n	8005f06 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eaa:	4b6c      	ldr	r3, [pc, #432]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	08db      	lsrs	r3, r3, #3
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	4a6a      	ldr	r2, [pc, #424]	; (8006060 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed4:	4b61      	ldr	r3, [pc, #388]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ee8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800606c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f04:	e087      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006070 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f18:	4b50      	ldr	r3, [pc, #320]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f2c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800606c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f48:	e065      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f54:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006074 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f70:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800606c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f8c:	e043      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa0:	4b2e      	ldr	r3, [pc, #184]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800606c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fd0:	e021      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fdc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006074 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800606c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006014:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	0a5b      	lsrs	r3, r3, #9
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	3301      	adds	r3, #1
 8006022:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 3a90 	vmov	r3, s15
 800603e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006040:	e005      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
    break;
 8006046:	e002      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800604a:	61bb      	str	r3, [r7, #24]
    break;
 800604c:	bf00      	nop
  }

  return sysclockfreq;
 800604e:	69bb      	ldr	r3, [r7, #24]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3724      	adds	r7, #36	; 0x24
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	58024400 	.word	0x58024400
 8006060:	03d09000 	.word	0x03d09000
 8006064:	003d0900 	.word	0x003d0900
 8006068:	017d7840 	.word	0x017d7840
 800606c:	46000000 	.word	0x46000000
 8006070:	4c742400 	.word	0x4c742400
 8006074:	4a742400 	.word	0x4a742400
 8006078:	4bbebc20 	.word	0x4bbebc20

0800607c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006080:	f001 fd64 	bl	8007b4c <HAL_RCCEx_GetD1SysClockFreq>
 8006084:	4601      	mov	r1, r0
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_RCC_GetHCLKFreq+0x30>)
 8006090:	5cd3      	ldrb	r3, [r2, r3]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	fa21 f303 	lsr.w	r3, r1, r3
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800609c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80060a0:	681b      	ldr	r3, [r3, #0]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	58024400 	.word	0x58024400
 80060ac:	0800edf0 	.word	0x0800edf0
 80060b0:	2400000c 	.word	0x2400000c

080060b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060b8:	f7ff ffe0 	bl	800607c <HAL_RCC_GetHCLKFreq>
 80060bc:	4601      	mov	r1, r0
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ca:	5cd3      	ldrb	r3, [r2, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	0800edf0 	.word	0x0800edf0

080060e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060e4:	f7ff ffca 	bl	800607c <HAL_RCC_GetHCLKFreq>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	bd80      	pop	{r7, pc}
 8006104:	58024400 	.word	0x58024400
 8006108:	0800edf0 	.word	0x0800edf0

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006118:	2300      	movs	r3, #0
 800611a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d03d      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006130:	d013      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d802      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800613c:	e01f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800613e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006142:	d013      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006148:	d01c      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800614a:	e018      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800614c:	4baf      	ldr	r3, [pc, #700]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4aae      	ldr	r2, [pc, #696]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006158:	e015      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f001 fd0f 	bl	8007b84 <RCCEx_PLL2_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800616a:	e00c      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 fdb8 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
      break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800618c:	4b9f      	ldr	r3, [pc, #636]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	499c      	ldr	r1, [pc, #624]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800619a:	4313      	orrs	r3, r2
 800619c:	650b      	str	r3, [r1, #80]	; 0x50
 800619e:	e001      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d826      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061e3 	.word	0x080061e3
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800620d 	.word	0x0800620d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d4:	4b8d      	ldr	r3, [pc, #564]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4a8c      	ldr	r2, [pc, #560]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061e0:	e015      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fccb 	bl	8007b84 <RCCEx_PLL2_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f2:	e00c      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3324      	adds	r3, #36	; 0x24
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fd74 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006204:	e003      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
      break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800620c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006214:	4b7d      	ldr	r3, [pc, #500]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	f023 0207 	bic.w	r2, r3, #7
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	497a      	ldr	r1, [pc, #488]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006222:	4313      	orrs	r3, r2
 8006224:	650b      	str	r3, [r1, #80]	; 0x50
 8006226:	e001      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d01c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d804      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d00d      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800624c:	e01e      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800624e:	2bc0      	cmp	r3, #192	; 0xc0
 8006250:	d01f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006256:	d01e      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006258:	e018      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625a:	4b6c      	ldr	r3, [pc, #432]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a6b      	ldr	r2, [pc, #428]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006266:	e017      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fc88 	bl	8007b84 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006278:	e00e      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fd31 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
      break;
 8006290:	e002      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800629e:	4b5b      	ldr	r3, [pc, #364]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	4958      	ldr	r1, [pc, #352]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	650b      	str	r3, [r1, #80]	; 0x50
 80062b0:	e001      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d044      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062cc:	d01f      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80062ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d2:	d805      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062dc:	d00e      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80062de:	e01f      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80062e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e4:	d01f      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80062e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ea:	d01e      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80062ec:	e018      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	4a46      	ldr	r2, [pc, #280]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062fa:	e017      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fc3e 	bl	8007b84 <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800630c:	e00e      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f001 fce7 	bl	8007ce8 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800631e:	e005      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e002      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800632a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006340:	4932      	ldr	r1, [pc, #200]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006342:	4313      	orrs	r3, r2
 8006344:	658b      	str	r3, [r1, #88]	; 0x58
 8006346:	e001      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d044      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006362:	d01f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006368:	d805      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800636e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006372:	d00e      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006374:	e01f      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800637c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006380:	d01e      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006382:	e018      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006384:	4b21      	ldr	r3, [pc, #132]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	4a20      	ldr	r2, [pc, #128]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800638a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006390:	e017      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fbf3 	bl	8007b84 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063a2:	e00e      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fc9c 	bl	8007ce8 <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b4:	e005      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ba:	e002      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80063c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063c8:	4b10      	ldr	r3, [pc, #64]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063d6:	490d      	ldr	r1, [pc, #52]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	658b      	str	r3, [r1, #88]	; 0x58
 80063dc:	e001      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d035      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d00c      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d802      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01b      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80063fe:	e017      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d00c      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006404:	2b30      	cmp	r3, #48	; 0x30
 8006406:	d018      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006408:	e012      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006410:	4baf      	ldr	r3, [pc, #700]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4aae      	ldr	r2, [pc, #696]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800641c:	e00e      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f001 fbad 	bl	8007b84 <RCCEx_PLL2_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800642e:	e005      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	e002      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800643a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006442:	4ba3      	ldr	r3, [pc, #652]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644e:	49a0      	ldr	r1, [pc, #640]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006450:	4313      	orrs	r3, r2
 8006452:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006454:	e001      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d042      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	d01f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006474:	d805      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d00e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006480:	e01f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006486:	d01f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648c:	d01e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800648e:	e018      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006490:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a8e      	ldr	r2, [pc, #568]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800649c:	e017      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fb6d 	bl	8007b84 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064ae:	e00e      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fc16 	bl	8007ce8 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
      break;
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80064cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064d4:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e0:	497b      	ldr	r1, [pc, #492]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	650b      	str	r3, [r1, #80]	; 0x50
 80064e6:	e001      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d042      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006500:	d01b      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006506:	d805      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d022      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006512:	e01b      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006518:	d01d      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800651a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800651e:	d01c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006524:	d01b      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fb28 	bl	8007b84 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006538:	e012      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2101      	movs	r1, #1
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fbd1 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800654a:	e009      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006552:	bf00      	nop
 8006554:	e004      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800655e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006566:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	4957      	ldr	r1, [pc, #348]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006574:	4313      	orrs	r3, r2
 8006576:	650b      	str	r3, [r1, #80]	; 0x50
 8006578:	e001      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d044      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006594:	d01b      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659a:	d805      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d022      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80065a6:	e01b      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d01d      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b2:	d01c      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80065b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065b8:	d01b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80065ba:	e011      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2101      	movs	r1, #1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fade 	bl	8007b84 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065cc:	e012      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fb87 	bl	8007ce8 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065de:	e009      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065e6:	bf00      	nop
 80065e8:	e004      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065fa:	4b35      	ldr	r3, [pc, #212]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	658b      	str	r3, [r1, #88]	; 0x58
 800660e:	e001      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02d      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006628:	d005      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800662a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662e:	d009      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006636:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	4a25      	ldr	r2, [pc, #148]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006642:	e00c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fa9a 	bl	8007b84 <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800665c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	4917      	ldr	r1, [pc, #92]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	650b      	str	r3, [r1, #80]	; 0x50
 8006676:	e001      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d035      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	2b03      	cmp	r3, #3
 800668e:	d81b      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066a9 	.word	0x080066a9
 80066a0:	080066b7 	.word	0x080066b7
 80066a4:	080066d5 	.word	0x080066d5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	2102      	movs	r1, #2
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 fa61 	bl	8007b84 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066c6:	e006      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	75fb      	strb	r3, [r7, #23]
      break;
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
      break;
 80066d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066dc:	4bba      	ldr	r3, [pc, #744]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	f023 0203 	bic.w	r2, r3, #3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	49b7      	ldr	r1, [pc, #732]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066ee:	e001      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8086 	beq.w	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006702:	4bb2      	ldr	r3, [pc, #712]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4ab1      	ldr	r2, [pc, #708]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800670e:	f7fa f841 	bl	8000794 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006714:	e009      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fa f83d 	bl	8000794 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b64      	cmp	r3, #100	; 0x64
 8006722:	d902      	bls.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	75fb      	strb	r3, [r7, #23]
        break;
 8006728:	e005      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672a:	4ba8      	ldr	r3, [pc, #672]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0ef      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d166      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800673c:	4ba2      	ldr	r3, [pc, #648]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800673e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006746:	4053      	eors	r3, r2
 8006748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006750:	4b9d      	ldr	r3, [pc, #628]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006758:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800675a:	4b9b      	ldr	r3, [pc, #620]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a9a      	ldr	r2, [pc, #616]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006766:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a97      	ldr	r2, [pc, #604]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800676c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006772:	4a95      	ldr	r2, [pc, #596]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d115      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fa f806 	bl	8000794 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678a:	e00b      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678c:	f7fa f802 	bl	8000794 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	; 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d902      	bls.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	75fb      	strb	r3, [r7, #23]
            break;
 80067a2:	e005      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067a4:	4b88      	ldr	r3, [pc, #544]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0ed      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d126      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c4:	d10d      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80067c6:	4b80      	ldr	r3, [pc, #512]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d4:	0919      	lsrs	r1, r3, #4
 80067d6:	4b7e      	ldr	r3, [pc, #504]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80067d8:	400b      	ands	r3, r1
 80067da:	497b      	ldr	r1, [pc, #492]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	610b      	str	r3, [r1, #16]
 80067e0:	e005      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80067e2:	4b79      	ldr	r3, [pc, #484]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4a78      	ldr	r2, [pc, #480]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067ec:	6113      	str	r3, [r2, #16]
 80067ee:	4b76      	ldr	r3, [pc, #472]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fc:	4972      	ldr	r1, [pc, #456]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	670b      	str	r3, [r1, #112]	; 0x70
 8006802:	e004      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	75bb      	strb	r3, [r7, #22]
 8006808:	e001      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d07d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	2b28      	cmp	r3, #40	; 0x28
 8006820:	d866      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	080068f7 	.word	0x080068f7
 800682c:	080068f1 	.word	0x080068f1
 8006830:	080068f1 	.word	0x080068f1
 8006834:	080068f1 	.word	0x080068f1
 8006838:	080068f1 	.word	0x080068f1
 800683c:	080068f1 	.word	0x080068f1
 8006840:	080068f1 	.word	0x080068f1
 8006844:	080068f1 	.word	0x080068f1
 8006848:	080068cd 	.word	0x080068cd
 800684c:	080068f1 	.word	0x080068f1
 8006850:	080068f1 	.word	0x080068f1
 8006854:	080068f1 	.word	0x080068f1
 8006858:	080068f1 	.word	0x080068f1
 800685c:	080068f1 	.word	0x080068f1
 8006860:	080068f1 	.word	0x080068f1
 8006864:	080068f1 	.word	0x080068f1
 8006868:	080068df 	.word	0x080068df
 800686c:	080068f1 	.word	0x080068f1
 8006870:	080068f1 	.word	0x080068f1
 8006874:	080068f1 	.word	0x080068f1
 8006878:	080068f1 	.word	0x080068f1
 800687c:	080068f1 	.word	0x080068f1
 8006880:	080068f1 	.word	0x080068f1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080068f7 	.word	0x080068f7
 800688c:	080068f1 	.word	0x080068f1
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068f1 	.word	0x080068f1
 8006898:	080068f1 	.word	0x080068f1
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	080068f1 	.word	0x080068f1
 80068b0:	080068f1 	.word	0x080068f1
 80068b4:	080068f1 	.word	0x080068f1
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	080068f7 	.word	0x080068f7
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	2101      	movs	r1, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f956 	bl	8007b84 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068dc:	e00c      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f9ff 	bl	8007ce8 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	e000      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80068f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068fe:	4b32      	ldr	r3, [pc, #200]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	492f      	ldr	r1, [pc, #188]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690c:	4313      	orrs	r3, r2
 800690e:	654b      	str	r3, [r1, #84]	; 0x54
 8006910:	e001      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d037      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	2b05      	cmp	r3, #5
 8006928:	d820      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006973 	.word	0x08006973
 8006934:	08006949 	.word	0x08006949
 8006938:	0800695b 	.word	0x0800695b
 800693c:	08006973 	.word	0x08006973
 8006940:	08006973 	.word	0x08006973
 8006944:	08006973 	.word	0x08006973
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f001 f918 	bl	8007b84 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006958:	e00c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f9c1 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f023 0207 	bic.w	r2, r3, #7
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006986:	4910      	ldr	r1, [pc, #64]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	654b      	str	r3, [r1, #84]	; 0x54
 800698c:	e001      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d040      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d827      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069ff 	.word	0x080069ff
 80069b4:	080069d5 	.word	0x080069d5
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069ff 	.word	0x080069ff
 80069c0:	080069ff 	.word	0x080069ff
 80069c4:	080069ff 	.word	0x080069ff
 80069c8:	58024400 	.word	0x58024400
 80069cc:	58024800 	.word	0x58024800
 80069d0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f8d2 	bl	8007b84 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069e4:	e00c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3324      	adds	r3, #36	; 0x24
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f97b 	bl	8007ce8 <RCCEx_PLL3_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80069fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a06:	4bb3      	ldr	r3, [pc, #716]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	f023 0207 	bic.w	r2, r3, #7
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	49af      	ldr	r1, [pc, #700]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	658b      	str	r3, [r1, #88]	; 0x58
 8006a1a:	e001      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d044      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d01b      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d805      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d022      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006a48:	e01b      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d01d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a54:	d01c      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a5a:	d01b      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006a5c:	e011      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f88d 	bl	8007b84 <RCCEx_PLL2_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a6e:	e012      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f936 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a80:	e009      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
      break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a9c:	4b8d      	ldr	r3, [pc, #564]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aaa:	498a      	ldr	r1, [pc, #552]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	654b      	str	r3, [r1, #84]	; 0x54
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d044      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d01b      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad2:	d805      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d022      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006ade:	e01b      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d01d      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006ae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aea:	d01c      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af0:	d01b      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006af2:	e011      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f842 	bl	8007b84 <RCCEx_PLL2_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b04:	e012      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f8eb 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b16:	e009      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e004      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b22:	bf00      	nop
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b32:	4b68      	ldr	r3, [pc, #416]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b40:	4964      	ldr	r1, [pc, #400]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	658b      	str	r3, [r1, #88]	; 0x58
 8006b46:	e001      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d044      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b62:	d01b      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b68:	d805      	bhi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d022      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b74:	e01b      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006b7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b80:	d01c      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006b82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b86:	d01b      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006b88:	e011      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fff7 	bl	8007b84 <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b9a:	e012      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 f8a0 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bac:	e009      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bb4:	bf00      	nop
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd6:	493f      	ldr	r1, [pc, #252]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	658b      	str	r3, [r1, #88]	; 0x58
 8006bdc:	e001      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01b      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d10b      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3324      	adds	r3, #36	; 0x24
 8006bfe:	2102      	movs	r1, #2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f871 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75bb      	strb	r3, [r7, #22]
 8006c10:	e009      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c12:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	492c      	ldr	r1, [pc, #176]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01b      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3c:	d10b      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3324      	adds	r3, #36	; 0x24
 8006c42:	2102      	movs	r1, #2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f84f 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75bb      	strb	r3, [r7, #22]
 8006c54:	e009      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c64:	491b      	ldr	r1, [pc, #108]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d032      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d00d      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c86:	d016      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d111      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ff76 	bl	8007b84 <RCCEx_PLL2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c9c:	e00c      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	2102      	movs	r1, #2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f81f 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb4:	e000      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8006cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ccc:	4901      	ldr	r1, [pc, #4]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cd2:	e003      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8006cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02f      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf2:	d00c      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cf8:	d015      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d10f      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b79      	ldr	r3, [pc, #484]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4a78      	ldr	r2, [pc, #480]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d0c:	e00c      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3324      	adds	r3, #36	; 0x24
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 ffe7 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d1e:	e003      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
      break;
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d2e:	4b6e      	ldr	r3, [pc, #440]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3c:	496a      	ldr	r1, [pc, #424]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	654b      	str	r3, [r1, #84]	; 0x54
 8006d42:	e001      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d029      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d60:	d007      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006d62:	e00f      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d64:	4b60      	ldr	r3, [pc, #384]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	4a5f      	ldr	r2, [pc, #380]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d70:	e00b      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	2102      	movs	r1, #2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 ff03 	bl	8007b84 <RCCEx_PLL2_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d82:	e002      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d90:	4b55      	ldr	r3, [pc, #340]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	4952      	ldr	r1, [pc, #328]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006da2:	e001      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3324      	adds	r3, #36	; 0x24
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff94 	bl	8007ce8 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02f      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d00c      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d802      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006dea:	e00d      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d00f      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df6:	d00e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	4a3a      	ldr	r2, [pc, #232]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e06:	e007      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	e004      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e1e:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	492f      	ldr	r1, [pc, #188]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e42:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	4926      	ldr	r1, [pc, #152]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e60:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e6e:	491e      	ldr	r1, [pc, #120]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8c:	4916      	ldr	r1, [pc, #88]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea8:	6113      	str	r3, [r2, #16]
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006eb4:	490c      	ldr	r1, [pc, #48]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da08      	bge.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ece:	4906      	ldr	r1, [pc, #24]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006ed4:	7dbb      	ldrb	r3, [r7, #22]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	58024400 	.word	0x58024400

08006eec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b090      	sub	sp, #64	; 0x40
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d150      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006efc:	4ba1      	ldr	r3, [pc, #644]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d844      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f39 	.word	0x08006f39
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f91 	.word	0x08006f91
 8006f24:	08006f59 	.word	0x08006f59
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fcc1 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e200      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f38:	f107 0318 	add.w	r3, r7, #24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fa21 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f46:	e1f8      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f48:	f107 030c 	add.w	r3, r7, #12
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fb65 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f56:	e1f0      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f58:	4b8a      	ldr	r3, [pc, #552]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f68:	4b87      	ldr	r3, [pc, #540]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f6c:	e1e5      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f74:	d102      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006f76:	4b85      	ldr	r3, [pc, #532]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7a:	e1de      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f82:	d102      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006f84:	4b82      	ldr	r3, [pc, #520]	; (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f88:	e1d7      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f8e:	e1d4      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f90:	4b80      	ldr	r3, [pc, #512]	; (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f94:	e1d1      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9a:	bf00      	nop
 8006f9c:	e1cd      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d14f      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006fa6:	4b77      	ldr	r3, [pc, #476]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006faa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d01c      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006fb6:	2b80      	cmp	r3, #128	; 0x80
 8006fb8:	d804      	bhi.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006fc2:	e03c      	b.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006fc4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fc6:	d037      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fcc:	d018      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006fce:	e036      	b.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fc6d 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fde:	e1ac      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe0:	f107 0318 	add.w	r3, r7, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 f9cd 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fee:	e1a4      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fb11 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffe:	e19c      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007000:	4b60      	ldr	r3, [pc, #384]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007008:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	2b00      	cmp	r3, #0
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007010:	4b5d      	ldr	r3, [pc, #372]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007014:	e191      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800701e:	4b5b      	ldr	r3, [pc, #364]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007022:	e18a      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702a:	d102      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800702c:	4b58      	ldr	r3, [pc, #352]	; (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007030:	e183      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007036:	e180      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007038:	4b56      	ldr	r3, [pc, #344]	; (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703c:	e17d      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007042:	bf00      	nop
 8007044:	e179      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704c:	d153      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800704e:	4b4d      	ldr	r3, [pc, #308]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007056:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800705e:	d01f      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007064:	d805      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800706a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800706e:	d00f      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007070:	e03d      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007072:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007076:	d037      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800707c:	d018      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800707e:	e036      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fc15 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708e:	e154      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007090:	f107 0318 	add.w	r3, r7, #24
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f975 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709e:	e14c      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fab9 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ae:	e144      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070b0:	4b34      	ldr	r3, [pc, #208]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070c0:	4b31      	ldr	r3, [pc, #196]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070c4:	e139      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070cc:	d102      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80070ce:	4b2f      	ldr	r3, [pc, #188]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d2:	e132      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070da:	d102      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e0:	e12b      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e6:	e128      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070e8:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ec:	e125      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f2:	bf00      	nop
 80070f4:	e121      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fc:	d15d      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007102:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007106:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800710e:	d01f      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007114:	d805      	bhi.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800711a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800711e:	d00f      	beq.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007120:	e047      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007122:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007126:	d041      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800712c:	d018      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800712e:	e040      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fbbd 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713e:	e0fc      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007140:	f107 0318 	add.w	r3, r7, #24
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f91d 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714e:	e0f4      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fa61 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e0ec      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007160:	4b08      	ldr	r3, [pc, #32]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007168:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007174:	e0e1      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717c:	d10c      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007182:	e0da      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007184:	58024400 	.word	0x58024400
 8007188:	03d09000 	.word	0x03d09000
 800718c:	003d0900 	.word	0x003d0900
 8007190:	017d7840 	.word	0x017d7840
 8007194:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719e:	d102      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80071a0:	4b68      	ldr	r3, [pc, #416]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a4:	e0c9      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071aa:	e0c6      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071ac:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b0:	e0c3      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	bf00      	nop
 80071b8:	e0bf      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d153      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80071c2:	4b62      	ldr	r3, [pc, #392]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	d01f      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80071d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d8:	d805      	bhi.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d00f      	beq.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80071e4:	e03d      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80071e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071ea:	d037      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80071ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f0:	d018      	beq.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80071f2:	e036      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fb5b 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007202:	e09a      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007204:	f107 0318 	add.w	r3, r7, #24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f8bb 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e092      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f9ff 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007222:	e08a      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007224:	4b49      	ldr	r3, [pc, #292]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800722c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007234:	4b46      	ldr	r3, [pc, #280]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007238:	e07f      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007242:	4b44      	ldr	r3, [pc, #272]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	e078      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d102      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007250:	4b3c      	ldr	r3, [pc, #240]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007254:	e071      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800725a:	e06e      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800725c:	4b3a      	ldr	r3, [pc, #232]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007260:	e06b      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007266:	bf00      	nop
 8007268:	e067      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007270:	d13d      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007272:	4b36      	ldr	r3, [pc, #216]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800727a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007282:	d00c      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007288:	d011      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d12b      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f876 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729c:	e04d      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800729e:	f107 030c 	add.w	r3, r7, #12
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f9ba 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ac:	e045      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072c2:	e03a      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ca:	d102      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d0:	e033      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d8:	d102      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80072da:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072de:	e02c      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e4:	e029      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ea:	bf00      	nop
 80072ec:	e025      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f4:	d11f      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730a:	d008      	beq.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800730e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f000 face 	bl	80078b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800731c:	e00d      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731e:	f107 0318 	add.w	r3, r7, #24
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f82e 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800732c:	e005      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007332:	bf00      	nop
 8007334:	e001      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800733a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800733c:	4618      	mov	r0, r3
 800733e:	3740      	adds	r7, #64	; 0x40
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	017d7840 	.word	0x017d7840
 8007348:	00bb8000 	.word	0x00bb8000
 800734c:	58024400 	.word	0x58024400
 8007350:	03d09000 	.word	0x03d09000
 8007354:	003d0900 	.word	0x003d0900

08007358 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800735c:	f7fe fe8e 	bl	800607c <HAL_RCC_GetHCLKFreq>
 8007360:	4601      	mov	r1, r0
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4a04      	ldr	r2, [pc, #16]	; (8007380 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800736e:	5cd3      	ldrb	r3, [r2, r3]
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	58024400 	.word	0x58024400
 8007380:	0800edf0 	.word	0x0800edf0

08007384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	; 0x24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800738c:	4b9d      	ldr	r3, [pc, #628]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8007396:	4b9b      	ldr	r3, [pc, #620]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	0b1b      	lsrs	r3, r3, #12
 800739c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a0:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80073a2:	4b98      	ldr	r3, [pc, #608]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80073ac:	4b95      	ldr	r3, [pc, #596]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 810a 	beq.w	80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d05a      	beq.n	800748c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d302      	bcc.n	80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d078      	beq.n	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80073de:	e099      	b.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e0:	4b88      	ldr	r3, [pc, #544]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d02d      	beq.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073ec:	4b85      	ldr	r3, [pc, #532]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	4a84      	ldr	r2, [pc, #528]	; (8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007416:	4b7b      	ldr	r3, [pc, #492]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007426:	ed97 6a03 	vldr	s12, [r7, #12]
 800742a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800742e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007442:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007446:	e087      	b.n	8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b6a      	ldr	r3, [pc, #424]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a03 	vldr	s12, [r7, #12]
 800746e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800748a:	e065      	b.n	8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074ce:	e043      	b.n	8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e2:	4b48      	ldr	r3, [pc, #288]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007512:	e021      	b.n	8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007526:	4b37      	ldr	r3, [pc, #220]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007536:	ed97 6a03 	vldr	s12, [r7, #12]
 800753a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800753e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800754a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007556:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007558:	4b2a      	ldr	r3, [pc, #168]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	0a5b      	lsrs	r3, r3, #9
 800755e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007572:	edd7 6a07 	vldr	s13, [r7, #28]
 8007576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757e:	ee17 2a90 	vmov	r2, s15
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007586:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	0c1b      	lsrs	r3, r3, #16
 800758c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ac:	ee17 2a90 	vmov	r2, s15
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80075b4:	4b13      	ldr	r3, [pc, #76]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	0e1b      	lsrs	r3, r3, #24
 80075ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075da:	ee17 2a90 	vmov	r2, s15
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075e2:	e008      	b.n	80075f6 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	609a      	str	r2, [r3, #8]
}
 80075f6:	bf00      	nop
 80075f8:	3724      	adds	r7, #36	; 0x24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	58024400 	.word	0x58024400
 8007608:	03d09000 	.word	0x03d09000
 800760c:	46000000 	.word	0x46000000
 8007610:	4c742400 	.word	0x4c742400
 8007614:	4a742400 	.word	0x4a742400
 8007618:	4bbebc20 	.word	0x4bbebc20

0800761c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800761c:	b480      	push	{r7}
 800761e:	b089      	sub	sp, #36	; 0x24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007624:	4b9d      	ldr	r3, [pc, #628]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800762e:	4b9b      	ldr	r3, [pc, #620]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	0d1b      	lsrs	r3, r3, #20
 8007634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007638:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800763a:	4b98      	ldr	r3, [pc, #608]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007644:	4b95      	ldr	r3, [pc, #596]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	fb02 f303 	mul.w	r3, r2, r3
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 810a 	beq.w	800787c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d05a      	beq.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800766e:	2b01      	cmp	r3, #1
 8007670:	d302      	bcc.n	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007672:	2b02      	cmp	r3, #2
 8007674:	d078      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007676:	e099      	b.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007678:	4b88      	ldr	r3, [pc, #544]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d02d      	beq.n	80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007684:	4b85      	ldr	r3, [pc, #532]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	08db      	lsrs	r3, r3, #3
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	4a84      	ldr	r2, [pc, #528]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b7b      	ldr	r3, [pc, #492]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076de:	e087      	b.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b6a      	ldr	r3, [pc, #424]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a03 	vldr	s12, [r7, #12]
 8007706:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007722:	e065      	b.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b59      	ldr	r3, [pc, #356]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a03 	vldr	s12, [r7, #12]
 800774a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007766:	e043      	b.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b48      	ldr	r3, [pc, #288]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077aa:	e021      	b.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b37      	ldr	r3, [pc, #220]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077f0:	4b2a      	ldr	r3, [pc, #168]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	0a5b      	lsrs	r3, r3, #9
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780a:	edd7 6a07 	vldr	s13, [r7, #28]
 800780e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007816:	ee17 2a90 	vmov	r2, s15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800781e:	4b1f      	ldr	r3, [pc, #124]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007838:	edd7 6a07 	vldr	s13, [r7, #28]
 800783c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007844:	ee17 2a90 	vmov	r2, s15
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800784c:	4b13      	ldr	r3, [pc, #76]	; (800789c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	0e1b      	lsrs	r3, r3, #24
 8007852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007866:	edd7 6a07 	vldr	s13, [r7, #28]
 800786a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007872:	ee17 2a90 	vmov	r2, s15
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800787a:	e008      	b.n	800788e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	609a      	str	r2, [r3, #8]
}
 800788e:	bf00      	nop
 8007890:	3724      	adds	r7, #36	; 0x24
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	58024400 	.word	0x58024400
 80078a0:	03d09000 	.word	0x03d09000
 80078a4:	46000000 	.word	0x46000000
 80078a8:	4c742400 	.word	0x4c742400
 80078ac:	4a742400 	.word	0x4a742400
 80078b0:	4bbebc20 	.word	0x4bbebc20

080078b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	; 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078bc:	4b9d      	ldr	r3, [pc, #628]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80078c6:	4b9b      	ldr	r3, [pc, #620]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078d2:	4b98      	ldr	r3, [pc, #608]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078dc:	4b95      	ldr	r3, [pc, #596]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	08db      	lsrs	r3, r3, #3
 80078e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 810a 	beq.w	8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d05a      	beq.n	80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007906:	2b01      	cmp	r3, #1
 8007908:	d302      	bcc.n	8007910 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800790a:	2b02      	cmp	r3, #2
 800790c:	d078      	beq.n	8007a00 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800790e:	e099      	b.n	8007a44 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007910:	4b88      	ldr	r3, [pc, #544]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d02d      	beq.n	8007978 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800791c:	4b85      	ldr	r3, [pc, #532]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	08db      	lsrs	r3, r3, #3
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	4a84      	ldr	r2, [pc, #528]	; (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b7b      	ldr	r3, [pc, #492]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a03 	vldr	s12, [r7, #12]
 800795a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007976:	e087      	b.n	8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a03 	vldr	s12, [r7, #12]
 800799e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079ba:	e065      	b.n	8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b59      	ldr	r3, [pc, #356]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079fe:	e043      	b.n	8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	4b48      	ldr	r3, [pc, #288]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a42:	e021      	b.n	8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a86:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a88:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	0a5b      	lsrs	r3, r3, #9
 8007a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aae:	ee17 2a90 	vmov	r2, s15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ab6:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	0c1b      	lsrs	r3, r3, #16
 8007abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007adc:	ee17 2a90 	vmov	r2, s15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ae4:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	0e1b      	lsrs	r3, r3, #24
 8007aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b0a:	ee17 2a90 	vmov	r2, s15
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b12:	e008      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	bf00      	nop
 8007b28:	3724      	adds	r7, #36	; 0x24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	58024400 	.word	0x58024400
 8007b38:	03d09000 	.word	0x03d09000
 8007b3c:	46000000 	.word	0x46000000
 8007b40:	4c742400 	.word	0x4c742400
 8007b44:	4a742400 	.word	0x4a742400
 8007b48:	4bbebc20 	.word	0x4bbebc20

08007b4c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b50:	f7fe f922 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 8007b54:	4601      	mov	r1, r0
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	4a06      	ldr	r2, [pc, #24]	; (8007b7c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	fa21 f303 	lsr.w	r3, r1, r3
 8007b6c:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007b6e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007b70:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007b72:	681b      	ldr	r3, [r3, #0]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	0800edf0 	.word	0x0800edf0
 8007b80:	24000008 	.word	0x24000008

08007b84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b92:	4b53      	ldr	r3, [pc, #332]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d101      	bne.n	8007ba2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e099      	b.n	8007cd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ba2:	4b4f      	ldr	r3, [pc, #316]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a4e      	ldr	r2, [pc, #312]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bae:	f7f8 fdf1 	bl	8000794 <HAL_GetTick>
 8007bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bb4:	e008      	b.n	8007bc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bb6:	f7f8 fded 	bl	8000794 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e086      	b.n	8007cd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bc8:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f0      	bne.n	8007bb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bd4:	4b42      	ldr	r3, [pc, #264]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	031b      	lsls	r3, r3, #12
 8007be2:	493f      	ldr	r1, [pc, #252]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	628b      	str	r3, [r1, #40]	; 0x28
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	025b      	lsls	r3, r3, #9
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	061b      	lsls	r3, r3, #24
 8007c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c18:	4931      	ldr	r1, [pc, #196]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c1e:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	492d      	ldr	r1, [pc, #180]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c30:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f023 0220 	bic.w	r2, r3, #32
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	4928      	ldr	r1, [pc, #160]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c42:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	f023 0310 	bic.w	r3, r3, #16
 8007c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <RCCEx_PLL2_Config+0x160>)
 8007c54:	4013      	ands	r3, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	69d2      	ldr	r2, [r2, #28]
 8007c5a:	00d2      	lsls	r2, r2, #3
 8007c5c:	4920      	ldr	r1, [pc, #128]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c62:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c68:	f043 0310 	orr.w	r3, r3, #16
 8007c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d106      	bne.n	8007c82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c80:	e00f      	b.n	8007ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d106      	bne.n	8007c96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c88:	4b15      	ldr	r3, [pc, #84]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	4a14      	ldr	r2, [pc, #80]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c94:	e005      	b.n	8007ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c96:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	4a11      	ldr	r2, [pc, #68]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ca2:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a0e      	ldr	r2, [pc, #56]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cae:	f7f8 fd71 	bl	8000794 <HAL_GetTick>
 8007cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cb4:	e008      	b.n	8007cc8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007cb6:	f7f8 fd6d 	bl	8000794 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d901      	bls.n	8007cc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e006      	b.n	8007cd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <RCCEx_PLL2_Config+0x15c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0f0      	beq.n	8007cb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	ffff0007 	.word	0xffff0007

08007ce8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cf6:	4b53      	ldr	r3, [pc, #332]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d101      	bne.n	8007d06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e099      	b.n	8007e3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d06:	4b4f      	ldr	r3, [pc, #316]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a4e      	ldr	r2, [pc, #312]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d12:	f7f8 fd3f 	bl	8000794 <HAL_GetTick>
 8007d16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d18:	e008      	b.n	8007d2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d1a:	f7f8 fd3b 	bl	8000794 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e086      	b.n	8007e3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f0      	bne.n	8007d1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d38:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	051b      	lsls	r3, r3, #20
 8007d46:	493f      	ldr	r1, [pc, #252]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	025b      	lsls	r3, r3, #9
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	061b      	lsls	r3, r3, #24
 8007d78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d7c:	4931      	ldr	r1, [pc, #196]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d82:	4b30      	ldr	r3, [pc, #192]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	492d      	ldr	r1, [pc, #180]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d94:	4b2b      	ldr	r3, [pc, #172]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	4928      	ldr	r1, [pc, #160]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007da6:	4b27      	ldr	r3, [pc, #156]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a26      	ldr	r2, [pc, #152]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007db2:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007db6:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <RCCEx_PLL3_Config+0x160>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	69d2      	ldr	r2, [r2, #28]
 8007dbe:	00d2      	lsls	r2, r2, #3
 8007dc0:	4920      	ldr	r1, [pc, #128]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dd8:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007de2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007de4:	e00f      	b.n	8007e06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d106      	bne.n	8007dfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dec:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007df8:	e005      	b.n	8007e06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a0e      	ldr	r2, [pc, #56]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e12:	f7f8 fcbf 	bl	8000794 <HAL_GetTick>
 8007e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e18:	e008      	b.n	8007e2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e1a:	f7f8 fcbb 	bl	8000794 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f0      	beq.n	8007e1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	ffff0007 	.word	0xffff0007

08007e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e01d      	b.n	8007e9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f004 f994 	bl	800c1a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	f000 fa56 	bl	800833c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <HAL_TIM_Base_Start_IT+0x50>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d00b      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x42>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed4:	d007      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	00010007 	.word	0x00010007

08007ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d122      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d11b      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0202 	mvn.w	r2, #2
 8007f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9e0 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007f40:	e005      	b.n	8007f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f9d2 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f9e3 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d122      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d11b      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0204 	mvn.w	r2, #4
 8007f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9b6 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007f94:	e005      	b.n	8007fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9a8 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9b9 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b08      	cmp	r3, #8
 8007fb4:	d122      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d11b      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0208 	mvn.w	r2, #8
 8007fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f98c 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f97e 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f98f 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0310 	and.w	r3, r3, #16
 8008006:	2b10      	cmp	r3, #16
 8008008:	d122      	bne.n	8008050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b10      	cmp	r3, #16
 8008016:	d11b      	bne.n	8008050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0210 	mvn.w	r2, #16
 8008020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2208      	movs	r2, #8
 8008026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f962 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 800803c:	e005      	b.n	800804a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f954 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f965 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d10e      	bne.n	800807c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b01      	cmp	r3, #1
 800806a:	d107      	bne.n	800807c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f06f 0201 	mvn.w	r2, #1
 8008074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f92e 	bl	80082d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d10e      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d107      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fae8 	bl	8008678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b6:	d10e      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	d107      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fadb 	bl	800868c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	d10e      	bne.n	8008102 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d107      	bne.n	8008102 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f913 	bl	8008328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b20      	cmp	r3, #32
 800810e:	d10e      	bne.n	800812e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b20      	cmp	r3, #32
 800811c:	d107      	bne.n	800812e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f06f 0220 	mvn.w	r2, #32
 8008126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa9b 	bl	8008664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_TIM_ConfigClockSource+0x18>
 800814c:	2302      	movs	r3, #2
 800814e:	e0b7      	b.n	80082c0 <HAL_TIM_ConfigClockSource+0x188>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4b57      	ldr	r3, [pc, #348]	; (80082c8 <HAL_TIM_ConfigClockSource+0x190>)
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008176:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b70      	cmp	r3, #112	; 0x70
 8008186:	d02e      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0xae>
 8008188:	2b70      	cmp	r3, #112	; 0x70
 800818a:	d812      	bhi.n	80081b2 <HAL_TIM_ConfigClockSource+0x7a>
 800818c:	2b30      	cmp	r3, #48	; 0x30
 800818e:	f000 8084 	beq.w	800829a <HAL_TIM_ConfigClockSource+0x162>
 8008192:	2b30      	cmp	r3, #48	; 0x30
 8008194:	d806      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x6c>
 8008196:	2b10      	cmp	r3, #16
 8008198:	d07f      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 800819a:	2b20      	cmp	r3, #32
 800819c:	d07d      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d07b      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80081a2:	e084      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80081a4:	2b50      	cmp	r3, #80	; 0x50
 80081a6:	d048      	beq.n	800823a <HAL_TIM_ConfigClockSource+0x102>
 80081a8:	2b60      	cmp	r3, #96	; 0x60
 80081aa:	d056      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x122>
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d064      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x142>
      break;
 80081b0:	e07d      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80081b2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081b6:	d070      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 80081b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081bc:	d809      	bhi.n	80081d2 <HAL_TIM_ConfigClockSource+0x9a>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	d027      	beq.n	8008214 <HAL_TIM_ConfigClockSource+0xdc>
 80081c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c8:	d067      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d06d      	beq.n	80082ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081d0:	e06d      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80081d2:	4a3e      	ldr	r2, [pc, #248]	; (80082cc <HAL_TIM_ConfigClockSource+0x194>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d060      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 80081d8:	4a3d      	ldr	r2, [pc, #244]	; (80082d0 <HAL_TIM_ConfigClockSource+0x198>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d05d      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
 80081de:	4a3d      	ldr	r2, [pc, #244]	; (80082d4 <HAL_TIM_ConfigClockSource+0x19c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d05a      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x162>
      break;
 80081e4:	e063      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6899      	ldr	r1, [r3, #8]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f000 f9b9 	bl	800856c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008208:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	609a      	str	r2, [r3, #8]
      break;
 8008212:	e04c      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6899      	ldr	r1, [r3, #8]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f000 f9a2 	bl	800856c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008236:	609a      	str	r2, [r3, #8]
      break;
 8008238:	e039      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6859      	ldr	r1, [r3, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	461a      	mov	r2, r3
 8008248:	f000 f912 	bl	8008470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2150      	movs	r1, #80	; 0x50
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f96c 	bl	8008530 <TIM_ITRx_SetConfig>
      break;
 8008258:	e029      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6859      	ldr	r1, [r3, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	461a      	mov	r2, r3
 8008268:	f000 f931 	bl	80084ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2160      	movs	r1, #96	; 0x60
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f95c 	bl	8008530 <TIM_ITRx_SetConfig>
      break;
 8008278:	e019      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6859      	ldr	r1, [r3, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	461a      	mov	r2, r3
 8008288:	f000 f8f2 	bl	8008470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2140      	movs	r1, #64	; 0x40
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f94c 	bl	8008530 <TIM_ITRx_SetConfig>
      break;
 8008298:	e009      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f000 f943 	bl	8008530 <TIM_ITRx_SetConfig>
      break;
 80082aa:	e000      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x176>
      break;
 80082ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	ffceff88 	.word	0xffceff88
 80082cc:	00100030 	.word	0x00100030
 80082d0:	00100040 	.word	0x00100040
 80082d4:	00100020 	.word	0x00100020

080082d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a40      	ldr	r2, [pc, #256]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d00f      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <TIM_Base_SetConfig+0x118>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00b      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a3c      	ldr	r2, [pc, #240]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d007      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a3b      	ldr	r2, [pc, #236]	; (800845c <TIM_Base_SetConfig+0x120>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a3a      	ldr	r2, [pc, #232]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d108      	bne.n	800838e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2f      	ldr	r2, [pc, #188]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839c:	d01b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a2c      	ldr	r2, [pc, #176]	; (8008454 <TIM_Base_SetConfig+0x118>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d017      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a2b      	ldr	r2, [pc, #172]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <TIM_Base_SetConfig+0x120>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a29      	ldr	r2, [pc, #164]	; (8008460 <TIM_Base_SetConfig+0x124>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a28      	ldr	r2, [pc, #160]	; (8008464 <TIM_Base_SetConfig+0x128>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <TIM_Base_SetConfig+0x130>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d108      	bne.n	80083e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a10      	ldr	r2, [pc, #64]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a12      	ldr	r2, [pc, #72]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00b      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a11      	ldr	r2, [pc, #68]	; (8008464 <TIM_Base_SetConfig+0x128>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <TIM_Base_SetConfig+0x130>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d103      	bne.n	800843c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	615a      	str	r2, [r3, #20]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40010000 	.word	0x40010000
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40010400 	.word	0x40010400
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400
 800846c:	40014800 	.word	0x40014800

08008470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0201 	bic.w	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800849a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 030a 	bic.w	r3, r3, #10
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b087      	sub	sp, #28
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f023 0210 	bic.w	r2, r3, #16
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
	...

08008530 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <TIM_ITRx_SetConfig+0x38>)
 8008544:	4013      	ands	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	f043 0307 	orr.w	r3, r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	609a      	str	r2, [r3, #8]
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	ffcfff8f 	.word	0xffcfff8f

0800856c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	021a      	lsls	r2, r3, #8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	431a      	orrs	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4313      	orrs	r3, r2
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	609a      	str	r2, [r3, #8]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e045      	b.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1c      	ldr	r2, [pc, #112]	; (800865c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d108      	bne.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008622:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	4313      	orrs	r3, r2
 800862c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	40010000 	.word	0x40010000
 8008660:	40010400 	.word	0x40010400

08008664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e042      	b.n	8008738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f003 fddf 	bl	800c288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2224      	movs	r2, #36	; 0x24
 80086ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa58 	bl	8008b98 <UART_SetConfig>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e022      	b.n	8008738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f002 fbca 	bl	800ae94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800870e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800871e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f002 fc51 	bl	800afd8 <UART_CheckIdleState>
 8008736:	4603      	mov	r3, r0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af02      	add	r7, sp, #8
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008756:	2b20      	cmp	r3, #32
 8008758:	f040 8083 	bne.w	8008862 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_UART_Transmit+0x28>
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e07b      	b.n	8008864 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <HAL_UART_Transmit+0x3a>
 8008776:	2302      	movs	r3, #2
 8008778:	e074      	b.n	8008864 <HAL_UART_Transmit+0x124>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2221      	movs	r2, #33	; 0x21
 800878e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008792:	f7f7 ffff 	bl	8000794 <HAL_GetTick>
 8008796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b0:	d108      	bne.n	80087c4 <HAL_UART_Transmit+0x84>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e003      	b.n	80087cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087cc:	e02c      	b.n	8008828 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	2180      	movs	r1, #128	; 0x80
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f002 fc45 	bl	800b068 <UART_WaitOnFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e03d      	b.n	8008864 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	3302      	adds	r3, #2
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e007      	b.n	8008816 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1cc      	bne.n	80087ce <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2200      	movs	r2, #0
 800883c:	2140      	movs	r1, #64	; 0x40
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f002 fc12 	bl	800b068 <UART_WaitOnFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e00a      	b.n	8008864 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e000      	b.n	8008864 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008862:	2302      	movs	r3, #2
  }
}
 8008864:	4618      	mov	r0, r3
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008892:	4013      	ands	r3, r2
 8008894:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d118      	bne.n	80088ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 8145 	beq.w	8008b4e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	4798      	blx	r3
      }
      return;
 80088cc:	e13f      	b.n	8008b4e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80e8 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4ba1      	ldr	r3, [pc, #644]	; (8008b60 <HAL_UART_IRQHandler+0x2f4>)
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4ba0      	ldr	r3, [pc, #640]	; (8008b64 <HAL_UART_IRQHandler+0x2f8>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80dd 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d010      	beq.n	8008918 <HAL_UART_IRQHandler+0xac>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2201      	movs	r2, #1
 8008906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d010      	beq.n	8008944 <HAL_UART_IRQHandler+0xd8>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2202      	movs	r2, #2
 8008932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893a:	f043 0204 	orr.w	r2, r3, #4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d010      	beq.n	8008970 <HAL_UART_IRQHandler+0x104>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2204      	movs	r2, #4
 800895e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	f043 0202 	orr.w	r2, r3, #2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d015      	beq.n	80089a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	4b76      	ldr	r3, [pc, #472]	; (8008b60 <HAL_UART_IRQHandler+0x2f4>)
 8008988:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2208      	movs	r2, #8
 8008994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899c:	f043 0208 	orr.w	r2, r3, #8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d011      	beq.n	80089d4 <HAL_UART_IRQHandler+0x168>
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00c      	beq.n	80089d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ca:	f043 0220 	orr.w	r2, r3, #32
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80b9 	beq.w	8008b52 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d011      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a14:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b40      	cmp	r3, #64	; 0x40
 8008a22:	d004      	beq.n	8008a2e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d031      	beq.n	8008a92 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f002 fb9a 	bl	800b168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d123      	bne.n	8008a8a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a50:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d013      	beq.n	8008a82 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a5e:	4a42      	ldr	r2, [pc, #264]	; (8008b68 <HAL_UART_IRQHandler+0x2fc>)
 8008a60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa f912 	bl	8002c90 <HAL_DMA_Abort_IT>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d017      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	e00f      	b.n	8008aa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f87c 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	e00b      	b.n	8008aa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f878 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e007      	b.n	8008aa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f874 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008aa0:	e057      	b.n	8008b52 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa2:	bf00      	nop
    return;
 8008aa4:	e055      	b.n	8008b52 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00d      	beq.n	8008acc <HAL_UART_IRQHandler+0x260>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 fba3 	bl	800b210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aca:	e045      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d012      	beq.n	8008afc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d008      	beq.n	8008afc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d031      	beq.n	8008b56 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
    }
    return;
 8008afa:	e02c      	b.n	8008b56 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <HAL_UART_IRQHandler+0x2ac>
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 fb63 	bl	800b1dc <UART_EndTransmit_IT>
    return;
 8008b16:	e01f      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_UART_IRQHandler+0x2c8>
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f002 fb83 	bl	800b238 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b32:	e011      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00c      	beq.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da09      	bge.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 fb6d 	bl	800b224 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b4a:	bf00      	nop
 8008b4c:	e004      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
      return;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
    return;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_UART_IRQHandler+0x2ec>
    return;
 8008b56:	bf00      	nop
  }
}
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	10000001 	.word	0x10000001
 8008b64:	04000120 	.word	0x04000120
 8008b68:	0800b1b1 	.word	0x0800b1b1

08008b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	0000      	movs	r0, r0
	...

08008b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008b9c:	b090      	sub	sp, #64	; 0x40
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	4bc1      	ldr	r3, [pc, #772]	; (8008ee0 <UART_SetConfig+0x348>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008be2:	430b      	orrs	r3, r1
 8008be4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4ab7      	ldr	r2, [pc, #732]	; (8008ee4 <UART_SetConfig+0x34c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c12:	4313      	orrs	r3, r2
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	4bb2      	ldr	r3, [pc, #712]	; (8008ee8 <UART_SetConfig+0x350>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c26:	430b      	orrs	r3, r1
 8008c28:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	f023 010f 	bic.w	r1, r3, #15
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4aa9      	ldr	r2, [pc, #676]	; (8008eec <UART_SetConfig+0x354>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d177      	bne.n	8008d3a <UART_SetConfig+0x1a2>
 8008c4a:	4ba9      	ldr	r3, [pc, #676]	; (8008ef0 <UART_SetConfig+0x358>)
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c52:	2b28      	cmp	r3, #40	; 0x28
 8008c54:	d86c      	bhi.n	8008d30 <UART_SetConfig+0x198>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0xc4>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008d01 	.word	0x08008d01
 8008c60:	08008d31 	.word	0x08008d31
 8008c64:	08008d31 	.word	0x08008d31
 8008c68:	08008d31 	.word	0x08008d31
 8008c6c:	08008d31 	.word	0x08008d31
 8008c70:	08008d31 	.word	0x08008d31
 8008c74:	08008d31 	.word	0x08008d31
 8008c78:	08008d31 	.word	0x08008d31
 8008c7c:	08008d09 	.word	0x08008d09
 8008c80:	08008d31 	.word	0x08008d31
 8008c84:	08008d31 	.word	0x08008d31
 8008c88:	08008d31 	.word	0x08008d31
 8008c8c:	08008d31 	.word	0x08008d31
 8008c90:	08008d31 	.word	0x08008d31
 8008c94:	08008d31 	.word	0x08008d31
 8008c98:	08008d31 	.word	0x08008d31
 8008c9c:	08008d11 	.word	0x08008d11
 8008ca0:	08008d31 	.word	0x08008d31
 8008ca4:	08008d31 	.word	0x08008d31
 8008ca8:	08008d31 	.word	0x08008d31
 8008cac:	08008d31 	.word	0x08008d31
 8008cb0:	08008d31 	.word	0x08008d31
 8008cb4:	08008d31 	.word	0x08008d31
 8008cb8:	08008d31 	.word	0x08008d31
 8008cbc:	08008d19 	.word	0x08008d19
 8008cc0:	08008d31 	.word	0x08008d31
 8008cc4:	08008d31 	.word	0x08008d31
 8008cc8:	08008d31 	.word	0x08008d31
 8008ccc:	08008d31 	.word	0x08008d31
 8008cd0:	08008d31 	.word	0x08008d31
 8008cd4:	08008d31 	.word	0x08008d31
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d21 	.word	0x08008d21
 8008ce0:	08008d31 	.word	0x08008d31
 8008ce4:	08008d31 	.word	0x08008d31
 8008ce8:	08008d31 	.word	0x08008d31
 8008cec:	08008d31 	.word	0x08008d31
 8008cf0:	08008d31 	.word	0x08008d31
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d31 	.word	0x08008d31
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d06:	e233      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d08:	2304      	movs	r3, #4
 8008d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d0e:	e22f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d10:	2308      	movs	r3, #8
 8008d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d16:	e22b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d1e:	e227      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d20:	2320      	movs	r3, #32
 8008d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d26:	e223      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d28:	2340      	movs	r3, #64	; 0x40
 8008d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d2e:	e21f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d36:	bf00      	nop
 8008d38:	e21a      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a6d      	ldr	r2, [pc, #436]	; (8008ef4 <UART_SetConfig+0x35c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d132      	bne.n	8008daa <UART_SetConfig+0x212>
 8008d44:	4b6a      	ldr	r3, [pc, #424]	; (8008ef0 <UART_SetConfig+0x358>)
 8008d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	2b05      	cmp	r3, #5
 8008d4e:	d827      	bhi.n	8008da0 <UART_SetConfig+0x208>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <UART_SetConfig+0x1c0>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d71 	.word	0x08008d71
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	08008d81 	.word	0x08008d81
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008d91 	.word	0x08008d91
 8008d6c:	08008d99 	.word	0x08008d99
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d76:	e1fb      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d78:	2304      	movs	r3, #4
 8008d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d7e:	e1f7      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d80:	2308      	movs	r3, #8
 8008d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d86:	e1f3      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d88:	2310      	movs	r3, #16
 8008d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d8e:	e1ef      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d90:	2320      	movs	r3, #32
 8008d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d96:	e1eb      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d9e:	e1e7      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008da6:	bf00      	nop
 8008da8:	e1e2      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a52      	ldr	r2, [pc, #328]	; (8008ef8 <UART_SetConfig+0x360>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d132      	bne.n	8008e1a <UART_SetConfig+0x282>
 8008db4:	4b4e      	ldr	r3, [pc, #312]	; (8008ef0 <UART_SetConfig+0x358>)
 8008db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	2b05      	cmp	r3, #5
 8008dbe:	d827      	bhi.n	8008e10 <UART_SetConfig+0x278>
 8008dc0:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x230>)
 8008dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc6:	bf00      	nop
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008de6:	e1c3      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dee:	e1bf      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008df6:	e1bb      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dfe:	e1b7      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e06:	e1b3      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e08:	2340      	movs	r3, #64	; 0x40
 8008e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e0e:	e1af      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e16:	bf00      	nop
 8008e18:	e1aa      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a37      	ldr	r2, [pc, #220]	; (8008efc <UART_SetConfig+0x364>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d132      	bne.n	8008e8a <UART_SetConfig+0x2f2>
 8008e24:	4b32      	ldr	r3, [pc, #200]	; (8008ef0 <UART_SetConfig+0x358>)
 8008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	d827      	bhi.n	8008e80 <UART_SetConfig+0x2e8>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <UART_SetConfig+0x2a0>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e59 	.word	0x08008e59
 8008e40:	08008e61 	.word	0x08008e61
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e71 	.word	0x08008e71
 8008e4c:	08008e79 	.word	0x08008e79
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e56:	e18b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e5e:	e187      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e66:	e183      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e6e:	e17f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e70:	2320      	movs	r3, #32
 8008e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e76:	e17b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e7e:	e177      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e86:	bf00      	nop
 8008e88:	e172      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1c      	ldr	r2, [pc, #112]	; (8008f00 <UART_SetConfig+0x368>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d144      	bne.n	8008f1e <UART_SetConfig+0x386>
 8008e94:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <UART_SetConfig+0x358>)
 8008e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	2b05      	cmp	r3, #5
 8008e9e:	d839      	bhi.n	8008f14 <UART_SetConfig+0x37c>
 8008ea0:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0x310>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008f05 	.word	0x08008f05
 8008ebc:	08008f0d 	.word	0x08008f0d
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ec6:	e153      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ece:	e14f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ed6:	e14b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ede:	e147      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ee0:	cfff69f3 	.word	0xcfff69f3
 8008ee4:	58000c00 	.word	0x58000c00
 8008ee8:	11fff4ff 	.word	0x11fff4ff
 8008eec:	40011000 	.word	0x40011000
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	40004400 	.word	0x40004400
 8008ef8:	40004800 	.word	0x40004800
 8008efc:	40004c00 	.word	0x40004c00
 8008f00:	40005000 	.word	0x40005000
 8008f04:	2320      	movs	r3, #32
 8008f06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f0a:	e131      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f12:	e12d      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008f14:	2380      	movs	r3, #128	; 0x80
 8008f16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f1a:	bf00      	nop
 8008f1c:	e128      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4ac3      	ldr	r2, [pc, #780]	; (8009230 <UART_SetConfig+0x698>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d178      	bne.n	800901a <UART_SetConfig+0x482>
 8008f28:	4bc2      	ldr	r3, [pc, #776]	; (8009234 <UART_SetConfig+0x69c>)
 8008f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f30:	2b28      	cmp	r3, #40	; 0x28
 8008f32:	d86d      	bhi.n	8009010 <UART_SetConfig+0x478>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <UART_SetConfig+0x3a4>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008fe1 	.word	0x08008fe1
 8008f40:	08009011 	.word	0x08009011
 8008f44:	08009011 	.word	0x08009011
 8008f48:	08009011 	.word	0x08009011
 8008f4c:	08009011 	.word	0x08009011
 8008f50:	08009011 	.word	0x08009011
 8008f54:	08009011 	.word	0x08009011
 8008f58:	08009011 	.word	0x08009011
 8008f5c:	08008fe9 	.word	0x08008fe9
 8008f60:	08009011 	.word	0x08009011
 8008f64:	08009011 	.word	0x08009011
 8008f68:	08009011 	.word	0x08009011
 8008f6c:	08009011 	.word	0x08009011
 8008f70:	08009011 	.word	0x08009011
 8008f74:	08009011 	.word	0x08009011
 8008f78:	08009011 	.word	0x08009011
 8008f7c:	08008ff1 	.word	0x08008ff1
 8008f80:	08009011 	.word	0x08009011
 8008f84:	08009011 	.word	0x08009011
 8008f88:	08009011 	.word	0x08009011
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009011 	.word	0x08009011
 8008f94:	08009011 	.word	0x08009011
 8008f98:	08009011 	.word	0x08009011
 8008f9c:	08008ff9 	.word	0x08008ff9
 8008fa0:	08009011 	.word	0x08009011
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009011 	.word	0x08009011
 8008fd0:	08009011 	.word	0x08009011
 8008fd4:	08009011 	.word	0x08009011
 8008fd8:	08009011 	.word	0x08009011
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fe6:	e0c3      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fee:	e0bf      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ff6:	e0bb      	b.n	8009170 <UART_SetConfig+0x5d8>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ffe:	e0b7      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009000:	2320      	movs	r3, #32
 8009002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009006:	e0b3      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800900e:	e0af      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009016:	bf00      	nop
 8009018:	e0aa      	b.n	8009170 <UART_SetConfig+0x5d8>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a86      	ldr	r2, [pc, #536]	; (8009238 <UART_SetConfig+0x6a0>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d132      	bne.n	800908a <UART_SetConfig+0x4f2>
 8009024:	4b83      	ldr	r3, [pc, #524]	; (8009234 <UART_SetConfig+0x69c>)
 8009026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	2b05      	cmp	r3, #5
 800902e:	d827      	bhi.n	8009080 <UART_SetConfig+0x4e8>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <UART_SetConfig+0x4a0>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009051 	.word	0x08009051
 800903c:	08009059 	.word	0x08009059
 8009040:	08009061 	.word	0x08009061
 8009044:	08009069 	.word	0x08009069
 8009048:	08009071 	.word	0x08009071
 800904c:	08009079 	.word	0x08009079
 8009050:	2300      	movs	r3, #0
 8009052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009056:	e08b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009058:	2304      	movs	r3, #4
 800905a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800905e:	e087      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009060:	2308      	movs	r3, #8
 8009062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009066:	e083      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009068:	2310      	movs	r3, #16
 800906a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800906e:	e07f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009070:	2320      	movs	r3, #32
 8009072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009076:	e07b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009078:	2340      	movs	r3, #64	; 0x40
 800907a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800907e:	e077      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009080:	2380      	movs	r3, #128	; 0x80
 8009082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009086:	bf00      	nop
 8009088:	e072      	b.n	8009170 <UART_SetConfig+0x5d8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a6b      	ldr	r2, [pc, #428]	; (800923c <UART_SetConfig+0x6a4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d132      	bne.n	80090fa <UART_SetConfig+0x562>
 8009094:	4b67      	ldr	r3, [pc, #412]	; (8009234 <UART_SetConfig+0x69c>)
 8009096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	2b05      	cmp	r3, #5
 800909e:	d827      	bhi.n	80090f0 <UART_SetConfig+0x558>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <UART_SetConfig+0x510>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2300      	movs	r3, #0
 80090c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090c6:	e053      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090ce:	e04f      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090d6:	e04b      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090de:	e047      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090e6:	e043      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090ee:	e03f      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80090f6:	bf00      	nop
 80090f8:	e03a      	b.n	8009170 <UART_SetConfig+0x5d8>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a50      	ldr	r2, [pc, #320]	; (8009240 <UART_SetConfig+0x6a8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d132      	bne.n	800916a <UART_SetConfig+0x5d2>
 8009104:	4b4b      	ldr	r3, [pc, #300]	; (8009234 <UART_SetConfig+0x69c>)
 8009106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b05      	cmp	r3, #5
 800910e:	d827      	bhi.n	8009160 <UART_SetConfig+0x5c8>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <UART_SetConfig+0x580>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009131 	.word	0x08009131
 800911c:	08009139 	.word	0x08009139
 8009120:	08009141 	.word	0x08009141
 8009124:	08009149 	.word	0x08009149
 8009128:	08009151 	.word	0x08009151
 800912c:	08009159 	.word	0x08009159
 8009130:	2302      	movs	r3, #2
 8009132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009136:	e01b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009138:	2304      	movs	r3, #4
 800913a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800913e:	e017      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009146:	e013      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009148:	2310      	movs	r3, #16
 800914a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800914e:	e00f      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009150:	2320      	movs	r3, #32
 8009152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009156:	e00b      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800915e:	e007      	b.n	8009170 <UART_SetConfig+0x5d8>
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009166:	bf00      	nop
 8009168:	e002      	b.n	8009170 <UART_SetConfig+0x5d8>
 800916a:	2380      	movs	r3, #128	; 0x80
 800916c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a32      	ldr	r2, [pc, #200]	; (8009240 <UART_SetConfig+0x6a8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	f040 86f7 	bne.w	8009f6a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800917c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009180:	2b08      	cmp	r3, #8
 8009182:	f000 80c0 	beq.w	8009306 <UART_SetConfig+0x76e>
 8009186:	2b08      	cmp	r3, #8
 8009188:	dc04      	bgt.n	8009194 <UART_SetConfig+0x5fc>
 800918a:	2b02      	cmp	r3, #2
 800918c:	d00c      	beq.n	80091a8 <UART_SetConfig+0x610>
 800918e:	2b04      	cmp	r3, #4
 8009190:	d065      	beq.n	800925e <UART_SetConfig+0x6c6>
 8009192:	e27a      	b.n	800968a <UART_SetConfig+0xaf2>
 8009194:	2b20      	cmp	r3, #32
 8009196:	f000 81b0 	beq.w	80094fa <UART_SetConfig+0x962>
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	f000 821e 	beq.w	80095dc <UART_SetConfig+0xa44>
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	f000 8104 	beq.w	80093ae <UART_SetConfig+0x816>
 80091a6:	e270      	b.n	800968a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091a8:	f7fe f8d6 	bl	8007358 <HAL_RCCEx_GetD3PCLK1Freq>
 80091ac:	4602      	mov	r2, r0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d04e      	beq.n	8009254 <UART_SetConfig+0x6bc>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d048      	beq.n	8009250 <UART_SetConfig+0x6b8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d042      	beq.n	800924c <UART_SetConfig+0x6b4>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d03c      	beq.n	8009248 <UART_SetConfig+0x6b0>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d036      	beq.n	8009244 <UART_SetConfig+0x6ac>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d026      	beq.n	800922c <UART_SetConfig+0x694>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b06      	cmp	r3, #6
 80091e4:	d020      	beq.n	8009228 <UART_SetConfig+0x690>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2b07      	cmp	r3, #7
 80091ec:	d01a      	beq.n	8009224 <UART_SetConfig+0x68c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d014      	beq.n	8009220 <UART_SetConfig+0x688>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d00e      	beq.n	800921c <UART_SetConfig+0x684>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b0a      	cmp	r3, #10
 8009204:	d008      	beq.n	8009218 <UART_SetConfig+0x680>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b0b      	cmp	r3, #11
 800920c:	d102      	bne.n	8009214 <UART_SetConfig+0x67c>
 800920e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009212:	e020      	b.n	8009256 <UART_SetConfig+0x6be>
 8009214:	2301      	movs	r3, #1
 8009216:	e01e      	b.n	8009256 <UART_SetConfig+0x6be>
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	e01c      	b.n	8009256 <UART_SetConfig+0x6be>
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	e01a      	b.n	8009256 <UART_SetConfig+0x6be>
 8009220:	2320      	movs	r3, #32
 8009222:	e018      	b.n	8009256 <UART_SetConfig+0x6be>
 8009224:	2310      	movs	r3, #16
 8009226:	e016      	b.n	8009256 <UART_SetConfig+0x6be>
 8009228:	230c      	movs	r3, #12
 800922a:	e014      	b.n	8009256 <UART_SetConfig+0x6be>
 800922c:	230a      	movs	r3, #10
 800922e:	e012      	b.n	8009256 <UART_SetConfig+0x6be>
 8009230:	40011400 	.word	0x40011400
 8009234:	58024400 	.word	0x58024400
 8009238:	40007800 	.word	0x40007800
 800923c:	40007c00 	.word	0x40007c00
 8009240:	58000c00 	.word	0x58000c00
 8009244:	2308      	movs	r3, #8
 8009246:	e006      	b.n	8009256 <UART_SetConfig+0x6be>
 8009248:	2306      	movs	r3, #6
 800924a:	e004      	b.n	8009256 <UART_SetConfig+0x6be>
 800924c:	2304      	movs	r3, #4
 800924e:	e002      	b.n	8009256 <UART_SetConfig+0x6be>
 8009250:	2302      	movs	r3, #2
 8009252:	e000      	b.n	8009256 <UART_SetConfig+0x6be>
 8009254:	2301      	movs	r3, #1
 8009256:	fbb2 f3f3 	udiv	r3, r2, r3
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800925c:	e219      	b.n	8009692 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800925e:	f107 0318 	add.w	r3, r7, #24
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f88e 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009268:	69fa      	ldr	r2, [r7, #28]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d044      	beq.n	80092fc <UART_SetConfig+0x764>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	2b01      	cmp	r3, #1
 8009278:	d03e      	beq.n	80092f8 <UART_SetConfig+0x760>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b02      	cmp	r3, #2
 8009280:	d038      	beq.n	80092f4 <UART_SetConfig+0x75c>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b03      	cmp	r3, #3
 8009288:	d032      	beq.n	80092f0 <UART_SetConfig+0x758>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b04      	cmp	r3, #4
 8009290:	d02c      	beq.n	80092ec <UART_SetConfig+0x754>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b05      	cmp	r3, #5
 8009298:	d026      	beq.n	80092e8 <UART_SetConfig+0x750>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d020      	beq.n	80092e4 <UART_SetConfig+0x74c>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	2b07      	cmp	r3, #7
 80092a8:	d01a      	beq.n	80092e0 <UART_SetConfig+0x748>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	d014      	beq.n	80092dc <UART_SetConfig+0x744>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b09      	cmp	r3, #9
 80092b8:	d00e      	beq.n	80092d8 <UART_SetConfig+0x740>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b0a      	cmp	r3, #10
 80092c0:	d008      	beq.n	80092d4 <UART_SetConfig+0x73c>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	2b0b      	cmp	r3, #11
 80092c8:	d102      	bne.n	80092d0 <UART_SetConfig+0x738>
 80092ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ce:	e016      	b.n	80092fe <UART_SetConfig+0x766>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e014      	b.n	80092fe <UART_SetConfig+0x766>
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	e012      	b.n	80092fe <UART_SetConfig+0x766>
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	e010      	b.n	80092fe <UART_SetConfig+0x766>
 80092dc:	2320      	movs	r3, #32
 80092de:	e00e      	b.n	80092fe <UART_SetConfig+0x766>
 80092e0:	2310      	movs	r3, #16
 80092e2:	e00c      	b.n	80092fe <UART_SetConfig+0x766>
 80092e4:	230c      	movs	r3, #12
 80092e6:	e00a      	b.n	80092fe <UART_SetConfig+0x766>
 80092e8:	230a      	movs	r3, #10
 80092ea:	e008      	b.n	80092fe <UART_SetConfig+0x766>
 80092ec:	2308      	movs	r3, #8
 80092ee:	e006      	b.n	80092fe <UART_SetConfig+0x766>
 80092f0:	2306      	movs	r3, #6
 80092f2:	e004      	b.n	80092fe <UART_SetConfig+0x766>
 80092f4:	2304      	movs	r3, #4
 80092f6:	e002      	b.n	80092fe <UART_SetConfig+0x766>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e000      	b.n	80092fe <UART_SetConfig+0x766>
 80092fc:	2301      	movs	r3, #1
 80092fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009304:	e1c5      	b.n	8009692 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009306:	f107 030c 	add.w	r3, r7, #12
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe f986 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d044      	beq.n	80093a4 <UART_SetConfig+0x80c>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	2b01      	cmp	r3, #1
 8009320:	d03e      	beq.n	80093a0 <UART_SetConfig+0x808>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	2b02      	cmp	r3, #2
 8009328:	d038      	beq.n	800939c <UART_SetConfig+0x804>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	2b03      	cmp	r3, #3
 8009330:	d032      	beq.n	8009398 <UART_SetConfig+0x800>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	2b04      	cmp	r3, #4
 8009338:	d02c      	beq.n	8009394 <UART_SetConfig+0x7fc>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2b05      	cmp	r3, #5
 8009340:	d026      	beq.n	8009390 <UART_SetConfig+0x7f8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	2b06      	cmp	r3, #6
 8009348:	d020      	beq.n	800938c <UART_SetConfig+0x7f4>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	2b07      	cmp	r3, #7
 8009350:	d01a      	beq.n	8009388 <UART_SetConfig+0x7f0>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	2b08      	cmp	r3, #8
 8009358:	d014      	beq.n	8009384 <UART_SetConfig+0x7ec>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	2b09      	cmp	r3, #9
 8009360:	d00e      	beq.n	8009380 <UART_SetConfig+0x7e8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	2b0a      	cmp	r3, #10
 8009368:	d008      	beq.n	800937c <UART_SetConfig+0x7e4>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2b0b      	cmp	r3, #11
 8009370:	d102      	bne.n	8009378 <UART_SetConfig+0x7e0>
 8009372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009376:	e016      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009378:	2301      	movs	r3, #1
 800937a:	e014      	b.n	80093a6 <UART_SetConfig+0x80e>
 800937c:	2380      	movs	r3, #128	; 0x80
 800937e:	e012      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	e010      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009384:	2320      	movs	r3, #32
 8009386:	e00e      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009388:	2310      	movs	r3, #16
 800938a:	e00c      	b.n	80093a6 <UART_SetConfig+0x80e>
 800938c:	230c      	movs	r3, #12
 800938e:	e00a      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009390:	230a      	movs	r3, #10
 8009392:	e008      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009394:	2308      	movs	r3, #8
 8009396:	e006      	b.n	80093a6 <UART_SetConfig+0x80e>
 8009398:	2306      	movs	r3, #6
 800939a:	e004      	b.n	80093a6 <UART_SetConfig+0x80e>
 800939c:	2304      	movs	r3, #4
 800939e:	e002      	b.n	80093a6 <UART_SetConfig+0x80e>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e000      	b.n	80093a6 <UART_SetConfig+0x80e>
 80093a4:	2301      	movs	r3, #1
 80093a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ac:	e171      	b.n	8009692 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ae:	4b7a      	ldr	r3, [pc, #488]	; (8009598 <UART_SetConfig+0xa00>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d054      	beq.n	8009464 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80093ba:	4b77      	ldr	r3, [pc, #476]	; (8009598 <UART_SetConfig+0xa00>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	08db      	lsrs	r3, r3, #3
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	4a75      	ldr	r2, [pc, #468]	; (800959c <UART_SetConfig+0xa04>)
 80093c6:	40da      	lsrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d044      	beq.n	800945a <UART_SetConfig+0x8c2>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d03e      	beq.n	8009456 <UART_SetConfig+0x8be>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d038      	beq.n	8009452 <UART_SetConfig+0x8ba>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d032      	beq.n	800944e <UART_SetConfig+0x8b6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d02c      	beq.n	800944a <UART_SetConfig+0x8b2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	2b05      	cmp	r3, #5
 80093f6:	d026      	beq.n	8009446 <UART_SetConfig+0x8ae>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	2b06      	cmp	r3, #6
 80093fe:	d020      	beq.n	8009442 <UART_SetConfig+0x8aa>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b07      	cmp	r3, #7
 8009406:	d01a      	beq.n	800943e <UART_SetConfig+0x8a6>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2b08      	cmp	r3, #8
 800940e:	d014      	beq.n	800943a <UART_SetConfig+0x8a2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b09      	cmp	r3, #9
 8009416:	d00e      	beq.n	8009436 <UART_SetConfig+0x89e>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	2b0a      	cmp	r3, #10
 800941e:	d008      	beq.n	8009432 <UART_SetConfig+0x89a>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b0b      	cmp	r3, #11
 8009426:	d102      	bne.n	800942e <UART_SetConfig+0x896>
 8009428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800942c:	e016      	b.n	800945c <UART_SetConfig+0x8c4>
 800942e:	2301      	movs	r3, #1
 8009430:	e014      	b.n	800945c <UART_SetConfig+0x8c4>
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	e012      	b.n	800945c <UART_SetConfig+0x8c4>
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	e010      	b.n	800945c <UART_SetConfig+0x8c4>
 800943a:	2320      	movs	r3, #32
 800943c:	e00e      	b.n	800945c <UART_SetConfig+0x8c4>
 800943e:	2310      	movs	r3, #16
 8009440:	e00c      	b.n	800945c <UART_SetConfig+0x8c4>
 8009442:	230c      	movs	r3, #12
 8009444:	e00a      	b.n	800945c <UART_SetConfig+0x8c4>
 8009446:	230a      	movs	r3, #10
 8009448:	e008      	b.n	800945c <UART_SetConfig+0x8c4>
 800944a:	2308      	movs	r3, #8
 800944c:	e006      	b.n	800945c <UART_SetConfig+0x8c4>
 800944e:	2306      	movs	r3, #6
 8009450:	e004      	b.n	800945c <UART_SetConfig+0x8c4>
 8009452:	2304      	movs	r3, #4
 8009454:	e002      	b.n	800945c <UART_SetConfig+0x8c4>
 8009456:	2302      	movs	r3, #2
 8009458:	e000      	b.n	800945c <UART_SetConfig+0x8c4>
 800945a:	2301      	movs	r3, #1
 800945c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009462:	e116      	b.n	8009692 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	d043      	beq.n	80094f4 <UART_SetConfig+0x95c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	2b01      	cmp	r3, #1
 8009472:	d03d      	beq.n	80094f0 <UART_SetConfig+0x958>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2b02      	cmp	r3, #2
 800947a:	d037      	beq.n	80094ec <UART_SetConfig+0x954>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	2b03      	cmp	r3, #3
 8009482:	d031      	beq.n	80094e8 <UART_SetConfig+0x950>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b04      	cmp	r3, #4
 800948a:	d02b      	beq.n	80094e4 <UART_SetConfig+0x94c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b05      	cmp	r3, #5
 8009492:	d025      	beq.n	80094e0 <UART_SetConfig+0x948>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b06      	cmp	r3, #6
 800949a:	d01f      	beq.n	80094dc <UART_SetConfig+0x944>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	2b07      	cmp	r3, #7
 80094a2:	d019      	beq.n	80094d8 <UART_SetConfig+0x940>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d013      	beq.n	80094d4 <UART_SetConfig+0x93c>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	2b09      	cmp	r3, #9
 80094b2:	d00d      	beq.n	80094d0 <UART_SetConfig+0x938>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b0a      	cmp	r3, #10
 80094ba:	d007      	beq.n	80094cc <UART_SetConfig+0x934>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	d101      	bne.n	80094c8 <UART_SetConfig+0x930>
 80094c4:	4b36      	ldr	r3, [pc, #216]	; (80095a0 <UART_SetConfig+0xa08>)
 80094c6:	e016      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094c8:	4b34      	ldr	r3, [pc, #208]	; (800959c <UART_SetConfig+0xa04>)
 80094ca:	e014      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094cc:	4b35      	ldr	r3, [pc, #212]	; (80095a4 <UART_SetConfig+0xa0c>)
 80094ce:	e012      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094d0:	4b35      	ldr	r3, [pc, #212]	; (80095a8 <UART_SetConfig+0xa10>)
 80094d2:	e010      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094d4:	4b35      	ldr	r3, [pc, #212]	; (80095ac <UART_SetConfig+0xa14>)
 80094d6:	e00e      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094d8:	4b35      	ldr	r3, [pc, #212]	; (80095b0 <UART_SetConfig+0xa18>)
 80094da:	e00c      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094dc:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <UART_SetConfig+0xa1c>)
 80094de:	e00a      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094e0:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <UART_SetConfig+0xa20>)
 80094e2:	e008      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094e4:	4b35      	ldr	r3, [pc, #212]	; (80095bc <UART_SetConfig+0xa24>)
 80094e6:	e006      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094e8:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <UART_SetConfig+0xa28>)
 80094ea:	e004      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094ec:	4b35      	ldr	r3, [pc, #212]	; (80095c4 <UART_SetConfig+0xa2c>)
 80094ee:	e002      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094f0:	4b35      	ldr	r3, [pc, #212]	; (80095c8 <UART_SetConfig+0xa30>)
 80094f2:	e000      	b.n	80094f6 <UART_SetConfig+0x95e>
 80094f4:	4b29      	ldr	r3, [pc, #164]	; (800959c <UART_SetConfig+0xa04>)
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094f8:	e0cb      	b.n	8009692 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d046      	beq.n	8009590 <UART_SetConfig+0x9f8>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b01      	cmp	r3, #1
 8009508:	d040      	beq.n	800958c <UART_SetConfig+0x9f4>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b02      	cmp	r3, #2
 8009510:	d03a      	beq.n	8009588 <UART_SetConfig+0x9f0>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b03      	cmp	r3, #3
 8009518:	d034      	beq.n	8009584 <UART_SetConfig+0x9ec>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b04      	cmp	r3, #4
 8009520:	d02e      	beq.n	8009580 <UART_SetConfig+0x9e8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b05      	cmp	r3, #5
 8009528:	d028      	beq.n	800957c <UART_SetConfig+0x9e4>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b06      	cmp	r3, #6
 8009530:	d022      	beq.n	8009578 <UART_SetConfig+0x9e0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2b07      	cmp	r3, #7
 8009538:	d01c      	beq.n	8009574 <UART_SetConfig+0x9dc>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	2b08      	cmp	r3, #8
 8009540:	d016      	beq.n	8009570 <UART_SetConfig+0x9d8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b09      	cmp	r3, #9
 8009548:	d00f      	beq.n	800956a <UART_SetConfig+0x9d2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	2b0a      	cmp	r3, #10
 8009550:	d008      	beq.n	8009564 <UART_SetConfig+0x9cc>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b0b      	cmp	r3, #11
 8009558:	d102      	bne.n	8009560 <UART_SetConfig+0x9c8>
 800955a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800955e:	e018      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009560:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <UART_SetConfig+0xa18>)
 8009562:	e016      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009564:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009568:	e013      	b.n	8009592 <UART_SetConfig+0x9fa>
 800956a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800956e:	e010      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009570:	4b16      	ldr	r3, [pc, #88]	; (80095cc <UART_SetConfig+0xa34>)
 8009572:	e00e      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009574:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <UART_SetConfig+0xa08>)
 8009576:	e00c      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009578:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <UART_SetConfig+0xa38>)
 800957a:	e00a      	b.n	8009592 <UART_SetConfig+0x9fa>
 800957c:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <UART_SetConfig+0xa3c>)
 800957e:	e008      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009580:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <UART_SetConfig+0xa0c>)
 8009582:	e006      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009584:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <UART_SetConfig+0xa40>)
 8009586:	e004      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009588:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <UART_SetConfig+0xa10>)
 800958a:	e002      	b.n	8009592 <UART_SetConfig+0x9fa>
 800958c:	4b07      	ldr	r3, [pc, #28]	; (80095ac <UART_SetConfig+0xa14>)
 800958e:	e000      	b.n	8009592 <UART_SetConfig+0x9fa>
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <UART_SetConfig+0xa18>)
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009594:	e07d      	b.n	8009692 <UART_SetConfig+0xafa>
 8009596:	bf00      	nop
 8009598:	58024400 	.word	0x58024400
 800959c:	03d09000 	.word	0x03d09000
 80095a0:	0003d090 	.word	0x0003d090
 80095a4:	0007a120 	.word	0x0007a120
 80095a8:	000f4240 	.word	0x000f4240
 80095ac:	001e8480 	.word	0x001e8480
 80095b0:	003d0900 	.word	0x003d0900
 80095b4:	00516155 	.word	0x00516155
 80095b8:	0061a800 	.word	0x0061a800
 80095bc:	007a1200 	.word	0x007a1200
 80095c0:	00a2c2aa 	.word	0x00a2c2aa
 80095c4:	00f42400 	.word	0x00f42400
 80095c8:	01e84800 	.word	0x01e84800
 80095cc:	0001e848 	.word	0x0001e848
 80095d0:	00051615 	.word	0x00051615
 80095d4:	00061a80 	.word	0x00061a80
 80095d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d04e      	beq.n	8009682 <UART_SetConfig+0xaea>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d047      	beq.n	800967c <UART_SetConfig+0xae4>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d040      	beq.n	8009676 <UART_SetConfig+0xade>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d039      	beq.n	8009670 <UART_SetConfig+0xad8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	2b04      	cmp	r3, #4
 8009602:	d032      	beq.n	800966a <UART_SetConfig+0xad2>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b05      	cmp	r3, #5
 800960a:	d02b      	beq.n	8009664 <UART_SetConfig+0xacc>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	2b06      	cmp	r3, #6
 8009612:	d024      	beq.n	800965e <UART_SetConfig+0xac6>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b07      	cmp	r3, #7
 800961a:	d01d      	beq.n	8009658 <UART_SetConfig+0xac0>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b08      	cmp	r3, #8
 8009622:	d016      	beq.n	8009652 <UART_SetConfig+0xaba>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	2b09      	cmp	r3, #9
 800962a:	d00f      	beq.n	800964c <UART_SetConfig+0xab4>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b0a      	cmp	r3, #10
 8009632:	d008      	beq.n	8009646 <UART_SetConfig+0xaae>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b0b      	cmp	r3, #11
 800963a:	d101      	bne.n	8009640 <UART_SetConfig+0xaa8>
 800963c:	2380      	movs	r3, #128	; 0x80
 800963e:	e022      	b.n	8009686 <UART_SetConfig+0xaee>
 8009640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009644:	e01f      	b.n	8009686 <UART_SetConfig+0xaee>
 8009646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800964a:	e01c      	b.n	8009686 <UART_SetConfig+0xaee>
 800964c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009650:	e019      	b.n	8009686 <UART_SetConfig+0xaee>
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	e016      	b.n	8009686 <UART_SetConfig+0xaee>
 8009658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800965c:	e013      	b.n	8009686 <UART_SetConfig+0xaee>
 800965e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009662:	e010      	b.n	8009686 <UART_SetConfig+0xaee>
 8009664:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009668:	e00d      	b.n	8009686 <UART_SetConfig+0xaee>
 800966a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800966e:	e00a      	b.n	8009686 <UART_SetConfig+0xaee>
 8009670:	f241 5355 	movw	r3, #5461	; 0x1555
 8009674:	e007      	b.n	8009686 <UART_SetConfig+0xaee>
 8009676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800967a:	e004      	b.n	8009686 <UART_SetConfig+0xaee>
 800967c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009680:	e001      	b.n	8009686 <UART_SetConfig+0xaee>
 8009682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009688:	e003      	b.n	8009692 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009690:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	f001 83e8 	beq.w	800ae6a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	4413      	add	r3, r2
 80096a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d305      	bcc.n	80096b6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d904      	bls.n	80096c0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096bc:	f001 bbd5 	b.w	800ae6a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80096c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	f000 8154 	beq.w	8009972 <UART_SetConfig+0xdda>
 80096ca:	2b08      	cmp	r3, #8
 80096cc:	dc06      	bgt.n	80096dc <UART_SetConfig+0xb44>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d00f      	beq.n	80096f2 <UART_SetConfig+0xb5a>
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	f000 80ac 	beq.w	8009830 <UART_SetConfig+0xc98>
 80096d8:	f000 bc30 	b.w	8009f3c <UART_SetConfig+0x13a4>
 80096dc:	2b20      	cmp	r3, #32
 80096de:	f000 832d 	beq.w	8009d3c <UART_SetConfig+0x11a4>
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	f000 83a5 	beq.w	8009e32 <UART_SetConfig+0x129a>
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	f000 81e3 	beq.w	8009ab4 <UART_SetConfig+0xf1c>
 80096ee:	f000 bc25 	b.w	8009f3c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096f2:	f7fd fe31 	bl	8007358 <HAL_RCCEx_GetD3PCLK1Freq>
 80096f6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	4618      	mov	r0, r3
 80096fc:	f04f 0100 	mov.w	r1, #0
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	2b00      	cmp	r3, #0
 8009706:	d067      	beq.n	80097d8 <UART_SetConfig+0xc40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	2b01      	cmp	r3, #1
 800970e:	d05e      	beq.n	80097ce <UART_SetConfig+0xc36>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	2b02      	cmp	r3, #2
 8009716:	d055      	beq.n	80097c4 <UART_SetConfig+0xc2c>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	2b03      	cmp	r3, #3
 800971e:	d04c      	beq.n	80097ba <UART_SetConfig+0xc22>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	2b04      	cmp	r3, #4
 8009726:	d043      	beq.n	80097b0 <UART_SetConfig+0xc18>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b05      	cmp	r3, #5
 800972e:	d03a      	beq.n	80097a6 <UART_SetConfig+0xc0e>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b06      	cmp	r3, #6
 8009736:	d031      	beq.n	800979c <UART_SetConfig+0xc04>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b07      	cmp	r3, #7
 800973e:	d028      	beq.n	8009792 <UART_SetConfig+0xbfa>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2b08      	cmp	r3, #8
 8009746:	d01f      	beq.n	8009788 <UART_SetConfig+0xbf0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b09      	cmp	r3, #9
 800974e:	d016      	beq.n	800977e <UART_SetConfig+0xbe6>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	2b0a      	cmp	r3, #10
 8009756:	d00d      	beq.n	8009774 <UART_SetConfig+0xbdc>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	2b0b      	cmp	r3, #11
 800975e:	d104      	bne.n	800976a <UART_SetConfig+0xbd2>
 8009760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009764:	f04f 0400 	mov.w	r4, #0
 8009768:	e03a      	b.n	80097e0 <UART_SetConfig+0xc48>
 800976a:	f04f 0301 	mov.w	r3, #1
 800976e:	f04f 0400 	mov.w	r4, #0
 8009772:	e035      	b.n	80097e0 <UART_SetConfig+0xc48>
 8009774:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009778:	f04f 0400 	mov.w	r4, #0
 800977c:	e030      	b.n	80097e0 <UART_SetConfig+0xc48>
 800977e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009782:	f04f 0400 	mov.w	r4, #0
 8009786:	e02b      	b.n	80097e0 <UART_SetConfig+0xc48>
 8009788:	f04f 0320 	mov.w	r3, #32
 800978c:	f04f 0400 	mov.w	r4, #0
 8009790:	e026      	b.n	80097e0 <UART_SetConfig+0xc48>
 8009792:	f04f 0310 	mov.w	r3, #16
 8009796:	f04f 0400 	mov.w	r4, #0
 800979a:	e021      	b.n	80097e0 <UART_SetConfig+0xc48>
 800979c:	f04f 030c 	mov.w	r3, #12
 80097a0:	f04f 0400 	mov.w	r4, #0
 80097a4:	e01c      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097a6:	f04f 030a 	mov.w	r3, #10
 80097aa:	f04f 0400 	mov.w	r4, #0
 80097ae:	e017      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097b0:	f04f 0308 	mov.w	r3, #8
 80097b4:	f04f 0400 	mov.w	r4, #0
 80097b8:	e012      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097ba:	f04f 0306 	mov.w	r3, #6
 80097be:	f04f 0400 	mov.w	r4, #0
 80097c2:	e00d      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097c4:	f04f 0304 	mov.w	r3, #4
 80097c8:	f04f 0400 	mov.w	r4, #0
 80097cc:	e008      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097ce:	f04f 0302 	mov.w	r3, #2
 80097d2:	f04f 0400 	mov.w	r4, #0
 80097d6:	e003      	b.n	80097e0 <UART_SetConfig+0xc48>
 80097d8:	f04f 0301 	mov.w	r3, #1
 80097dc:	f04f 0400 	mov.w	r4, #0
 80097e0:	461a      	mov	r2, r3
 80097e2:	4623      	mov	r3, r4
 80097e4:	f7f6 fdd4 	bl	8000390 <__aeabi_uldivmod>
 80097e8:	4603      	mov	r3, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	4619      	mov	r1, r3
 80097ee:	4622      	mov	r2, r4
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	f04f 0400 	mov.w	r4, #0
 80097f8:	0214      	lsls	r4, r2, #8
 80097fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80097fe:	020b      	lsls	r3, r1, #8
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6852      	ldr	r2, [r2, #4]
 8009804:	0852      	lsrs	r2, r2, #1
 8009806:	4611      	mov	r1, r2
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	eb13 0b01 	adds.w	fp, r3, r1
 8009810:	eb44 0c02 	adc.w	ip, r4, r2
 8009814:	4658      	mov	r0, fp
 8009816:	4661      	mov	r1, ip
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f04f 0400 	mov.w	r4, #0
 8009820:	461a      	mov	r2, r3
 8009822:	4623      	mov	r3, r4
 8009824:	f7f6 fdb4 	bl	8000390 <__aeabi_uldivmod>
 8009828:	4603      	mov	r3, r0
 800982a:	460c      	mov	r4, r1
 800982c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800982e:	e389      	b.n	8009f44 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009830:	f107 0318 	add.w	r3, r7, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd fda5 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4618      	mov	r0, r3
 800983e:	f04f 0100 	mov.w	r1, #0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b00      	cmp	r3, #0
 8009848:	d067      	beq.n	800991a <UART_SetConfig+0xd82>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b01      	cmp	r3, #1
 8009850:	d05e      	beq.n	8009910 <UART_SetConfig+0xd78>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b02      	cmp	r3, #2
 8009858:	d055      	beq.n	8009906 <UART_SetConfig+0xd6e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b03      	cmp	r3, #3
 8009860:	d04c      	beq.n	80098fc <UART_SetConfig+0xd64>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b04      	cmp	r3, #4
 8009868:	d043      	beq.n	80098f2 <UART_SetConfig+0xd5a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b05      	cmp	r3, #5
 8009870:	d03a      	beq.n	80098e8 <UART_SetConfig+0xd50>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	2b06      	cmp	r3, #6
 8009878:	d031      	beq.n	80098de <UART_SetConfig+0xd46>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	2b07      	cmp	r3, #7
 8009880:	d028      	beq.n	80098d4 <UART_SetConfig+0xd3c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	2b08      	cmp	r3, #8
 8009888:	d01f      	beq.n	80098ca <UART_SetConfig+0xd32>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	2b09      	cmp	r3, #9
 8009890:	d016      	beq.n	80098c0 <UART_SetConfig+0xd28>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	2b0a      	cmp	r3, #10
 8009898:	d00d      	beq.n	80098b6 <UART_SetConfig+0xd1e>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	2b0b      	cmp	r3, #11
 80098a0:	d104      	bne.n	80098ac <UART_SetConfig+0xd14>
 80098a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a6:	f04f 0400 	mov.w	r4, #0
 80098aa:	e03a      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098ac:	f04f 0301 	mov.w	r3, #1
 80098b0:	f04f 0400 	mov.w	r4, #0
 80098b4:	e035      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80098ba:	f04f 0400 	mov.w	r4, #0
 80098be:	e030      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80098c4:	f04f 0400 	mov.w	r4, #0
 80098c8:	e02b      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098ca:	f04f 0320 	mov.w	r3, #32
 80098ce:	f04f 0400 	mov.w	r4, #0
 80098d2:	e026      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098d4:	f04f 0310 	mov.w	r3, #16
 80098d8:	f04f 0400 	mov.w	r4, #0
 80098dc:	e021      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098de:	f04f 030c 	mov.w	r3, #12
 80098e2:	f04f 0400 	mov.w	r4, #0
 80098e6:	e01c      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098e8:	f04f 030a 	mov.w	r3, #10
 80098ec:	f04f 0400 	mov.w	r4, #0
 80098f0:	e017      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098f2:	f04f 0308 	mov.w	r3, #8
 80098f6:	f04f 0400 	mov.w	r4, #0
 80098fa:	e012      	b.n	8009922 <UART_SetConfig+0xd8a>
 80098fc:	f04f 0306 	mov.w	r3, #6
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	e00d      	b.n	8009922 <UART_SetConfig+0xd8a>
 8009906:	f04f 0304 	mov.w	r3, #4
 800990a:	f04f 0400 	mov.w	r4, #0
 800990e:	e008      	b.n	8009922 <UART_SetConfig+0xd8a>
 8009910:	f04f 0302 	mov.w	r3, #2
 8009914:	f04f 0400 	mov.w	r4, #0
 8009918:	e003      	b.n	8009922 <UART_SetConfig+0xd8a>
 800991a:	f04f 0301 	mov.w	r3, #1
 800991e:	f04f 0400 	mov.w	r4, #0
 8009922:	461a      	mov	r2, r3
 8009924:	4623      	mov	r3, r4
 8009926:	f7f6 fd33 	bl	8000390 <__aeabi_uldivmod>
 800992a:	4603      	mov	r3, r0
 800992c:	460c      	mov	r4, r1
 800992e:	4619      	mov	r1, r3
 8009930:	4622      	mov	r2, r4
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	f04f 0400 	mov.w	r4, #0
 800993a:	0214      	lsls	r4, r2, #8
 800993c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009940:	020b      	lsls	r3, r1, #8
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	6852      	ldr	r2, [r2, #4]
 8009946:	0852      	lsrs	r2, r2, #1
 8009948:	4611      	mov	r1, r2
 800994a:	f04f 0200 	mov.w	r2, #0
 800994e:	eb13 0b01 	adds.w	fp, r3, r1
 8009952:	eb44 0c02 	adc.w	ip, r4, r2
 8009956:	4658      	mov	r0, fp
 8009958:	4661      	mov	r1, ip
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f04f 0400 	mov.w	r4, #0
 8009962:	461a      	mov	r2, r3
 8009964:	4623      	mov	r3, r4
 8009966:	f7f6 fd13 	bl	8000390 <__aeabi_uldivmod>
 800996a:	4603      	mov	r3, r0
 800996c:	460c      	mov	r4, r1
 800996e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009970:	e2e8      	b.n	8009f44 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009972:	f107 030c 	add.w	r3, r7, #12
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd fe50 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	4618      	mov	r0, r3
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	2b00      	cmp	r3, #0
 800998a:	d067      	beq.n	8009a5c <UART_SetConfig+0xec4>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	2b01      	cmp	r3, #1
 8009992:	d05e      	beq.n	8009a52 <UART_SetConfig+0xeba>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	2b02      	cmp	r3, #2
 800999a:	d055      	beq.n	8009a48 <UART_SetConfig+0xeb0>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d04c      	beq.n	8009a3e <UART_SetConfig+0xea6>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d043      	beq.n	8009a34 <UART_SetConfig+0xe9c>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d03a      	beq.n	8009a2a <UART_SetConfig+0xe92>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	2b06      	cmp	r3, #6
 80099ba:	d031      	beq.n	8009a20 <UART_SetConfig+0xe88>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	2b07      	cmp	r3, #7
 80099c2:	d028      	beq.n	8009a16 <UART_SetConfig+0xe7e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d01f      	beq.n	8009a0c <UART_SetConfig+0xe74>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	2b09      	cmp	r3, #9
 80099d2:	d016      	beq.n	8009a02 <UART_SetConfig+0xe6a>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2b0a      	cmp	r3, #10
 80099da:	d00d      	beq.n	80099f8 <UART_SetConfig+0xe60>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b0b      	cmp	r3, #11
 80099e2:	d104      	bne.n	80099ee <UART_SetConfig+0xe56>
 80099e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e8:	f04f 0400 	mov.w	r4, #0
 80099ec:	e03a      	b.n	8009a64 <UART_SetConfig+0xecc>
 80099ee:	f04f 0301 	mov.w	r3, #1
 80099f2:	f04f 0400 	mov.w	r4, #0
 80099f6:	e035      	b.n	8009a64 <UART_SetConfig+0xecc>
 80099f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80099fc:	f04f 0400 	mov.w	r4, #0
 8009a00:	e030      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a02:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009a06:	f04f 0400 	mov.w	r4, #0
 8009a0a:	e02b      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a0c:	f04f 0320 	mov.w	r3, #32
 8009a10:	f04f 0400 	mov.w	r4, #0
 8009a14:	e026      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a16:	f04f 0310 	mov.w	r3, #16
 8009a1a:	f04f 0400 	mov.w	r4, #0
 8009a1e:	e021      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a20:	f04f 030c 	mov.w	r3, #12
 8009a24:	f04f 0400 	mov.w	r4, #0
 8009a28:	e01c      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a2a:	f04f 030a 	mov.w	r3, #10
 8009a2e:	f04f 0400 	mov.w	r4, #0
 8009a32:	e017      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a34:	f04f 0308 	mov.w	r3, #8
 8009a38:	f04f 0400 	mov.w	r4, #0
 8009a3c:	e012      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a3e:	f04f 0306 	mov.w	r3, #6
 8009a42:	f04f 0400 	mov.w	r4, #0
 8009a46:	e00d      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a48:	f04f 0304 	mov.w	r3, #4
 8009a4c:	f04f 0400 	mov.w	r4, #0
 8009a50:	e008      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a52:	f04f 0302 	mov.w	r3, #2
 8009a56:	f04f 0400 	mov.w	r4, #0
 8009a5a:	e003      	b.n	8009a64 <UART_SetConfig+0xecc>
 8009a5c:	f04f 0301 	mov.w	r3, #1
 8009a60:	f04f 0400 	mov.w	r4, #0
 8009a64:	461a      	mov	r2, r3
 8009a66:	4623      	mov	r3, r4
 8009a68:	f7f6 fc92 	bl	8000390 <__aeabi_uldivmod>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4619      	mov	r1, r3
 8009a72:	4622      	mov	r2, r4
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	f04f 0400 	mov.w	r4, #0
 8009a7c:	0214      	lsls	r4, r2, #8
 8009a7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a82:	020b      	lsls	r3, r1, #8
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6852      	ldr	r2, [r2, #4]
 8009a88:	0852      	lsrs	r2, r2, #1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	eb13 0b01 	adds.w	fp, r3, r1
 8009a94:	eb44 0c02 	adc.w	ip, r4, r2
 8009a98:	4658      	mov	r0, fp
 8009a9a:	4661      	mov	r1, ip
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f04f 0400 	mov.w	r4, #0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	f7f6 fc72 	bl	8000390 <__aeabi_uldivmod>
 8009aac:	4603      	mov	r3, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ab2:	e247      	b.n	8009f44 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab4:	4b96      	ldr	r3, [pc, #600]	; (8009d10 <UART_SetConfig+0x1178>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80a3 	beq.w	8009c08 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac2:	4b93      	ldr	r3, [pc, #588]	; (8009d10 <UART_SetConfig+0x1178>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	08db      	lsrs	r3, r3, #3
 8009ac8:	f003 0303 	and.w	r3, r3, #3
 8009acc:	4a91      	ldr	r2, [pc, #580]	; (8009d14 <UART_SetConfig+0x117c>)
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f04f 0100 	mov.w	r1, #0
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d067      	beq.n	8009bb0 <UART_SetConfig+0x1018>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d05e      	beq.n	8009ba6 <UART_SetConfig+0x100e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d055      	beq.n	8009b9c <UART_SetConfig+0x1004>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d04c      	beq.n	8009b92 <UART_SetConfig+0xffa>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d043      	beq.n	8009b88 <UART_SetConfig+0xff0>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d03a      	beq.n	8009b7e <UART_SetConfig+0xfe6>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b06      	cmp	r3, #6
 8009b0e:	d031      	beq.n	8009b74 <UART_SetConfig+0xfdc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	d028      	beq.n	8009b6a <UART_SetConfig+0xfd2>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d01f      	beq.n	8009b60 <UART_SetConfig+0xfc8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d016      	beq.n	8009b56 <UART_SetConfig+0xfbe>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b0a      	cmp	r3, #10
 8009b2e:	d00d      	beq.n	8009b4c <UART_SetConfig+0xfb4>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b0b      	cmp	r3, #11
 8009b36:	d104      	bne.n	8009b42 <UART_SetConfig+0xfaa>
 8009b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b3c:	f04f 0400 	mov.w	r4, #0
 8009b40:	e03a      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b42:	f04f 0301 	mov.w	r3, #1
 8009b46:	f04f 0400 	mov.w	r4, #0
 8009b4a:	e035      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009b50:	f04f 0400 	mov.w	r4, #0
 8009b54:	e030      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009b5a:	f04f 0400 	mov.w	r4, #0
 8009b5e:	e02b      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b60:	f04f 0320 	mov.w	r3, #32
 8009b64:	f04f 0400 	mov.w	r4, #0
 8009b68:	e026      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b6a:	f04f 0310 	mov.w	r3, #16
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	e021      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b74:	f04f 030c 	mov.w	r3, #12
 8009b78:	f04f 0400 	mov.w	r4, #0
 8009b7c:	e01c      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b7e:	f04f 030a 	mov.w	r3, #10
 8009b82:	f04f 0400 	mov.w	r4, #0
 8009b86:	e017      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b88:	f04f 0308 	mov.w	r3, #8
 8009b8c:	f04f 0400 	mov.w	r4, #0
 8009b90:	e012      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b92:	f04f 0306 	mov.w	r3, #6
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	e00d      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009b9c:	f04f 0304 	mov.w	r3, #4
 8009ba0:	f04f 0400 	mov.w	r4, #0
 8009ba4:	e008      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009ba6:	f04f 0302 	mov.w	r3, #2
 8009baa:	f04f 0400 	mov.w	r4, #0
 8009bae:	e003      	b.n	8009bb8 <UART_SetConfig+0x1020>
 8009bb0:	f04f 0301 	mov.w	r3, #1
 8009bb4:	f04f 0400 	mov.w	r4, #0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4623      	mov	r3, r4
 8009bbc:	f7f6 fbe8 	bl	8000390 <__aeabi_uldivmod>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	f04f 0400 	mov.w	r4, #0
 8009bd0:	0214      	lsls	r4, r2, #8
 8009bd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009bd6:	020b      	lsls	r3, r1, #8
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6852      	ldr	r2, [r2, #4]
 8009bdc:	0852      	lsrs	r2, r2, #1
 8009bde:	4611      	mov	r1, r2
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	eb13 0b01 	adds.w	fp, r3, r1
 8009be8:	eb44 0c02 	adc.w	ip, r4, r2
 8009bec:	4658      	mov	r0, fp
 8009bee:	4661      	mov	r1, ip
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f04f 0400 	mov.w	r4, #0
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4623      	mov	r3, r4
 8009bfc:	f7f6 fbc8 	bl	8000390 <__aeabi_uldivmod>
 8009c00:	4603      	mov	r3, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8009c06:	e19d      	b.n	8009f44 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d05b      	beq.n	8009cc8 <UART_SetConfig+0x1130>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d053      	beq.n	8009cc0 <UART_SetConfig+0x1128>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d04b      	beq.n	8009cb8 <UART_SetConfig+0x1120>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d043      	beq.n	8009cb0 <UART_SetConfig+0x1118>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d03b      	beq.n	8009ca8 <UART_SetConfig+0x1110>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	d033      	beq.n	8009ca0 <UART_SetConfig+0x1108>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	2b06      	cmp	r3, #6
 8009c3e:	d02b      	beq.n	8009c98 <UART_SetConfig+0x1100>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	2b07      	cmp	r3, #7
 8009c46:	d023      	beq.n	8009c90 <UART_SetConfig+0x10f8>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d01b      	beq.n	8009c88 <UART_SetConfig+0x10f0>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	2b09      	cmp	r3, #9
 8009c56:	d013      	beq.n	8009c80 <UART_SetConfig+0x10e8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b0a      	cmp	r3, #10
 8009c5e:	d00b      	beq.n	8009c78 <UART_SetConfig+0x10e0>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	2b0b      	cmp	r3, #11
 8009c66:	d103      	bne.n	8009c70 <UART_SetConfig+0x10d8>
 8009c68:	4b2a      	ldr	r3, [pc, #168]	; (8009d14 <UART_SetConfig+0x117c>)
 8009c6a:	f04f 0400 	mov.w	r4, #0
 8009c6e:	e02e      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c70:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <UART_SetConfig+0x1180>)
 8009c72:	f04f 0403 	mov.w	r4, #3
 8009c76:	e02a      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c78:	4b28      	ldr	r3, [pc, #160]	; (8009d1c <UART_SetConfig+0x1184>)
 8009c7a:	f04f 0400 	mov.w	r4, #0
 8009c7e:	e026      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c80:	4b27      	ldr	r3, [pc, #156]	; (8009d20 <UART_SetConfig+0x1188>)
 8009c82:	f04f 0400 	mov.w	r4, #0
 8009c86:	e022      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c88:	4b26      	ldr	r3, [pc, #152]	; (8009d24 <UART_SetConfig+0x118c>)
 8009c8a:	f04f 0400 	mov.w	r4, #0
 8009c8e:	e01e      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <UART_SetConfig+0x1190>)
 8009c92:	f04f 0400 	mov.w	r4, #0
 8009c96:	e01a      	b.n	8009cce <UART_SetConfig+0x1136>
 8009c98:	a419      	add	r4, pc, #100	; (adr r4, 8009d00 <UART_SetConfig+0x1168>)
 8009c9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009c9e:	e016      	b.n	8009cce <UART_SetConfig+0x1136>
 8009ca0:	4b22      	ldr	r3, [pc, #136]	; (8009d2c <UART_SetConfig+0x1194>)
 8009ca2:	f04f 0400 	mov.w	r4, #0
 8009ca6:	e012      	b.n	8009cce <UART_SetConfig+0x1136>
 8009ca8:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <UART_SetConfig+0x1198>)
 8009caa:	f04f 0400 	mov.w	r4, #0
 8009cae:	e00e      	b.n	8009cce <UART_SetConfig+0x1136>
 8009cb0:	a415      	add	r4, pc, #84	; (adr r4, 8009d08 <UART_SetConfig+0x1170>)
 8009cb2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009cb6:	e00a      	b.n	8009cce <UART_SetConfig+0x1136>
 8009cb8:	4b1e      	ldr	r3, [pc, #120]	; (8009d34 <UART_SetConfig+0x119c>)
 8009cba:	f04f 0400 	mov.w	r4, #0
 8009cbe:	e006      	b.n	8009cce <UART_SetConfig+0x1136>
 8009cc0:	4b1d      	ldr	r3, [pc, #116]	; (8009d38 <UART_SetConfig+0x11a0>)
 8009cc2:	f04f 0401 	mov.w	r4, #1
 8009cc6:	e002      	b.n	8009cce <UART_SetConfig+0x1136>
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <UART_SetConfig+0x1180>)
 8009cca:	f04f 0403 	mov.w	r4, #3
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6852      	ldr	r2, [r2, #4]
 8009cd2:	0852      	lsrs	r2, r2, #1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	eb13 0b01 	adds.w	fp, r3, r1
 8009cde:	eb44 0c02 	adc.w	ip, r4, r2
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	4661      	mov	r1, ip
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f04f 0400 	mov.w	r4, #0
 8009cee:	461a      	mov	r2, r3
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	f7f6 fb4d 	bl	8000390 <__aeabi_uldivmod>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009cfc:	e122      	b.n	8009f44 <UART_SetConfig+0x13ac>
 8009cfe:	bf00      	nop
 8009d00:	51615500 	.word	0x51615500
 8009d04:	00000000 	.word	0x00000000
 8009d08:	a2c2aa00 	.word	0xa2c2aa00
 8009d0c:	00000000 	.word	0x00000000
 8009d10:	58024400 	.word	0x58024400
 8009d14:	03d09000 	.word	0x03d09000
 8009d18:	d0900000 	.word	0xd0900000
 8009d1c:	07a12000 	.word	0x07a12000
 8009d20:	0f424000 	.word	0x0f424000
 8009d24:	1e848000 	.word	0x1e848000
 8009d28:	3d090000 	.word	0x3d090000
 8009d2c:	61a80000 	.word	0x61a80000
 8009d30:	7a120000 	.word	0x7a120000
 8009d34:	f4240000 	.word	0xf4240000
 8009d38:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d05b      	beq.n	8009dfc <UART_SetConfig+0x1264>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d053      	beq.n	8009df4 <UART_SetConfig+0x125c>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d04b      	beq.n	8009dec <UART_SetConfig+0x1254>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d043      	beq.n	8009de4 <UART_SetConfig+0x124c>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d03b      	beq.n	8009ddc <UART_SetConfig+0x1244>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b05      	cmp	r3, #5
 8009d6a:	d033      	beq.n	8009dd4 <UART_SetConfig+0x123c>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b06      	cmp	r3, #6
 8009d72:	d02b      	beq.n	8009dcc <UART_SetConfig+0x1234>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b07      	cmp	r3, #7
 8009d7a:	d023      	beq.n	8009dc4 <UART_SetConfig+0x122c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d01b      	beq.n	8009dbc <UART_SetConfig+0x1224>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b09      	cmp	r3, #9
 8009d8a:	d013      	beq.n	8009db4 <UART_SetConfig+0x121c>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b0a      	cmp	r3, #10
 8009d92:	d00b      	beq.n	8009dac <UART_SetConfig+0x1214>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b0b      	cmp	r3, #11
 8009d9a:	d103      	bne.n	8009da4 <UART_SetConfig+0x120c>
 8009d9c:	4bc0      	ldr	r3, [pc, #768]	; (800a0a0 <UART_SetConfig+0x1508>)
 8009d9e:	f04f 0400 	mov.w	r4, #0
 8009da2:	e02e      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009da4:	4bbf      	ldr	r3, [pc, #764]	; (800a0a4 <UART_SetConfig+0x150c>)
 8009da6:	f04f 0400 	mov.w	r4, #0
 8009daa:	e02a      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dac:	4bbe      	ldr	r3, [pc, #760]	; (800a0a8 <UART_SetConfig+0x1510>)
 8009dae:	f04f 0400 	mov.w	r4, #0
 8009db2:	e026      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009db4:	4bbd      	ldr	r3, [pc, #756]	; (800a0ac <UART_SetConfig+0x1514>)
 8009db6:	f04f 0400 	mov.w	r4, #0
 8009dba:	e022      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dbc:	4bbc      	ldr	r3, [pc, #752]	; (800a0b0 <UART_SetConfig+0x1518>)
 8009dbe:	f04f 0400 	mov.w	r4, #0
 8009dc2:	e01e      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dc4:	4bbb      	ldr	r3, [pc, #748]	; (800a0b4 <UART_SetConfig+0x151c>)
 8009dc6:	f04f 0400 	mov.w	r4, #0
 8009dca:	e01a      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dcc:	a4b0      	add	r4, pc, #704	; (adr r4, 800a090 <UART_SetConfig+0x14f8>)
 8009dce:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009dd2:	e016      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dd4:	4bb8      	ldr	r3, [pc, #736]	; (800a0b8 <UART_SetConfig+0x1520>)
 8009dd6:	f04f 0400 	mov.w	r4, #0
 8009dda:	e012      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009ddc:	4bb7      	ldr	r3, [pc, #732]	; (800a0bc <UART_SetConfig+0x1524>)
 8009dde:	f04f 0400 	mov.w	r4, #0
 8009de2:	e00e      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009de4:	a4ac      	add	r4, pc, #688	; (adr r4, 800a098 <UART_SetConfig+0x1500>)
 8009de6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009dea:	e00a      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dec:	4bb4      	ldr	r3, [pc, #720]	; (800a0c0 <UART_SetConfig+0x1528>)
 8009dee:	f04f 0400 	mov.w	r4, #0
 8009df2:	e006      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009df4:	4bb3      	ldr	r3, [pc, #716]	; (800a0c4 <UART_SetConfig+0x152c>)
 8009df6:	f04f 0400 	mov.w	r4, #0
 8009dfa:	e002      	b.n	8009e02 <UART_SetConfig+0x126a>
 8009dfc:	4ba9      	ldr	r3, [pc, #676]	; (800a0a4 <UART_SetConfig+0x150c>)
 8009dfe:	f04f 0400 	mov.w	r4, #0
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6852      	ldr	r2, [r2, #4]
 8009e06:	0852      	lsrs	r2, r2, #1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	f04f 0200 	mov.w	r2, #0
 8009e0e:	eb13 0b01 	adds.w	fp, r3, r1
 8009e12:	eb44 0c02 	adc.w	ip, r4, r2
 8009e16:	4658      	mov	r0, fp
 8009e18:	4661      	mov	r1, ip
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f04f 0400 	mov.w	r4, #0
 8009e22:	461a      	mov	r2, r3
 8009e24:	4623      	mov	r3, r4
 8009e26:	f7f6 fab3 	bl	8000390 <__aeabi_uldivmod>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e30:	e088      	b.n	8009f44 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d064      	beq.n	8009f04 <UART_SetConfig+0x136c>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d05b      	beq.n	8009efa <UART_SetConfig+0x1362>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d052      	beq.n	8009ef0 <UART_SetConfig+0x1358>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d04a      	beq.n	8009ee8 <UART_SetConfig+0x1350>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d041      	beq.n	8009ede <UART_SetConfig+0x1346>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d039      	beq.n	8009ed6 <UART_SetConfig+0x133e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	d031      	beq.n	8009ece <UART_SetConfig+0x1336>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b07      	cmp	r3, #7
 8009e70:	d028      	beq.n	8009ec4 <UART_SetConfig+0x132c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d01f      	beq.n	8009eba <UART_SetConfig+0x1322>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b09      	cmp	r3, #9
 8009e80:	d016      	beq.n	8009eb0 <UART_SetConfig+0x1318>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b0a      	cmp	r3, #10
 8009e88:	d00d      	beq.n	8009ea6 <UART_SetConfig+0x130e>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b0b      	cmp	r3, #11
 8009e90:	d104      	bne.n	8009e9c <UART_SetConfig+0x1304>
 8009e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e96:	f04f 0400 	mov.w	r4, #0
 8009e9a:	e037      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009e9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009ea0:	f04f 0400 	mov.w	r4, #0
 8009ea4:	e032      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009eaa:	f04f 0400 	mov.w	r4, #0
 8009eae:	e02d      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009eb4:	f04f 0400 	mov.w	r4, #0
 8009eb8:	e028      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009eba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ebe:	f04f 0400 	mov.w	r4, #0
 8009ec2:	e023      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ec4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ec8:	f04f 0400 	mov.w	r4, #0
 8009ecc:	e01e      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ece:	4b7e      	ldr	r3, [pc, #504]	; (800a0c8 <UART_SetConfig+0x1530>)
 8009ed0:	f04f 0400 	mov.w	r4, #0
 8009ed4:	e01a      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ed6:	4b7d      	ldr	r3, [pc, #500]	; (800a0cc <UART_SetConfig+0x1534>)
 8009ed8:	f04f 0400 	mov.w	r4, #0
 8009edc:	e016      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ede:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ee2:	f04f 0400 	mov.w	r4, #0
 8009ee6:	e011      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ee8:	4b79      	ldr	r3, [pc, #484]	; (800a0d0 <UART_SetConfig+0x1538>)
 8009eea:	f04f 0400 	mov.w	r4, #0
 8009eee:	e00d      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ef4:	f04f 0400 	mov.w	r4, #0
 8009ef8:	e008      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009efa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009efe:	f04f 0400 	mov.w	r4, #0
 8009f02:	e003      	b.n	8009f0c <UART_SetConfig+0x1374>
 8009f04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f08:	f04f 0400 	mov.w	r4, #0
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6852      	ldr	r2, [r2, #4]
 8009f10:	0852      	lsrs	r2, r2, #1
 8009f12:	4611      	mov	r1, r2
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	eb13 0b01 	adds.w	fp, r3, r1
 8009f1c:	eb44 0c02 	adc.w	ip, r4, r2
 8009f20:	4658      	mov	r0, fp
 8009f22:	4661      	mov	r1, ip
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f04f 0400 	mov.w	r4, #0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4623      	mov	r3, r4
 8009f30:	f7f6 fa2e 	bl	8000390 <__aeabi_uldivmod>
 8009f34:	4603      	mov	r3, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f3a:	e003      	b.n	8009f44 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009f42:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f4a:	d309      	bcc.n	8009f60 <UART_SetConfig+0x13c8>
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f52:	d205      	bcs.n	8009f60 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f5a:	60da      	str	r2, [r3, #12]
 8009f5c:	f000 bf85 	b.w	800ae6a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	f000 bf80 	b.w	800ae6a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f72:	f040 83da 	bne.w	800a72a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009f76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f7a:	2b40      	cmp	r3, #64	; 0x40
 8009f7c:	f200 83b3 	bhi.w	800a6e6 <UART_SetConfig+0x1b4e>
 8009f80:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <UART_SetConfig+0x13f0>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	0800a0d5 	.word	0x0800a0d5
 8009f8c:	0800a18d 	.word	0x0800a18d
 8009f90:	0800a6e7 	.word	0x0800a6e7
 8009f94:	0800a6e7 	.word	0x0800a6e7
 8009f98:	0800a245 	.word	0x0800a245
 8009f9c:	0800a6e7 	.word	0x0800a6e7
 8009fa0:	0800a6e7 	.word	0x0800a6e7
 8009fa4:	0800a6e7 	.word	0x0800a6e7
 8009fa8:	0800a301 	.word	0x0800a301
 8009fac:	0800a6e7 	.word	0x0800a6e7
 8009fb0:	0800a6e7 	.word	0x0800a6e7
 8009fb4:	0800a6e7 	.word	0x0800a6e7
 8009fb8:	0800a6e7 	.word	0x0800a6e7
 8009fbc:	0800a6e7 	.word	0x0800a6e7
 8009fc0:	0800a6e7 	.word	0x0800a6e7
 8009fc4:	0800a6e7 	.word	0x0800a6e7
 8009fc8:	0800a3bd 	.word	0x0800a3bd
 8009fcc:	0800a6e7 	.word	0x0800a6e7
 8009fd0:	0800a6e7 	.word	0x0800a6e7
 8009fd4:	0800a6e7 	.word	0x0800a6e7
 8009fd8:	0800a6e7 	.word	0x0800a6e7
 8009fdc:	0800a6e7 	.word	0x0800a6e7
 8009fe0:	0800a6e7 	.word	0x0800a6e7
 8009fe4:	0800a6e7 	.word	0x0800a6e7
 8009fe8:	0800a6e7 	.word	0x0800a6e7
 8009fec:	0800a6e7 	.word	0x0800a6e7
 8009ff0:	0800a6e7 	.word	0x0800a6e7
 8009ff4:	0800a6e7 	.word	0x0800a6e7
 8009ff8:	0800a6e7 	.word	0x0800a6e7
 8009ffc:	0800a6e7 	.word	0x0800a6e7
 800a000:	0800a6e7 	.word	0x0800a6e7
 800a004:	0800a6e7 	.word	0x0800a6e7
 800a008:	0800a52f 	.word	0x0800a52f
 800a00c:	0800a6e7 	.word	0x0800a6e7
 800a010:	0800a6e7 	.word	0x0800a6e7
 800a014:	0800a6e7 	.word	0x0800a6e7
 800a018:	0800a6e7 	.word	0x0800a6e7
 800a01c:	0800a6e7 	.word	0x0800a6e7
 800a020:	0800a6e7 	.word	0x0800a6e7
 800a024:	0800a6e7 	.word	0x0800a6e7
 800a028:	0800a6e7 	.word	0x0800a6e7
 800a02c:	0800a6e7 	.word	0x0800a6e7
 800a030:	0800a6e7 	.word	0x0800a6e7
 800a034:	0800a6e7 	.word	0x0800a6e7
 800a038:	0800a6e7 	.word	0x0800a6e7
 800a03c:	0800a6e7 	.word	0x0800a6e7
 800a040:	0800a6e7 	.word	0x0800a6e7
 800a044:	0800a6e7 	.word	0x0800a6e7
 800a048:	0800a6e7 	.word	0x0800a6e7
 800a04c:	0800a6e7 	.word	0x0800a6e7
 800a050:	0800a6e7 	.word	0x0800a6e7
 800a054:	0800a6e7 	.word	0x0800a6e7
 800a058:	0800a6e7 	.word	0x0800a6e7
 800a05c:	0800a6e7 	.word	0x0800a6e7
 800a060:	0800a6e7 	.word	0x0800a6e7
 800a064:	0800a6e7 	.word	0x0800a6e7
 800a068:	0800a6e7 	.word	0x0800a6e7
 800a06c:	0800a6e7 	.word	0x0800a6e7
 800a070:	0800a6e7 	.word	0x0800a6e7
 800a074:	0800a6e7 	.word	0x0800a6e7
 800a078:	0800a6e7 	.word	0x0800a6e7
 800a07c:	0800a6e7 	.word	0x0800a6e7
 800a080:	0800a6e7 	.word	0x0800a6e7
 800a084:	0800a6e7 	.word	0x0800a6e7
 800a088:	0800a625 	.word	0x0800a625
 800a08c:	f3af 8000 	nop.w
 800a090:	05161500 	.word	0x05161500
 800a094:	00000000 	.word	0x00000000
 800a098:	0a2c2a00 	.word	0x0a2c2a00
 800a09c:	00000000 	.word	0x00000000
 800a0a0:	003d0900 	.word	0x003d0900
 800a0a4:	3d090000 	.word	0x3d090000
 800a0a8:	007a1200 	.word	0x007a1200
 800a0ac:	00f42400 	.word	0x00f42400
 800a0b0:	01e84800 	.word	0x01e84800
 800a0b4:	03d09000 	.word	0x03d09000
 800a0b8:	061a8000 	.word	0x061a8000
 800a0bc:	07a12000 	.word	0x07a12000
 800a0c0:	0f424000 	.word	0x0f424000
 800a0c4:	1e848000 	.word	0x1e848000
 800a0c8:	000aaa00 	.word	0x000aaa00
 800a0cc:	000ccc00 	.word	0x000ccc00
 800a0d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d4:	f7fb ffee 	bl	80060b4 <HAL_RCC_GetPCLK1Freq>
 800a0d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d044      	beq.n	800a16c <UART_SetConfig+0x15d4>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d03e      	beq.n	800a168 <UART_SetConfig+0x15d0>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d038      	beq.n	800a164 <UART_SetConfig+0x15cc>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d032      	beq.n	800a160 <UART_SetConfig+0x15c8>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d02c      	beq.n	800a15c <UART_SetConfig+0x15c4>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b05      	cmp	r3, #5
 800a108:	d026      	beq.n	800a158 <UART_SetConfig+0x15c0>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b06      	cmp	r3, #6
 800a110:	d020      	beq.n	800a154 <UART_SetConfig+0x15bc>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b07      	cmp	r3, #7
 800a118:	d01a      	beq.n	800a150 <UART_SetConfig+0x15b8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d014      	beq.n	800a14c <UART_SetConfig+0x15b4>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	2b09      	cmp	r3, #9
 800a128:	d00e      	beq.n	800a148 <UART_SetConfig+0x15b0>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b0a      	cmp	r3, #10
 800a130:	d008      	beq.n	800a144 <UART_SetConfig+0x15ac>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	2b0b      	cmp	r3, #11
 800a138:	d102      	bne.n	800a140 <UART_SetConfig+0x15a8>
 800a13a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a13e:	e016      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a140:	2301      	movs	r3, #1
 800a142:	e014      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a144:	2380      	movs	r3, #128	; 0x80
 800a146:	e012      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	e010      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a14c:	2320      	movs	r3, #32
 800a14e:	e00e      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a150:	2310      	movs	r3, #16
 800a152:	e00c      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a154:	230c      	movs	r3, #12
 800a156:	e00a      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a158:	230a      	movs	r3, #10
 800a15a:	e008      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a15c:	2308      	movs	r3, #8
 800a15e:	e006      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a160:	2306      	movs	r3, #6
 800a162:	e004      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a164:	2304      	movs	r3, #4
 800a166:	e002      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a168:	2302      	movs	r3, #2
 800a16a:	e000      	b.n	800a16e <UART_SetConfig+0x15d6>
 800a16c:	2301      	movs	r3, #1
 800a16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a170:	fbb2 f3f3 	udiv	r3, r2, r3
 800a174:	005a      	lsls	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	085b      	lsrs	r3, r3, #1
 800a17c:	441a      	add	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	fbb2 f3f3 	udiv	r3, r2, r3
 800a186:	b29b      	uxth	r3, r3
 800a188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a18a:	e2b0      	b.n	800a6ee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a18c:	f7fb ffa8 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 800a190:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b00      	cmp	r3, #0
 800a198:	d044      	beq.n	800a224 <UART_SetConfig+0x168c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d03e      	beq.n	800a220 <UART_SetConfig+0x1688>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d038      	beq.n	800a21c <UART_SetConfig+0x1684>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d032      	beq.n	800a218 <UART_SetConfig+0x1680>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d02c      	beq.n	800a214 <UART_SetConfig+0x167c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d026      	beq.n	800a210 <UART_SetConfig+0x1678>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b06      	cmp	r3, #6
 800a1c8:	d020      	beq.n	800a20c <UART_SetConfig+0x1674>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b07      	cmp	r3, #7
 800a1d0:	d01a      	beq.n	800a208 <UART_SetConfig+0x1670>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	d014      	beq.n	800a204 <UART_SetConfig+0x166c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d00e      	beq.n	800a200 <UART_SetConfig+0x1668>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b0a      	cmp	r3, #10
 800a1e8:	d008      	beq.n	800a1fc <UART_SetConfig+0x1664>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b0b      	cmp	r3, #11
 800a1f0:	d102      	bne.n	800a1f8 <UART_SetConfig+0x1660>
 800a1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1f6:	e016      	b.n	800a226 <UART_SetConfig+0x168e>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e014      	b.n	800a226 <UART_SetConfig+0x168e>
 800a1fc:	2380      	movs	r3, #128	; 0x80
 800a1fe:	e012      	b.n	800a226 <UART_SetConfig+0x168e>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	e010      	b.n	800a226 <UART_SetConfig+0x168e>
 800a204:	2320      	movs	r3, #32
 800a206:	e00e      	b.n	800a226 <UART_SetConfig+0x168e>
 800a208:	2310      	movs	r3, #16
 800a20a:	e00c      	b.n	800a226 <UART_SetConfig+0x168e>
 800a20c:	230c      	movs	r3, #12
 800a20e:	e00a      	b.n	800a226 <UART_SetConfig+0x168e>
 800a210:	230a      	movs	r3, #10
 800a212:	e008      	b.n	800a226 <UART_SetConfig+0x168e>
 800a214:	2308      	movs	r3, #8
 800a216:	e006      	b.n	800a226 <UART_SetConfig+0x168e>
 800a218:	2306      	movs	r3, #6
 800a21a:	e004      	b.n	800a226 <UART_SetConfig+0x168e>
 800a21c:	2304      	movs	r3, #4
 800a21e:	e002      	b.n	800a226 <UART_SetConfig+0x168e>
 800a220:	2302      	movs	r3, #2
 800a222:	e000      	b.n	800a226 <UART_SetConfig+0x168e>
 800a224:	2301      	movs	r3, #1
 800a226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a228:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22c:	005a      	lsls	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	441a      	add	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23e:	b29b      	uxth	r3, r3
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a242:	e254      	b.n	800a6ee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a244:	f107 0318 	add.w	r3, r7, #24
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fd f89b 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d044      	beq.n	800a2e2 <UART_SetConfig+0x174a>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d03e      	beq.n	800a2de <UART_SetConfig+0x1746>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	2b02      	cmp	r3, #2
 800a266:	d038      	beq.n	800a2da <UART_SetConfig+0x1742>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d032      	beq.n	800a2d6 <UART_SetConfig+0x173e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b04      	cmp	r3, #4
 800a276:	d02c      	beq.n	800a2d2 <UART_SetConfig+0x173a>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d026      	beq.n	800a2ce <UART_SetConfig+0x1736>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b06      	cmp	r3, #6
 800a286:	d020      	beq.n	800a2ca <UART_SetConfig+0x1732>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d01a      	beq.n	800a2c6 <UART_SetConfig+0x172e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b08      	cmp	r3, #8
 800a296:	d014      	beq.n	800a2c2 <UART_SetConfig+0x172a>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d00e      	beq.n	800a2be <UART_SetConfig+0x1726>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2b0a      	cmp	r3, #10
 800a2a6:	d008      	beq.n	800a2ba <UART_SetConfig+0x1722>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	2b0b      	cmp	r3, #11
 800a2ae:	d102      	bne.n	800a2b6 <UART_SetConfig+0x171e>
 800a2b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2b4:	e016      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e014      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2ba:	2380      	movs	r3, #128	; 0x80
 800a2bc:	e012      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	e010      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2c2:	2320      	movs	r3, #32
 800a2c4:	e00e      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2c6:	2310      	movs	r3, #16
 800a2c8:	e00c      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	e00a      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2ce:	230a      	movs	r3, #10
 800a2d0:	e008      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	e006      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2d6:	2306      	movs	r3, #6
 800a2d8:	e004      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2da:	2304      	movs	r3, #4
 800a2dc:	e002      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e000      	b.n	800a2e4 <UART_SetConfig+0x174c>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e8:	005a      	lsls	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	441a      	add	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2fe:	e1f6      	b.n	800a6ee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a300:	f107 030c 	add.w	r3, r7, #12
 800a304:	4618      	mov	r0, r3
 800a306:	f7fd f989 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d044      	beq.n	800a39e <UART_SetConfig+0x1806>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d03e      	beq.n	800a39a <UART_SetConfig+0x1802>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b02      	cmp	r3, #2
 800a322:	d038      	beq.n	800a396 <UART_SetConfig+0x17fe>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d032      	beq.n	800a392 <UART_SetConfig+0x17fa>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b04      	cmp	r3, #4
 800a332:	d02c      	beq.n	800a38e <UART_SetConfig+0x17f6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b05      	cmp	r3, #5
 800a33a:	d026      	beq.n	800a38a <UART_SetConfig+0x17f2>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b06      	cmp	r3, #6
 800a342:	d020      	beq.n	800a386 <UART_SetConfig+0x17ee>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b07      	cmp	r3, #7
 800a34a:	d01a      	beq.n	800a382 <UART_SetConfig+0x17ea>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b08      	cmp	r3, #8
 800a352:	d014      	beq.n	800a37e <UART_SetConfig+0x17e6>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b09      	cmp	r3, #9
 800a35a:	d00e      	beq.n	800a37a <UART_SetConfig+0x17e2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	2b0a      	cmp	r3, #10
 800a362:	d008      	beq.n	800a376 <UART_SetConfig+0x17de>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	2b0b      	cmp	r3, #11
 800a36a:	d102      	bne.n	800a372 <UART_SetConfig+0x17da>
 800a36c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a370:	e016      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a372:	2301      	movs	r3, #1
 800a374:	e014      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a376:	2380      	movs	r3, #128	; 0x80
 800a378:	e012      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a37a:	2340      	movs	r3, #64	; 0x40
 800a37c:	e010      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a37e:	2320      	movs	r3, #32
 800a380:	e00e      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a382:	2310      	movs	r3, #16
 800a384:	e00c      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a386:	230c      	movs	r3, #12
 800a388:	e00a      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a38a:	230a      	movs	r3, #10
 800a38c:	e008      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a38e:	2308      	movs	r3, #8
 800a390:	e006      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a392:	2306      	movs	r3, #6
 800a394:	e004      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a396:	2304      	movs	r3, #4
 800a398:	e002      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e000      	b.n	800a3a0 <UART_SetConfig+0x1808>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a4:	005a      	lsls	r2, r3, #1
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	441a      	add	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3ba:	e198      	b.n	800a6ee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3bc:	4b87      	ldr	r3, [pc, #540]	; (800a5dc <UART_SetConfig+0x1a44>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d05e      	beq.n	800a486 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c8:	4b84      	ldr	r3, [pc, #528]	; (800a5dc <UART_SetConfig+0x1a44>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	08db      	lsrs	r3, r3, #3
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	4a83      	ldr	r2, [pc, #524]	; (800a5e0 <UART_SetConfig+0x1a48>)
 800a3d4:	40da      	lsrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d044      	beq.n	800a468 <UART_SetConfig+0x18d0>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d03e      	beq.n	800a464 <UART_SetConfig+0x18cc>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d038      	beq.n	800a460 <UART_SetConfig+0x18c8>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d032      	beq.n	800a45c <UART_SetConfig+0x18c4>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d02c      	beq.n	800a458 <UART_SetConfig+0x18c0>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	2b05      	cmp	r3, #5
 800a404:	d026      	beq.n	800a454 <UART_SetConfig+0x18bc>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b06      	cmp	r3, #6
 800a40c:	d020      	beq.n	800a450 <UART_SetConfig+0x18b8>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	2b07      	cmp	r3, #7
 800a414:	d01a      	beq.n	800a44c <UART_SetConfig+0x18b4>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d014      	beq.n	800a448 <UART_SetConfig+0x18b0>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b09      	cmp	r3, #9
 800a424:	d00e      	beq.n	800a444 <UART_SetConfig+0x18ac>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b0a      	cmp	r3, #10
 800a42c:	d008      	beq.n	800a440 <UART_SetConfig+0x18a8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	2b0b      	cmp	r3, #11
 800a434:	d102      	bne.n	800a43c <UART_SetConfig+0x18a4>
 800a436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a43a:	e016      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e014      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a440:	2380      	movs	r3, #128	; 0x80
 800a442:	e012      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a444:	2340      	movs	r3, #64	; 0x40
 800a446:	e010      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a448:	2320      	movs	r3, #32
 800a44a:	e00e      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a44c:	2310      	movs	r3, #16
 800a44e:	e00c      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a450:	230c      	movs	r3, #12
 800a452:	e00a      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a454:	230a      	movs	r3, #10
 800a456:	e008      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a458:	2308      	movs	r3, #8
 800a45a:	e006      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a45c:	2306      	movs	r3, #6
 800a45e:	e004      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a460:	2304      	movs	r3, #4
 800a462:	e002      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a464:	2302      	movs	r3, #2
 800a466:	e000      	b.n	800a46a <UART_SetConfig+0x18d2>
 800a468:	2301      	movs	r3, #1
 800a46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a46e:	005a      	lsls	r2, r3, #1
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	085b      	lsrs	r3, r3, #1
 800a476:	441a      	add	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a480:	b29b      	uxth	r3, r3
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a484:	e133      	b.n	800a6ee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d043      	beq.n	800a516 <UART_SetConfig+0x197e>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	2b01      	cmp	r3, #1
 800a494:	d03d      	beq.n	800a512 <UART_SetConfig+0x197a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d037      	beq.n	800a50e <UART_SetConfig+0x1976>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d031      	beq.n	800a50a <UART_SetConfig+0x1972>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d02b      	beq.n	800a506 <UART_SetConfig+0x196e>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d025      	beq.n	800a502 <UART_SetConfig+0x196a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d01f      	beq.n	800a4fe <UART_SetConfig+0x1966>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b07      	cmp	r3, #7
 800a4c4:	d019      	beq.n	800a4fa <UART_SetConfig+0x1962>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2b08      	cmp	r3, #8
 800a4cc:	d013      	beq.n	800a4f6 <UART_SetConfig+0x195e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d00d      	beq.n	800a4f2 <UART_SetConfig+0x195a>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	2b0a      	cmp	r3, #10
 800a4dc:	d007      	beq.n	800a4ee <UART_SetConfig+0x1956>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	2b0b      	cmp	r3, #11
 800a4e4:	d101      	bne.n	800a4ea <UART_SetConfig+0x1952>
 800a4e6:	4b3f      	ldr	r3, [pc, #252]	; (800a5e4 <UART_SetConfig+0x1a4c>)
 800a4e8:	e016      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4ea:	4b3f      	ldr	r3, [pc, #252]	; (800a5e8 <UART_SetConfig+0x1a50>)
 800a4ec:	e014      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4ee:	4b3f      	ldr	r3, [pc, #252]	; (800a5ec <UART_SetConfig+0x1a54>)
 800a4f0:	e012      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4f2:	4b3f      	ldr	r3, [pc, #252]	; (800a5f0 <UART_SetConfig+0x1a58>)
 800a4f4:	e010      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4f6:	4b3f      	ldr	r3, [pc, #252]	; (800a5f4 <UART_SetConfig+0x1a5c>)
 800a4f8:	e00e      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4fa:	4b3f      	ldr	r3, [pc, #252]	; (800a5f8 <UART_SetConfig+0x1a60>)
 800a4fc:	e00c      	b.n	800a518 <UART_SetConfig+0x1980>
 800a4fe:	4b3f      	ldr	r3, [pc, #252]	; (800a5fc <UART_SetConfig+0x1a64>)
 800a500:	e00a      	b.n	800a518 <UART_SetConfig+0x1980>
 800a502:	4b3f      	ldr	r3, [pc, #252]	; (800a600 <UART_SetConfig+0x1a68>)
 800a504:	e008      	b.n	800a518 <UART_SetConfig+0x1980>
 800a506:	4b3f      	ldr	r3, [pc, #252]	; (800a604 <UART_SetConfig+0x1a6c>)
 800a508:	e006      	b.n	800a518 <UART_SetConfig+0x1980>
 800a50a:	4b3f      	ldr	r3, [pc, #252]	; (800a608 <UART_SetConfig+0x1a70>)
 800a50c:	e004      	b.n	800a518 <UART_SetConfig+0x1980>
 800a50e:	4b3f      	ldr	r3, [pc, #252]	; (800a60c <UART_SetConfig+0x1a74>)
 800a510:	e002      	b.n	800a518 <UART_SetConfig+0x1980>
 800a512:	4b33      	ldr	r3, [pc, #204]	; (800a5e0 <UART_SetConfig+0x1a48>)
 800a514:	e000      	b.n	800a518 <UART_SetConfig+0x1980>
 800a516:	4b34      	ldr	r3, [pc, #208]	; (800a5e8 <UART_SetConfig+0x1a50>)
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6852      	ldr	r2, [r2, #4]
 800a51c:	0852      	lsrs	r2, r2, #1
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	fbb2 f3f3 	udiv	r3, r2, r3
 800a528:	b29b      	uxth	r3, r3
 800a52a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a52c:	e0df      	b.n	800a6ee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	d045      	beq.n	800a5c2 <UART_SetConfig+0x1a2a>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d03f      	beq.n	800a5be <UART_SetConfig+0x1a26>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	2b02      	cmp	r3, #2
 800a544:	d039      	beq.n	800a5ba <UART_SetConfig+0x1a22>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d033      	beq.n	800a5b6 <UART_SetConfig+0x1a1e>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b04      	cmp	r3, #4
 800a554:	d02d      	beq.n	800a5b2 <UART_SetConfig+0x1a1a>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b05      	cmp	r3, #5
 800a55c:	d027      	beq.n	800a5ae <UART_SetConfig+0x1a16>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b06      	cmp	r3, #6
 800a564:	d021      	beq.n	800a5aa <UART_SetConfig+0x1a12>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b07      	cmp	r3, #7
 800a56c:	d01b      	beq.n	800a5a6 <UART_SetConfig+0x1a0e>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b08      	cmp	r3, #8
 800a574:	d015      	beq.n	800a5a2 <UART_SetConfig+0x1a0a>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b09      	cmp	r3, #9
 800a57c:	d00f      	beq.n	800a59e <UART_SetConfig+0x1a06>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	2b0a      	cmp	r3, #10
 800a584:	d008      	beq.n	800a598 <UART_SetConfig+0x1a00>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	2b0b      	cmp	r3, #11
 800a58c:	d102      	bne.n	800a594 <UART_SetConfig+0x19fc>
 800a58e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a592:	e017      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a594:	4b18      	ldr	r3, [pc, #96]	; (800a5f8 <UART_SetConfig+0x1a60>)
 800a596:	e015      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a598:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a59c:	e012      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a59e:	4b1c      	ldr	r3, [pc, #112]	; (800a610 <UART_SetConfig+0x1a78>)
 800a5a0:	e010      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <UART_SetConfig+0x1a7c>)
 800a5a4:	e00e      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5a6:	4b0f      	ldr	r3, [pc, #60]	; (800a5e4 <UART_SetConfig+0x1a4c>)
 800a5a8:	e00c      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <UART_SetConfig+0x1a80>)
 800a5ac:	e00a      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5ae:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <UART_SetConfig+0x1a84>)
 800a5b0:	e008      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5b2:	4b0e      	ldr	r3, [pc, #56]	; (800a5ec <UART_SetConfig+0x1a54>)
 800a5b4:	e006      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5b6:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <UART_SetConfig+0x1a88>)
 800a5b8:	e004      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <UART_SetConfig+0x1a58>)
 800a5bc:	e002      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5be:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <UART_SetConfig+0x1a5c>)
 800a5c0:	e000      	b.n	800a5c4 <UART_SetConfig+0x1a2c>
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <UART_SetConfig+0x1a60>)
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6852      	ldr	r2, [r2, #4]
 800a5c8:	0852      	lsrs	r2, r2, #1
 800a5ca:	441a      	add	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5d8:	e089      	b.n	800a6ee <UART_SetConfig+0x1b56>
 800a5da:	bf00      	nop
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	03d09000 	.word	0x03d09000
 800a5e4:	0007a120 	.word	0x0007a120
 800a5e8:	07a12000 	.word	0x07a12000
 800a5ec:	000f4240 	.word	0x000f4240
 800a5f0:	001e8480 	.word	0x001e8480
 800a5f4:	003d0900 	.word	0x003d0900
 800a5f8:	007a1200 	.word	0x007a1200
 800a5fc:	00a2c2aa 	.word	0x00a2c2aa
 800a600:	00c35000 	.word	0x00c35000
 800a604:	00f42400 	.word	0x00f42400
 800a608:	01458554 	.word	0x01458554
 800a60c:	01e84800 	.word	0x01e84800
 800a610:	0001e848 	.word	0x0001e848
 800a614:	0003d090 	.word	0x0003d090
 800a618:	000a2c2a 	.word	0x000a2c2a
 800a61c:	000c3500 	.word	0x000c3500
 800a620:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d04f      	beq.n	800a6cc <UART_SetConfig+0x1b34>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b01      	cmp	r3, #1
 800a632:	d048      	beq.n	800a6c6 <UART_SetConfig+0x1b2e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d041      	beq.n	800a6c0 <UART_SetConfig+0x1b28>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b03      	cmp	r3, #3
 800a642:	d03a      	beq.n	800a6ba <UART_SetConfig+0x1b22>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d033      	beq.n	800a6b4 <UART_SetConfig+0x1b1c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b05      	cmp	r3, #5
 800a652:	d02c      	beq.n	800a6ae <UART_SetConfig+0x1b16>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b06      	cmp	r3, #6
 800a65a:	d025      	beq.n	800a6a8 <UART_SetConfig+0x1b10>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b07      	cmp	r3, #7
 800a662:	d01e      	beq.n	800a6a2 <UART_SetConfig+0x1b0a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d017      	beq.n	800a69c <UART_SetConfig+0x1b04>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b09      	cmp	r3, #9
 800a672:	d010      	beq.n	800a696 <UART_SetConfig+0x1afe>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b0a      	cmp	r3, #10
 800a67a:	d009      	beq.n	800a690 <UART_SetConfig+0x1af8>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b0b      	cmp	r3, #11
 800a682:	d102      	bne.n	800a68a <UART_SetConfig+0x1af2>
 800a684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a688:	e022      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a68a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a68e:	e01f      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a690:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a694:	e01c      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a69a:	e019      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a69c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6a0:	e016      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6a6:	e013      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6a8:	f241 5354 	movw	r3, #5460	; 0x1554
 800a6ac:	e010      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6ae:	f641 1398 	movw	r3, #6552	; 0x1998
 800a6b2:	e00d      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6b8:	e00a      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6ba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a6be:	e007      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6c4:	e004      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ca:	e001      	b.n	800a6d0 <UART_SetConfig+0x1b38>
 800a6cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6852      	ldr	r2, [r2, #4]
 800a6d4:	0852      	lsrs	r2, r2, #1
 800a6d6:	441a      	add	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6e4:	e003      	b.n	800a6ee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a6ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	2b0f      	cmp	r3, #15
 800a6f2:	d916      	bls.n	800a722 <UART_SetConfig+0x1b8a>
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fa:	d212      	bcs.n	800a722 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f023 030f 	bic.w	r3, r3, #15
 800a704:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	b29a      	uxth	r2, r3
 800a712:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a714:	4313      	orrs	r3, r2
 800a716:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	e3a3      	b.n	800ae6a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a728:	e39f      	b.n	800ae6a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800a72a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	f200 8388 	bhi.w	800ae44 <UART_SetConfig+0x22ac>
 800a734:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <UART_SetConfig+0x1ba4>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a841 	.word	0x0800a841
 800a740:	0800a8f7 	.word	0x0800a8f7
 800a744:	0800ae45 	.word	0x0800ae45
 800a748:	0800ae45 	.word	0x0800ae45
 800a74c:	0800a9ad 	.word	0x0800a9ad
 800a750:	0800ae45 	.word	0x0800ae45
 800a754:	0800ae45 	.word	0x0800ae45
 800a758:	0800ae45 	.word	0x0800ae45
 800a75c:	0800aa67 	.word	0x0800aa67
 800a760:	0800ae45 	.word	0x0800ae45
 800a764:	0800ae45 	.word	0x0800ae45
 800a768:	0800ae45 	.word	0x0800ae45
 800a76c:	0800ae45 	.word	0x0800ae45
 800a770:	0800ae45 	.word	0x0800ae45
 800a774:	0800ae45 	.word	0x0800ae45
 800a778:	0800ae45 	.word	0x0800ae45
 800a77c:	0800ab21 	.word	0x0800ab21
 800a780:	0800ae45 	.word	0x0800ae45
 800a784:	0800ae45 	.word	0x0800ae45
 800a788:	0800ae45 	.word	0x0800ae45
 800a78c:	0800ae45 	.word	0x0800ae45
 800a790:	0800ae45 	.word	0x0800ae45
 800a794:	0800ae45 	.word	0x0800ae45
 800a798:	0800ae45 	.word	0x0800ae45
 800a79c:	0800ae45 	.word	0x0800ae45
 800a7a0:	0800ae45 	.word	0x0800ae45
 800a7a4:	0800ae45 	.word	0x0800ae45
 800a7a8:	0800ae45 	.word	0x0800ae45
 800a7ac:	0800ae45 	.word	0x0800ae45
 800a7b0:	0800ae45 	.word	0x0800ae45
 800a7b4:	0800ae45 	.word	0x0800ae45
 800a7b8:	0800ae45 	.word	0x0800ae45
 800a7bc:	0800ac91 	.word	0x0800ac91
 800a7c0:	0800ae45 	.word	0x0800ae45
 800a7c4:	0800ae45 	.word	0x0800ae45
 800a7c8:	0800ae45 	.word	0x0800ae45
 800a7cc:	0800ae45 	.word	0x0800ae45
 800a7d0:	0800ae45 	.word	0x0800ae45
 800a7d4:	0800ae45 	.word	0x0800ae45
 800a7d8:	0800ae45 	.word	0x0800ae45
 800a7dc:	0800ae45 	.word	0x0800ae45
 800a7e0:	0800ae45 	.word	0x0800ae45
 800a7e4:	0800ae45 	.word	0x0800ae45
 800a7e8:	0800ae45 	.word	0x0800ae45
 800a7ec:	0800ae45 	.word	0x0800ae45
 800a7f0:	0800ae45 	.word	0x0800ae45
 800a7f4:	0800ae45 	.word	0x0800ae45
 800a7f8:	0800ae45 	.word	0x0800ae45
 800a7fc:	0800ae45 	.word	0x0800ae45
 800a800:	0800ae45 	.word	0x0800ae45
 800a804:	0800ae45 	.word	0x0800ae45
 800a808:	0800ae45 	.word	0x0800ae45
 800a80c:	0800ae45 	.word	0x0800ae45
 800a810:	0800ae45 	.word	0x0800ae45
 800a814:	0800ae45 	.word	0x0800ae45
 800a818:	0800ae45 	.word	0x0800ae45
 800a81c:	0800ae45 	.word	0x0800ae45
 800a820:	0800ae45 	.word	0x0800ae45
 800a824:	0800ae45 	.word	0x0800ae45
 800a828:	0800ae45 	.word	0x0800ae45
 800a82c:	0800ae45 	.word	0x0800ae45
 800a830:	0800ae45 	.word	0x0800ae45
 800a834:	0800ae45 	.word	0x0800ae45
 800a838:	0800ae45 	.word	0x0800ae45
 800a83c:	0800ad85 	.word	0x0800ad85
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a840:	f7fb fc38 	bl	80060b4 <HAL_RCC_GetPCLK1Freq>
 800a844:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d044      	beq.n	800a8d8 <UART_SetConfig+0x1d40>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b01      	cmp	r3, #1
 800a854:	d03e      	beq.n	800a8d4 <UART_SetConfig+0x1d3c>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d038      	beq.n	800a8d0 <UART_SetConfig+0x1d38>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	2b03      	cmp	r3, #3
 800a864:	d032      	beq.n	800a8cc <UART_SetConfig+0x1d34>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d02c      	beq.n	800a8c8 <UART_SetConfig+0x1d30>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	2b05      	cmp	r3, #5
 800a874:	d026      	beq.n	800a8c4 <UART_SetConfig+0x1d2c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	2b06      	cmp	r3, #6
 800a87c:	d020      	beq.n	800a8c0 <UART_SetConfig+0x1d28>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	2b07      	cmp	r3, #7
 800a884:	d01a      	beq.n	800a8bc <UART_SetConfig+0x1d24>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d014      	beq.n	800a8b8 <UART_SetConfig+0x1d20>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	2b09      	cmp	r3, #9
 800a894:	d00e      	beq.n	800a8b4 <UART_SetConfig+0x1d1c>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	2b0a      	cmp	r3, #10
 800a89c:	d008      	beq.n	800a8b0 <UART_SetConfig+0x1d18>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	2b0b      	cmp	r3, #11
 800a8a4:	d102      	bne.n	800a8ac <UART_SetConfig+0x1d14>
 800a8a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8aa:	e016      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e014      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8b0:	2380      	movs	r3, #128	; 0x80
 800a8b2:	e012      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	e010      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8b8:	2320      	movs	r3, #32
 800a8ba:	e00e      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	e00c      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	e00a      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8c4:	230a      	movs	r3, #10
 800a8c6:	e008      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8c8:	2308      	movs	r3, #8
 800a8ca:	e006      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8cc:	2306      	movs	r3, #6
 800a8ce:	e004      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	e002      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e000      	b.n	800a8da <UART_SetConfig+0x1d42>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	085b      	lsrs	r3, r3, #1
 800a8e6:	441a      	add	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a8f4:	e2aa      	b.n	800ae4c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f6:	f7fb fbf3 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 800a8fa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	d044      	beq.n	800a98e <UART_SetConfig+0x1df6>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d03e      	beq.n	800a98a <UART_SetConfig+0x1df2>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b02      	cmp	r3, #2
 800a912:	d038      	beq.n	800a986 <UART_SetConfig+0x1dee>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d032      	beq.n	800a982 <UART_SetConfig+0x1dea>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	2b04      	cmp	r3, #4
 800a922:	d02c      	beq.n	800a97e <UART_SetConfig+0x1de6>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	2b05      	cmp	r3, #5
 800a92a:	d026      	beq.n	800a97a <UART_SetConfig+0x1de2>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b06      	cmp	r3, #6
 800a932:	d020      	beq.n	800a976 <UART_SetConfig+0x1dde>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b07      	cmp	r3, #7
 800a93a:	d01a      	beq.n	800a972 <UART_SetConfig+0x1dda>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b08      	cmp	r3, #8
 800a942:	d014      	beq.n	800a96e <UART_SetConfig+0x1dd6>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	2b09      	cmp	r3, #9
 800a94a:	d00e      	beq.n	800a96a <UART_SetConfig+0x1dd2>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b0a      	cmp	r3, #10
 800a952:	d008      	beq.n	800a966 <UART_SetConfig+0x1dce>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b0b      	cmp	r3, #11
 800a95a:	d102      	bne.n	800a962 <UART_SetConfig+0x1dca>
 800a95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a960:	e016      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a962:	2301      	movs	r3, #1
 800a964:	e014      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a966:	2380      	movs	r3, #128	; 0x80
 800a968:	e012      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a96a:	2340      	movs	r3, #64	; 0x40
 800a96c:	e010      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a96e:	2320      	movs	r3, #32
 800a970:	e00e      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a972:	2310      	movs	r3, #16
 800a974:	e00c      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a976:	230c      	movs	r3, #12
 800a978:	e00a      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a97a:	230a      	movs	r3, #10
 800a97c:	e008      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a97e:	2308      	movs	r3, #8
 800a980:	e006      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a982:	2306      	movs	r3, #6
 800a984:	e004      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a986:	2304      	movs	r3, #4
 800a988:	e002      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a98a:	2302      	movs	r3, #2
 800a98c:	e000      	b.n	800a990 <UART_SetConfig+0x1df8>
 800a98e:	2301      	movs	r3, #1
 800a990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a992:	fbb2 f2f3 	udiv	r2, r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	085b      	lsrs	r3, r3, #1
 800a99c:	441a      	add	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9aa:	e24f      	b.n	800ae4c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ac:	f107 0318 	add.w	r3, r7, #24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fc fce7 	bl	8007384 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d044      	beq.n	800aa4a <UART_SetConfig+0x1eb2>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d03e      	beq.n	800aa46 <UART_SetConfig+0x1eae>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d038      	beq.n	800aa42 <UART_SetConfig+0x1eaa>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d032      	beq.n	800aa3e <UART_SetConfig+0x1ea6>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d02c      	beq.n	800aa3a <UART_SetConfig+0x1ea2>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b05      	cmp	r3, #5
 800a9e6:	d026      	beq.n	800aa36 <UART_SetConfig+0x1e9e>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b06      	cmp	r3, #6
 800a9ee:	d020      	beq.n	800aa32 <UART_SetConfig+0x1e9a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b07      	cmp	r3, #7
 800a9f6:	d01a      	beq.n	800aa2e <UART_SetConfig+0x1e96>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d014      	beq.n	800aa2a <UART_SetConfig+0x1e92>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d00e      	beq.n	800aa26 <UART_SetConfig+0x1e8e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b0a      	cmp	r3, #10
 800aa0e:	d008      	beq.n	800aa22 <UART_SetConfig+0x1e8a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b0b      	cmp	r3, #11
 800aa16:	d102      	bne.n	800aa1e <UART_SetConfig+0x1e86>
 800aa18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa1c:	e016      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e014      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa22:	2380      	movs	r3, #128	; 0x80
 800aa24:	e012      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	e010      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa2a:	2320      	movs	r3, #32
 800aa2c:	e00e      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa2e:	2310      	movs	r3, #16
 800aa30:	e00c      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa32:	230c      	movs	r3, #12
 800aa34:	e00a      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa36:	230a      	movs	r3, #10
 800aa38:	e008      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	e006      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa3e:	2306      	movs	r3, #6
 800aa40:	e004      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa42:	2304      	movs	r3, #4
 800aa44:	e002      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e000      	b.n	800aa4c <UART_SetConfig+0x1eb4>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	441a      	add	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa64:	e1f2      	b.n	800ae4c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fc fdd6 	bl	800761c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d044      	beq.n	800ab04 <UART_SetConfig+0x1f6c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d03e      	beq.n	800ab00 <UART_SetConfig+0x1f68>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d038      	beq.n	800aafc <UART_SetConfig+0x1f64>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d032      	beq.n	800aaf8 <UART_SetConfig+0x1f60>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d02c      	beq.n	800aaf4 <UART_SetConfig+0x1f5c>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	d026      	beq.n	800aaf0 <UART_SetConfig+0x1f58>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	2b06      	cmp	r3, #6
 800aaa8:	d020      	beq.n	800aaec <UART_SetConfig+0x1f54>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b07      	cmp	r3, #7
 800aab0:	d01a      	beq.n	800aae8 <UART_SetConfig+0x1f50>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	2b08      	cmp	r3, #8
 800aab8:	d014      	beq.n	800aae4 <UART_SetConfig+0x1f4c>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2b09      	cmp	r3, #9
 800aac0:	d00e      	beq.n	800aae0 <UART_SetConfig+0x1f48>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b0a      	cmp	r3, #10
 800aac8:	d008      	beq.n	800aadc <UART_SetConfig+0x1f44>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b0b      	cmp	r3, #11
 800aad0:	d102      	bne.n	800aad8 <UART_SetConfig+0x1f40>
 800aad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad6:	e016      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aad8:	2301      	movs	r3, #1
 800aada:	e014      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aadc:	2380      	movs	r3, #128	; 0x80
 800aade:	e012      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aae0:	2340      	movs	r3, #64	; 0x40
 800aae2:	e010      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aae4:	2320      	movs	r3, #32
 800aae6:	e00e      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aae8:	2310      	movs	r3, #16
 800aaea:	e00c      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aaec:	230c      	movs	r3, #12
 800aaee:	e00a      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aaf0:	230a      	movs	r3, #10
 800aaf2:	e008      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aaf4:	2308      	movs	r3, #8
 800aaf6:	e006      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aaf8:	2306      	movs	r3, #6
 800aafa:	e004      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800aafc:	2304      	movs	r3, #4
 800aafe:	e002      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800ab00:	2302      	movs	r3, #2
 800ab02:	e000      	b.n	800ab06 <UART_SetConfig+0x1f6e>
 800ab04:	2301      	movs	r3, #1
 800ab06:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	085b      	lsrs	r3, r3, #1
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab1e:	e195      	b.n	800ae4c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab20:	4b87      	ldr	r3, [pc, #540]	; (800ad40 <UART_SetConfig+0x21a8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d05d      	beq.n	800abe8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab2c:	4b84      	ldr	r3, [pc, #528]	; (800ad40 <UART_SetConfig+0x21a8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	4a83      	ldr	r2, [pc, #524]	; (800ad44 <UART_SetConfig+0x21ac>)
 800ab38:	40da      	lsrs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d044      	beq.n	800abcc <UART_SetConfig+0x2034>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d03e      	beq.n	800abc8 <UART_SetConfig+0x2030>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d038      	beq.n	800abc4 <UART_SetConfig+0x202c>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d032      	beq.n	800abc0 <UART_SetConfig+0x2028>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d02c      	beq.n	800abbc <UART_SetConfig+0x2024>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d026      	beq.n	800abb8 <UART_SetConfig+0x2020>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	2b06      	cmp	r3, #6
 800ab70:	d020      	beq.n	800abb4 <UART_SetConfig+0x201c>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	d01a      	beq.n	800abb0 <UART_SetConfig+0x2018>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d014      	beq.n	800abac <UART_SetConfig+0x2014>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d00e      	beq.n	800aba8 <UART_SetConfig+0x2010>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b0a      	cmp	r3, #10
 800ab90:	d008      	beq.n	800aba4 <UART_SetConfig+0x200c>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b0b      	cmp	r3, #11
 800ab98:	d102      	bne.n	800aba0 <UART_SetConfig+0x2008>
 800ab9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab9e:	e016      	b.n	800abce <UART_SetConfig+0x2036>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e014      	b.n	800abce <UART_SetConfig+0x2036>
 800aba4:	2380      	movs	r3, #128	; 0x80
 800aba6:	e012      	b.n	800abce <UART_SetConfig+0x2036>
 800aba8:	2340      	movs	r3, #64	; 0x40
 800abaa:	e010      	b.n	800abce <UART_SetConfig+0x2036>
 800abac:	2320      	movs	r3, #32
 800abae:	e00e      	b.n	800abce <UART_SetConfig+0x2036>
 800abb0:	2310      	movs	r3, #16
 800abb2:	e00c      	b.n	800abce <UART_SetConfig+0x2036>
 800abb4:	230c      	movs	r3, #12
 800abb6:	e00a      	b.n	800abce <UART_SetConfig+0x2036>
 800abb8:	230a      	movs	r3, #10
 800abba:	e008      	b.n	800abce <UART_SetConfig+0x2036>
 800abbc:	2308      	movs	r3, #8
 800abbe:	e006      	b.n	800abce <UART_SetConfig+0x2036>
 800abc0:	2306      	movs	r3, #6
 800abc2:	e004      	b.n	800abce <UART_SetConfig+0x2036>
 800abc4:	2304      	movs	r3, #4
 800abc6:	e002      	b.n	800abce <UART_SetConfig+0x2036>
 800abc8:	2302      	movs	r3, #2
 800abca:	e000      	b.n	800abce <UART_SetConfig+0x2036>
 800abcc:	2301      	movs	r3, #1
 800abce:	fbb2 f2f3 	udiv	r2, r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	441a      	add	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800abe6:	e131      	b.n	800ae4c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2b00      	cmp	r3, #0
 800abee:	d043      	beq.n	800ac78 <UART_SetConfig+0x20e0>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d03d      	beq.n	800ac74 <UART_SetConfig+0x20dc>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d037      	beq.n	800ac70 <UART_SetConfig+0x20d8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d031      	beq.n	800ac6c <UART_SetConfig+0x20d4>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d02b      	beq.n	800ac68 <UART_SetConfig+0x20d0>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac14:	2b05      	cmp	r3, #5
 800ac16:	d025      	beq.n	800ac64 <UART_SetConfig+0x20cc>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	2b06      	cmp	r3, #6
 800ac1e:	d01f      	beq.n	800ac60 <UART_SetConfig+0x20c8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	2b07      	cmp	r3, #7
 800ac26:	d019      	beq.n	800ac5c <UART_SetConfig+0x20c4>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d013      	beq.n	800ac58 <UART_SetConfig+0x20c0>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	2b09      	cmp	r3, #9
 800ac36:	d00d      	beq.n	800ac54 <UART_SetConfig+0x20bc>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	2b0a      	cmp	r3, #10
 800ac3e:	d007      	beq.n	800ac50 <UART_SetConfig+0x20b8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b0b      	cmp	r3, #11
 800ac46:	d101      	bne.n	800ac4c <UART_SetConfig+0x20b4>
 800ac48:	4b3f      	ldr	r3, [pc, #252]	; (800ad48 <UART_SetConfig+0x21b0>)
 800ac4a:	e016      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac4c:	4b3d      	ldr	r3, [pc, #244]	; (800ad44 <UART_SetConfig+0x21ac>)
 800ac4e:	e014      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac50:	4b3e      	ldr	r3, [pc, #248]	; (800ad4c <UART_SetConfig+0x21b4>)
 800ac52:	e012      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac54:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <UART_SetConfig+0x21b8>)
 800ac56:	e010      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac58:	4b3e      	ldr	r3, [pc, #248]	; (800ad54 <UART_SetConfig+0x21bc>)
 800ac5a:	e00e      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	; (800ad58 <UART_SetConfig+0x21c0>)
 800ac5e:	e00c      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac60:	4b3e      	ldr	r3, [pc, #248]	; (800ad5c <UART_SetConfig+0x21c4>)
 800ac62:	e00a      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <UART_SetConfig+0x21c8>)
 800ac66:	e008      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac68:	4b3e      	ldr	r3, [pc, #248]	; (800ad64 <UART_SetConfig+0x21cc>)
 800ac6a:	e006      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac6c:	4b3e      	ldr	r3, [pc, #248]	; (800ad68 <UART_SetConfig+0x21d0>)
 800ac6e:	e004      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac70:	4b3e      	ldr	r3, [pc, #248]	; (800ad6c <UART_SetConfig+0x21d4>)
 800ac72:	e002      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac74:	4b3e      	ldr	r3, [pc, #248]	; (800ad70 <UART_SetConfig+0x21d8>)
 800ac76:	e000      	b.n	800ac7a <UART_SetConfig+0x20e2>
 800ac78:	4b32      	ldr	r3, [pc, #200]	; (800ad44 <UART_SetConfig+0x21ac>)
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6852      	ldr	r2, [r2, #4]
 800ac7e:	0852      	lsrs	r2, r2, #1
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac8e:	e0dd      	b.n	800ae4c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d046      	beq.n	800ad26 <UART_SetConfig+0x218e>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d040      	beq.n	800ad22 <UART_SetConfig+0x218a>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d03a      	beq.n	800ad1e <UART_SetConfig+0x2186>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	2b03      	cmp	r3, #3
 800acae:	d034      	beq.n	800ad1a <UART_SetConfig+0x2182>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d02e      	beq.n	800ad16 <UART_SetConfig+0x217e>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	2b05      	cmp	r3, #5
 800acbe:	d028      	beq.n	800ad12 <UART_SetConfig+0x217a>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	2b06      	cmp	r3, #6
 800acc6:	d022      	beq.n	800ad0e <UART_SetConfig+0x2176>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	2b07      	cmp	r3, #7
 800acce:	d01c      	beq.n	800ad0a <UART_SetConfig+0x2172>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	d016      	beq.n	800ad06 <UART_SetConfig+0x216e>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	2b09      	cmp	r3, #9
 800acde:	d00f      	beq.n	800ad00 <UART_SetConfig+0x2168>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace4:	2b0a      	cmp	r3, #10
 800ace6:	d008      	beq.n	800acfa <UART_SetConfig+0x2162>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	2b0b      	cmp	r3, #11
 800acee:	d102      	bne.n	800acf6 <UART_SetConfig+0x215e>
 800acf0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800acf4:	e018      	b.n	800ad28 <UART_SetConfig+0x2190>
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <UART_SetConfig+0x21c0>)
 800acf8:	e016      	b.n	800ad28 <UART_SetConfig+0x2190>
 800acfa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800acfe:	e013      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad00:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ad04:	e010      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad06:	4b1b      	ldr	r3, [pc, #108]	; (800ad74 <UART_SetConfig+0x21dc>)
 800ad08:	e00e      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <UART_SetConfig+0x21b0>)
 800ad0c:	e00c      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad0e:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <UART_SetConfig+0x21e0>)
 800ad10:	e00a      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad12:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <UART_SetConfig+0x21e4>)
 800ad14:	e008      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <UART_SetConfig+0x21b4>)
 800ad18:	e006      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad1a:	4b19      	ldr	r3, [pc, #100]	; (800ad80 <UART_SetConfig+0x21e8>)
 800ad1c:	e004      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <UART_SetConfig+0x21b8>)
 800ad20:	e002      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad22:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <UART_SetConfig+0x21bc>)
 800ad24:	e000      	b.n	800ad28 <UART_SetConfig+0x2190>
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <UART_SetConfig+0x21c0>)
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	6852      	ldr	r2, [r2, #4]
 800ad2c:	0852      	lsrs	r2, r2, #1
 800ad2e:	441a      	add	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad3c:	e086      	b.n	800ae4c <UART_SetConfig+0x22b4>
 800ad3e:	bf00      	nop
 800ad40:	58024400 	.word	0x58024400
 800ad44:	03d09000 	.word	0x03d09000
 800ad48:	0003d090 	.word	0x0003d090
 800ad4c:	0007a120 	.word	0x0007a120
 800ad50:	000f4240 	.word	0x000f4240
 800ad54:	001e8480 	.word	0x001e8480
 800ad58:	003d0900 	.word	0x003d0900
 800ad5c:	00516155 	.word	0x00516155
 800ad60:	0061a800 	.word	0x0061a800
 800ad64:	007a1200 	.word	0x007a1200
 800ad68:	00a2c2aa 	.word	0x00a2c2aa
 800ad6c:	00f42400 	.word	0x00f42400
 800ad70:	01e84800 	.word	0x01e84800
 800ad74:	0001e848 	.word	0x0001e848
 800ad78:	00051615 	.word	0x00051615
 800ad7c:	00061a80 	.word	0x00061a80
 800ad80:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d04e      	beq.n	800ae2a <UART_SetConfig+0x2292>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d047      	beq.n	800ae24 <UART_SetConfig+0x228c>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d040      	beq.n	800ae1e <UART_SetConfig+0x2286>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d039      	beq.n	800ae18 <UART_SetConfig+0x2280>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d032      	beq.n	800ae12 <UART_SetConfig+0x227a>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b05      	cmp	r3, #5
 800adb2:	d02b      	beq.n	800ae0c <UART_SetConfig+0x2274>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b06      	cmp	r3, #6
 800adba:	d024      	beq.n	800ae06 <UART_SetConfig+0x226e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b07      	cmp	r3, #7
 800adc2:	d01d      	beq.n	800ae00 <UART_SetConfig+0x2268>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d016      	beq.n	800adfa <UART_SetConfig+0x2262>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b09      	cmp	r3, #9
 800add2:	d00f      	beq.n	800adf4 <UART_SetConfig+0x225c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b0a      	cmp	r3, #10
 800adda:	d008      	beq.n	800adee <UART_SetConfig+0x2256>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b0b      	cmp	r3, #11
 800ade2:	d101      	bne.n	800ade8 <UART_SetConfig+0x2250>
 800ade4:	2380      	movs	r3, #128	; 0x80
 800ade6:	e022      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ade8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adec:	e01f      	b.n	800ae2e <UART_SetConfig+0x2296>
 800adee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf2:	e01c      	b.n	800ae2e <UART_SetConfig+0x2296>
 800adf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf8:	e019      	b.n	800ae2e <UART_SetConfig+0x2296>
 800adfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfe:	e016      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae04:	e013      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae06:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ae0a:	e010      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae0c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ae10:	e00d      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae16:	e00a      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae18:	f241 5355 	movw	r3, #5461	; 0x1555
 800ae1c:	e007      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae22:	e004      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae28:	e001      	b.n	800ae2e <UART_SetConfig+0x2296>
 800ae2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	6852      	ldr	r2, [r2, #4]
 800ae32:	0852      	lsrs	r2, r2, #1
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae42:	e003      	b.n	800ae4c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ae4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d908      	bls.n	800ae64 <UART_SetConfig+0x22cc>
 800ae52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae58:	d204      	bcs.n	800ae64 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae60:	60da      	str	r2, [r3, #12]
 800ae62:	e002      	b.n	800ae6a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ae86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3740      	adds	r7, #64	; 0x40
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ae94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00a      	beq.n	800af02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	430a      	orrs	r2, r1
 800af00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af06:	f003 0308 	and.w	r3, r3, #8
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00a      	beq.n	800af24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	430a      	orrs	r2, r1
 800af22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	f003 0310 	and.w	r3, r3, #16
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00a      	beq.n	800af46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	430a      	orrs	r2, r1
 800af44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4a:	f003 0320 	and.w	r3, r3, #32
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	430a      	orrs	r2, r1
 800af66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01a      	beq.n	800afaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af92:	d10a      	bne.n	800afaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	605a      	str	r2, [r3, #4]
  }
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af02      	add	r7, sp, #8
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800afe8:	f7f5 fbd4 	bl	8000794 <HAL_GetTick>
 800afec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d10e      	bne.n	800b01a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800affc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f82c 	bl	800b068 <UART_WaitOnFlagUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e022      	b.n	800b060 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b04      	cmp	r3, #4
 800b026:	d10e      	bne.n	800b046 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f816 	bl	800b068 <UART_WaitOnFlagUntilTimeout>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e00c      	b.n	800b060 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2220      	movs	r2, #32
 800b04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	4613      	mov	r3, r2
 800b076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b078:	e062      	b.n	800b140 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b080:	d05e      	beq.n	800b140 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b082:	f7f5 fb87 	bl	8000794 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <UART_WaitOnFlagUntilTimeout+0x30>
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11d      	bne.n	800b0d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b0a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0201 	bic.w	r2, r2, #1
 800b0b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e045      	b.n	800b160 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d02e      	beq.n	800b140 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0f0:	d126      	bne.n	800b140 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b10a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689a      	ldr	r2, [r3, #8]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 0201 	bic.w	r2, r2, #1
 800b11a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2220      	movs	r2, #32
 800b120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2220      	movs	r2, #32
 800b130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e00f      	b.n	800b160 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4013      	ands	r3, r2
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	bf0c      	ite	eq
 800b150:	2301      	moveq	r3, #1
 800b152:	2300      	movne	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d08d      	beq.n	800b07a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b17e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6899      	ldr	r1, [r3, #8]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	4b08      	ldr	r3, [pc, #32]	; (800b1ac <UART_EndRxTransfer+0x44>)
 800b18c:	400b      	ands	r3, r1
 800b18e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	effffffe 	.word	0xeffffffe

0800b1b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7fd fcd6 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7fd fcb2 	bl	8008b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_UARTEx_DisableFifoMode+0x16>
 800b25e:	2302      	movs	r3, #2
 800b260:	e027      	b.n	800b2b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2224      	movs	r2, #36	; 0x24
 800b26e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0201 	bic.w	r2, r2, #1
 800b288:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b290:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d101      	bne.n	800b2d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	e02d      	b.n	800b332 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2224      	movs	r2, #36	; 0x24
 800b2e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 0201 	bic.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f850 	bl	800b3b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b34e:	2302      	movs	r3, #2
 800b350:	e02d      	b.n	800b3ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2224      	movs	r2, #36	; 0x24
 800b35e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f022 0201 	bic.w	r2, r2, #1
 800b378:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f812 	bl	800b3b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b089      	sub	sp, #36	; 0x24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b3c0:	4a2f      	ldr	r2, [pc, #188]	; (800b480 <UARTEx_SetNbDataToProcess+0xc8>)
 800b3c2:	f107 0314 	add.w	r3, r7, #20
 800b3c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b3ce:	4a2d      	ldr	r2, [pc, #180]	; (800b484 <UARTEx_SetNbDataToProcess+0xcc>)
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d108      	bne.n	800b3f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3f4:	e03d      	b.n	800b472 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3fa:	2308      	movs	r3, #8
 800b3fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	0e5b      	lsrs	r3, r3, #25
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	0f5b      	lsrs	r3, r3, #29
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 0307 	and.w	r3, r3, #7
 800b41c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b41e:	7fbb      	ldrb	r3, [r7, #30]
 800b420:	7f3a      	ldrb	r2, [r7, #28]
 800b422:	f107 0120 	add.w	r1, r7, #32
 800b426:	440a      	add	r2, r1
 800b428:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b42c:	fb02 f303 	mul.w	r3, r2, r3
 800b430:	7f3a      	ldrb	r2, [r7, #28]
 800b432:	f107 0120 	add.w	r1, r7, #32
 800b436:	440a      	add	r2, r1
 800b438:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b448:	7ffb      	ldrb	r3, [r7, #31]
 800b44a:	7f7a      	ldrb	r2, [r7, #29]
 800b44c:	f107 0120 	add.w	r1, r7, #32
 800b450:	440a      	add	r2, r1
 800b452:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b456:	fb02 f303 	mul.w	r3, r2, r3
 800b45a:	7f7a      	ldrb	r2, [r7, #29]
 800b45c:	f107 0120 	add.w	r1, r7, #32
 800b460:	440a      	add	r2, r1
 800b462:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b466:	fb93 f3f2 	sdiv	r3, r3, r2
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b472:	bf00      	nop
 800b474:	3724      	adds	r7, #36	; 0x24
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	0800ed40 	.word	0x0800ed40
 800b484:	0800ed48 	.word	0x0800ed48

0800b488 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800b48e:	f107 031c 	add.w	r3, r7, #28
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	605a      	str	r2, [r3, #4]
 800b498:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b49a:	463b      	mov	r3, r7
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	605a      	str	r2, [r3, #4]
 800b4a2:	609a      	str	r2, [r3, #8]
 800b4a4:	60da      	str	r2, [r3, #12]
 800b4a6:	611a      	str	r2, [r3, #16]
 800b4a8:	615a      	str	r2, [r3, #20]
 800b4aa:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800b4ac:	4b2f      	ldr	r3, [pc, #188]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4ae:	4a30      	ldr	r2, [pc, #192]	; (800b570 <MX_ADC1_Init+0xe8>)
 800b4b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800b4b2:	4b2e      	ldr	r3, [pc, #184]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4b4:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800b4b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b4ba:	4b2c      	ldr	r3, [pc, #176]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4bc:	2208      	movs	r2, #8
 800b4be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b4c0:	4b2a      	ldr	r3, [pc, #168]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b4c6:	4b29      	ldr	r3, [pc, #164]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b4d2:	4b26      	ldr	r3, [pc, #152]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800b4d8:	4b24      	ldr	r3, [pc, #144]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4da:	2201      	movs	r2, #1
 800b4dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b4de:	4b23      	ldr	r3, [pc, #140]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b4e4:	4b21      	ldr	r3, [pc, #132]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b4ea:	4b20      	ldr	r3, [pc, #128]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800b4f0:	4b1e      	ldr	r3, [pc, #120]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800b4fc:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800b502:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b50a:	4818      	ldr	r0, [pc, #96]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b50c:	f7f5 fb66 	bl	8000bdc <HAL_ADC_Init>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800b516:	f000 fc73 	bl	800be00 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800b51a:	2300      	movs	r3, #0
 800b51c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800b51e:	f107 031c 	add.w	r3, r7, #28
 800b522:	4619      	mov	r1, r3
 800b524:	4811      	ldr	r0, [pc, #68]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b526:	f7f6 fd9b 	bl	8002060 <HAL_ADCEx_MultiModeConfigChannel>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800b530:	f000 fc66 	bl	800be00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <MX_ADC1_Init+0xec>)
 800b536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b538:	2306      	movs	r3, #6
 800b53a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b540:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b544:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b546:	2304      	movs	r3, #4
 800b548:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b54e:	463b      	mov	r3, r7
 800b550:	4619      	mov	r1, r3
 800b552:	4806      	ldr	r0, [pc, #24]	; (800b56c <MX_ADC1_Init+0xe4>)
 800b554:	f7f6 f800 	bl	8001558 <HAL_ADC_ConfigChannel>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800b55e:	f000 fc4f 	bl	800be00 <Error_Handler>
  }

}
 800b562:	bf00      	nop
 800b564:	3728      	adds	r7, #40	; 0x28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	24000228 	.word	0x24000228
 800b570:	40022000 	.word	0x40022000
 800b574:	25b00200 	.word	0x25b00200

0800b578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b08a      	sub	sp, #40	; 0x28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	609a      	str	r2, [r3, #8]
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a34      	ldr	r2, [pc, #208]	; (800b668 <HAL_ADC_MspInit+0xf0>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d161      	bne.n	800b65e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b59a:	4b34      	ldr	r3, [pc, #208]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b59c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5a0:	4a32      	ldr	r2, [pc, #200]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b5a2:	f043 0320 	orr.w	r3, r3, #32
 800b5a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b5aa:	4b30      	ldr	r3, [pc, #192]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b5ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5b8:	4b2c      	ldr	r3, [pc, #176]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5be:	4a2b      	ldr	r2, [pc, #172]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b5c0:	f043 0302 	orr.w	r3, r3, #2
 800b5c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5c8:	4b28      	ldr	r3, [pc, #160]	; (800b66c <HAL_ADC_MspInit+0xf4>)
 800b5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5e2:	f107 0314 	add.w	r3, r7, #20
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4821      	ldr	r0, [pc, #132]	; (800b670 <HAL_ADC_MspInit+0xf8>)
 800b5ea:	f7f8 ff6b 	bl	80044c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800b5ee:	4b21      	ldr	r3, [pc, #132]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b5f0:	4a21      	ldr	r2, [pc, #132]	; (800b678 <HAL_ADC_MspInit+0x100>)
 800b5f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b5f4:	4b1f      	ldr	r3, [pc, #124]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b5f6:	2209      	movs	r2, #9
 800b5f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b5fa:	4b1e      	ldr	r3, [pc, #120]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b600:	4b1c      	ldr	r3, [pc, #112]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b602:	2200      	movs	r2, #0
 800b604:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b606:	4b1b      	ldr	r3, [pc, #108]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b60c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b60e:	4b19      	ldr	r3, [pc, #100]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b616:	4b17      	ldr	r3, [pc, #92]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b61c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b61e:	4b15      	ldr	r3, [pc, #84]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b620:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b626:	4b13      	ldr	r3, [pc, #76]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b628:	2200      	movs	r2, #0
 800b62a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b62c:	4b11      	ldr	r3, [pc, #68]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b62e:	2200      	movs	r2, #0
 800b630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b632:	4810      	ldr	r0, [pc, #64]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b634:	f7f6 fefe 	bl	8002434 <HAL_DMA_Init>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800b63e:	f000 fbdf 	bl	800be00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a0b      	ldr	r2, [pc, #44]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b646:	64da      	str	r2, [r3, #76]	; 0x4c
 800b648:	4a0a      	ldr	r2, [pc, #40]	; (800b674 <HAL_ADC_MspInit+0xfc>)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b64e:	2200      	movs	r2, #0
 800b650:	2100      	movs	r1, #0
 800b652:	2012      	movs	r0, #18
 800b654:	f7f6 feb9 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b658:	2012      	movs	r0, #18
 800b65a:	f7f6 fed0 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b65e:	bf00      	nop
 800b660:	3728      	adds	r7, #40	; 0x28
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	40022000 	.word	0x40022000
 800b66c:	58024400 	.word	0x58024400
 800b670:	58020400 	.word	0x58020400
 800b674:	2400028c 	.word	0x2400028c
 800b678:	40020010 	.word	0x40020010

0800b67c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <MX_DMA_Init+0x30>)
 800b684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b688:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <MX_DMA_Init+0x30>)
 800b68a:	f043 0301 	orr.w	r3, r3, #1
 800b68e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b692:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <MX_DMA_Init+0x30>)
 800b694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);

}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	58024400 	.word	0x58024400

0800b6b0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08c      	sub	sp, #48	; 0x30
 800b6b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6b6:	f107 031c 	add.w	r3, r7, #28
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	605a      	str	r2, [r3, #4]
 800b6c0:	609a      	str	r2, [r3, #8]
 800b6c2:	60da      	str	r2, [r3, #12]
 800b6c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6c6:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6cc:	4a36      	ldr	r2, [pc, #216]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6ce:	f043 0304 	orr.w	r3, r3, #4
 800b6d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b6d6:	4b34      	ldr	r3, [pc, #208]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b6e4:	4b30      	ldr	r3, [pc, #192]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6ea:	4a2f      	ldr	r2, [pc, #188]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6ec:	f043 0320 	orr.w	r3, r3, #32
 800b6f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b6f4:	4b2c      	ldr	r3, [pc, #176]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b6f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b702:	4b29      	ldr	r3, [pc, #164]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b708:	4a27      	ldr	r2, [pc, #156]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b712:	4b25      	ldr	r3, [pc, #148]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b720:	4b21      	ldr	r3, [pc, #132]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b726:	4a20      	ldr	r2, [pc, #128]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b728:	f043 0302 	orr.w	r3, r3, #2
 800b72c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b730:	4b1d      	ldr	r3, [pc, #116]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b73e:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b744:	4a18      	ldr	r2, [pc, #96]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b74a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b74e:	4b16      	ldr	r3, [pc, #88]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	60bb      	str	r3, [r7, #8]
 800b75a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b75c:	4b12      	ldr	r3, [pc, #72]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b75e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b762:	4a11      	ldr	r2, [pc, #68]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b764:	f043 0301 	orr.w	r3, r3, #1
 800b768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <MX_GPIO_Init+0xf8>)
 800b76e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	607b      	str	r3, [r7, #4]
 800b778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800b77a:	2201      	movs	r2, #1
 800b77c:	211c      	movs	r1, #28
 800b77e:	480b      	ldr	r0, [pc, #44]	; (800b7ac <MX_GPIO_Init+0xfc>)
 800b780:	f7f9 f850 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800b784:	231c      	movs	r3, #28
 800b786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b788:	2301      	movs	r3, #1
 800b78a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78c:	2300      	movs	r3, #0
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b790:	2300      	movs	r3, #0
 800b792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b794:	f107 031c 	add.w	r3, r7, #28
 800b798:	4619      	mov	r1, r3
 800b79a:	4804      	ldr	r0, [pc, #16]	; (800b7ac <MX_GPIO_Init+0xfc>)
 800b79c:	f7f8 fe92 	bl	80044c4 <HAL_GPIO_Init>

}
 800b7a0:	bf00      	nop
 800b7a2:	3730      	adds	r7, #48	; 0x30
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	58024400 	.word	0x58024400
 800b7ac:	58021800 	.word	0x58021800

0800b7b0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b7b4:	4b1b      	ldr	r3, [pc, #108]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7b6:	4a1c      	ldr	r2, [pc, #112]	; (800b828 <MX_I2C2_Init+0x78>)
 800b7b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7bc:	4a1b      	ldr	r2, [pc, #108]	; (800b82c <MX_I2C2_Init+0x7c>)
 800b7be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b7c0:	4b18      	ldr	r3, [pc, #96]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b7c6:	4b17      	ldr	r3, [pc, #92]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b7cc:	4b15      	ldr	r3, [pc, #84]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b7d2:	4b14      	ldr	r3, [pc, #80]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b7de:	4b11      	ldr	r3, [pc, #68]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b7ea:	480e      	ldr	r0, [pc, #56]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7ec:	f7f9 f84e 	bl	800488c <HAL_I2C_Init>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b7f6:	f000 fb03 	bl	800be00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4809      	ldr	r0, [pc, #36]	; (800b824 <MX_I2C2_Init+0x74>)
 800b7fe:	f7f9 fc9f 	bl	8005140 <HAL_I2CEx_ConfigAnalogFilter>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b808:	f000 fafa 	bl	800be00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b80c:	2100      	movs	r1, #0
 800b80e:	4805      	ldr	r0, [pc, #20]	; (800b824 <MX_I2C2_Init+0x74>)
 800b810:	f7f9 fce1 	bl	80051d6 <HAL_I2CEx_ConfigDigitalFilter>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b81a:	f000 faf1 	bl	800be00 <Error_Handler>
  }

}
 800b81e:	bf00      	nop
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	24000350 	.word	0x24000350
 800b828:	40005800 	.word	0x40005800
 800b82c:	307075b1 	.word	0x307075b1

0800b830 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800b834:	4b1b      	ldr	r3, [pc, #108]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b836:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <MX_I2C3_Init+0x78>)
 800b838:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 800b83a:	4b1a      	ldr	r3, [pc, #104]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b83c:	4a1b      	ldr	r2, [pc, #108]	; (800b8ac <MX_I2C3_Init+0x7c>)
 800b83e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800b840:	4b18      	ldr	r3, [pc, #96]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b842:	2200      	movs	r2, #0
 800b844:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b846:	4b17      	ldr	r3, [pc, #92]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b848:	2201      	movs	r2, #1
 800b84a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b84c:	4b15      	ldr	r3, [pc, #84]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b84e:	2200      	movs	r2, #0
 800b850:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800b852:	4b14      	ldr	r3, [pc, #80]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b854:	2200      	movs	r2, #0
 800b856:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b858:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b85e:	4b11      	ldr	r3, [pc, #68]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b860:	2200      	movs	r2, #0
 800b862:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b864:	4b0f      	ldr	r3, [pc, #60]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b866:	2200      	movs	r2, #0
 800b868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800b86a:	480e      	ldr	r0, [pc, #56]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b86c:	f7f9 f80e 	bl	800488c <HAL_I2C_Init>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800b876:	f000 fac3 	bl	800be00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b87a:	2100      	movs	r1, #0
 800b87c:	4809      	ldr	r0, [pc, #36]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b87e:	f7f9 fc5f 	bl	8005140 <HAL_I2CEx_ConfigAnalogFilter>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800b888:	f000 faba 	bl	800be00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800b88c:	2100      	movs	r1, #0
 800b88e:	4805      	ldr	r0, [pc, #20]	; (800b8a4 <MX_I2C3_Init+0x74>)
 800b890:	f7f9 fca1 	bl	80051d6 <HAL_I2CEx_ConfigDigitalFilter>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800b89a:	f000 fab1 	bl	800be00 <Error_Handler>
  }

}
 800b89e:	bf00      	nop
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	24000304 	.word	0x24000304
 800b8a8:	40005c00 	.word	0x40005c00
 800b8ac:	307075b1 	.word	0x307075b1

0800b8b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08c      	sub	sp, #48	; 0x30
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8b8:	f107 031c 	add.w	r3, r7, #28
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	605a      	str	r2, [r3, #4]
 800b8c2:	609a      	str	r2, [r3, #8]
 800b8c4:	60da      	str	r2, [r3, #12]
 800b8c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a34      	ldr	r2, [pc, #208]	; (800b9a0 <HAL_I2C_MspInit+0xf0>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d12e      	bne.n	800b930 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b8d2:	4b34      	ldr	r3, [pc, #208]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b8d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8d8:	4a32      	ldr	r2, [pc, #200]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b8da:	f043 0320 	orr.w	r3, r3, #32
 800b8de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8e2:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8e8:	f003 0320 	and.w	r3, r3, #32
 800b8ec:	61bb      	str	r3, [r7, #24]
 800b8ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = EEPROM_SDA_Pin|EEPROM_SCL_Pin;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b8f4:	2312      	movs	r3, #18
 800b8f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b900:	2304      	movs	r3, #4
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b904:	f107 031c 	add.w	r3, r7, #28
 800b908:	4619      	mov	r1, r3
 800b90a:	4827      	ldr	r0, [pc, #156]	; (800b9a8 <HAL_I2C_MspInit+0xf8>)
 800b90c:	f7f8 fdda 	bl	80044c4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b910:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b916:	4a23      	ldr	r2, [pc, #140]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b91c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b920:	4b20      	ldr	r3, [pc, #128]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b92a:	617b      	str	r3, [r7, #20]
 800b92c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800b92e:	e033      	b.n	800b998 <HAL_I2C_MspInit+0xe8>
  else if(i2cHandle->Instance==I2C3)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a1d      	ldr	r2, [pc, #116]	; (800b9ac <HAL_I2C_MspInit+0xfc>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d12e      	bne.n	800b998 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b93a:	4b1a      	ldr	r3, [pc, #104]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b93c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b940:	4a18      	ldr	r2, [pc, #96]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b94a:	4b16      	ldr	r3, [pc, #88]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b94c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b954:	613b      	str	r3, [r7, #16]
 800b956:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HDC1080_SCL_Pin|HDC1080_SDA_Pin;
 800b958:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b95c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b95e:	2312      	movs	r3, #18
 800b960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b966:	2300      	movs	r3, #0
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b96a:	2304      	movs	r3, #4
 800b96c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b96e:	f107 031c 	add.w	r3, r7, #28
 800b972:	4619      	mov	r1, r3
 800b974:	480e      	ldr	r0, [pc, #56]	; (800b9b0 <HAL_I2C_MspInit+0x100>)
 800b976:	f7f8 fda5 	bl	80044c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b97a:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b97c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b980:	4a08      	ldr	r2, [pc, #32]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b98a:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <HAL_I2C_MspInit+0xf4>)
 800b98c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	68fb      	ldr	r3, [r7, #12]
}
 800b998:	bf00      	nop
 800b99a:	3730      	adds	r7, #48	; 0x30
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	40005800 	.word	0x40005800
 800b9a4:	58024400 	.word	0x58024400
 800b9a8:	58021400 	.word	0x58021400
 800b9ac:	40005c00 	.word	0x40005c00
 800b9b0:	58021c00 	.word	0x58021c00
 800b9b4:	00000000 	.word	0x00000000

0800b9b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b9be:	f7f4 fe67 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b9c2:	f000 f937 	bl	800bc34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b9c6:	f7ff fe73 	bl	800b6b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800b9ca:	f7ff fe57 	bl	800b67c <MX_DMA_Init>
  MX_ADC1_Init();
 800b9ce:	f7ff fd5b 	bl	800b488 <MX_ADC1_Init>
  MX_I2C2_Init();
 800b9d2:	f7ff feed 	bl	800b7b0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800b9d6:	f7ff ff2b 	bl	800b830 <MX_I2C3_Init>
  MX_TIM3_Init();
 800b9da:	f000 fb89 	bl	800c0f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800b9de:	f000 fc07 	bl	800c1f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System Go !!!\r\n");
 800b9e2:	4883      	ldr	r0, [pc, #524]	; (800bbf0 <main+0x238>)
 800b9e4:	f001 f9c0 	bl	800cd68 <puts>
  HAL_ADC_Start_DMA(&hadc1, ADC_Value, ADC_CONVERTED_DATA_BUFFER_SIZE);
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	4982      	ldr	r1, [pc, #520]	; (800bbf4 <main+0x23c>)
 800b9ec:	4882      	ldr	r0, [pc, #520]	; (800bbf8 <main+0x240>)
 800b9ee:	f7f5 fa95 	bl	8000f1c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Temperature_Humidity_Buffer[0] = TEMPERATURE;
 800b9f2:	4b82      	ldr	r3, [pc, #520]	; (800bbfc <main+0x244>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 1, 100);
 800b9f8:	2364      	movs	r3, #100	; 0x64
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	4a7f      	ldr	r2, [pc, #508]	; (800bbfc <main+0x244>)
 800ba00:	2180      	movs	r1, #128	; 0x80
 800ba02:	487f      	ldr	r0, [pc, #508]	; (800bc00 <main+0x248>)
 800ba04:	f7f8 ffd2 	bl	80049ac <HAL_I2C_Master_Transmit>
      HAL_Delay(20);
 800ba08:	2014      	movs	r0, #20
 800ba0a:	f7f4 fecf 	bl	80007ac <HAL_Delay>
      HAL_I2C_Master_Receive(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 2 ,100);
 800ba0e:	2364      	movs	r3, #100	; 0x64
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	2302      	movs	r3, #2
 800ba14:	4a79      	ldr	r2, [pc, #484]	; (800bbfc <main+0x244>)
 800ba16:	2180      	movs	r1, #128	; 0x80
 800ba18:	4879      	ldr	r0, [pc, #484]	; (800bc00 <main+0x248>)
 800ba1a:	f7f9 f8bb 	bl	8004b94 <HAL_I2C_Master_Receive>
      Temperature_T = Temperature_Humidity_Buffer[0] << 8 | Temperature_Humidity_Buffer[1];
 800ba1e:	4b77      	ldr	r3, [pc, #476]	; (800bbfc <main+0x244>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	b21a      	sxth	r2, r3
 800ba26:	4b75      	ldr	r3, [pc, #468]	; (800bbfc <main+0x244>)
 800ba28:	785b      	ldrb	r3, [r3, #1]
 800ba2a:	b21b      	sxth	r3, r3
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	b21b      	sxth	r3, r3
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	4b74      	ldr	r3, [pc, #464]	; (800bc04 <main+0x24c>)
 800ba34:	801a      	strh	r2, [r3, #0]
      Temperature_Read = (((float)Temperature_T / 65536) * 165.0) - 40.0;
 800ba36:	4b73      	ldr	r3, [pc, #460]	; (800bc04 <main+0x24c>)
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba42:	eddf 6a71 	vldr	s13, [pc, #452]	; 800bc08 <main+0x250>
 800ba46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba4e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 800bba8 <main+0x1f0>
 800ba52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba56:	ed9f 6b56 	vldr	d6, [pc, #344]	; 800bbb0 <main+0x1f8>
 800ba5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba62:	4b6a      	ldr	r3, [pc, #424]	; (800bc0c <main+0x254>)
 800ba64:	edc3 7a00 	vstr	s15, [r3]
      printf("\nTemperature is: %.2f\r\n", Temperature_Read);
 800ba68:	4b68      	ldr	r3, [pc, #416]	; (800bc0c <main+0x254>)
 800ba6a:	edd3 7a00 	vldr	s15, [r3]
 800ba6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba72:	ec53 2b17 	vmov	r2, r3, d7
 800ba76:	4866      	ldr	r0, [pc, #408]	; (800bc10 <main+0x258>)
 800ba78:	f001 f902 	bl	800cc80 <iprintf>

      Temperature_Humidity_Buffer[0] = HUMIDITY;
 800ba7c:	4b5f      	ldr	r3, [pc, #380]	; (800bbfc <main+0x244>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 1, 100);
 800ba82:	2364      	movs	r3, #100	; 0x64
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	2301      	movs	r3, #1
 800ba88:	4a5c      	ldr	r2, [pc, #368]	; (800bbfc <main+0x244>)
 800ba8a:	2180      	movs	r1, #128	; 0x80
 800ba8c:	485c      	ldr	r0, [pc, #368]	; (800bc00 <main+0x248>)
 800ba8e:	f7f8 ff8d 	bl	80049ac <HAL_I2C_Master_Transmit>
      HAL_Delay(20);
 800ba92:	2014      	movs	r0, #20
 800ba94:	f7f4 fe8a 	bl	80007ac <HAL_Delay>
      HAL_I2C_Master_Receive(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 2 ,100);
 800ba98:	2364      	movs	r3, #100	; 0x64
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	4a57      	ldr	r2, [pc, #348]	; (800bbfc <main+0x244>)
 800baa0:	2180      	movs	r1, #128	; 0x80
 800baa2:	4857      	ldr	r0, [pc, #348]	; (800bc00 <main+0x248>)
 800baa4:	f7f9 f876 	bl	8004b94 <HAL_I2C_Master_Receive>
      Humidity_H = Temperature_Humidity_Buffer[0] << 8 | Temperature_Humidity_Buffer[1];
 800baa8:	4b54      	ldr	r3, [pc, #336]	; (800bbfc <main+0x244>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	b21a      	sxth	r2, r3
 800bab0:	4b52      	ldr	r3, [pc, #328]	; (800bbfc <main+0x244>)
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	b21b      	sxth	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b21b      	sxth	r3, r3
 800baba:	b29a      	uxth	r2, r3
 800babc:	4b55      	ldr	r3, [pc, #340]	; (800bc14 <main+0x25c>)
 800babe:	801a      	strh	r2, [r3, #0]
      Humidity_Read = ((float)Humidity_H / 65536) * 100;
 800bac0:	4b54      	ldr	r3, [pc, #336]	; (800bc14 <main+0x25c>)
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bacc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc08 <main+0x250>
 800bad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bad4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800bc18 <main+0x260>
 800bad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800badc:	4b4f      	ldr	r3, [pc, #316]	; (800bc1c <main+0x264>)
 800bade:	edc3 7a00 	vstr	s15, [r3]
      printf("Humidity is: %.2f\r\n", Humidity_Read);
 800bae2:	4b4e      	ldr	r3, [pc, #312]	; (800bc1c <main+0x264>)
 800bae4:	edd3 7a00 	vldr	s15, [r3]
 800bae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800baec:	ec53 2b17 	vmov	r2, r3, d7
 800baf0:	484b      	ldr	r0, [pc, #300]	; (800bc20 <main+0x268>)
 800baf2:	f001 f8c5 	bl	800cc80 <iprintf>
      printf("ADC_Value is: %lu\r\n", ADC_Value[0]);
 800baf6:	4b3f      	ldr	r3, [pc, #252]	; (800bbf4 <main+0x23c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4619      	mov	r1, r3
 800bafc:	4849      	ldr	r0, [pc, #292]	; (800bc24 <main+0x26c>)
 800bafe:	f001 f8bf 	bl	800cc80 <iprintf>
      printf("ADC_Value is: %.2f\r\n", ADC_Value[0]*3.3/4096);
 800bb02:	4b3c      	ldr	r3, [pc, #240]	; (800bbf4 <main+0x23c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bb0e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800bbb8 <main+0x200>
 800bb12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb16:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800bbc0 <main+0x208>
 800bb1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bb1e:	ec53 2b15 	vmov	r2, r3, d5
 800bb22:	4841      	ldr	r0, [pc, #260]	; (800bc28 <main+0x270>)
 800bb24:	f001 f8ac 	bl	800cc80 <iprintf>
       * B  : B-Constant常量 Data sheet给出   此处B（3455K）
       * T1 : NTC当前的温度     (K = 273.15（绝对温度） + 摄氏度)
       * T2 : NTC常温下的温度 (K = 273.15（绝对温度） + 摄氏度)
       *  */
      tempValue = (B_CONSTANT / (B_CONSTANT/(KELVIN + 25.0) +
              log((double)ADC_Value[0]*6200.0 / ((RESOLUTION - (double)ADC_Value[0])*10000)))) - KELVIN;
 800bb28:	4b32      	ldr	r3, [pc, #200]	; (800bbf4 <main+0x23c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bb34:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800bbc8 <main+0x210>
 800bb38:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bb3c:	4b2d      	ldr	r3, [pc, #180]	; (800bbf4 <main+0x23c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bb48:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800bbc0 <main+0x208>
 800bb4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb50:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800bbd0 <main+0x218>
 800bb54:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bb58:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800bb5c:	eeb0 0b45 	vmov.f64	d0, d5
 800bb60:	f002 ff50 	bl	800ea04 <log>
 800bb64:	eeb0 6b40 	vmov.f64	d6, d0
      tempValue = (B_CONSTANT / (B_CONSTANT/(KELVIN + 25.0) +
 800bb68:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800bbd8 <main+0x220>
 800bb6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bb70:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 800bbe0 <main+0x228>
 800bb74:	ee85 7b06 	vdiv.f64	d7, d5, d6
              log((double)ADC_Value[0]*6200.0 / ((RESOLUTION - (double)ADC_Value[0])*10000)))) - KELVIN;
 800bb78:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 800bbe8 <main+0x230>
 800bb7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
      tempValue = (B_CONSTANT / (B_CONSTANT/(KELVIN + 25.0) +
 800bb84:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <main+0x274>)
 800bb86:	edc3 7a00 	vstr	s15, [r3]
      printf("NTC Temperature is : %.2f\r\n", tempValue);
 800bb8a:	4b28      	ldr	r3, [pc, #160]	; (800bc2c <main+0x274>)
 800bb8c:	edd3 7a00 	vldr	s15, [r3]
 800bb90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb94:	ec53 2b17 	vmov	r2, r3, d7
 800bb98:	4825      	ldr	r0, [pc, #148]	; (800bc30 <main+0x278>)
 800bb9a:	f001 f871 	bl	800cc80 <iprintf>
      HAL_Delay(1000);
 800bb9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bba2:	f7f4 fe03 	bl	80007ac <HAL_Delay>
      Temperature_Humidity_Buffer[0] = TEMPERATURE;
 800bba6:	e724      	b.n	800b9f2 <main+0x3a>
 800bba8:	00000000 	.word	0x00000000
 800bbac:	4064a000 	.word	0x4064a000
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	40440000 	.word	0x40440000
 800bbb8:	66666666 	.word	0x66666666
 800bbbc:	400a6666 	.word	0x400a6666
 800bbc0:	00000000 	.word	0x00000000
 800bbc4:	40b00000 	.word	0x40b00000
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	40b83800 	.word	0x40b83800
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	40c38800 	.word	0x40c38800
 800bbd8:	f41ba5d9 	.word	0xf41ba5d9
 800bbdc:	40272d1e 	.word	0x40272d1e
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	40aafe00 	.word	0x40aafe00
 800bbe8:	66666666 	.word	0x66666666
 800bbec:	40711266 	.word	0x40711266
 800bbf0:	0800ed50 	.word	0x0800ed50
 800bbf4:	24000224 	.word	0x24000224
 800bbf8:	24000228 	.word	0x24000228
 800bbfc:	24000208 	.word	0x24000208
 800bc00:	24000304 	.word	0x24000304
 800bc04:	24000204 	.word	0x24000204
 800bc08:	47800000 	.word	0x47800000
 800bc0c:	240003a0 	.word	0x240003a0
 800bc10:	0800ed60 	.word	0x0800ed60
 800bc14:	24000206 	.word	0x24000206
 800bc18:	42c80000 	.word	0x42c80000
 800bc1c:	2400039c 	.word	0x2400039c
 800bc20:	0800ed78 	.word	0x0800ed78
 800bc24:	0800ed8c 	.word	0x0800ed8c
 800bc28:	0800eda0 	.word	0x0800eda0
 800bc2c:	24000210 	.word	0x24000210
 800bc30:	0800edb8 	.word	0x0800edb8

0800bc34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b0cc      	sub	sp, #304	; 0x130
 800bc38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bc3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800bc3e:	224c      	movs	r2, #76	; 0x4c
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 fbd8 	bl	800c3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bc48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	2100      	movs	r1, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 fbd1 	bl	800c3f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	23bc      	movs	r3, #188	; 0xbc
 800bc5e:	461a      	mov	r2, r3
 800bc60:	2100      	movs	r1, #0
 800bc62:	f000 fbc9 	bl	800c3f8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800bc66:	2002      	movs	r0, #2
 800bc68:	f7f9 fb02 	bl	8005270 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800bc6c:	1d3b      	adds	r3, r7, #4
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	4b5f      	ldr	r3, [pc, #380]	; (800bdf0 <SystemClock_Config+0x1bc>)
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	4a5e      	ldr	r2, [pc, #376]	; (800bdf0 <SystemClock_Config+0x1bc>)
 800bc78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc7c:	6193      	str	r3, [r2, #24]
 800bc7e:	4b5c      	ldr	r3, [pc, #368]	; (800bdf0 <SystemClock_Config+0x1bc>)
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800bc86:	1d3b      	adds	r3, r7, #4
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	4b5a      	ldr	r3, [pc, #360]	; (800bdf4 <SystemClock_Config+0x1c0>)
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	4a59      	ldr	r2, [pc, #356]	; (800bdf4 <SystemClock_Config+0x1c0>)
 800bc90:	f043 0301 	orr.w	r3, r3, #1
 800bc94:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc96:	4b57      	ldr	r3, [pc, #348]	; (800bdf4 <SystemClock_Config+0x1c0>)
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	f003 0201 	and.w	r2, r3, #1
 800bc9e:	1d3b      	adds	r3, r7, #4
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	1d3b      	adds	r3, r7, #4
 800bca4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800bca6:	bf00      	nop
 800bca8:	4b51      	ldr	r3, [pc, #324]	; (800bdf0 <SystemClock_Config+0x1bc>)
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcb4:	d1f8      	bne.n	800bca8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800bcb6:	4b50      	ldr	r3, [pc, #320]	; (800bdf8 <SystemClock_Config+0x1c4>)
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcba:	f023 0303 	bic.w	r3, r3, #3
 800bcbe:	4a4e      	ldr	r2, [pc, #312]	; (800bdf8 <SystemClock_Config+0x1c4>)
 800bcc0:	f043 0302 	orr.w	r3, r3, #2
 800bcc4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bcd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800bce0:	2305      	movs	r3, #5
 800bce2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800bce6:	23c0      	movs	r3, #192	; 0xc0
 800bce8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800bcec:	2302      	movs	r3, #2
 800bcee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800bcfe:	2308      	movs	r3, #8
 800bd00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7f9 fae3 	bl	80052e0 <HAL_RCC_OscConfig>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800bd20:	f000 f86e 	bl	800be00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bd24:	233f      	movs	r3, #63	; 0x3f
 800bd26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800bd36:	2308      	movs	r3, #8
 800bd38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bd3c:	2340      	movs	r3, #64	; 0x40
 800bd3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800bd42:	2340      	movs	r3, #64	; 0x40
 800bd44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800bd48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800bd50:	2340      	movs	r3, #64	; 0x40
 800bd52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800bd56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7f9 fe77 	bl	8005a50 <HAL_RCC_ClockConfig>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <SystemClock_Config+0x138>
  {
    Error_Handler();
 800bd68:	f000 f84a 	bl	800be00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 800bd6c:	f107 0308 	add.w	r3, r7, #8
 800bd70:	4a22      	ldr	r2, [pc, #136]	; (800bdfc <SystemClock_Config+0x1c8>)
 800bd72:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800bd74:	f107 0308 	add.w	r3, r7, #8
 800bd78:	2202      	movs	r2, #2
 800bd7a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800bd7c:	f107 0308 	add.w	r3, r7, #8
 800bd80:	220c      	movs	r2, #12
 800bd82:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800bd84:	f107 0308 	add.w	r3, r7, #8
 800bd88:	2201      	movs	r2, #1
 800bd8a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800bd8c:	f107 0308 	add.w	r3, r7, #8
 800bd90:	2202      	movs	r2, #2
 800bd92:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800bd94:	f107 0308 	add.w	r3, r7, #8
 800bd98:	2202      	movs	r2, #2
 800bd9a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800bd9c:	f107 0308 	add.w	r3, r7, #8
 800bda0:	22c0      	movs	r2, #192	; 0xc0
 800bda2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800bda4:	f107 0308 	add.w	r3, r7, #8
 800bda8:	2220      	movs	r2, #32
 800bdaa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800bdac:	f107 0308 	add.w	r3, r7, #8
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	2200      	movs	r2, #0
 800bdba:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800bdbc:	f107 0308 	add.w	r3, r7, #8
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800bdc6:	f107 0308 	add.w	r3, r7, #8
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fa f999 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <SystemClock_Config+0x1b0>
  {
    Error_Handler();
 800bde0:	f000 f80e 	bl	800be00 <Error_Handler>
  }
}
 800bde4:	bf00      	nop
 800bde6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	58024800 	.word	0x58024800
 800bdf4:	58000400 	.word	0x58000400
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	00080009 	.word	0x00080009

0800be00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800be04:	bf00      	nop
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
	...

0800be10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be16:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <HAL_MspInit+0x30>)
 800be18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be1c:	4a08      	ldr	r2, [pc, #32]	; (800be40 <HAL_MspInit+0x30>)
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800be26:	4b06      	ldr	r3, [pc, #24]	; (800be40 <HAL_MspInit+0x30>)
 800be28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	607b      	str	r3, [r7, #4]
 800be32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	58024400 	.word	0x58024400

0800be44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800be48:	bf00      	nop
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800be52:	b480      	push	{r7}
 800be54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800be56:	e7fe      	b.n	800be56 <HardFault_Handler+0x4>

0800be58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800be5c:	e7fe      	b.n	800be5c <MemManage_Handler+0x4>

0800be5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800be5e:	b480      	push	{r7}
 800be60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800be62:	e7fe      	b.n	800be62 <BusFault_Handler+0x4>

0800be64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800be68:	e7fe      	b.n	800be68 <UsageFault_Handler+0x4>

0800be6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800be6a:	b480      	push	{r7}
 800be6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800be6e:	bf00      	nop
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800be7c:	bf00      	nop
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800be86:	b480      	push	{r7}
 800be88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800be8a:	bf00      	nop
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800be98:	f7f4 fc68 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800be9c:	bf00      	nop
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bea4:	4802      	ldr	r0, [pc, #8]	; (800beb0 <DMA1_Stream0_IRQHandler+0x10>)
 800bea6:	f7f7 f889 	bl	8002fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800beaa:	bf00      	nop
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	2400028c 	.word	0x2400028c

0800beb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800beb8:	4802      	ldr	r0, [pc, #8]	; (800bec4 <ADC_IRQHandler+0x10>)
 800beba:	f7f5 f8eb 	bl	8001094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800bebe:	bf00      	nop
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	24000228 	.word	0x24000228

0800bec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800becc:	4809      	ldr	r0, [pc, #36]	; (800bef4 <TIM3_IRQHandler+0x2c>)
 800bece:	f7fc f813 	bl	8007ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOG, LED1_Pin | LED2_Pin | LED3_Pin);
 800bed2:	211c      	movs	r1, #28
 800bed4:	4808      	ldr	r0, [pc, #32]	; (800bef8 <TIM3_IRQHandler+0x30>)
 800bed6:	f7f8 fcbe 	bl	8004856 <HAL_GPIO_TogglePin>
  printf("Main_loop is: %lu\r\n", Main_loop);
 800beda:	4b08      	ldr	r3, [pc, #32]	; (800befc <TIM3_IRQHandler+0x34>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4619      	mov	r1, r3
 800bee0:	4807      	ldr	r0, [pc, #28]	; (800bf00 <TIM3_IRQHandler+0x38>)
 800bee2:	f000 fecd 	bl	800cc80 <iprintf>
  Main_loop++;
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <TIM3_IRQHandler+0x34>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	4a03      	ldr	r2, [pc, #12]	; (800befc <TIM3_IRQHandler+0x34>)
 800beee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 800bef0:	bf00      	nop
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	240003a4 	.word	0x240003a4
 800bef8:	58021800 	.word	0x58021800
 800befc:	24000200 	.word	0x24000200
 800bf00:	0800edd4 	.word	0x0800edd4

0800bf04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bf08:	4802      	ldr	r0, [pc, #8]	; (800bf14 <USART1_IRQHandler+0x10>)
 800bf0a:	f7fc fcaf 	bl	800886c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bf0e:	bf00      	nop
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	240003e4 	.word	0x240003e4

0800bf18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e00a      	b.n	800bf40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bf2a:	f3af 8000 	nop.w
 800bf2e:	4601      	mov	r1, r0
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	60ba      	str	r2, [r7, #8]
 800bf36:	b2ca      	uxtb	r2, r1
 800bf38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	dbf0      	blt.n	800bf2a <_read+0x12>
	}

return len;
 800bf48:	687b      	ldr	r3, [r7, #4]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b086      	sub	sp, #24
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e009      	b.n	800bf78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	60ba      	str	r2, [r7, #8]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 f9dd 	bl	800c32c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	3301      	adds	r3, #1
 800bf76:	617b      	str	r3, [r7, #20]
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	dbf1      	blt.n	800bf64 <_write+0x12>
	}
	return len;
 800bf80:	687b      	ldr	r3, [r7, #4]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_close>:

int _close(int file)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
	return -1;
 800bf92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bfb2:	605a      	str	r2, [r3, #4]
	return 0;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <_isatty>:

int _isatty(int file)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
	return 1;
 800bfca:	2301      	movs	r3, #1
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
	return 0;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
	...

0800bff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bffc:	4b11      	ldr	r3, [pc, #68]	; (800c044 <_sbrk+0x50>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <_sbrk+0x16>
		heap_end = &end;
 800c004:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <_sbrk+0x50>)
 800c006:	4a10      	ldr	r2, [pc, #64]	; (800c048 <_sbrk+0x54>)
 800c008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c00a:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <_sbrk+0x50>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c010:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <_sbrk+0x50>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4413      	add	r3, r2
 800c018:	466a      	mov	r2, sp
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d907      	bls.n	800c02e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c01e:	f000 f9c1 	bl	800c3a4 <__errno>
 800c022:	4602      	mov	r2, r0
 800c024:	230c      	movs	r3, #12
 800c026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c028:	f04f 33ff 	mov.w	r3, #4294967295
 800c02c:	e006      	b.n	800c03c <_sbrk+0x48>
	}

	heap_end += incr;
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <_sbrk+0x50>)
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4413      	add	r3, r2
 800c036:	4a03      	ldr	r2, [pc, #12]	; (800c044 <_sbrk+0x50>)
 800c038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c03a:	68fb      	ldr	r3, [r7, #12]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	24000214 	.word	0x24000214
 800c048:	24000478 	.word	0x24000478

0800c04c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c050:	4b24      	ldr	r3, [pc, #144]	; (800c0e4 <SystemInit+0x98>)
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c056:	4a23      	ldr	r2, [pc, #140]	; (800c0e4 <SystemInit+0x98>)
 800c058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c05c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c060:	4b21      	ldr	r3, [pc, #132]	; (800c0e8 <SystemInit+0x9c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a20      	ldr	r2, [pc, #128]	; (800c0e8 <SystemInit+0x9c>)
 800c066:	f043 0301 	orr.w	r3, r3, #1
 800c06a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c06c:	4b1e      	ldr	r3, [pc, #120]	; (800c0e8 <SystemInit+0x9c>)
 800c06e:	2200      	movs	r2, #0
 800c070:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c072:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <SystemInit+0x9c>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	491c      	ldr	r1, [pc, #112]	; (800c0e8 <SystemInit+0x9c>)
 800c078:	4b1c      	ldr	r3, [pc, #112]	; (800c0ec <SystemInit+0xa0>)
 800c07a:	4013      	ands	r3, r2
 800c07c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c07e:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <SystemInit+0x9c>)
 800c080:	2200      	movs	r2, #0
 800c082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <SystemInit+0x9c>)
 800c086:	2200      	movs	r2, #0
 800c088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c08a:	4b17      	ldr	r3, [pc, #92]	; (800c0e8 <SystemInit+0x9c>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800c090:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <SystemInit+0x9c>)
 800c092:	2200      	movs	r2, #0
 800c094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <SystemInit+0x9c>)
 800c098:	2200      	movs	r2, #0
 800c09a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800c09c:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <SystemInit+0x9c>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c0a2:	4b11      	ldr	r3, [pc, #68]	; (800c0e8 <SystemInit+0x9c>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800c0a8:	4b0f      	ldr	r3, [pc, #60]	; (800c0e8 <SystemInit+0x9c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c0ae:	4b0e      	ldr	r3, [pc, #56]	; (800c0e8 <SystemInit+0x9c>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800c0b4:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <SystemInit+0x9c>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c0ba:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <SystemInit+0x9c>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c0c0:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <SystemInit+0x9c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <SystemInit+0x9c>)
 800c0c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <SystemInit+0x9c>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c0d2:	4b04      	ldr	r3, [pc, #16]	; (800c0e4 <SystemInit+0x98>)
 800c0d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c0d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c0da:	bf00      	nop
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	e000ed00 	.word	0xe000ed00
 800c0e8:	58024400 	.word	0x58024400
 800c0ec:	eaf6ed7f 	.word	0xeaf6ed7f

0800c0f0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c0f6:	f107 0310 	add.w	r3, r7, #16
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	605a      	str	r2, [r3, #4]
 800c100:	609a      	str	r2, [r3, #8]
 800c102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c104:	1d3b      	adds	r3, r7, #4
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	605a      	str	r2, [r3, #4]
 800c10c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800c10e:	4b22      	ldr	r3, [pc, #136]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c110:	4a22      	ldr	r2, [pc, #136]	; (800c19c <MX_TIM3_Init+0xac>)
 800c112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000-1;
 800c114:	4b20      	ldr	r3, [pc, #128]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c116:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800c11a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c11c:	4b1e      	ldr	r3, [pc, #120]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c11e:	2200      	movs	r2, #0
 800c120:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800c122:	4b1d      	ldr	r3, [pc, #116]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c124:	f242 720f 	movw	r2, #9999	; 0x270f
 800c128:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c12a:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c130:	4b19      	ldr	r3, [pc, #100]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c132:	2200      	movs	r2, #0
 800c134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c136:	4818      	ldr	r0, [pc, #96]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c138:	f7fb fe88 	bl	8007e4c <HAL_TIM_Base_Init>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800c142:	f7ff fe5d 	bl	800be00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c14a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	4619      	mov	r1, r3
 800c152:	4811      	ldr	r0, [pc, #68]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c154:	f7fb fff0 	bl	8008138 <HAL_TIM_ConfigClockSource>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800c15e:	f7ff fe4f 	bl	800be00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c162:	2300      	movs	r3, #0
 800c164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c166:	2300      	movs	r3, #0
 800c168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c16a:	1d3b      	adds	r3, r7, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	480a      	ldr	r0, [pc, #40]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c170:	f7fc fa1c 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800c17a:	f7ff fe41 	bl	800be00 <Error_Handler>
  }
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800c17e:	4806      	ldr	r0, [pc, #24]	; (800c198 <MX_TIM3_Init+0xa8>)
 800c180:	f7fb fe90 	bl	8007ea4 <HAL_TIM_Base_Start_IT>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800c18a:	f7ff fe39 	bl	800be00 <Error_Handler>
  }

}
 800c18e:	bf00      	nop
 800c190:	3720      	adds	r7, #32
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	240003a4 	.word	0x240003a4
 800c19c:	40000400 	.word	0x40000400

0800c1a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a0e      	ldr	r2, [pc, #56]	; (800c1e8 <HAL_TIM_Base_MspInit+0x48>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d116      	bne.n	800c1e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c1b2:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <HAL_TIM_Base_MspInit+0x4c>)
 800c1b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1b8:	4a0c      	ldr	r2, [pc, #48]	; (800c1ec <HAL_TIM_Base_MspInit+0x4c>)
 800c1ba:	f043 0302 	orr.w	r3, r3, #2
 800c1be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c1c2:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <HAL_TIM_Base_MspInit+0x4c>)
 800c1c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	201d      	movs	r0, #29
 800c1d6:	f7f6 f8f8 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c1da:	201d      	movs	r0, #29
 800c1dc:	f7f6 f90f 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	40000400 	.word	0x40000400
 800c1ec:	58024400 	.word	0x58024400

0800c1f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c1f4:	4b22      	ldr	r3, [pc, #136]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c1f6:	4a23      	ldr	r2, [pc, #140]	; (800c284 <MX_USART1_UART_Init+0x94>)
 800c1f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c1fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c202:	4b1f      	ldr	r3, [pc, #124]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c204:	2200      	movs	r2, #0
 800c206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c208:	4b1d      	ldr	r3, [pc, #116]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c20e:	4b1c      	ldr	r3, [pc, #112]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c210:	2200      	movs	r2, #0
 800c212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c214:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c216:	220c      	movs	r2, #12
 800c218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c21a:	4b19      	ldr	r3, [pc, #100]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c220:	4b17      	ldr	r3, [pc, #92]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c222:	2200      	movs	r2, #0
 800c224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c226:	4b16      	ldr	r3, [pc, #88]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c228:	2200      	movs	r2, #0
 800c22a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c22c:	4b14      	ldr	r3, [pc, #80]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c22e:	2200      	movs	r2, #0
 800c230:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c232:	4b13      	ldr	r3, [pc, #76]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c234:	2200      	movs	r2, #0
 800c236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c238:	4811      	ldr	r0, [pc, #68]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c23a:	f7fc fa31 	bl	80086a0 <HAL_UART_Init>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800c244:	f7ff fddc 	bl	800be00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c248:	2100      	movs	r1, #0
 800c24a:	480d      	ldr	r0, [pc, #52]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c24c:	f7ff f837 	bl	800b2be <HAL_UARTEx_SetTxFifoThreshold>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800c256:	f7ff fdd3 	bl	800be00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c25a:	2100      	movs	r1, #0
 800c25c:	4808      	ldr	r0, [pc, #32]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c25e:	f7ff f86c 	bl	800b33a <HAL_UARTEx_SetRxFifoThreshold>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800c268:	f7ff fdca 	bl	800be00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800c26c:	4804      	ldr	r0, [pc, #16]	; (800c280 <MX_USART1_UART_Init+0x90>)
 800c26e:	f7fe ffed 	bl	800b24c <HAL_UARTEx_DisableFifoMode>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800c278:	f7ff fdc2 	bl	800be00 <Error_Handler>
  }

}
 800c27c:	bf00      	nop
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	240003e4 	.word	0x240003e4
 800c284:	40011000 	.word	0x40011000

0800c288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	; 0x28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c290:	f107 0314 	add.w	r3, r7, #20
 800c294:	2200      	movs	r2, #0
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	605a      	str	r2, [r3, #4]
 800c29a:	609a      	str	r2, [r3, #8]
 800c29c:	60da      	str	r2, [r3, #12]
 800c29e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a1e      	ldr	r2, [pc, #120]	; (800c320 <HAL_UART_MspInit+0x98>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d136      	bne.n	800c318 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c2aa:	4b1e      	ldr	r3, [pc, #120]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b0:	4a1c      	ldr	r2, [pc, #112]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2b2:	f043 0310 	orr.w	r3, r3, #16
 800c2b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c2ba:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2c0:	f003 0310 	and.w	r3, r3, #16
 800c2c4:	613b      	str	r3, [r7, #16]
 800c2c6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2c8:	4b16      	ldr	r3, [pc, #88]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ce:	4a15      	ldr	r2, [pc, #84]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2d0:	f043 0301 	orr.w	r3, r3, #1
 800c2d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2d8:	4b12      	ldr	r3, [pc, #72]	; (800c324 <HAL_UART_MspInit+0x9c>)
 800c2da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c2e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c2ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c2f8:	2307      	movs	r3, #7
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2fc:	f107 0314 	add.w	r3, r7, #20
 800c300:	4619      	mov	r1, r3
 800c302:	4809      	ldr	r0, [pc, #36]	; (800c328 <HAL_UART_MspInit+0xa0>)
 800c304:	f7f8 f8de 	bl	80044c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c308:	2200      	movs	r2, #0
 800c30a:	2100      	movs	r1, #0
 800c30c:	2025      	movs	r0, #37	; 0x25
 800c30e:	f7f6 f85c 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c312:	2025      	movs	r0, #37	; 0x25
 800c314:	f7f6 f873 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c318:	bf00      	nop
 800c31a:	3728      	adds	r7, #40	; 0x28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	40011000 	.word	0x40011000
 800c324:	58024400 	.word	0x58024400
 800c328:	58020000 	.word	0x58020000

0800c32c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800c334:	1d39      	adds	r1, r7, #4
 800c336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c33a:	2201      	movs	r2, #1
 800c33c:	4803      	ldr	r0, [pc, #12]	; (800c34c <__io_putchar+0x20>)
 800c33e:	f7fc f9ff 	bl	8008740 <HAL_UART_Transmit>

  return ch;
 800c342:	687b      	ldr	r3, [r7, #4]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	240003e4 	.word	0x240003e4

0800c350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c350:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c356:	e003      	b.n	800c360 <LoopCopyDataInit>

0800c358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c358:	4b0c      	ldr	r3, [pc, #48]	; (800c38c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c35a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c35c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c35e:	3104      	adds	r1, #4

0800c360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c360:	480b      	ldr	r0, [pc, #44]	; (800c390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c362:	4b0c      	ldr	r3, [pc, #48]	; (800c394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c368:	d3f6      	bcc.n	800c358 <CopyDataInit>
  ldr  r2, =_sbss
 800c36a:	4a0b      	ldr	r2, [pc, #44]	; (800c398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c36c:	e002      	b.n	800c374 <LoopFillZerobss>

0800c36e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c36e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c370:	f842 3b04 	str.w	r3, [r2], #4

0800c374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c374:	4b09      	ldr	r3, [pc, #36]	; (800c39c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c378:	d3f9      	bcc.n	800c36e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c37a:	f7ff fe67 	bl	800c04c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c37e:	f000 f817 	bl	800c3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c382:	f7ff fb19 	bl	800b9b8 <main>
  bx  lr    
 800c386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c388:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800c38c:	0800f0d4 	.word	0x0800f0d4
  ldr  r0, =_sdata
 800c390:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800c394:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 800c398:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 800c39c:	24000474 	.word	0x24000474

0800c3a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c3a0:	e7fe      	b.n	800c3a0 <ADC3_IRQHandler>
	...

0800c3a4 <__errno>:
 800c3a4:	4b01      	ldr	r3, [pc, #4]	; (800c3ac <__errno+0x8>)
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	24000010 	.word	0x24000010

0800c3b0 <__libc_init_array>:
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	4e0d      	ldr	r6, [pc, #52]	; (800c3e8 <__libc_init_array+0x38>)
 800c3b4:	4c0d      	ldr	r4, [pc, #52]	; (800c3ec <__libc_init_array+0x3c>)
 800c3b6:	1ba4      	subs	r4, r4, r6
 800c3b8:	10a4      	asrs	r4, r4, #2
 800c3ba:	2500      	movs	r5, #0
 800c3bc:	42a5      	cmp	r5, r4
 800c3be:	d109      	bne.n	800c3d4 <__libc_init_array+0x24>
 800c3c0:	4e0b      	ldr	r6, [pc, #44]	; (800c3f0 <__libc_init_array+0x40>)
 800c3c2:	4c0c      	ldr	r4, [pc, #48]	; (800c3f4 <__libc_init_array+0x44>)
 800c3c4:	f002 fcb0 	bl	800ed28 <_init>
 800c3c8:	1ba4      	subs	r4, r4, r6
 800c3ca:	10a4      	asrs	r4, r4, #2
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	42a5      	cmp	r5, r4
 800c3d0:	d105      	bne.n	800c3de <__libc_init_array+0x2e>
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3d8:	4798      	blx	r3
 800c3da:	3501      	adds	r5, #1
 800c3dc:	e7ee      	b.n	800c3bc <__libc_init_array+0xc>
 800c3de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3e2:	4798      	blx	r3
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	e7f2      	b.n	800c3ce <__libc_init_array+0x1e>
 800c3e8:	0800f0cc 	.word	0x0800f0cc
 800c3ec:	0800f0cc 	.word	0x0800f0cc
 800c3f0:	0800f0cc 	.word	0x0800f0cc
 800c3f4:	0800f0d0 	.word	0x0800f0d0

0800c3f8 <memset>:
 800c3f8:	4402      	add	r2, r0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d100      	bne.n	800c402 <memset+0xa>
 800c400:	4770      	bx	lr
 800c402:	f803 1b01 	strb.w	r1, [r3], #1
 800c406:	e7f9      	b.n	800c3fc <memset+0x4>

0800c408 <__cvt>:
 800c408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40a:	ed2d 8b02 	vpush	{d8}
 800c40e:	eeb0 8b40 	vmov.f64	d8, d0
 800c412:	b085      	sub	sp, #20
 800c414:	4617      	mov	r7, r2
 800c416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c418:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c41a:	ee18 2a90 	vmov	r2, s17
 800c41e:	f025 0520 	bic.w	r5, r5, #32
 800c422:	2a00      	cmp	r2, #0
 800c424:	bfb6      	itet	lt
 800c426:	222d      	movlt	r2, #45	; 0x2d
 800c428:	2200      	movge	r2, #0
 800c42a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c42e:	2d46      	cmp	r5, #70	; 0x46
 800c430:	460c      	mov	r4, r1
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	d004      	beq.n	800c440 <__cvt+0x38>
 800c436:	2d45      	cmp	r5, #69	; 0x45
 800c438:	d100      	bne.n	800c43c <__cvt+0x34>
 800c43a:	3401      	adds	r4, #1
 800c43c:	2102      	movs	r1, #2
 800c43e:	e000      	b.n	800c442 <__cvt+0x3a>
 800c440:	2103      	movs	r1, #3
 800c442:	ab03      	add	r3, sp, #12
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	ab02      	add	r3, sp, #8
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	4622      	mov	r2, r4
 800c44c:	4633      	mov	r3, r6
 800c44e:	eeb0 0b48 	vmov.f64	d0, d8
 800c452:	f000 fddd 	bl	800d010 <_dtoa_r>
 800c456:	2d47      	cmp	r5, #71	; 0x47
 800c458:	d101      	bne.n	800c45e <__cvt+0x56>
 800c45a:	07fb      	lsls	r3, r7, #31
 800c45c:	d51e      	bpl.n	800c49c <__cvt+0x94>
 800c45e:	2d46      	cmp	r5, #70	; 0x46
 800c460:	eb00 0304 	add.w	r3, r0, r4
 800c464:	d10c      	bne.n	800c480 <__cvt+0x78>
 800c466:	7802      	ldrb	r2, [r0, #0]
 800c468:	2a30      	cmp	r2, #48	; 0x30
 800c46a:	d107      	bne.n	800c47c <__cvt+0x74>
 800c46c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	bf1c      	itt	ne
 800c476:	f1c4 0401 	rsbne	r4, r4, #1
 800c47a:	6034      	strne	r4, [r6, #0]
 800c47c:	6832      	ldr	r2, [r6, #0]
 800c47e:	4413      	add	r3, r2
 800c480:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c488:	d007      	beq.n	800c49a <__cvt+0x92>
 800c48a:	2130      	movs	r1, #48	; 0x30
 800c48c:	9a03      	ldr	r2, [sp, #12]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d204      	bcs.n	800c49c <__cvt+0x94>
 800c492:	1c54      	adds	r4, r2, #1
 800c494:	9403      	str	r4, [sp, #12]
 800c496:	7011      	strb	r1, [r2, #0]
 800c498:	e7f8      	b.n	800c48c <__cvt+0x84>
 800c49a:	9303      	str	r3, [sp, #12]
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4a0:	1a1b      	subs	r3, r3, r0
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	b005      	add	sp, #20
 800c4a6:	ecbd 8b02 	vpop	{d8}
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4ac <__exponent>:
 800c4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	bfba      	itte	lt
 800c4b4:	4249      	neglt	r1, r1
 800c4b6:	232d      	movlt	r3, #45	; 0x2d
 800c4b8:	232b      	movge	r3, #43	; 0x2b
 800c4ba:	2909      	cmp	r1, #9
 800c4bc:	f804 2b02 	strb.w	r2, [r4], #2
 800c4c0:	7043      	strb	r3, [r0, #1]
 800c4c2:	dd20      	ble.n	800c506 <__exponent+0x5a>
 800c4c4:	f10d 0307 	add.w	r3, sp, #7
 800c4c8:	461f      	mov	r7, r3
 800c4ca:	260a      	movs	r6, #10
 800c4cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4d0:	fb06 1115 	mls	r1, r6, r5, r1
 800c4d4:	3130      	adds	r1, #48	; 0x30
 800c4d6:	2d09      	cmp	r5, #9
 800c4d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4dc:	f103 32ff 	add.w	r2, r3, #4294967295
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	dc09      	bgt.n	800c4f8 <__exponent+0x4c>
 800c4e4:	3130      	adds	r1, #48	; 0x30
 800c4e6:	3b02      	subs	r3, #2
 800c4e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c4ec:	42bb      	cmp	r3, r7
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	d304      	bcc.n	800c4fc <__exponent+0x50>
 800c4f2:	1a10      	subs	r0, r2, r0
 800c4f4:	b003      	add	sp, #12
 800c4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	e7e7      	b.n	800c4cc <__exponent+0x20>
 800c4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c500:	f804 2b01 	strb.w	r2, [r4], #1
 800c504:	e7f2      	b.n	800c4ec <__exponent+0x40>
 800c506:	2330      	movs	r3, #48	; 0x30
 800c508:	4419      	add	r1, r3
 800c50a:	7083      	strb	r3, [r0, #2]
 800c50c:	1d02      	adds	r2, r0, #4
 800c50e:	70c1      	strb	r1, [r0, #3]
 800c510:	e7ef      	b.n	800c4f2 <__exponent+0x46>
 800c512:	0000      	movs	r0, r0
 800c514:	0000      	movs	r0, r0
	...

0800c518 <_printf_float>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	b08d      	sub	sp, #52	; 0x34
 800c51e:	460c      	mov	r4, r1
 800c520:	4616      	mov	r6, r2
 800c522:	461f      	mov	r7, r3
 800c524:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c528:	4605      	mov	r5, r0
 800c52a:	f001 fc37 	bl	800dd9c <_localeconv_r>
 800c52e:	f8d0 b000 	ldr.w	fp, [r0]
 800c532:	4658      	mov	r0, fp
 800c534:	f7f3 fed4 	bl	80002e0 <strlen>
 800c538:	2300      	movs	r3, #0
 800c53a:	930a      	str	r3, [sp, #40]	; 0x28
 800c53c:	f8d8 3000 	ldr.w	r3, [r8]
 800c540:	9005      	str	r0, [sp, #20]
 800c542:	3307      	adds	r3, #7
 800c544:	f023 0307 	bic.w	r3, r3, #7
 800c548:	f103 0108 	add.w	r1, r3, #8
 800c54c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	f8c8 1000 	str.w	r1, [r8]
 800c556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c55a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c55e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800c7e8 <_printf_float+0x2d0>
 800c562:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c566:	eeb0 6bc0 	vabs.f64	d6, d0
 800c56a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c572:	dd24      	ble.n	800c5be <_printf_float+0xa6>
 800c574:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57c:	d502      	bpl.n	800c584 <_printf_float+0x6c>
 800c57e:	232d      	movs	r3, #45	; 0x2d
 800c580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c584:	499a      	ldr	r1, [pc, #616]	; (800c7f0 <_printf_float+0x2d8>)
 800c586:	4b9b      	ldr	r3, [pc, #620]	; (800c7f4 <_printf_float+0x2dc>)
 800c588:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c58c:	bf8c      	ite	hi
 800c58e:	4688      	movhi	r8, r1
 800c590:	4698      	movls	r8, r3
 800c592:	f022 0204 	bic.w	r2, r2, #4
 800c596:	2303      	movs	r3, #3
 800c598:	6123      	str	r3, [r4, #16]
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	f04f 0a00 	mov.w	sl, #0
 800c5a0:	9700      	str	r7, [sp, #0]
 800c5a2:	4633      	mov	r3, r6
 800c5a4:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 f9e1 	bl	800c970 <_printf_common>
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f040 8089 	bne.w	800c6c6 <_printf_float+0x1ae>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	b00d      	add	sp, #52	; 0x34
 800c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5be:	eeb4 0b40 	vcmp.f64	d0, d0
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	d702      	bvc.n	800c5ce <_printf_float+0xb6>
 800c5c8:	498b      	ldr	r1, [pc, #556]	; (800c7f8 <_printf_float+0x2e0>)
 800c5ca:	4b8c      	ldr	r3, [pc, #560]	; (800c7fc <_printf_float+0x2e4>)
 800c5cc:	e7dc      	b.n	800c588 <_printf_float+0x70>
 800c5ce:	6861      	ldr	r1, [r4, #4]
 800c5d0:	1c4b      	adds	r3, r1, #1
 800c5d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5d6:	ab0a      	add	r3, sp, #40	; 0x28
 800c5d8:	a809      	add	r0, sp, #36	; 0x24
 800c5da:	d13b      	bne.n	800c654 <_printf_float+0x13c>
 800c5dc:	2106      	movs	r1, #6
 800c5de:	6061      	str	r1, [r4, #4]
 800c5e0:	f04f 0c00 	mov.w	ip, #0
 800c5e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c5e8:	e9cd 0900 	strd	r0, r9, [sp]
 800c5ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5f0:	6022      	str	r2, [r4, #0]
 800c5f2:	6861      	ldr	r1, [r4, #4]
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f7ff ff07 	bl	800c408 <__cvt>
 800c5fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800c5fe:	2b47      	cmp	r3, #71	; 0x47
 800c600:	4680      	mov	r8, r0
 800c602:	d109      	bne.n	800c618 <_printf_float+0x100>
 800c604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c606:	1cd8      	adds	r0, r3, #3
 800c608:	db02      	blt.n	800c610 <_printf_float+0xf8>
 800c60a:	6862      	ldr	r2, [r4, #4]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	dd47      	ble.n	800c6a0 <_printf_float+0x188>
 800c610:	f1a9 0902 	sub.w	r9, r9, #2
 800c614:	fa5f f989 	uxtb.w	r9, r9
 800c618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c61e:	d824      	bhi.n	800c66a <_printf_float+0x152>
 800c620:	3901      	subs	r1, #1
 800c622:	464a      	mov	r2, r9
 800c624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c628:	9109      	str	r1, [sp, #36]	; 0x24
 800c62a:	f7ff ff3f 	bl	800c4ac <__exponent>
 800c62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c630:	1813      	adds	r3, r2, r0
 800c632:	2a01      	cmp	r2, #1
 800c634:	4682      	mov	sl, r0
 800c636:	6123      	str	r3, [r4, #16]
 800c638:	dc02      	bgt.n	800c640 <_printf_float+0x128>
 800c63a:	6822      	ldr	r2, [r4, #0]
 800c63c:	07d1      	lsls	r1, r2, #31
 800c63e:	d501      	bpl.n	800c644 <_printf_float+0x12c>
 800c640:	3301      	adds	r3, #1
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d0a9      	beq.n	800c5a0 <_printf_float+0x88>
 800c64c:	232d      	movs	r3, #45	; 0x2d
 800c64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c652:	e7a5      	b.n	800c5a0 <_printf_float+0x88>
 800c654:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800c658:	f000 8178 	beq.w	800c94c <_printf_float+0x434>
 800c65c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c660:	d1be      	bne.n	800c5e0 <_printf_float+0xc8>
 800c662:	2900      	cmp	r1, #0
 800c664:	d1bc      	bne.n	800c5e0 <_printf_float+0xc8>
 800c666:	2101      	movs	r1, #1
 800c668:	e7b9      	b.n	800c5de <_printf_float+0xc6>
 800c66a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c66e:	d119      	bne.n	800c6a4 <_printf_float+0x18c>
 800c670:	2900      	cmp	r1, #0
 800c672:	6863      	ldr	r3, [r4, #4]
 800c674:	dd0c      	ble.n	800c690 <_printf_float+0x178>
 800c676:	6121      	str	r1, [r4, #16]
 800c678:	b913      	cbnz	r3, 800c680 <_printf_float+0x168>
 800c67a:	6822      	ldr	r2, [r4, #0]
 800c67c:	07d2      	lsls	r2, r2, #31
 800c67e:	d502      	bpl.n	800c686 <_printf_float+0x16e>
 800c680:	3301      	adds	r3, #1
 800c682:	440b      	add	r3, r1
 800c684:	6123      	str	r3, [r4, #16]
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	65a3      	str	r3, [r4, #88]	; 0x58
 800c68a:	f04f 0a00 	mov.w	sl, #0
 800c68e:	e7d9      	b.n	800c644 <_printf_float+0x12c>
 800c690:	b913      	cbnz	r3, 800c698 <_printf_float+0x180>
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	07d0      	lsls	r0, r2, #31
 800c696:	d501      	bpl.n	800c69c <_printf_float+0x184>
 800c698:	3302      	adds	r3, #2
 800c69a:	e7f3      	b.n	800c684 <_printf_float+0x16c>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7f1      	b.n	800c684 <_printf_float+0x16c>
 800c6a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	db05      	blt.n	800c6b8 <_printf_float+0x1a0>
 800c6ac:	6822      	ldr	r2, [r4, #0]
 800c6ae:	6123      	str	r3, [r4, #16]
 800c6b0:	07d1      	lsls	r1, r2, #31
 800c6b2:	d5e8      	bpl.n	800c686 <_printf_float+0x16e>
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	e7e5      	b.n	800c684 <_printf_float+0x16c>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bfd4      	ite	le
 800c6bc:	f1c3 0302 	rsble	r3, r3, #2
 800c6c0:	2301      	movgt	r3, #1
 800c6c2:	4413      	add	r3, r2
 800c6c4:	e7de      	b.n	800c684 <_printf_float+0x16c>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	055a      	lsls	r2, r3, #21
 800c6ca:	d407      	bmi.n	800c6dc <_printf_float+0x1c4>
 800c6cc:	6923      	ldr	r3, [r4, #16]
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b8      	blx	r7
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d12a      	bne.n	800c730 <_printf_float+0x218>
 800c6da:	e76b      	b.n	800c5b4 <_printf_float+0x9c>
 800c6dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6e0:	f240 80de 	bls.w	800c8a0 <_printf_float+0x388>
 800c6e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c6e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	d133      	bne.n	800c75a <_printf_float+0x242>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4a42      	ldr	r2, [pc, #264]	; (800c800 <_printf_float+0x2e8>)
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b8      	blx	r7
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	f43f af59 	beq.w	800c5b4 <_printf_float+0x9c>
 800c702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c706:	429a      	cmp	r2, r3
 800c708:	db02      	blt.n	800c710 <_printf_float+0x1f8>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	07d8      	lsls	r0, r3, #31
 800c70e:	d50f      	bpl.n	800c730 <_printf_float+0x218>
 800c710:	9b05      	ldr	r3, [sp, #20]
 800c712:	465a      	mov	r2, fp
 800c714:	4631      	mov	r1, r6
 800c716:	4628      	mov	r0, r5
 800c718:	47b8      	blx	r7
 800c71a:	3001      	adds	r0, #1
 800c71c:	f43f af4a 	beq.w	800c5b4 <_printf_float+0x9c>
 800c720:	f04f 0800 	mov.w	r8, #0
 800c724:	f104 091a 	add.w	r9, r4, #26
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4543      	cmp	r3, r8
 800c72e:	dc09      	bgt.n	800c744 <_printf_float+0x22c>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	079b      	lsls	r3, r3, #30
 800c734:	f100 8105 	bmi.w	800c942 <_printf_float+0x42a>
 800c738:	68e0      	ldr	r0, [r4, #12]
 800c73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73c:	4298      	cmp	r0, r3
 800c73e:	bfb8      	it	lt
 800c740:	4618      	movlt	r0, r3
 800c742:	e739      	b.n	800c5b8 <_printf_float+0xa0>
 800c744:	2301      	movs	r3, #1
 800c746:	464a      	mov	r2, r9
 800c748:	4631      	mov	r1, r6
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	f43f af30 	beq.w	800c5b4 <_printf_float+0x9c>
 800c754:	f108 0801 	add.w	r8, r8, #1
 800c758:	e7e6      	b.n	800c728 <_printf_float+0x210>
 800c75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	dc2b      	bgt.n	800c7b8 <_printf_float+0x2a0>
 800c760:	2301      	movs	r3, #1
 800c762:	4a27      	ldr	r2, [pc, #156]	; (800c800 <_printf_float+0x2e8>)
 800c764:	4631      	mov	r1, r6
 800c766:	4628      	mov	r0, r5
 800c768:	47b8      	blx	r7
 800c76a:	3001      	adds	r0, #1
 800c76c:	f43f af22 	beq.w	800c5b4 <_printf_float+0x9c>
 800c770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c772:	b923      	cbnz	r3, 800c77e <_printf_float+0x266>
 800c774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c776:	b913      	cbnz	r3, 800c77e <_printf_float+0x266>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	07d9      	lsls	r1, r3, #31
 800c77c:	d5d8      	bpl.n	800c730 <_printf_float+0x218>
 800c77e:	9b05      	ldr	r3, [sp, #20]
 800c780:	465a      	mov	r2, fp
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	f43f af13 	beq.w	800c5b4 <_printf_float+0x9c>
 800c78e:	f04f 0900 	mov.w	r9, #0
 800c792:	f104 0a1a 	add.w	sl, r4, #26
 800c796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c798:	425b      	negs	r3, r3
 800c79a:	454b      	cmp	r3, r9
 800c79c:	dc01      	bgt.n	800c7a2 <_printf_float+0x28a>
 800c79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a0:	e795      	b.n	800c6ce <_printf_float+0x1b6>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b8      	blx	r7
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	f43f af01 	beq.w	800c5b4 <_printf_float+0x9c>
 800c7b2:	f109 0901 	add.w	r9, r9, #1
 800c7b6:	e7ee      	b.n	800c796 <_printf_float+0x27e>
 800c7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	bfa8      	it	ge
 800c7c0:	461a      	movge	r2, r3
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	4691      	mov	r9, r2
 800c7c6:	dd07      	ble.n	800c7d8 <_printf_float+0x2c0>
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f aeee 	beq.w	800c5b4 <_printf_float+0x9c>
 800c7d8:	f104 031a 	add.w	r3, r4, #26
 800c7dc:	f04f 0a00 	mov.w	sl, #0
 800c7e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7e4:	9307      	str	r3, [sp, #28]
 800c7e6:	e017      	b.n	800c818 <_printf_float+0x300>
 800c7e8:	ffffffff 	.word	0xffffffff
 800c7ec:	7fefffff 	.word	0x7fefffff
 800c7f0:	0800ee08 	.word	0x0800ee08
 800c7f4:	0800ee04 	.word	0x0800ee04
 800c7f8:	0800ee10 	.word	0x0800ee10
 800c7fc:	0800ee0c 	.word	0x0800ee0c
 800c800:	0800ee14 	.word	0x0800ee14
 800c804:	2301      	movs	r3, #1
 800c806:	9a07      	ldr	r2, [sp, #28]
 800c808:	4631      	mov	r1, r6
 800c80a:	4628      	mov	r0, r5
 800c80c:	47b8      	blx	r7
 800c80e:	3001      	adds	r0, #1
 800c810:	f43f aed0 	beq.w	800c5b4 <_printf_float+0x9c>
 800c814:	f10a 0a01 	add.w	sl, sl, #1
 800c818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c81a:	9306      	str	r3, [sp, #24]
 800c81c:	eba3 0309 	sub.w	r3, r3, r9
 800c820:	4553      	cmp	r3, sl
 800c822:	dcef      	bgt.n	800c804 <_printf_float+0x2ec>
 800c824:	9b06      	ldr	r3, [sp, #24]
 800c826:	4498      	add	r8, r3
 800c828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c82c:	429a      	cmp	r2, r3
 800c82e:	db15      	blt.n	800c85c <_printf_float+0x344>
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	07da      	lsls	r2, r3, #31
 800c834:	d412      	bmi.n	800c85c <_printf_float+0x344>
 800c836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c838:	9a06      	ldr	r2, [sp, #24]
 800c83a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c83c:	1a9a      	subs	r2, r3, r2
 800c83e:	eba3 0a01 	sub.w	sl, r3, r1
 800c842:	4592      	cmp	sl, r2
 800c844:	bfa8      	it	ge
 800c846:	4692      	movge	sl, r2
 800c848:	f1ba 0f00 	cmp.w	sl, #0
 800c84c:	dc0e      	bgt.n	800c86c <_printf_float+0x354>
 800c84e:	f04f 0800 	mov.w	r8, #0
 800c852:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c856:	f104 091a 	add.w	r9, r4, #26
 800c85a:	e019      	b.n	800c890 <_printf_float+0x378>
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	465a      	mov	r2, fp
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	47b8      	blx	r7
 800c866:	3001      	adds	r0, #1
 800c868:	d1e5      	bne.n	800c836 <_printf_float+0x31e>
 800c86a:	e6a3      	b.n	800c5b4 <_printf_float+0x9c>
 800c86c:	4653      	mov	r3, sl
 800c86e:	4642      	mov	r2, r8
 800c870:	4631      	mov	r1, r6
 800c872:	4628      	mov	r0, r5
 800c874:	47b8      	blx	r7
 800c876:	3001      	adds	r0, #1
 800c878:	d1e9      	bne.n	800c84e <_printf_float+0x336>
 800c87a:	e69b      	b.n	800c5b4 <_printf_float+0x9c>
 800c87c:	2301      	movs	r3, #1
 800c87e:	464a      	mov	r2, r9
 800c880:	4631      	mov	r1, r6
 800c882:	4628      	mov	r0, r5
 800c884:	47b8      	blx	r7
 800c886:	3001      	adds	r0, #1
 800c888:	f43f ae94 	beq.w	800c5b4 <_printf_float+0x9c>
 800c88c:	f108 0801 	add.w	r8, r8, #1
 800c890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	eba3 030a 	sub.w	r3, r3, sl
 800c89a:	4543      	cmp	r3, r8
 800c89c:	dcee      	bgt.n	800c87c <_printf_float+0x364>
 800c89e:	e747      	b.n	800c730 <_printf_float+0x218>
 800c8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a2:	2a01      	cmp	r2, #1
 800c8a4:	dc01      	bgt.n	800c8aa <_printf_float+0x392>
 800c8a6:	07db      	lsls	r3, r3, #31
 800c8a8:	d539      	bpl.n	800c91e <_printf_float+0x406>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	f43f ae7d 	beq.w	800c5b4 <_printf_float+0x9c>
 800c8ba:	9b05      	ldr	r3, [sp, #20]
 800c8bc:	465a      	mov	r2, fp
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f108 0801 	add.w	r8, r8, #1
 800c8ca:	f43f ae73 	beq.w	800c5b4 <_printf_float+0x9c>
 800c8ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8dc:	f103 33ff 	add.w	r3, r3, #4294967295
 800c8e0:	d018      	beq.n	800c914 <_printf_float+0x3fc>
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d10e      	bne.n	800c90c <_printf_float+0x3f4>
 800c8ee:	e661      	b.n	800c5b4 <_printf_float+0x9c>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	464a      	mov	r2, r9
 800c8f4:	4631      	mov	r1, r6
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	47b8      	blx	r7
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f43f ae5a 	beq.w	800c5b4 <_printf_float+0x9c>
 800c900:	f108 0801 	add.w	r8, r8, #1
 800c904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c906:	3b01      	subs	r3, #1
 800c908:	4543      	cmp	r3, r8
 800c90a:	dcf1      	bgt.n	800c8f0 <_printf_float+0x3d8>
 800c90c:	4653      	mov	r3, sl
 800c90e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c912:	e6dd      	b.n	800c6d0 <_printf_float+0x1b8>
 800c914:	f04f 0800 	mov.w	r8, #0
 800c918:	f104 091a 	add.w	r9, r4, #26
 800c91c:	e7f2      	b.n	800c904 <_printf_float+0x3ec>
 800c91e:	2301      	movs	r3, #1
 800c920:	e7df      	b.n	800c8e2 <_printf_float+0x3ca>
 800c922:	2301      	movs	r3, #1
 800c924:	464a      	mov	r2, r9
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	f43f ae41 	beq.w	800c5b4 <_printf_float+0x9c>
 800c932:	f108 0801 	add.w	r8, r8, #1
 800c936:	68e3      	ldr	r3, [r4, #12]
 800c938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c93a:	1a9b      	subs	r3, r3, r2
 800c93c:	4543      	cmp	r3, r8
 800c93e:	dcf0      	bgt.n	800c922 <_printf_float+0x40a>
 800c940:	e6fa      	b.n	800c738 <_printf_float+0x220>
 800c942:	f04f 0800 	mov.w	r8, #0
 800c946:	f104 0919 	add.w	r9, r4, #25
 800c94a:	e7f4      	b.n	800c936 <_printf_float+0x41e>
 800c94c:	2900      	cmp	r1, #0
 800c94e:	f43f ae8a 	beq.w	800c666 <_printf_float+0x14e>
 800c952:	f04f 0c00 	mov.w	ip, #0
 800c956:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c95a:	e9cd 0900 	strd	r0, r9, [sp]
 800c95e:	6022      	str	r2, [r4, #0]
 800c960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fd4f 	bl	800c408 <__cvt>
 800c96a:	4680      	mov	r8, r0
 800c96c:	e64a      	b.n	800c604 <_printf_float+0xec>
 800c96e:	bf00      	nop

0800c970 <_printf_common>:
 800c970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	4691      	mov	r9, r2
 800c976:	461f      	mov	r7, r3
 800c978:	688a      	ldr	r2, [r1, #8]
 800c97a:	690b      	ldr	r3, [r1, #16]
 800c97c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c980:	4293      	cmp	r3, r2
 800c982:	bfb8      	it	lt
 800c984:	4613      	movlt	r3, r2
 800c986:	f8c9 3000 	str.w	r3, [r9]
 800c98a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c98e:	4606      	mov	r6, r0
 800c990:	460c      	mov	r4, r1
 800c992:	b112      	cbz	r2, 800c99a <_printf_common+0x2a>
 800c994:	3301      	adds	r3, #1
 800c996:	f8c9 3000 	str.w	r3, [r9]
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	0699      	lsls	r1, r3, #26
 800c99e:	bf42      	ittt	mi
 800c9a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c9a4:	3302      	addmi	r3, #2
 800c9a6:	f8c9 3000 	strmi.w	r3, [r9]
 800c9aa:	6825      	ldr	r5, [r4, #0]
 800c9ac:	f015 0506 	ands.w	r5, r5, #6
 800c9b0:	d107      	bne.n	800c9c2 <_printf_common+0x52>
 800c9b2:	f104 0a19 	add.w	sl, r4, #25
 800c9b6:	68e3      	ldr	r3, [r4, #12]
 800c9b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c9bc:	1a9b      	subs	r3, r3, r2
 800c9be:	42ab      	cmp	r3, r5
 800c9c0:	dc28      	bgt.n	800ca14 <_printf_common+0xa4>
 800c9c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	3300      	adds	r3, #0
 800c9ca:	bf18      	it	ne
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	0692      	lsls	r2, r2, #26
 800c9d0:	d42d      	bmi.n	800ca2e <_printf_common+0xbe>
 800c9d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	4630      	mov	r0, r6
 800c9da:	47c0      	blx	r8
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d020      	beq.n	800ca22 <_printf_common+0xb2>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	68e5      	ldr	r5, [r4, #12]
 800c9e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c9e8:	f003 0306 	and.w	r3, r3, #6
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	bf08      	it	eq
 800c9f0:	1aad      	subeq	r5, r5, r2
 800c9f2:	68a3      	ldr	r3, [r4, #8]
 800c9f4:	6922      	ldr	r2, [r4, #16]
 800c9f6:	bf0c      	ite	eq
 800c9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9fc:	2500      	movne	r5, #0
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	bfc4      	itt	gt
 800ca02:	1a9b      	subgt	r3, r3, r2
 800ca04:	18ed      	addgt	r5, r5, r3
 800ca06:	f04f 0900 	mov.w	r9, #0
 800ca0a:	341a      	adds	r4, #26
 800ca0c:	454d      	cmp	r5, r9
 800ca0e:	d11a      	bne.n	800ca46 <_printf_common+0xd6>
 800ca10:	2000      	movs	r0, #0
 800ca12:	e008      	b.n	800ca26 <_printf_common+0xb6>
 800ca14:	2301      	movs	r3, #1
 800ca16:	4652      	mov	r2, sl
 800ca18:	4639      	mov	r1, r7
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	47c0      	blx	r8
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d103      	bne.n	800ca2a <_printf_common+0xba>
 800ca22:	f04f 30ff 	mov.w	r0, #4294967295
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	3501      	adds	r5, #1
 800ca2c:	e7c3      	b.n	800c9b6 <_printf_common+0x46>
 800ca2e:	18e1      	adds	r1, r4, r3
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	2030      	movs	r0, #48	; 0x30
 800ca34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca38:	4422      	add	r2, r4
 800ca3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca42:	3302      	adds	r3, #2
 800ca44:	e7c5      	b.n	800c9d2 <_printf_common+0x62>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	47c0      	blx	r8
 800ca50:	3001      	adds	r0, #1
 800ca52:	d0e6      	beq.n	800ca22 <_printf_common+0xb2>
 800ca54:	f109 0901 	add.w	r9, r9, #1
 800ca58:	e7d8      	b.n	800ca0c <_printf_common+0x9c>
	...

0800ca5c <_printf_i>:
 800ca5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ca64:	460c      	mov	r4, r1
 800ca66:	7e09      	ldrb	r1, [r1, #24]
 800ca68:	b085      	sub	sp, #20
 800ca6a:	296e      	cmp	r1, #110	; 0x6e
 800ca6c:	4617      	mov	r7, r2
 800ca6e:	4606      	mov	r6, r0
 800ca70:	4698      	mov	r8, r3
 800ca72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca74:	f000 80b3 	beq.w	800cbde <_printf_i+0x182>
 800ca78:	d822      	bhi.n	800cac0 <_printf_i+0x64>
 800ca7a:	2963      	cmp	r1, #99	; 0x63
 800ca7c:	d036      	beq.n	800caec <_printf_i+0x90>
 800ca7e:	d80a      	bhi.n	800ca96 <_printf_i+0x3a>
 800ca80:	2900      	cmp	r1, #0
 800ca82:	f000 80b9 	beq.w	800cbf8 <_printf_i+0x19c>
 800ca86:	2958      	cmp	r1, #88	; 0x58
 800ca88:	f000 8083 	beq.w	800cb92 <_printf_i+0x136>
 800ca8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ca94:	e032      	b.n	800cafc <_printf_i+0xa0>
 800ca96:	2964      	cmp	r1, #100	; 0x64
 800ca98:	d001      	beq.n	800ca9e <_printf_i+0x42>
 800ca9a:	2969      	cmp	r1, #105	; 0x69
 800ca9c:	d1f6      	bne.n	800ca8c <_printf_i+0x30>
 800ca9e:	6820      	ldr	r0, [r4, #0]
 800caa0:	6813      	ldr	r3, [r2, #0]
 800caa2:	0605      	lsls	r5, r0, #24
 800caa4:	f103 0104 	add.w	r1, r3, #4
 800caa8:	d52a      	bpl.n	800cb00 <_printf_i+0xa4>
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6011      	str	r1, [r2, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	da03      	bge.n	800caba <_printf_i+0x5e>
 800cab2:	222d      	movs	r2, #45	; 0x2d
 800cab4:	425b      	negs	r3, r3
 800cab6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800caba:	486f      	ldr	r0, [pc, #444]	; (800cc78 <_printf_i+0x21c>)
 800cabc:	220a      	movs	r2, #10
 800cabe:	e039      	b.n	800cb34 <_printf_i+0xd8>
 800cac0:	2973      	cmp	r1, #115	; 0x73
 800cac2:	f000 809d 	beq.w	800cc00 <_printf_i+0x1a4>
 800cac6:	d808      	bhi.n	800cada <_printf_i+0x7e>
 800cac8:	296f      	cmp	r1, #111	; 0x6f
 800caca:	d020      	beq.n	800cb0e <_printf_i+0xb2>
 800cacc:	2970      	cmp	r1, #112	; 0x70
 800cace:	d1dd      	bne.n	800ca8c <_printf_i+0x30>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	f043 0320 	orr.w	r3, r3, #32
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	e003      	b.n	800cae2 <_printf_i+0x86>
 800cada:	2975      	cmp	r1, #117	; 0x75
 800cadc:	d017      	beq.n	800cb0e <_printf_i+0xb2>
 800cade:	2978      	cmp	r1, #120	; 0x78
 800cae0:	d1d4      	bne.n	800ca8c <_printf_i+0x30>
 800cae2:	2378      	movs	r3, #120	; 0x78
 800cae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cae8:	4864      	ldr	r0, [pc, #400]	; (800cc7c <_printf_i+0x220>)
 800caea:	e055      	b.n	800cb98 <_printf_i+0x13c>
 800caec:	6813      	ldr	r3, [r2, #0]
 800caee:	1d19      	adds	r1, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6011      	str	r1, [r2, #0]
 800caf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cafc:	2301      	movs	r3, #1
 800cafe:	e08c      	b.n	800cc1a <_printf_i+0x1be>
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	6011      	str	r1, [r2, #0]
 800cb04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb08:	bf18      	it	ne
 800cb0a:	b21b      	sxthne	r3, r3
 800cb0c:	e7cf      	b.n	800caae <_printf_i+0x52>
 800cb0e:	6813      	ldr	r3, [r2, #0]
 800cb10:	6825      	ldr	r5, [r4, #0]
 800cb12:	1d18      	adds	r0, r3, #4
 800cb14:	6010      	str	r0, [r2, #0]
 800cb16:	0628      	lsls	r0, r5, #24
 800cb18:	d501      	bpl.n	800cb1e <_printf_i+0xc2>
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	e002      	b.n	800cb24 <_printf_i+0xc8>
 800cb1e:	0668      	lsls	r0, r5, #25
 800cb20:	d5fb      	bpl.n	800cb1a <_printf_i+0xbe>
 800cb22:	881b      	ldrh	r3, [r3, #0]
 800cb24:	4854      	ldr	r0, [pc, #336]	; (800cc78 <_printf_i+0x21c>)
 800cb26:	296f      	cmp	r1, #111	; 0x6f
 800cb28:	bf14      	ite	ne
 800cb2a:	220a      	movne	r2, #10
 800cb2c:	2208      	moveq	r2, #8
 800cb2e:	2100      	movs	r1, #0
 800cb30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb34:	6865      	ldr	r5, [r4, #4]
 800cb36:	60a5      	str	r5, [r4, #8]
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	f2c0 8095 	blt.w	800cc68 <_printf_i+0x20c>
 800cb3e:	6821      	ldr	r1, [r4, #0]
 800cb40:	f021 0104 	bic.w	r1, r1, #4
 800cb44:	6021      	str	r1, [r4, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d13d      	bne.n	800cbc6 <_printf_i+0x16a>
 800cb4a:	2d00      	cmp	r5, #0
 800cb4c:	f040 808e 	bne.w	800cc6c <_printf_i+0x210>
 800cb50:	4665      	mov	r5, ip
 800cb52:	2a08      	cmp	r2, #8
 800cb54:	d10b      	bne.n	800cb6e <_printf_i+0x112>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	07db      	lsls	r3, r3, #31
 800cb5a:	d508      	bpl.n	800cb6e <_printf_i+0x112>
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	6862      	ldr	r2, [r4, #4]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	bfde      	ittt	le
 800cb64:	2330      	movle	r3, #48	; 0x30
 800cb66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb6e:	ebac 0305 	sub.w	r3, ip, r5
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	f8cd 8000 	str.w	r8, [sp]
 800cb78:	463b      	mov	r3, r7
 800cb7a:	aa03      	add	r2, sp, #12
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff fef6 	bl	800c970 <_printf_common>
 800cb84:	3001      	adds	r0, #1
 800cb86:	d14d      	bne.n	800cc24 <_printf_i+0x1c8>
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	b005      	add	sp, #20
 800cb8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb92:	4839      	ldr	r0, [pc, #228]	; (800cc78 <_printf_i+0x21c>)
 800cb94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cb98:	6813      	ldr	r3, [r2, #0]
 800cb9a:	6821      	ldr	r1, [r4, #0]
 800cb9c:	1d1d      	adds	r5, r3, #4
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6015      	str	r5, [r2, #0]
 800cba2:	060a      	lsls	r2, r1, #24
 800cba4:	d50b      	bpl.n	800cbbe <_printf_i+0x162>
 800cba6:	07ca      	lsls	r2, r1, #31
 800cba8:	bf44      	itt	mi
 800cbaa:	f041 0120 	orrmi.w	r1, r1, #32
 800cbae:	6021      	strmi	r1, [r4, #0]
 800cbb0:	b91b      	cbnz	r3, 800cbba <_printf_i+0x15e>
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	f022 0220 	bic.w	r2, r2, #32
 800cbb8:	6022      	str	r2, [r4, #0]
 800cbba:	2210      	movs	r2, #16
 800cbbc:	e7b7      	b.n	800cb2e <_printf_i+0xd2>
 800cbbe:	064d      	lsls	r5, r1, #25
 800cbc0:	bf48      	it	mi
 800cbc2:	b29b      	uxthmi	r3, r3
 800cbc4:	e7ef      	b.n	800cba6 <_printf_i+0x14a>
 800cbc6:	4665      	mov	r5, ip
 800cbc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbcc:	fb02 3311 	mls	r3, r2, r1, r3
 800cbd0:	5cc3      	ldrb	r3, [r0, r3]
 800cbd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	2900      	cmp	r1, #0
 800cbda:	d1f5      	bne.n	800cbc8 <_printf_i+0x16c>
 800cbdc:	e7b9      	b.n	800cb52 <_printf_i+0xf6>
 800cbde:	6813      	ldr	r3, [r2, #0]
 800cbe0:	6825      	ldr	r5, [r4, #0]
 800cbe2:	6961      	ldr	r1, [r4, #20]
 800cbe4:	1d18      	adds	r0, r3, #4
 800cbe6:	6010      	str	r0, [r2, #0]
 800cbe8:	0628      	lsls	r0, r5, #24
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	d501      	bpl.n	800cbf2 <_printf_i+0x196>
 800cbee:	6019      	str	r1, [r3, #0]
 800cbf0:	e002      	b.n	800cbf8 <_printf_i+0x19c>
 800cbf2:	066a      	lsls	r2, r5, #25
 800cbf4:	d5fb      	bpl.n	800cbee <_printf_i+0x192>
 800cbf6:	8019      	strh	r1, [r3, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	6123      	str	r3, [r4, #16]
 800cbfc:	4665      	mov	r5, ip
 800cbfe:	e7b9      	b.n	800cb74 <_printf_i+0x118>
 800cc00:	6813      	ldr	r3, [r2, #0]
 800cc02:	1d19      	adds	r1, r3, #4
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	681d      	ldr	r5, [r3, #0]
 800cc08:	6862      	ldr	r2, [r4, #4]
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7f3 fb6f 	bl	80002f0 <memchr>
 800cc12:	b108      	cbz	r0, 800cc18 <_printf_i+0x1bc>
 800cc14:	1b40      	subs	r0, r0, r5
 800cc16:	6060      	str	r0, [r4, #4]
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	6123      	str	r3, [r4, #16]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc22:	e7a7      	b.n	800cb74 <_printf_i+0x118>
 800cc24:	6923      	ldr	r3, [r4, #16]
 800cc26:	462a      	mov	r2, r5
 800cc28:	4639      	mov	r1, r7
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	47c0      	blx	r8
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d0aa      	beq.n	800cb88 <_printf_i+0x12c>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	079b      	lsls	r3, r3, #30
 800cc36:	d413      	bmi.n	800cc60 <_printf_i+0x204>
 800cc38:	68e0      	ldr	r0, [r4, #12]
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	4298      	cmp	r0, r3
 800cc3e:	bfb8      	it	lt
 800cc40:	4618      	movlt	r0, r3
 800cc42:	e7a3      	b.n	800cb8c <_printf_i+0x130>
 800cc44:	2301      	movs	r3, #1
 800cc46:	464a      	mov	r2, r9
 800cc48:	4639      	mov	r1, r7
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	47c0      	blx	r8
 800cc4e:	3001      	adds	r0, #1
 800cc50:	d09a      	beq.n	800cb88 <_printf_i+0x12c>
 800cc52:	3501      	adds	r5, #1
 800cc54:	68e3      	ldr	r3, [r4, #12]
 800cc56:	9a03      	ldr	r2, [sp, #12]
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	42ab      	cmp	r3, r5
 800cc5c:	dcf2      	bgt.n	800cc44 <_printf_i+0x1e8>
 800cc5e:	e7eb      	b.n	800cc38 <_printf_i+0x1dc>
 800cc60:	2500      	movs	r5, #0
 800cc62:	f104 0919 	add.w	r9, r4, #25
 800cc66:	e7f5      	b.n	800cc54 <_printf_i+0x1f8>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1ac      	bne.n	800cbc6 <_printf_i+0x16a>
 800cc6c:	7803      	ldrb	r3, [r0, #0]
 800cc6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc76:	e76c      	b.n	800cb52 <_printf_i+0xf6>
 800cc78:	0800ee16 	.word	0x0800ee16
 800cc7c:	0800ee27 	.word	0x0800ee27

0800cc80 <iprintf>:
 800cc80:	b40f      	push	{r0, r1, r2, r3}
 800cc82:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <iprintf+0x2c>)
 800cc84:	b513      	push	{r0, r1, r4, lr}
 800cc86:	681c      	ldr	r4, [r3, #0]
 800cc88:	b124      	cbz	r4, 800cc94 <iprintf+0x14>
 800cc8a:	69a3      	ldr	r3, [r4, #24]
 800cc8c:	b913      	cbnz	r3, 800cc94 <iprintf+0x14>
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f000 fffa 	bl	800dc88 <__sinit>
 800cc94:	ab05      	add	r3, sp, #20
 800cc96:	9a04      	ldr	r2, [sp, #16]
 800cc98:	68a1      	ldr	r1, [r4, #8]
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f001 fcbd 	bl	800e61c <_vfiprintf_r>
 800cca2:	b002      	add	sp, #8
 800cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca8:	b004      	add	sp, #16
 800ccaa:	4770      	bx	lr
 800ccac:	24000010 	.word	0x24000010

0800ccb0 <_puts_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	460e      	mov	r6, r1
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	b118      	cbz	r0, 800ccc0 <_puts_r+0x10>
 800ccb8:	6983      	ldr	r3, [r0, #24]
 800ccba:	b90b      	cbnz	r3, 800ccc0 <_puts_r+0x10>
 800ccbc:	f000 ffe4 	bl	800dc88 <__sinit>
 800ccc0:	69ab      	ldr	r3, [r5, #24]
 800ccc2:	68ac      	ldr	r4, [r5, #8]
 800ccc4:	b913      	cbnz	r3, 800cccc <_puts_r+0x1c>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f000 ffde 	bl	800dc88 <__sinit>
 800cccc:	4b23      	ldr	r3, [pc, #140]	; (800cd5c <_puts_r+0xac>)
 800ccce:	429c      	cmp	r4, r3
 800ccd0:	d117      	bne.n	800cd02 <_puts_r+0x52>
 800ccd2:	686c      	ldr	r4, [r5, #4]
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	071b      	lsls	r3, r3, #28
 800ccd8:	d51d      	bpl.n	800cd16 <_puts_r+0x66>
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	b1db      	cbz	r3, 800cd16 <_puts_r+0x66>
 800ccde:	3e01      	subs	r6, #1
 800cce0:	68a3      	ldr	r3, [r4, #8]
 800cce2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cce6:	3b01      	subs	r3, #1
 800cce8:	60a3      	str	r3, [r4, #8]
 800ccea:	b9e9      	cbnz	r1, 800cd28 <_puts_r+0x78>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	da2e      	bge.n	800cd4e <_puts_r+0x9e>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	210a      	movs	r1, #10
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 f83f 	bl	800cd78 <__swbuf_r>
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	d011      	beq.n	800cd22 <_puts_r+0x72>
 800ccfe:	200a      	movs	r0, #10
 800cd00:	e011      	b.n	800cd26 <_puts_r+0x76>
 800cd02:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <_puts_r+0xb0>)
 800cd04:	429c      	cmp	r4, r3
 800cd06:	d101      	bne.n	800cd0c <_puts_r+0x5c>
 800cd08:	68ac      	ldr	r4, [r5, #8]
 800cd0a:	e7e3      	b.n	800ccd4 <_puts_r+0x24>
 800cd0c:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <_puts_r+0xb4>)
 800cd0e:	429c      	cmp	r4, r3
 800cd10:	bf08      	it	eq
 800cd12:	68ec      	ldreq	r4, [r5, #12]
 800cd14:	e7de      	b.n	800ccd4 <_puts_r+0x24>
 800cd16:	4621      	mov	r1, r4
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f000 f87f 	bl	800ce1c <__swsetup_r>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d0dd      	beq.n	800ccde <_puts_r+0x2e>
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da04      	bge.n	800cd36 <_puts_r+0x86>
 800cd2c:	69a2      	ldr	r2, [r4, #24]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	dc06      	bgt.n	800cd40 <_puts_r+0x90>
 800cd32:	290a      	cmp	r1, #10
 800cd34:	d004      	beq.n	800cd40 <_puts_r+0x90>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	6022      	str	r2, [r4, #0]
 800cd3c:	7019      	strb	r1, [r3, #0]
 800cd3e:	e7cf      	b.n	800cce0 <_puts_r+0x30>
 800cd40:	4622      	mov	r2, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f818 	bl	800cd78 <__swbuf_r>
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d1c9      	bne.n	800cce0 <_puts_r+0x30>
 800cd4c:	e7e9      	b.n	800cd22 <_puts_r+0x72>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	200a      	movs	r0, #10
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	6022      	str	r2, [r4, #0]
 800cd56:	7018      	strb	r0, [r3, #0]
 800cd58:	e7e5      	b.n	800cd26 <_puts_r+0x76>
 800cd5a:	bf00      	nop
 800cd5c:	0800ee68 	.word	0x0800ee68
 800cd60:	0800ee88 	.word	0x0800ee88
 800cd64:	0800ee48 	.word	0x0800ee48

0800cd68 <puts>:
 800cd68:	4b02      	ldr	r3, [pc, #8]	; (800cd74 <puts+0xc>)
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f7ff bf9f 	b.w	800ccb0 <_puts_r>
 800cd72:	bf00      	nop
 800cd74:	24000010 	.word	0x24000010

0800cd78 <__swbuf_r>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	460e      	mov	r6, r1
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	4605      	mov	r5, r0
 800cd80:	b118      	cbz	r0, 800cd8a <__swbuf_r+0x12>
 800cd82:	6983      	ldr	r3, [r0, #24]
 800cd84:	b90b      	cbnz	r3, 800cd8a <__swbuf_r+0x12>
 800cd86:	f000 ff7f 	bl	800dc88 <__sinit>
 800cd8a:	4b21      	ldr	r3, [pc, #132]	; (800ce10 <__swbuf_r+0x98>)
 800cd8c:	429c      	cmp	r4, r3
 800cd8e:	d12a      	bne.n	800cde6 <__swbuf_r+0x6e>
 800cd90:	686c      	ldr	r4, [r5, #4]
 800cd92:	69a3      	ldr	r3, [r4, #24]
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	071a      	lsls	r2, r3, #28
 800cd9a:	d52e      	bpl.n	800cdfa <__swbuf_r+0x82>
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	b363      	cbz	r3, 800cdfa <__swbuf_r+0x82>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	6820      	ldr	r0, [r4, #0]
 800cda4:	1ac0      	subs	r0, r0, r3
 800cda6:	6963      	ldr	r3, [r4, #20]
 800cda8:	b2f6      	uxtb	r6, r6
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	4637      	mov	r7, r6
 800cdae:	dc04      	bgt.n	800cdba <__swbuf_r+0x42>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 fefe 	bl	800dbb4 <_fflush_r>
 800cdb8:	bb28      	cbnz	r0, 800ce06 <__swbuf_r+0x8e>
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	701e      	strb	r6, [r3, #0]
 800cdc8:	6963      	ldr	r3, [r4, #20]
 800cdca:	3001      	adds	r0, #1
 800cdcc:	4283      	cmp	r3, r0
 800cdce:	d004      	beq.n	800cdda <__swbuf_r+0x62>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d519      	bpl.n	800ce0a <__swbuf_r+0x92>
 800cdd6:	2e0a      	cmp	r6, #10
 800cdd8:	d117      	bne.n	800ce0a <__swbuf_r+0x92>
 800cdda:	4621      	mov	r1, r4
 800cddc:	4628      	mov	r0, r5
 800cdde:	f000 fee9 	bl	800dbb4 <_fflush_r>
 800cde2:	b190      	cbz	r0, 800ce0a <__swbuf_r+0x92>
 800cde4:	e00f      	b.n	800ce06 <__swbuf_r+0x8e>
 800cde6:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <__swbuf_r+0x9c>)
 800cde8:	429c      	cmp	r4, r3
 800cdea:	d101      	bne.n	800cdf0 <__swbuf_r+0x78>
 800cdec:	68ac      	ldr	r4, [r5, #8]
 800cdee:	e7d0      	b.n	800cd92 <__swbuf_r+0x1a>
 800cdf0:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <__swbuf_r+0xa0>)
 800cdf2:	429c      	cmp	r4, r3
 800cdf4:	bf08      	it	eq
 800cdf6:	68ec      	ldreq	r4, [r5, #12]
 800cdf8:	e7cb      	b.n	800cd92 <__swbuf_r+0x1a>
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f000 f80d 	bl	800ce1c <__swsetup_r>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0cc      	beq.n	800cda0 <__swbuf_r+0x28>
 800ce06:	f04f 37ff 	mov.w	r7, #4294967295
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	0800ee68 	.word	0x0800ee68
 800ce14:	0800ee88 	.word	0x0800ee88
 800ce18:	0800ee48 	.word	0x0800ee48

0800ce1c <__swsetup_r>:
 800ce1c:	4b32      	ldr	r3, [pc, #200]	; (800cee8 <__swsetup_r+0xcc>)
 800ce1e:	b570      	push	{r4, r5, r6, lr}
 800ce20:	681d      	ldr	r5, [r3, #0]
 800ce22:	4606      	mov	r6, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	b125      	cbz	r5, 800ce32 <__swsetup_r+0x16>
 800ce28:	69ab      	ldr	r3, [r5, #24]
 800ce2a:	b913      	cbnz	r3, 800ce32 <__swsetup_r+0x16>
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 ff2b 	bl	800dc88 <__sinit>
 800ce32:	4b2e      	ldr	r3, [pc, #184]	; (800ceec <__swsetup_r+0xd0>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d10f      	bne.n	800ce58 <__swsetup_r+0x3c>
 800ce38:	686c      	ldr	r4, [r5, #4]
 800ce3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	0715      	lsls	r5, r2, #28
 800ce42:	d42c      	bmi.n	800ce9e <__swsetup_r+0x82>
 800ce44:	06d0      	lsls	r0, r2, #27
 800ce46:	d411      	bmi.n	800ce6c <__swsetup_r+0x50>
 800ce48:	2209      	movs	r2, #9
 800ce4a:	6032      	str	r2, [r6, #0]
 800ce4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	f04f 30ff 	mov.w	r0, #4294967295
 800ce56:	e03e      	b.n	800ced6 <__swsetup_r+0xba>
 800ce58:	4b25      	ldr	r3, [pc, #148]	; (800cef0 <__swsetup_r+0xd4>)
 800ce5a:	429c      	cmp	r4, r3
 800ce5c:	d101      	bne.n	800ce62 <__swsetup_r+0x46>
 800ce5e:	68ac      	ldr	r4, [r5, #8]
 800ce60:	e7eb      	b.n	800ce3a <__swsetup_r+0x1e>
 800ce62:	4b24      	ldr	r3, [pc, #144]	; (800cef4 <__swsetup_r+0xd8>)
 800ce64:	429c      	cmp	r4, r3
 800ce66:	bf08      	it	eq
 800ce68:	68ec      	ldreq	r4, [r5, #12]
 800ce6a:	e7e6      	b.n	800ce3a <__swsetup_r+0x1e>
 800ce6c:	0751      	lsls	r1, r2, #29
 800ce6e:	d512      	bpl.n	800ce96 <__swsetup_r+0x7a>
 800ce70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce72:	b141      	cbz	r1, 800ce86 <__swsetup_r+0x6a>
 800ce74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce78:	4299      	cmp	r1, r3
 800ce7a:	d002      	beq.n	800ce82 <__swsetup_r+0x66>
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f001 fafb 	bl	800e478 <_free_r>
 800ce82:	2300      	movs	r3, #0
 800ce84:	6363      	str	r3, [r4, #52]	; 0x34
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce8c:	81a3      	strh	r3, [r4, #12]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	f043 0308 	orr.w	r3, r3, #8
 800ce9c:	81a3      	strh	r3, [r4, #12]
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	b94b      	cbnz	r3, 800ceb6 <__swsetup_r+0x9a>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceac:	d003      	beq.n	800ceb6 <__swsetup_r+0x9a>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f000 ffa5 	bl	800de00 <__smakebuf_r>
 800ceb6:	89a2      	ldrh	r2, [r4, #12]
 800ceb8:	f012 0301 	ands.w	r3, r2, #1
 800cebc:	d00c      	beq.n	800ced8 <__swsetup_r+0xbc>
 800cebe:	2300      	movs	r3, #0
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	6963      	ldr	r3, [r4, #20]
 800cec4:	425b      	negs	r3, r3
 800cec6:	61a3      	str	r3, [r4, #24]
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b953      	cbnz	r3, 800cee2 <__swsetup_r+0xc6>
 800cecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ced4:	d1ba      	bne.n	800ce4c <__swsetup_r+0x30>
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	0792      	lsls	r2, r2, #30
 800ceda:	bf58      	it	pl
 800cedc:	6963      	ldrpl	r3, [r4, #20]
 800cede:	60a3      	str	r3, [r4, #8]
 800cee0:	e7f2      	b.n	800cec8 <__swsetup_r+0xac>
 800cee2:	2000      	movs	r0, #0
 800cee4:	e7f7      	b.n	800ced6 <__swsetup_r+0xba>
 800cee6:	bf00      	nop
 800cee8:	24000010 	.word	0x24000010
 800ceec:	0800ee68 	.word	0x0800ee68
 800cef0:	0800ee88 	.word	0x0800ee88
 800cef4:	0800ee48 	.word	0x0800ee48

0800cef8 <quorem>:
 800cef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	6903      	ldr	r3, [r0, #16]
 800cefe:	690c      	ldr	r4, [r1, #16]
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	4680      	mov	r8, r0
 800cf04:	f2c0 8082 	blt.w	800d00c <quorem+0x114>
 800cf08:	3c01      	subs	r4, #1
 800cf0a:	f101 0714 	add.w	r7, r1, #20
 800cf0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cf12:	f100 0614 	add.w	r6, r0, #20
 800cf16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cf1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cf1e:	eb06 030c 	add.w	r3, r6, ip
 800cf22:	3501      	adds	r5, #1
 800cf24:	eb07 090c 	add.w	r9, r7, ip
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	fbb0 f5f5 	udiv	r5, r0, r5
 800cf2e:	b395      	cbz	r5, 800cf96 <quorem+0x9e>
 800cf30:	f04f 0a00 	mov.w	sl, #0
 800cf34:	4638      	mov	r0, r7
 800cf36:	46b6      	mov	lr, r6
 800cf38:	46d3      	mov	fp, sl
 800cf3a:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf3e:	b293      	uxth	r3, r2
 800cf40:	fb05 a303 	mla	r3, r5, r3, sl
 800cf44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	ebab 0303 	sub.w	r3, fp, r3
 800cf4e:	0c12      	lsrs	r2, r2, #16
 800cf50:	f8de b000 	ldr.w	fp, [lr]
 800cf54:	fb05 a202 	mla	r2, r5, r2, sl
 800cf58:	fa13 f38b 	uxtah	r3, r3, fp
 800cf5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cf60:	fa1f fb82 	uxth.w	fp, r2
 800cf64:	f8de 2000 	ldr.w	r2, [lr]
 800cf68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cf6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf76:	4581      	cmp	r9, r0
 800cf78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cf7c:	f84e 3b04 	str.w	r3, [lr], #4
 800cf80:	d2db      	bcs.n	800cf3a <quorem+0x42>
 800cf82:	f856 300c 	ldr.w	r3, [r6, ip]
 800cf86:	b933      	cbnz	r3, 800cf96 <quorem+0x9e>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	3b04      	subs	r3, #4
 800cf8c:	429e      	cmp	r6, r3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	d330      	bcc.n	800cff4 <quorem+0xfc>
 800cf92:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf96:	4640      	mov	r0, r8
 800cf98:	f001 f99a 	bl	800e2d0 <__mcmp>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	db25      	blt.n	800cfec <quorem+0xf4>
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f04f 0c00 	mov.w	ip, #0
 800cfa8:	f857 2b04 	ldr.w	r2, [r7], #4
 800cfac:	f8d0 e000 	ldr.w	lr, [r0]
 800cfb0:	b293      	uxth	r3, r2
 800cfb2:	ebac 0303 	sub.w	r3, ip, r3
 800cfb6:	0c12      	lsrs	r2, r2, #16
 800cfb8:	fa13 f38e 	uxtah	r3, r3, lr
 800cfbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfca:	45b9      	cmp	r9, r7
 800cfcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfd0:	f840 3b04 	str.w	r3, [r0], #4
 800cfd4:	d2e8      	bcs.n	800cfa8 <quorem+0xb0>
 800cfd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cfda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cfde:	b92a      	cbnz	r2, 800cfec <quorem+0xf4>
 800cfe0:	3b04      	subs	r3, #4
 800cfe2:	429e      	cmp	r6, r3
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	d30b      	bcc.n	800d000 <quorem+0x108>
 800cfe8:	f8c8 4010 	str.w	r4, [r8, #16]
 800cfec:	4628      	mov	r0, r5
 800cfee:	b003      	add	sp, #12
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	6812      	ldr	r2, [r2, #0]
 800cff6:	3b04      	subs	r3, #4
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	d1ca      	bne.n	800cf92 <quorem+0x9a>
 800cffc:	3c01      	subs	r4, #1
 800cffe:	e7c5      	b.n	800cf8c <quorem+0x94>
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	3b04      	subs	r3, #4
 800d004:	2a00      	cmp	r2, #0
 800d006:	d1ef      	bne.n	800cfe8 <quorem+0xf0>
 800d008:	3c01      	subs	r4, #1
 800d00a:	e7ea      	b.n	800cfe2 <quorem+0xea>
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7ee      	b.n	800cfee <quorem+0xf6>

0800d010 <_dtoa_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	ec57 6b10 	vmov	r6, r7, d0
 800d018:	b095      	sub	sp, #84	; 0x54
 800d01a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d01c:	9108      	str	r1, [sp, #32]
 800d01e:	4604      	mov	r4, r0
 800d020:	920a      	str	r2, [sp, #40]	; 0x28
 800d022:	9311      	str	r3, [sp, #68]	; 0x44
 800d024:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d028:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d02c:	b93d      	cbnz	r5, 800d03e <_dtoa_r+0x2e>
 800d02e:	2010      	movs	r0, #16
 800d030:	f000 ff26 	bl	800de80 <malloc>
 800d034:	6260      	str	r0, [r4, #36]	; 0x24
 800d036:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d03a:	6005      	str	r5, [r0, #0]
 800d03c:	60c5      	str	r5, [r0, #12]
 800d03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d040:	6819      	ldr	r1, [r3, #0]
 800d042:	b151      	cbz	r1, 800d05a <_dtoa_r+0x4a>
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	604a      	str	r2, [r1, #4]
 800d048:	2301      	movs	r3, #1
 800d04a:	4093      	lsls	r3, r2
 800d04c:	608b      	str	r3, [r1, #8]
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 ff5d 	bl	800df0e <_Bfree>
 800d054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	1e3b      	subs	r3, r7, #0
 800d05c:	bfb9      	ittee	lt
 800d05e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d062:	9303      	strlt	r3, [sp, #12]
 800d064:	2300      	movge	r3, #0
 800d066:	f8c8 3000 	strge.w	r3, [r8]
 800d06a:	9d03      	ldr	r5, [sp, #12]
 800d06c:	4bac      	ldr	r3, [pc, #688]	; (800d320 <_dtoa_r+0x310>)
 800d06e:	bfbc      	itt	lt
 800d070:	2201      	movlt	r2, #1
 800d072:	f8c8 2000 	strlt.w	r2, [r8]
 800d076:	43ab      	bics	r3, r5
 800d078:	d11b      	bne.n	800d0b2 <_dtoa_r+0xa2>
 800d07a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d07c:	f242 730f 	movw	r3, #9999	; 0x270f
 800d080:	6013      	str	r3, [r2, #0]
 800d082:	9b02      	ldr	r3, [sp, #8]
 800d084:	b923      	cbnz	r3, 800d090 <_dtoa_r+0x80>
 800d086:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d08a:	2d00      	cmp	r5, #0
 800d08c:	f000 84dd 	beq.w	800da4a <_dtoa_r+0xa3a>
 800d090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d092:	b953      	cbnz	r3, 800d0aa <_dtoa_r+0x9a>
 800d094:	4ba3      	ldr	r3, [pc, #652]	; (800d324 <_dtoa_r+0x314>)
 800d096:	e020      	b.n	800d0da <_dtoa_r+0xca>
 800d098:	4ba3      	ldr	r3, [pc, #652]	; (800d328 <_dtoa_r+0x318>)
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	3308      	adds	r3, #8
 800d09e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	9804      	ldr	r0, [sp, #16]
 800d0a4:	b015      	add	sp, #84	; 0x54
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	4b9e      	ldr	r3, [pc, #632]	; (800d324 <_dtoa_r+0x314>)
 800d0ac:	9304      	str	r3, [sp, #16]
 800d0ae:	3303      	adds	r3, #3
 800d0b0:	e7f5      	b.n	800d09e <_dtoa_r+0x8e>
 800d0b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0be:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d0c2:	d10c      	bne.n	800d0de <_dtoa_r+0xce>
 800d0c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 84b9 	beq.w	800da44 <_dtoa_r+0xa34>
 800d0d2:	4b96      	ldr	r3, [pc, #600]	; (800d32c <_dtoa_r+0x31c>)
 800d0d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	e7e1      	b.n	800d0a2 <_dtoa_r+0x92>
 800d0de:	a913      	add	r1, sp, #76	; 0x4c
 800d0e0:	aa12      	add	r2, sp, #72	; 0x48
 800d0e2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f001 f969 	bl	800e3be <__d2b>
 800d0ec:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d0f0:	9001      	str	r0, [sp, #4]
 800d0f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d0f4:	2e00      	cmp	r6, #0
 800d0f6:	d046      	beq.n	800d186 <_dtoa_r+0x176>
 800d0f8:	9805      	ldr	r0, [sp, #20]
 800d0fa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d102:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d106:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d10a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d10e:	2700      	movs	r7, #0
 800d110:	ee07 aa90 	vmov	s15, sl
 800d114:	ec43 2b16 	vmov	d6, r2, r3
 800d118:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d11c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d308 <_dtoa_r+0x2f8>
 800d120:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d124:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d128:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d310 <_dtoa_r+0x300>
 800d12c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d130:	eeb0 7b46 	vmov.f64	d7, d6
 800d134:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d318 <_dtoa_r+0x308>
 800d138:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d13c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d140:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d148:	ee16 ba90 	vmov	fp, s13
 800d14c:	d508      	bpl.n	800d160 <_dtoa_r+0x150>
 800d14e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d152:	eeb4 6b47 	vcmp.f64	d6, d7
 800d156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15a:	bf18      	it	ne
 800d15c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d160:	f1bb 0f16 	cmp.w	fp, #22
 800d164:	d834      	bhi.n	800d1d0 <_dtoa_r+0x1c0>
 800d166:	4b72      	ldr	r3, [pc, #456]	; (800d330 <_dtoa_r+0x320>)
 800d168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d16c:	ed93 7b00 	vldr	d7, [r3]
 800d170:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d174:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17c:	dd01      	ble.n	800d182 <_dtoa_r+0x172>
 800d17e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d182:	2300      	movs	r3, #0
 800d184:	e025      	b.n	800d1d2 <_dtoa_r+0x1c2>
 800d186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d188:	eb01 0a03 	add.w	sl, r1, r3
 800d18c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d190:	2b20      	cmp	r3, #32
 800d192:	dd17      	ble.n	800d1c4 <_dtoa_r+0x1b4>
 800d194:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d198:	9a02      	ldr	r2, [sp, #8]
 800d19a:	409d      	lsls	r5, r3
 800d19c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1a4:	432b      	orrs	r3, r5
 800d1a6:	ee07 3a90 	vmov	s15, r3
 800d1aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d1ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d1b6:	9805      	ldr	r0, [sp, #20]
 800d1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1bc:	2701      	movs	r7, #1
 800d1be:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d1c2:	e7a5      	b.n	800d110 <_dtoa_r+0x100>
 800d1c4:	9a02      	ldr	r2, [sp, #8]
 800d1c6:	f1c3 0320 	rsb	r3, r3, #32
 800d1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ce:	e7ea      	b.n	800d1a6 <_dtoa_r+0x196>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	eba1 0a0a 	sub.w	sl, r1, sl
 800d1d6:	9310      	str	r3, [sp, #64]	; 0x40
 800d1d8:	f1ba 0301 	subs.w	r3, sl, #1
 800d1dc:	9307      	str	r3, [sp, #28]
 800d1de:	bf43      	ittte	mi
 800d1e0:	2300      	movmi	r3, #0
 800d1e2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d1e6:	9307      	strmi	r3, [sp, #28]
 800d1e8:	f04f 0a00 	movpl.w	sl, #0
 800d1ec:	f1bb 0f00 	cmp.w	fp, #0
 800d1f0:	db19      	blt.n	800d226 <_dtoa_r+0x216>
 800d1f2:	9b07      	ldr	r3, [sp, #28]
 800d1f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d1f8:	445b      	add	r3, fp
 800d1fa:	9307      	str	r3, [sp, #28]
 800d1fc:	f04f 0800 	mov.w	r8, #0
 800d200:	9b08      	ldr	r3, [sp, #32]
 800d202:	2b09      	cmp	r3, #9
 800d204:	d866      	bhi.n	800d2d4 <_dtoa_r+0x2c4>
 800d206:	2b05      	cmp	r3, #5
 800d208:	bfc4      	itt	gt
 800d20a:	3b04      	subgt	r3, #4
 800d20c:	9308      	strgt	r3, [sp, #32]
 800d20e:	9b08      	ldr	r3, [sp, #32]
 800d210:	f1a3 0302 	sub.w	r3, r3, #2
 800d214:	bfcc      	ite	gt
 800d216:	2500      	movgt	r5, #0
 800d218:	2501      	movle	r5, #1
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	d866      	bhi.n	800d2ec <_dtoa_r+0x2dc>
 800d21e:	e8df f003 	tbb	[pc, r3]
 800d222:	5755      	.short	0x5755
 800d224:	4909      	.short	0x4909
 800d226:	2300      	movs	r3, #0
 800d228:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d22c:	f1cb 0800 	rsb	r8, fp, #0
 800d230:	930b      	str	r3, [sp, #44]	; 0x2c
 800d232:	e7e5      	b.n	800d200 <_dtoa_r+0x1f0>
 800d234:	2301      	movs	r3, #1
 800d236:	9309      	str	r3, [sp, #36]	; 0x24
 800d238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dd59      	ble.n	800d2f2 <_dtoa_r+0x2e2>
 800d23e:	9306      	str	r3, [sp, #24]
 800d240:	4699      	mov	r9, r3
 800d242:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d244:	2200      	movs	r2, #0
 800d246:	6072      	str	r2, [r6, #4]
 800d248:	2204      	movs	r2, #4
 800d24a:	f102 0014 	add.w	r0, r2, #20
 800d24e:	4298      	cmp	r0, r3
 800d250:	6871      	ldr	r1, [r6, #4]
 800d252:	d953      	bls.n	800d2fc <_dtoa_r+0x2ec>
 800d254:	4620      	mov	r0, r4
 800d256:	f000 fe26 	bl	800dea6 <_Balloc>
 800d25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d25c:	6030      	str	r0, [r6, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	9304      	str	r3, [sp, #16]
 800d262:	f1b9 0f0e 	cmp.w	r9, #14
 800d266:	f200 80c2 	bhi.w	800d3ee <_dtoa_r+0x3de>
 800d26a:	2d00      	cmp	r5, #0
 800d26c:	f000 80bf 	beq.w	800d3ee <_dtoa_r+0x3de>
 800d270:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d274:	f1bb 0f00 	cmp.w	fp, #0
 800d278:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d27c:	f340 80e6 	ble.w	800d44c <_dtoa_r+0x43c>
 800d280:	4a2b      	ldr	r2, [pc, #172]	; (800d330 <_dtoa_r+0x320>)
 800d282:	f00b 030f 	and.w	r3, fp, #15
 800d286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d28a:	ed93 7b00 	vldr	d7, [r3]
 800d28e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d292:	06da      	lsls	r2, r3, #27
 800d294:	f140 80d8 	bpl.w	800d448 <_dtoa_r+0x438>
 800d298:	4a26      	ldr	r2, [pc, #152]	; (800d334 <_dtoa_r+0x324>)
 800d29a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d29e:	ed92 6b08 	vldr	d6, [r2, #32]
 800d2a2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d2a6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d2aa:	f003 030f 	and.w	r3, r3, #15
 800d2ae:	2203      	movs	r2, #3
 800d2b0:	4920      	ldr	r1, [pc, #128]	; (800d334 <_dtoa_r+0x324>)
 800d2b2:	e04a      	b.n	800d34a <_dtoa_r+0x33a>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ba:	445b      	add	r3, fp
 800d2bc:	f103 0901 	add.w	r9, r3, #1
 800d2c0:	9306      	str	r3, [sp, #24]
 800d2c2:	464b      	mov	r3, r9
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	bfb8      	it	lt
 800d2c8:	2301      	movlt	r3, #1
 800d2ca:	e7ba      	b.n	800d242 <_dtoa_r+0x232>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	e7b2      	b.n	800d236 <_dtoa_r+0x226>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e7f0      	b.n	800d2b6 <_dtoa_r+0x2a6>
 800d2d4:	2501      	movs	r5, #1
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e0:	9306      	str	r3, [sp, #24]
 800d2e2:	4699      	mov	r9, r3
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2312      	movs	r3, #18
 800d2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800d2ea:	e7aa      	b.n	800d242 <_dtoa_r+0x232>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f0:	e7f4      	b.n	800d2dc <_dtoa_r+0x2cc>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	9306      	str	r3, [sp, #24]
 800d2f6:	4699      	mov	r9, r3
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	e7f5      	b.n	800d2e8 <_dtoa_r+0x2d8>
 800d2fc:	3101      	adds	r1, #1
 800d2fe:	6071      	str	r1, [r6, #4]
 800d300:	0052      	lsls	r2, r2, #1
 800d302:	e7a2      	b.n	800d24a <_dtoa_r+0x23a>
 800d304:	f3af 8000 	nop.w
 800d308:	636f4361 	.word	0x636f4361
 800d30c:	3fd287a7 	.word	0x3fd287a7
 800d310:	8b60c8b3 	.word	0x8b60c8b3
 800d314:	3fc68a28 	.word	0x3fc68a28
 800d318:	509f79fb 	.word	0x509f79fb
 800d31c:	3fd34413 	.word	0x3fd34413
 800d320:	7ff00000 	.word	0x7ff00000
 800d324:	0800ee41 	.word	0x0800ee41
 800d328:	0800ee38 	.word	0x0800ee38
 800d32c:	0800ee15 	.word	0x0800ee15
 800d330:	0800eed0 	.word	0x0800eed0
 800d334:	0800eea8 	.word	0x0800eea8
 800d338:	07de      	lsls	r6, r3, #31
 800d33a:	d504      	bpl.n	800d346 <_dtoa_r+0x336>
 800d33c:	ed91 6b00 	vldr	d6, [r1]
 800d340:	3201      	adds	r2, #1
 800d342:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d346:	105b      	asrs	r3, r3, #1
 800d348:	3108      	adds	r1, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1f4      	bne.n	800d338 <_dtoa_r+0x328>
 800d34e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d352:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d356:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80a7 	beq.w	800d4b0 <_dtoa_r+0x4a0>
 800d362:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d36a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d372:	f140 809d 	bpl.w	800d4b0 <_dtoa_r+0x4a0>
 800d376:	f1b9 0f00 	cmp.w	r9, #0
 800d37a:	f000 8099 	beq.w	800d4b0 <_dtoa_r+0x4a0>
 800d37e:	9b06      	ldr	r3, [sp, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	dd30      	ble.n	800d3e6 <_dtoa_r+0x3d6>
 800d384:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d388:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d38c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d390:	9d06      	ldr	r5, [sp, #24]
 800d392:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d396:	3201      	adds	r2, #1
 800d398:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d39c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d3a0:	ee07 2a90 	vmov	s15, r2
 800d3a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3a8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d3ac:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d3b0:	9a03      	ldr	r2, [sp, #12]
 800d3b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	d17b      	bne.n	800d4b6 <_dtoa_r+0x4a6>
 800d3be:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d3c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d3c6:	ec41 0b17 	vmov	d7, r0, r1
 800d3ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d2:	f300 8253 	bgt.w	800d87c <_dtoa_r+0x86c>
 800d3d6:	eeb1 7b47 	vneg.f64	d7, d7
 800d3da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e2:	f100 8249 	bmi.w	800d878 <_dtoa_r+0x868>
 800d3e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d3ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d3ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f2c0 8119 	blt.w	800d628 <_dtoa_r+0x618>
 800d3f6:	f1bb 0f0e 	cmp.w	fp, #14
 800d3fa:	f300 8115 	bgt.w	800d628 <_dtoa_r+0x618>
 800d3fe:	4bc3      	ldr	r3, [pc, #780]	; (800d70c <_dtoa_r+0x6fc>)
 800d400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d404:	ed93 6b00 	vldr	d6, [r3]
 800d408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f280 80ba 	bge.w	800d584 <_dtoa_r+0x574>
 800d410:	f1b9 0f00 	cmp.w	r9, #0
 800d414:	f300 80b6 	bgt.w	800d584 <_dtoa_r+0x574>
 800d418:	f040 822d 	bne.w	800d876 <_dtoa_r+0x866>
 800d41c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d420:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d424:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d428:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d430:	464d      	mov	r5, r9
 800d432:	464f      	mov	r7, r9
 800d434:	f280 8204 	bge.w	800d840 <_dtoa_r+0x830>
 800d438:	9b04      	ldr	r3, [sp, #16]
 800d43a:	9a04      	ldr	r2, [sp, #16]
 800d43c:	1c5e      	adds	r6, r3, #1
 800d43e:	2331      	movs	r3, #49	; 0x31
 800d440:	7013      	strb	r3, [r2, #0]
 800d442:	f10b 0b01 	add.w	fp, fp, #1
 800d446:	e1ff      	b.n	800d848 <_dtoa_r+0x838>
 800d448:	2202      	movs	r2, #2
 800d44a:	e731      	b.n	800d2b0 <_dtoa_r+0x2a0>
 800d44c:	d02e      	beq.n	800d4ac <_dtoa_r+0x49c>
 800d44e:	f1cb 0300 	rsb	r3, fp, #0
 800d452:	4aae      	ldr	r2, [pc, #696]	; (800d70c <_dtoa_r+0x6fc>)
 800d454:	f003 010f 	and.w	r1, r3, #15
 800d458:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d45c:	ed92 7b00 	vldr	d7, [r2]
 800d460:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d464:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d468:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d46c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d470:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d474:	49a6      	ldr	r1, [pc, #664]	; (800d710 <_dtoa_r+0x700>)
 800d476:	111b      	asrs	r3, r3, #4
 800d478:	2000      	movs	r0, #0
 800d47a:	2202      	movs	r2, #2
 800d47c:	b93b      	cbnz	r3, 800d48e <_dtoa_r+0x47e>
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f af6b 	beq.w	800d35a <_dtoa_r+0x34a>
 800d484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d48c:	e765      	b.n	800d35a <_dtoa_r+0x34a>
 800d48e:	07dd      	lsls	r5, r3, #31
 800d490:	d509      	bpl.n	800d4a6 <_dtoa_r+0x496>
 800d492:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d496:	ed91 7b00 	vldr	d7, [r1]
 800d49a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d49e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d4a2:	3201      	adds	r2, #1
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	105b      	asrs	r3, r3, #1
 800d4a8:	3108      	adds	r1, #8
 800d4aa:	e7e7      	b.n	800d47c <_dtoa_r+0x46c>
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	e754      	b.n	800d35a <_dtoa_r+0x34a>
 800d4b0:	465b      	mov	r3, fp
 800d4b2:	464d      	mov	r5, r9
 800d4b4:	e770      	b.n	800d398 <_dtoa_r+0x388>
 800d4b6:	4a95      	ldr	r2, [pc, #596]	; (800d70c <_dtoa_r+0x6fc>)
 800d4b8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d4bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c2:	ec41 0b17 	vmov	d7, r0, r1
 800d4c6:	b35a      	cbz	r2, 800d520 <_dtoa_r+0x510>
 800d4c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d4cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d4d0:	9e04      	ldr	r6, [sp, #16]
 800d4d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d4d6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d4da:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d4de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d4e2:	ee14 2a90 	vmov	r2, s9
 800d4e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4ea:	3230      	adds	r2, #48	; 0x30
 800d4ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	f806 2b01 	strb.w	r2, [r6], #1
 800d4fc:	d43b      	bmi.n	800d576 <_dtoa_r+0x566>
 800d4fe:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d502:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50a:	d472      	bmi.n	800d5f2 <_dtoa_r+0x5e2>
 800d50c:	9a04      	ldr	r2, [sp, #16]
 800d50e:	1ab2      	subs	r2, r6, r2
 800d510:	4295      	cmp	r5, r2
 800d512:	f77f af68 	ble.w	800d3e6 <_dtoa_r+0x3d6>
 800d516:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d51a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d51e:	e7de      	b.n	800d4de <_dtoa_r+0x4ce>
 800d520:	9a04      	ldr	r2, [sp, #16]
 800d522:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d526:	1956      	adds	r6, r2, r5
 800d528:	4611      	mov	r1, r2
 800d52a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d52e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d532:	ee14 2a90 	vmov	r2, s9
 800d536:	3230      	adds	r2, #48	; 0x30
 800d538:	f801 2b01 	strb.w	r2, [r1], #1
 800d53c:	42b1      	cmp	r1, r6
 800d53e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d542:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d546:	d11a      	bne.n	800d57e <_dtoa_r+0x56e>
 800d548:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d54c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d550:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d558:	dc4b      	bgt.n	800d5f2 <_dtoa_r+0x5e2>
 800d55a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d55e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	f57f af3e 	bpl.w	800d3e6 <_dtoa_r+0x3d6>
 800d56a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d56e:	2a30      	cmp	r2, #48	; 0x30
 800d570:	f106 31ff 	add.w	r1, r6, #4294967295
 800d574:	d001      	beq.n	800d57a <_dtoa_r+0x56a>
 800d576:	469b      	mov	fp, r3
 800d578:	e02a      	b.n	800d5d0 <_dtoa_r+0x5c0>
 800d57a:	460e      	mov	r6, r1
 800d57c:	e7f5      	b.n	800d56a <_dtoa_r+0x55a>
 800d57e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d582:	e7d4      	b.n	800d52e <_dtoa_r+0x51e>
 800d584:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d588:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d58c:	9e04      	ldr	r6, [sp, #16]
 800d58e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d592:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d596:	ee15 3a10 	vmov	r3, s10
 800d59a:	3330      	adds	r3, #48	; 0x30
 800d59c:	f806 3b01 	strb.w	r3, [r6], #1
 800d5a0:	9b04      	ldr	r3, [sp, #16]
 800d5a2:	1af3      	subs	r3, r6, r3
 800d5a4:	4599      	cmp	r9, r3
 800d5a6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d5aa:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d5ae:	d133      	bne.n	800d618 <_dtoa_r+0x608>
 800d5b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d5b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5bc:	dc18      	bgt.n	800d5f0 <_dtoa_r+0x5e0>
 800d5be:	eeb4 7b46 	vcmp.f64	d7, d6
 800d5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c6:	d103      	bne.n	800d5d0 <_dtoa_r+0x5c0>
 800d5c8:	ee15 3a10 	vmov	r3, s10
 800d5cc:	07db      	lsls	r3, r3, #31
 800d5ce:	d40f      	bmi.n	800d5f0 <_dtoa_r+0x5e0>
 800d5d0:	9901      	ldr	r1, [sp, #4]
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fc9b 	bl	800df0e <_Bfree>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5dc:	7033      	strb	r3, [r6, #0]
 800d5de:	f10b 0301 	add.w	r3, fp, #1
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f43f ad5b 	beq.w	800d0a2 <_dtoa_r+0x92>
 800d5ec:	601e      	str	r6, [r3, #0]
 800d5ee:	e558      	b.n	800d0a2 <_dtoa_r+0x92>
 800d5f0:	465b      	mov	r3, fp
 800d5f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d5f6:	2939      	cmp	r1, #57	; 0x39
 800d5f8:	f106 32ff 	add.w	r2, r6, #4294967295
 800d5fc:	d106      	bne.n	800d60c <_dtoa_r+0x5fc>
 800d5fe:	9904      	ldr	r1, [sp, #16]
 800d600:	4291      	cmp	r1, r2
 800d602:	d107      	bne.n	800d614 <_dtoa_r+0x604>
 800d604:	2230      	movs	r2, #48	; 0x30
 800d606:	700a      	strb	r2, [r1, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	460a      	mov	r2, r1
 800d60c:	7811      	ldrb	r1, [r2, #0]
 800d60e:	3101      	adds	r1, #1
 800d610:	7011      	strb	r1, [r2, #0]
 800d612:	e7b0      	b.n	800d576 <_dtoa_r+0x566>
 800d614:	4616      	mov	r6, r2
 800d616:	e7ec      	b.n	800d5f2 <_dtoa_r+0x5e2>
 800d618:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d61c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d624:	d1b3      	bne.n	800d58e <_dtoa_r+0x57e>
 800d626:	e7d3      	b.n	800d5d0 <_dtoa_r+0x5c0>
 800d628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	f000 808d 	beq.w	800d74a <_dtoa_r+0x73a>
 800d630:	9a08      	ldr	r2, [sp, #32]
 800d632:	2a01      	cmp	r2, #1
 800d634:	dc72      	bgt.n	800d71c <_dtoa_r+0x70c>
 800d636:	2f00      	cmp	r7, #0
 800d638:	d06c      	beq.n	800d714 <_dtoa_r+0x704>
 800d63a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d63e:	4645      	mov	r5, r8
 800d640:	4656      	mov	r6, sl
 800d642:	9a07      	ldr	r2, [sp, #28]
 800d644:	2101      	movs	r1, #1
 800d646:	441a      	add	r2, r3
 800d648:	4620      	mov	r0, r4
 800d64a:	449a      	add	sl, r3
 800d64c:	9207      	str	r2, [sp, #28]
 800d64e:	f000 fcfe 	bl	800e04e <__i2b>
 800d652:	4607      	mov	r7, r0
 800d654:	2e00      	cmp	r6, #0
 800d656:	dd0b      	ble.n	800d670 <_dtoa_r+0x660>
 800d658:	9b07      	ldr	r3, [sp, #28]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	dd08      	ble.n	800d670 <_dtoa_r+0x660>
 800d65e:	42b3      	cmp	r3, r6
 800d660:	9a07      	ldr	r2, [sp, #28]
 800d662:	bfa8      	it	ge
 800d664:	4633      	movge	r3, r6
 800d666:	ebaa 0a03 	sub.w	sl, sl, r3
 800d66a:	1af6      	subs	r6, r6, r3
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f1b8 0f00 	cmp.w	r8, #0
 800d674:	d01d      	beq.n	800d6b2 <_dtoa_r+0x6a2>
 800d676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d06a      	beq.n	800d752 <_dtoa_r+0x742>
 800d67c:	b18d      	cbz	r5, 800d6a2 <_dtoa_r+0x692>
 800d67e:	4639      	mov	r1, r7
 800d680:	462a      	mov	r2, r5
 800d682:	4620      	mov	r0, r4
 800d684:	f000 fd82 	bl	800e18c <__pow5mult>
 800d688:	9a01      	ldr	r2, [sp, #4]
 800d68a:	4601      	mov	r1, r0
 800d68c:	4607      	mov	r7, r0
 800d68e:	4620      	mov	r0, r4
 800d690:	f000 fce6 	bl	800e060 <__multiply>
 800d694:	9901      	ldr	r1, [sp, #4]
 800d696:	900c      	str	r0, [sp, #48]	; 0x30
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 fc38 	bl	800df0e <_Bfree>
 800d69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	ebb8 0205 	subs.w	r2, r8, r5
 800d6a6:	d004      	beq.n	800d6b2 <_dtoa_r+0x6a2>
 800d6a8:	9901      	ldr	r1, [sp, #4]
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fd6e 	bl	800e18c <__pow5mult>
 800d6b0:	9001      	str	r0, [sp, #4]
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fcca 	bl	800e04e <__i2b>
 800d6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6bc:	4605      	mov	r5, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 81ca 	beq.w	800da58 <_dtoa_r+0xa48>
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4601      	mov	r1, r0
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fd5f 	bl	800e18c <__pow5mult>
 800d6ce:	9b08      	ldr	r3, [sp, #32]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	dc44      	bgt.n	800d760 <_dtoa_r+0x750>
 800d6d6:	9b02      	ldr	r3, [sp, #8]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d13c      	bne.n	800d756 <_dtoa_r+0x746>
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d137      	bne.n	800d756 <_dtoa_r+0x746>
 800d6e6:	9b03      	ldr	r3, [sp, #12]
 800d6e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ec:	0d1b      	lsrs	r3, r3, #20
 800d6ee:	051b      	lsls	r3, r3, #20
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d033      	beq.n	800d75c <_dtoa_r+0x74c>
 800d6f4:	9b07      	ldr	r3, [sp, #28]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	f10a 0a01 	add.w	sl, sl, #1
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	f04f 0801 	mov.w	r8, #1
 800d702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d704:	bb73      	cbnz	r3, 800d764 <_dtoa_r+0x754>
 800d706:	2001      	movs	r0, #1
 800d708:	e034      	b.n	800d774 <_dtoa_r+0x764>
 800d70a:	bf00      	nop
 800d70c:	0800eed0 	.word	0x0800eed0
 800d710:	0800eea8 	.word	0x0800eea8
 800d714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d71a:	e790      	b.n	800d63e <_dtoa_r+0x62e>
 800d71c:	f109 35ff 	add.w	r5, r9, #4294967295
 800d720:	45a8      	cmp	r8, r5
 800d722:	bfbf      	itttt	lt
 800d724:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800d726:	eba5 0808 	sublt.w	r8, r5, r8
 800d72a:	4443      	addlt	r3, r8
 800d72c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800d72e:	bfb6      	itet	lt
 800d730:	46a8      	movlt	r8, r5
 800d732:	eba8 0505 	subge.w	r5, r8, r5
 800d736:	2500      	movlt	r5, #0
 800d738:	f1b9 0f00 	cmp.w	r9, #0
 800d73c:	bfb9      	ittee	lt
 800d73e:	ebaa 0609 	sublt.w	r6, sl, r9
 800d742:	2300      	movlt	r3, #0
 800d744:	4656      	movge	r6, sl
 800d746:	464b      	movge	r3, r9
 800d748:	e77b      	b.n	800d642 <_dtoa_r+0x632>
 800d74a:	4645      	mov	r5, r8
 800d74c:	4656      	mov	r6, sl
 800d74e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d750:	e780      	b.n	800d654 <_dtoa_r+0x644>
 800d752:	4642      	mov	r2, r8
 800d754:	e7a8      	b.n	800d6a8 <_dtoa_r+0x698>
 800d756:	f04f 0800 	mov.w	r8, #0
 800d75a:	e7d2      	b.n	800d702 <_dtoa_r+0x6f2>
 800d75c:	4698      	mov	r8, r3
 800d75e:	e7d0      	b.n	800d702 <_dtoa_r+0x6f2>
 800d760:	f04f 0800 	mov.w	r8, #0
 800d764:	692b      	ldr	r3, [r5, #16]
 800d766:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d76a:	6918      	ldr	r0, [r3, #16]
 800d76c:	f000 fc21 	bl	800dfb2 <__hi0bits>
 800d770:	f1c0 0020 	rsb	r0, r0, #32
 800d774:	9b07      	ldr	r3, [sp, #28]
 800d776:	4418      	add	r0, r3
 800d778:	f010 001f 	ands.w	r0, r0, #31
 800d77c:	d047      	beq.n	800d80e <_dtoa_r+0x7fe>
 800d77e:	f1c0 0320 	rsb	r3, r0, #32
 800d782:	2b04      	cmp	r3, #4
 800d784:	dd3b      	ble.n	800d7fe <_dtoa_r+0x7ee>
 800d786:	9b07      	ldr	r3, [sp, #28]
 800d788:	f1c0 001c 	rsb	r0, r0, #28
 800d78c:	4482      	add	sl, r0
 800d78e:	4406      	add	r6, r0
 800d790:	4403      	add	r3, r0
 800d792:	9307      	str	r3, [sp, #28]
 800d794:	f1ba 0f00 	cmp.w	sl, #0
 800d798:	dd05      	ble.n	800d7a6 <_dtoa_r+0x796>
 800d79a:	4652      	mov	r2, sl
 800d79c:	9901      	ldr	r1, [sp, #4]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f000 fd42 	bl	800e228 <__lshift>
 800d7a4:	9001      	str	r0, [sp, #4]
 800d7a6:	9b07      	ldr	r3, [sp, #28]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dd05      	ble.n	800d7b8 <_dtoa_r+0x7a8>
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fd39 	bl	800e228 <__lshift>
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7ba:	b353      	cbz	r3, 800d812 <_dtoa_r+0x802>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	9801      	ldr	r0, [sp, #4]
 800d7c0:	f000 fd86 	bl	800e2d0 <__mcmp>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	da24      	bge.n	800d812 <_dtoa_r+0x802>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	220a      	movs	r2, #10
 800d7cc:	9901      	ldr	r1, [sp, #4]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 fbb4 	bl	800df3c <__multadd>
 800d7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d6:	9001      	str	r0, [sp, #4]
 800d7d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 8142 	beq.w	800da66 <_dtoa_r+0xa56>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	220a      	movs	r2, #10
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fba7 	bl	800df3c <__multadd>
 800d7ee:	9b06      	ldr	r3, [sp, #24]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	4607      	mov	r7, r0
 800d7f4:	dc4b      	bgt.n	800d88e <_dtoa_r+0x87e>
 800d7f6:	9b08      	ldr	r3, [sp, #32]
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	dd48      	ble.n	800d88e <_dtoa_r+0x87e>
 800d7fc:	e011      	b.n	800d822 <_dtoa_r+0x812>
 800d7fe:	d0c9      	beq.n	800d794 <_dtoa_r+0x784>
 800d800:	9a07      	ldr	r2, [sp, #28]
 800d802:	331c      	adds	r3, #28
 800d804:	441a      	add	r2, r3
 800d806:	449a      	add	sl, r3
 800d808:	441e      	add	r6, r3
 800d80a:	4613      	mov	r3, r2
 800d80c:	e7c1      	b.n	800d792 <_dtoa_r+0x782>
 800d80e:	4603      	mov	r3, r0
 800d810:	e7f6      	b.n	800d800 <_dtoa_r+0x7f0>
 800d812:	f1b9 0f00 	cmp.w	r9, #0
 800d816:	dc34      	bgt.n	800d882 <_dtoa_r+0x872>
 800d818:	9b08      	ldr	r3, [sp, #32]
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	dd31      	ble.n	800d882 <_dtoa_r+0x872>
 800d81e:	f8cd 9018 	str.w	r9, [sp, #24]
 800d822:	9b06      	ldr	r3, [sp, #24]
 800d824:	b963      	cbnz	r3, 800d840 <_dtoa_r+0x830>
 800d826:	4629      	mov	r1, r5
 800d828:	2205      	movs	r2, #5
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 fb86 	bl	800df3c <__multadd>
 800d830:	4601      	mov	r1, r0
 800d832:	4605      	mov	r5, r0
 800d834:	9801      	ldr	r0, [sp, #4]
 800d836:	f000 fd4b 	bl	800e2d0 <__mcmp>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	f73f adfc 	bgt.w	800d438 <_dtoa_r+0x428>
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	9e04      	ldr	r6, [sp, #16]
 800d844:	ea6f 0b03 	mvn.w	fp, r3
 800d848:	f04f 0900 	mov.w	r9, #0
 800d84c:	4629      	mov	r1, r5
 800d84e:	4620      	mov	r0, r4
 800d850:	f000 fb5d 	bl	800df0e <_Bfree>
 800d854:	2f00      	cmp	r7, #0
 800d856:	f43f aebb 	beq.w	800d5d0 <_dtoa_r+0x5c0>
 800d85a:	f1b9 0f00 	cmp.w	r9, #0
 800d85e:	d005      	beq.n	800d86c <_dtoa_r+0x85c>
 800d860:	45b9      	cmp	r9, r7
 800d862:	d003      	beq.n	800d86c <_dtoa_r+0x85c>
 800d864:	4649      	mov	r1, r9
 800d866:	4620      	mov	r0, r4
 800d868:	f000 fb51 	bl	800df0e <_Bfree>
 800d86c:	4639      	mov	r1, r7
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 fb4d 	bl	800df0e <_Bfree>
 800d874:	e6ac      	b.n	800d5d0 <_dtoa_r+0x5c0>
 800d876:	2500      	movs	r5, #0
 800d878:	462f      	mov	r7, r5
 800d87a:	e7e1      	b.n	800d840 <_dtoa_r+0x830>
 800d87c:	469b      	mov	fp, r3
 800d87e:	462f      	mov	r7, r5
 800d880:	e5da      	b.n	800d438 <_dtoa_r+0x428>
 800d882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d884:	f8cd 9018 	str.w	r9, [sp, #24]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80f3 	beq.w	800da74 <_dtoa_r+0xa64>
 800d88e:	2e00      	cmp	r6, #0
 800d890:	dd05      	ble.n	800d89e <_dtoa_r+0x88e>
 800d892:	4639      	mov	r1, r7
 800d894:	4632      	mov	r2, r6
 800d896:	4620      	mov	r0, r4
 800d898:	f000 fcc6 	bl	800e228 <__lshift>
 800d89c:	4607      	mov	r7, r0
 800d89e:	f1b8 0f00 	cmp.w	r8, #0
 800d8a2:	d04c      	beq.n	800d93e <_dtoa_r+0x92e>
 800d8a4:	6879      	ldr	r1, [r7, #4]
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f000 fafd 	bl	800dea6 <_Balloc>
 800d8ac:	693a      	ldr	r2, [r7, #16]
 800d8ae:	3202      	adds	r2, #2
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	0092      	lsls	r2, r2, #2
 800d8b4:	f107 010c 	add.w	r1, r7, #12
 800d8b8:	300c      	adds	r0, #12
 800d8ba:	f000 fae9 	bl	800de90 <memcpy>
 800d8be:	2201      	movs	r2, #1
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 fcb0 	bl	800e228 <__lshift>
 800d8c8:	9b02      	ldr	r3, [sp, #8]
 800d8ca:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	46b9      	mov	r9, r7
 800d8d4:	9307      	str	r3, [sp, #28]
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	4629      	mov	r1, r5
 800d8da:	9801      	ldr	r0, [sp, #4]
 800d8dc:	f7ff fb0c 	bl	800cef8 <quorem>
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	4606      	mov	r6, r0
 800d8e4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d8e8:	9801      	ldr	r0, [sp, #4]
 800d8ea:	f000 fcf1 	bl	800e2d0 <__mcmp>
 800d8ee:	463a      	mov	r2, r7
 800d8f0:	9002      	str	r0, [sp, #8]
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 fd05 	bl	800e304 <__mdiff>
 800d8fa:	68c3      	ldr	r3, [r0, #12]
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	bb03      	cbnz	r3, 800d942 <_dtoa_r+0x932>
 800d900:	4601      	mov	r1, r0
 800d902:	9009      	str	r0, [sp, #36]	; 0x24
 800d904:	9801      	ldr	r0, [sp, #4]
 800d906:	f000 fce3 	bl	800e2d0 <__mcmp>
 800d90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d90c:	4603      	mov	r3, r0
 800d90e:	4611      	mov	r1, r2
 800d910:	4620      	mov	r0, r4
 800d912:	9309      	str	r3, [sp, #36]	; 0x24
 800d914:	f000 fafb 	bl	800df0e <_Bfree>
 800d918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d91a:	b9a3      	cbnz	r3, 800d946 <_dtoa_r+0x936>
 800d91c:	9a08      	ldr	r2, [sp, #32]
 800d91e:	b992      	cbnz	r2, 800d946 <_dtoa_r+0x936>
 800d920:	9a07      	ldr	r2, [sp, #28]
 800d922:	b982      	cbnz	r2, 800d946 <_dtoa_r+0x936>
 800d924:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d928:	d029      	beq.n	800d97e <_dtoa_r+0x96e>
 800d92a:	9b02      	ldr	r3, [sp, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dd01      	ble.n	800d934 <_dtoa_r+0x924>
 800d930:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800d934:	f10a 0601 	add.w	r6, sl, #1
 800d938:	f88a 8000 	strb.w	r8, [sl]
 800d93c:	e786      	b.n	800d84c <_dtoa_r+0x83c>
 800d93e:	4638      	mov	r0, r7
 800d940:	e7c2      	b.n	800d8c8 <_dtoa_r+0x8b8>
 800d942:	2301      	movs	r3, #1
 800d944:	e7e3      	b.n	800d90e <_dtoa_r+0x8fe>
 800d946:	9a02      	ldr	r2, [sp, #8]
 800d948:	2a00      	cmp	r2, #0
 800d94a:	db04      	blt.n	800d956 <_dtoa_r+0x946>
 800d94c:	d124      	bne.n	800d998 <_dtoa_r+0x988>
 800d94e:	9a08      	ldr	r2, [sp, #32]
 800d950:	bb12      	cbnz	r2, 800d998 <_dtoa_r+0x988>
 800d952:	9a07      	ldr	r2, [sp, #28]
 800d954:	bb02      	cbnz	r2, 800d998 <_dtoa_r+0x988>
 800d956:	2b00      	cmp	r3, #0
 800d958:	ddec      	ble.n	800d934 <_dtoa_r+0x924>
 800d95a:	2201      	movs	r2, #1
 800d95c:	9901      	ldr	r1, [sp, #4]
 800d95e:	4620      	mov	r0, r4
 800d960:	f000 fc62 	bl	800e228 <__lshift>
 800d964:	4629      	mov	r1, r5
 800d966:	9001      	str	r0, [sp, #4]
 800d968:	f000 fcb2 	bl	800e2d0 <__mcmp>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	dc03      	bgt.n	800d978 <_dtoa_r+0x968>
 800d970:	d1e0      	bne.n	800d934 <_dtoa_r+0x924>
 800d972:	f018 0f01 	tst.w	r8, #1
 800d976:	d0dd      	beq.n	800d934 <_dtoa_r+0x924>
 800d978:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d97c:	d1d8      	bne.n	800d930 <_dtoa_r+0x920>
 800d97e:	2339      	movs	r3, #57	; 0x39
 800d980:	f10a 0601 	add.w	r6, sl, #1
 800d984:	f88a 3000 	strb.w	r3, [sl]
 800d988:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d98c:	2b39      	cmp	r3, #57	; 0x39
 800d98e:	f106 32ff 	add.w	r2, r6, #4294967295
 800d992:	d04c      	beq.n	800da2e <_dtoa_r+0xa1e>
 800d994:	3301      	adds	r3, #1
 800d996:	e051      	b.n	800da3c <_dtoa_r+0xa2c>
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f10a 0601 	add.w	r6, sl, #1
 800d99e:	dd05      	ble.n	800d9ac <_dtoa_r+0x99c>
 800d9a0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d9a4:	d0eb      	beq.n	800d97e <_dtoa_r+0x96e>
 800d9a6:	f108 0801 	add.w	r8, r8, #1
 800d9aa:	e7c5      	b.n	800d938 <_dtoa_r+0x928>
 800d9ac:	9b04      	ldr	r3, [sp, #16]
 800d9ae:	9a06      	ldr	r2, [sp, #24]
 800d9b0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800d9b4:	1af3      	subs	r3, r6, r3
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d021      	beq.n	800d9fe <_dtoa_r+0x9ee>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	220a      	movs	r2, #10
 800d9be:	9901      	ldr	r1, [sp, #4]
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f000 fabb 	bl	800df3c <__multadd>
 800d9c6:	45b9      	cmp	r9, r7
 800d9c8:	9001      	str	r0, [sp, #4]
 800d9ca:	f04f 0300 	mov.w	r3, #0
 800d9ce:	f04f 020a 	mov.w	r2, #10
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	d105      	bne.n	800d9e4 <_dtoa_r+0x9d4>
 800d9d8:	f000 fab0 	bl	800df3c <__multadd>
 800d9dc:	4681      	mov	r9, r0
 800d9de:	4607      	mov	r7, r0
 800d9e0:	46b2      	mov	sl, r6
 800d9e2:	e779      	b.n	800d8d8 <_dtoa_r+0x8c8>
 800d9e4:	f000 faaa 	bl	800df3c <__multadd>
 800d9e8:	4639      	mov	r1, r7
 800d9ea:	4681      	mov	r9, r0
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	220a      	movs	r2, #10
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 faa3 	bl	800df3c <__multadd>
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	e7f2      	b.n	800d9e0 <_dtoa_r+0x9d0>
 800d9fa:	f04f 0900 	mov.w	r9, #0
 800d9fe:	2201      	movs	r2, #1
 800da00:	9901      	ldr	r1, [sp, #4]
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fc10 	bl	800e228 <__lshift>
 800da08:	4629      	mov	r1, r5
 800da0a:	9001      	str	r0, [sp, #4]
 800da0c:	f000 fc60 	bl	800e2d0 <__mcmp>
 800da10:	2800      	cmp	r0, #0
 800da12:	dcb9      	bgt.n	800d988 <_dtoa_r+0x978>
 800da14:	d102      	bne.n	800da1c <_dtoa_r+0xa0c>
 800da16:	f018 0f01 	tst.w	r8, #1
 800da1a:	d1b5      	bne.n	800d988 <_dtoa_r+0x978>
 800da1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da20:	2b30      	cmp	r3, #48	; 0x30
 800da22:	f106 32ff 	add.w	r2, r6, #4294967295
 800da26:	f47f af11 	bne.w	800d84c <_dtoa_r+0x83c>
 800da2a:	4616      	mov	r6, r2
 800da2c:	e7f6      	b.n	800da1c <_dtoa_r+0xa0c>
 800da2e:	9b04      	ldr	r3, [sp, #16]
 800da30:	4293      	cmp	r3, r2
 800da32:	d105      	bne.n	800da40 <_dtoa_r+0xa30>
 800da34:	9a04      	ldr	r2, [sp, #16]
 800da36:	f10b 0b01 	add.w	fp, fp, #1
 800da3a:	2331      	movs	r3, #49	; 0x31
 800da3c:	7013      	strb	r3, [r2, #0]
 800da3e:	e705      	b.n	800d84c <_dtoa_r+0x83c>
 800da40:	4616      	mov	r6, r2
 800da42:	e7a1      	b.n	800d988 <_dtoa_r+0x978>
 800da44:	4b16      	ldr	r3, [pc, #88]	; (800daa0 <_dtoa_r+0xa90>)
 800da46:	f7ff bb48 	b.w	800d0da <_dtoa_r+0xca>
 800da4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f47f ab23 	bne.w	800d098 <_dtoa_r+0x88>
 800da52:	4b14      	ldr	r3, [pc, #80]	; (800daa4 <_dtoa_r+0xa94>)
 800da54:	f7ff bb41 	b.w	800d0da <_dtoa_r+0xca>
 800da58:	9b08      	ldr	r3, [sp, #32]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	f77f ae3b 	ble.w	800d6d6 <_dtoa_r+0x6c6>
 800da60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800da64:	e64f      	b.n	800d706 <_dtoa_r+0x6f6>
 800da66:	9b06      	ldr	r3, [sp, #24]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc03      	bgt.n	800da74 <_dtoa_r+0xa64>
 800da6c:	9b08      	ldr	r3, [sp, #32]
 800da6e:	2b02      	cmp	r3, #2
 800da70:	f73f aed7 	bgt.w	800d822 <_dtoa_r+0x812>
 800da74:	9e04      	ldr	r6, [sp, #16]
 800da76:	9801      	ldr	r0, [sp, #4]
 800da78:	4629      	mov	r1, r5
 800da7a:	f7ff fa3d 	bl	800cef8 <quorem>
 800da7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800da82:	f806 8b01 	strb.w	r8, [r6], #1
 800da86:	9b04      	ldr	r3, [sp, #16]
 800da88:	9a06      	ldr	r2, [sp, #24]
 800da8a:	1af3      	subs	r3, r6, r3
 800da8c:	429a      	cmp	r2, r3
 800da8e:	ddb4      	ble.n	800d9fa <_dtoa_r+0x9ea>
 800da90:	2300      	movs	r3, #0
 800da92:	220a      	movs	r2, #10
 800da94:	9901      	ldr	r1, [sp, #4]
 800da96:	4620      	mov	r0, r4
 800da98:	f000 fa50 	bl	800df3c <__multadd>
 800da9c:	9001      	str	r0, [sp, #4]
 800da9e:	e7ea      	b.n	800da76 <_dtoa_r+0xa66>
 800daa0:	0800ee14 	.word	0x0800ee14
 800daa4:	0800ee38 	.word	0x0800ee38

0800daa8 <__sflush_r>:
 800daa8:	898a      	ldrh	r2, [r1, #12]
 800daaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	4605      	mov	r5, r0
 800dab0:	0710      	lsls	r0, r2, #28
 800dab2:	460c      	mov	r4, r1
 800dab4:	d458      	bmi.n	800db68 <__sflush_r+0xc0>
 800dab6:	684b      	ldr	r3, [r1, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dc05      	bgt.n	800dac8 <__sflush_r+0x20>
 800dabc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dc02      	bgt.n	800dac8 <__sflush_r+0x20>
 800dac2:	2000      	movs	r0, #0
 800dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daca:	2e00      	cmp	r6, #0
 800dacc:	d0f9      	beq.n	800dac2 <__sflush_r+0x1a>
 800dace:	2300      	movs	r3, #0
 800dad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dad4:	682f      	ldr	r7, [r5, #0]
 800dad6:	6a21      	ldr	r1, [r4, #32]
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	d032      	beq.n	800db42 <__sflush_r+0x9a>
 800dadc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	075a      	lsls	r2, r3, #29
 800dae2:	d505      	bpl.n	800daf0 <__sflush_r+0x48>
 800dae4:	6863      	ldr	r3, [r4, #4]
 800dae6:	1ac0      	subs	r0, r0, r3
 800dae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800daea:	b10b      	cbz	r3, 800daf0 <__sflush_r+0x48>
 800daec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800daee:	1ac0      	subs	r0, r0, r3
 800daf0:	2300      	movs	r3, #0
 800daf2:	4602      	mov	r2, r0
 800daf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daf6:	6a21      	ldr	r1, [r4, #32]
 800daf8:	4628      	mov	r0, r5
 800dafa:	47b0      	blx	r6
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	d106      	bne.n	800db10 <__sflush_r+0x68>
 800db02:	6829      	ldr	r1, [r5, #0]
 800db04:	291d      	cmp	r1, #29
 800db06:	d848      	bhi.n	800db9a <__sflush_r+0xf2>
 800db08:	4a29      	ldr	r2, [pc, #164]	; (800dbb0 <__sflush_r+0x108>)
 800db0a:	40ca      	lsrs	r2, r1
 800db0c:	07d6      	lsls	r6, r2, #31
 800db0e:	d544      	bpl.n	800db9a <__sflush_r+0xf2>
 800db10:	2200      	movs	r2, #0
 800db12:	6062      	str	r2, [r4, #4]
 800db14:	04d9      	lsls	r1, r3, #19
 800db16:	6922      	ldr	r2, [r4, #16]
 800db18:	6022      	str	r2, [r4, #0]
 800db1a:	d504      	bpl.n	800db26 <__sflush_r+0x7e>
 800db1c:	1c42      	adds	r2, r0, #1
 800db1e:	d101      	bne.n	800db24 <__sflush_r+0x7c>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b903      	cbnz	r3, 800db26 <__sflush_r+0x7e>
 800db24:	6560      	str	r0, [r4, #84]	; 0x54
 800db26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db28:	602f      	str	r7, [r5, #0]
 800db2a:	2900      	cmp	r1, #0
 800db2c:	d0c9      	beq.n	800dac2 <__sflush_r+0x1a>
 800db2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db32:	4299      	cmp	r1, r3
 800db34:	d002      	beq.n	800db3c <__sflush_r+0x94>
 800db36:	4628      	mov	r0, r5
 800db38:	f000 fc9e 	bl	800e478 <_free_r>
 800db3c:	2000      	movs	r0, #0
 800db3e:	6360      	str	r0, [r4, #52]	; 0x34
 800db40:	e7c0      	b.n	800dac4 <__sflush_r+0x1c>
 800db42:	2301      	movs	r3, #1
 800db44:	4628      	mov	r0, r5
 800db46:	47b0      	blx	r6
 800db48:	1c41      	adds	r1, r0, #1
 800db4a:	d1c8      	bne.n	800dade <__sflush_r+0x36>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d0c5      	beq.n	800dade <__sflush_r+0x36>
 800db52:	2b1d      	cmp	r3, #29
 800db54:	d001      	beq.n	800db5a <__sflush_r+0xb2>
 800db56:	2b16      	cmp	r3, #22
 800db58:	d101      	bne.n	800db5e <__sflush_r+0xb6>
 800db5a:	602f      	str	r7, [r5, #0]
 800db5c:	e7b1      	b.n	800dac2 <__sflush_r+0x1a>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db64:	81a3      	strh	r3, [r4, #12]
 800db66:	e7ad      	b.n	800dac4 <__sflush_r+0x1c>
 800db68:	690f      	ldr	r7, [r1, #16]
 800db6a:	2f00      	cmp	r7, #0
 800db6c:	d0a9      	beq.n	800dac2 <__sflush_r+0x1a>
 800db6e:	0793      	lsls	r3, r2, #30
 800db70:	680e      	ldr	r6, [r1, #0]
 800db72:	bf08      	it	eq
 800db74:	694b      	ldreq	r3, [r1, #20]
 800db76:	600f      	str	r7, [r1, #0]
 800db78:	bf18      	it	ne
 800db7a:	2300      	movne	r3, #0
 800db7c:	eba6 0807 	sub.w	r8, r6, r7
 800db80:	608b      	str	r3, [r1, #8]
 800db82:	f1b8 0f00 	cmp.w	r8, #0
 800db86:	dd9c      	ble.n	800dac2 <__sflush_r+0x1a>
 800db88:	4643      	mov	r3, r8
 800db8a:	463a      	mov	r2, r7
 800db8c:	6a21      	ldr	r1, [r4, #32]
 800db8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db90:	4628      	mov	r0, r5
 800db92:	47b0      	blx	r6
 800db94:	2800      	cmp	r0, #0
 800db96:	dc06      	bgt.n	800dba6 <__sflush_r+0xfe>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	e78e      	b.n	800dac4 <__sflush_r+0x1c>
 800dba6:	4407      	add	r7, r0
 800dba8:	eba8 0800 	sub.w	r8, r8, r0
 800dbac:	e7e9      	b.n	800db82 <__sflush_r+0xda>
 800dbae:	bf00      	nop
 800dbb0:	20400001 	.word	0x20400001

0800dbb4 <_fflush_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	690b      	ldr	r3, [r1, #16]
 800dbb8:	4605      	mov	r5, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	b1db      	cbz	r3, 800dbf6 <_fflush_r+0x42>
 800dbbe:	b118      	cbz	r0, 800dbc8 <_fflush_r+0x14>
 800dbc0:	6983      	ldr	r3, [r0, #24]
 800dbc2:	b90b      	cbnz	r3, 800dbc8 <_fflush_r+0x14>
 800dbc4:	f000 f860 	bl	800dc88 <__sinit>
 800dbc8:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <_fflush_r+0x48>)
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	d109      	bne.n	800dbe2 <_fflush_r+0x2e>
 800dbce:	686c      	ldr	r4, [r5, #4]
 800dbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd4:	b17b      	cbz	r3, 800dbf6 <_fflush_r+0x42>
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbde:	f7ff bf63 	b.w	800daa8 <__sflush_r>
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <_fflush_r+0x4c>)
 800dbe4:	429c      	cmp	r4, r3
 800dbe6:	d101      	bne.n	800dbec <_fflush_r+0x38>
 800dbe8:	68ac      	ldr	r4, [r5, #8]
 800dbea:	e7f1      	b.n	800dbd0 <_fflush_r+0x1c>
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <_fflush_r+0x50>)
 800dbee:	429c      	cmp	r4, r3
 800dbf0:	bf08      	it	eq
 800dbf2:	68ec      	ldreq	r4, [r5, #12]
 800dbf4:	e7ec      	b.n	800dbd0 <_fflush_r+0x1c>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0800ee68 	.word	0x0800ee68
 800dc00:	0800ee88 	.word	0x0800ee88
 800dc04:	0800ee48 	.word	0x0800ee48

0800dc08 <std>:
 800dc08:	2300      	movs	r3, #0
 800dc0a:	b510      	push	{r4, lr}
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc12:	6083      	str	r3, [r0, #8]
 800dc14:	8181      	strh	r1, [r0, #12]
 800dc16:	6643      	str	r3, [r0, #100]	; 0x64
 800dc18:	81c2      	strh	r2, [r0, #14]
 800dc1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc1e:	6183      	str	r3, [r0, #24]
 800dc20:	4619      	mov	r1, r3
 800dc22:	2208      	movs	r2, #8
 800dc24:	305c      	adds	r0, #92	; 0x5c
 800dc26:	f7fe fbe7 	bl	800c3f8 <memset>
 800dc2a:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <std+0x38>)
 800dc2c:	6263      	str	r3, [r4, #36]	; 0x24
 800dc2e:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <std+0x3c>)
 800dc30:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc32:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <std+0x40>)
 800dc34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc36:	4b05      	ldr	r3, [pc, #20]	; (800dc4c <std+0x44>)
 800dc38:	6224      	str	r4, [r4, #32]
 800dc3a:	6323      	str	r3, [r4, #48]	; 0x30
 800dc3c:	bd10      	pop	{r4, pc}
 800dc3e:	bf00      	nop
 800dc40:	0800e869 	.word	0x0800e869
 800dc44:	0800e88b 	.word	0x0800e88b
 800dc48:	0800e8c3 	.word	0x0800e8c3
 800dc4c:	0800e8e7 	.word	0x0800e8e7

0800dc50 <_cleanup_r>:
 800dc50:	4901      	ldr	r1, [pc, #4]	; (800dc58 <_cleanup_r+0x8>)
 800dc52:	f000 b885 	b.w	800dd60 <_fwalk_reent>
 800dc56:	bf00      	nop
 800dc58:	0800dbb5 	.word	0x0800dbb5

0800dc5c <__sfmoreglue>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	1e4a      	subs	r2, r1, #1
 800dc60:	2568      	movs	r5, #104	; 0x68
 800dc62:	4355      	muls	r5, r2
 800dc64:	460e      	mov	r6, r1
 800dc66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc6a:	f000 fc53 	bl	800e514 <_malloc_r>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	b140      	cbz	r0, 800dc84 <__sfmoreglue+0x28>
 800dc72:	2100      	movs	r1, #0
 800dc74:	e9c0 1600 	strd	r1, r6, [r0]
 800dc78:	300c      	adds	r0, #12
 800dc7a:	60a0      	str	r0, [r4, #8]
 800dc7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc80:	f7fe fbba 	bl	800c3f8 <memset>
 800dc84:	4620      	mov	r0, r4
 800dc86:	bd70      	pop	{r4, r5, r6, pc}

0800dc88 <__sinit>:
 800dc88:	6983      	ldr	r3, [r0, #24]
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	bb33      	cbnz	r3, 800dcde <__sinit+0x56>
 800dc90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dc94:	6503      	str	r3, [r0, #80]	; 0x50
 800dc96:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <__sinit+0x58>)
 800dc98:	4a12      	ldr	r2, [pc, #72]	; (800dce4 <__sinit+0x5c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6282      	str	r2, [r0, #40]	; 0x28
 800dc9e:	4298      	cmp	r0, r3
 800dca0:	bf04      	itt	eq
 800dca2:	2301      	moveq	r3, #1
 800dca4:	6183      	streq	r3, [r0, #24]
 800dca6:	f000 f81f 	bl	800dce8 <__sfp>
 800dcaa:	6060      	str	r0, [r4, #4]
 800dcac:	4620      	mov	r0, r4
 800dcae:	f000 f81b 	bl	800dce8 <__sfp>
 800dcb2:	60a0      	str	r0, [r4, #8]
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 f817 	bl	800dce8 <__sfp>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	60e0      	str	r0, [r4, #12]
 800dcbe:	2104      	movs	r1, #4
 800dcc0:	6860      	ldr	r0, [r4, #4]
 800dcc2:	f7ff ffa1 	bl	800dc08 <std>
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	2109      	movs	r1, #9
 800dcca:	68a0      	ldr	r0, [r4, #8]
 800dccc:	f7ff ff9c 	bl	800dc08 <std>
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	2112      	movs	r1, #18
 800dcd4:	68e0      	ldr	r0, [r4, #12]
 800dcd6:	f7ff ff97 	bl	800dc08 <std>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	61a3      	str	r3, [r4, #24]
 800dcde:	bd10      	pop	{r4, pc}
 800dce0:	0800ee00 	.word	0x0800ee00
 800dce4:	0800dc51 	.word	0x0800dc51

0800dce8 <__sfp>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	4b1b      	ldr	r3, [pc, #108]	; (800dd58 <__sfp+0x70>)
 800dcec:	681e      	ldr	r6, [r3, #0]
 800dcee:	69b3      	ldr	r3, [r6, #24]
 800dcf0:	4607      	mov	r7, r0
 800dcf2:	b913      	cbnz	r3, 800dcfa <__sfp+0x12>
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f7ff ffc7 	bl	800dc88 <__sinit>
 800dcfa:	3648      	adds	r6, #72	; 0x48
 800dcfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	d503      	bpl.n	800dd0c <__sfp+0x24>
 800dd04:	6833      	ldr	r3, [r6, #0]
 800dd06:	b133      	cbz	r3, 800dd16 <__sfp+0x2e>
 800dd08:	6836      	ldr	r6, [r6, #0]
 800dd0a:	e7f7      	b.n	800dcfc <__sfp+0x14>
 800dd0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd10:	b16d      	cbz	r5, 800dd2e <__sfp+0x46>
 800dd12:	3468      	adds	r4, #104	; 0x68
 800dd14:	e7f4      	b.n	800dd00 <__sfp+0x18>
 800dd16:	2104      	movs	r1, #4
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7ff ff9f 	bl	800dc5c <__sfmoreglue>
 800dd1e:	6030      	str	r0, [r6, #0]
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d1f1      	bne.n	800dd08 <__sfp+0x20>
 800dd24:	230c      	movs	r3, #12
 800dd26:	603b      	str	r3, [r7, #0]
 800dd28:	4604      	mov	r4, r0
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd2e:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <__sfp+0x74>)
 800dd30:	6665      	str	r5, [r4, #100]	; 0x64
 800dd32:	e9c4 5500 	strd	r5, r5, [r4]
 800dd36:	60a5      	str	r5, [r4, #8]
 800dd38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dd40:	2208      	movs	r2, #8
 800dd42:	4629      	mov	r1, r5
 800dd44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd48:	f7fe fb56 	bl	800c3f8 <memset>
 800dd4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd54:	e7e9      	b.n	800dd2a <__sfp+0x42>
 800dd56:	bf00      	nop
 800dd58:	0800ee00 	.word	0x0800ee00
 800dd5c:	ffff0001 	.word	0xffff0001

0800dd60 <_fwalk_reent>:
 800dd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd64:	4680      	mov	r8, r0
 800dd66:	4689      	mov	r9, r1
 800dd68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd6c:	2600      	movs	r6, #0
 800dd6e:	b914      	cbnz	r4, 800dd76 <_fwalk_reent+0x16>
 800dd70:	4630      	mov	r0, r6
 800dd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dd7a:	3f01      	subs	r7, #1
 800dd7c:	d501      	bpl.n	800dd82 <_fwalk_reent+0x22>
 800dd7e:	6824      	ldr	r4, [r4, #0]
 800dd80:	e7f5      	b.n	800dd6e <_fwalk_reent+0xe>
 800dd82:	89ab      	ldrh	r3, [r5, #12]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d907      	bls.n	800dd98 <_fwalk_reent+0x38>
 800dd88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	d003      	beq.n	800dd98 <_fwalk_reent+0x38>
 800dd90:	4629      	mov	r1, r5
 800dd92:	4640      	mov	r0, r8
 800dd94:	47c8      	blx	r9
 800dd96:	4306      	orrs	r6, r0
 800dd98:	3568      	adds	r5, #104	; 0x68
 800dd9a:	e7ee      	b.n	800dd7a <_fwalk_reent+0x1a>

0800dd9c <_localeconv_r>:
 800dd9c:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <_localeconv_r+0x14>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6a18      	ldr	r0, [r3, #32]
 800dda2:	4b04      	ldr	r3, [pc, #16]	; (800ddb4 <_localeconv_r+0x18>)
 800dda4:	2800      	cmp	r0, #0
 800dda6:	bf08      	it	eq
 800dda8:	4618      	moveq	r0, r3
 800ddaa:	30f0      	adds	r0, #240	; 0xf0
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	24000010 	.word	0x24000010
 800ddb4:	24000074 	.word	0x24000074

0800ddb8 <__swhatbuf_r>:
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	460e      	mov	r6, r1
 800ddbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	b096      	sub	sp, #88	; 0x58
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	461d      	mov	r5, r3
 800ddc8:	da07      	bge.n	800ddda <__swhatbuf_r+0x22>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	89b3      	ldrh	r3, [r6, #12]
 800ddd0:	061a      	lsls	r2, r3, #24
 800ddd2:	d410      	bmi.n	800ddf6 <__swhatbuf_r+0x3e>
 800ddd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddd8:	e00e      	b.n	800ddf8 <__swhatbuf_r+0x40>
 800ddda:	466a      	mov	r2, sp
 800dddc:	f000 fdaa 	bl	800e934 <_fstat_r>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dbf2      	blt.n	800ddca <__swhatbuf_r+0x12>
 800dde4:	9a01      	ldr	r2, [sp, #4]
 800dde6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddee:	425a      	negs	r2, r3
 800ddf0:	415a      	adcs	r2, r3
 800ddf2:	602a      	str	r2, [r5, #0]
 800ddf4:	e7ee      	b.n	800ddd4 <__swhatbuf_r+0x1c>
 800ddf6:	2340      	movs	r3, #64	; 0x40
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	b016      	add	sp, #88	; 0x58
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}

0800de00 <__smakebuf_r>:
 800de00:	898b      	ldrh	r3, [r1, #12]
 800de02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de04:	079d      	lsls	r5, r3, #30
 800de06:	4606      	mov	r6, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	d507      	bpl.n	800de1c <__smakebuf_r+0x1c>
 800de0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	2301      	movs	r3, #1
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	b002      	add	sp, #8
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	ab01      	add	r3, sp, #4
 800de1e:	466a      	mov	r2, sp
 800de20:	f7ff ffca 	bl	800ddb8 <__swhatbuf_r>
 800de24:	9900      	ldr	r1, [sp, #0]
 800de26:	4605      	mov	r5, r0
 800de28:	4630      	mov	r0, r6
 800de2a:	f000 fb73 	bl	800e514 <_malloc_r>
 800de2e:	b948      	cbnz	r0, 800de44 <__smakebuf_r+0x44>
 800de30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de34:	059a      	lsls	r2, r3, #22
 800de36:	d4ef      	bmi.n	800de18 <__smakebuf_r+0x18>
 800de38:	f023 0303 	bic.w	r3, r3, #3
 800de3c:	f043 0302 	orr.w	r3, r3, #2
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	e7e3      	b.n	800de0c <__smakebuf_r+0xc>
 800de44:	4b0d      	ldr	r3, [pc, #52]	; (800de7c <__smakebuf_r+0x7c>)
 800de46:	62b3      	str	r3, [r6, #40]	; 0x28
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	6020      	str	r0, [r4, #0]
 800de4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	9b00      	ldr	r3, [sp, #0]
 800de54:	6163      	str	r3, [r4, #20]
 800de56:	9b01      	ldr	r3, [sp, #4]
 800de58:	6120      	str	r0, [r4, #16]
 800de5a:	b15b      	cbz	r3, 800de74 <__smakebuf_r+0x74>
 800de5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de60:	4630      	mov	r0, r6
 800de62:	f000 fd79 	bl	800e958 <_isatty_r>
 800de66:	b128      	cbz	r0, 800de74 <__smakebuf_r+0x74>
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	f023 0303 	bic.w	r3, r3, #3
 800de6e:	f043 0301 	orr.w	r3, r3, #1
 800de72:	81a3      	strh	r3, [r4, #12]
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	431d      	orrs	r5, r3
 800de78:	81a5      	strh	r5, [r4, #12]
 800de7a:	e7cd      	b.n	800de18 <__smakebuf_r+0x18>
 800de7c:	0800dc51 	.word	0x0800dc51

0800de80 <malloc>:
 800de80:	4b02      	ldr	r3, [pc, #8]	; (800de8c <malloc+0xc>)
 800de82:	4601      	mov	r1, r0
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	f000 bb45 	b.w	800e514 <_malloc_r>
 800de8a:	bf00      	nop
 800de8c:	24000010 	.word	0x24000010

0800de90 <memcpy>:
 800de90:	b510      	push	{r4, lr}
 800de92:	1e43      	subs	r3, r0, #1
 800de94:	440a      	add	r2, r1
 800de96:	4291      	cmp	r1, r2
 800de98:	d100      	bne.n	800de9c <memcpy+0xc>
 800de9a:	bd10      	pop	{r4, pc}
 800de9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dea4:	e7f7      	b.n	800de96 <memcpy+0x6>

0800dea6 <_Balloc>:
 800dea6:	b570      	push	{r4, r5, r6, lr}
 800dea8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800deaa:	4604      	mov	r4, r0
 800deac:	460e      	mov	r6, r1
 800deae:	b93d      	cbnz	r5, 800dec0 <_Balloc+0x1a>
 800deb0:	2010      	movs	r0, #16
 800deb2:	f7ff ffe5 	bl	800de80 <malloc>
 800deb6:	6260      	str	r0, [r4, #36]	; 0x24
 800deb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800debc:	6005      	str	r5, [r0, #0]
 800debe:	60c5      	str	r5, [r0, #12]
 800dec0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dec2:	68eb      	ldr	r3, [r5, #12]
 800dec4:	b183      	cbz	r3, 800dee8 <_Balloc+0x42>
 800dec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dece:	b9b8      	cbnz	r0, 800df00 <_Balloc+0x5a>
 800ded0:	2101      	movs	r1, #1
 800ded2:	fa01 f506 	lsl.w	r5, r1, r6
 800ded6:	1d6a      	adds	r2, r5, #5
 800ded8:	0092      	lsls	r2, r2, #2
 800deda:	4620      	mov	r0, r4
 800dedc:	f000 fabe 	bl	800e45c <_calloc_r>
 800dee0:	b160      	cbz	r0, 800defc <_Balloc+0x56>
 800dee2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dee6:	e00e      	b.n	800df06 <_Balloc+0x60>
 800dee8:	2221      	movs	r2, #33	; 0x21
 800deea:	2104      	movs	r1, #4
 800deec:	4620      	mov	r0, r4
 800deee:	f000 fab5 	bl	800e45c <_calloc_r>
 800def2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800def4:	60e8      	str	r0, [r5, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e4      	bne.n	800dec6 <_Balloc+0x20>
 800defc:	2000      	movs	r0, #0
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	6802      	ldr	r2, [r0, #0]
 800df02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800df06:	2300      	movs	r3, #0
 800df08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df0c:	e7f7      	b.n	800defe <_Balloc+0x58>

0800df0e <_Bfree>:
 800df0e:	b570      	push	{r4, r5, r6, lr}
 800df10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800df12:	4606      	mov	r6, r0
 800df14:	460d      	mov	r5, r1
 800df16:	b93c      	cbnz	r4, 800df28 <_Bfree+0x1a>
 800df18:	2010      	movs	r0, #16
 800df1a:	f7ff ffb1 	bl	800de80 <malloc>
 800df1e:	6270      	str	r0, [r6, #36]	; 0x24
 800df20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df24:	6004      	str	r4, [r0, #0]
 800df26:	60c4      	str	r4, [r0, #12]
 800df28:	b13d      	cbz	r5, 800df3a <_Bfree+0x2c>
 800df2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df2c:	686a      	ldr	r2, [r5, #4]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df34:	6029      	str	r1, [r5, #0]
 800df36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800df3a:	bd70      	pop	{r4, r5, r6, pc}

0800df3c <__multadd>:
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	690d      	ldr	r5, [r1, #16]
 800df42:	461f      	mov	r7, r3
 800df44:	4606      	mov	r6, r0
 800df46:	460c      	mov	r4, r1
 800df48:	f101 0c14 	add.w	ip, r1, #20
 800df4c:	2300      	movs	r3, #0
 800df4e:	f8dc 0000 	ldr.w	r0, [ip]
 800df52:	b281      	uxth	r1, r0
 800df54:	fb02 7101 	mla	r1, r2, r1, r7
 800df58:	0c0f      	lsrs	r7, r1, #16
 800df5a:	0c00      	lsrs	r0, r0, #16
 800df5c:	fb02 7000 	mla	r0, r2, r0, r7
 800df60:	b289      	uxth	r1, r1
 800df62:	3301      	adds	r3, #1
 800df64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800df68:	429d      	cmp	r5, r3
 800df6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800df6e:	f84c 1b04 	str.w	r1, [ip], #4
 800df72:	dcec      	bgt.n	800df4e <__multadd+0x12>
 800df74:	b1d7      	cbz	r7, 800dfac <__multadd+0x70>
 800df76:	68a3      	ldr	r3, [r4, #8]
 800df78:	42ab      	cmp	r3, r5
 800df7a:	dc12      	bgt.n	800dfa2 <__multadd+0x66>
 800df7c:	6861      	ldr	r1, [r4, #4]
 800df7e:	4630      	mov	r0, r6
 800df80:	3101      	adds	r1, #1
 800df82:	f7ff ff90 	bl	800dea6 <_Balloc>
 800df86:	6922      	ldr	r2, [r4, #16]
 800df88:	3202      	adds	r2, #2
 800df8a:	f104 010c 	add.w	r1, r4, #12
 800df8e:	4680      	mov	r8, r0
 800df90:	0092      	lsls	r2, r2, #2
 800df92:	300c      	adds	r0, #12
 800df94:	f7ff ff7c 	bl	800de90 <memcpy>
 800df98:	4621      	mov	r1, r4
 800df9a:	4630      	mov	r0, r6
 800df9c:	f7ff ffb7 	bl	800df0e <_Bfree>
 800dfa0:	4644      	mov	r4, r8
 800dfa2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfa6:	3501      	adds	r5, #1
 800dfa8:	615f      	str	r7, [r3, #20]
 800dfaa:	6125      	str	r5, [r4, #16]
 800dfac:	4620      	mov	r0, r4
 800dfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfb2 <__hi0bits>:
 800dfb2:	0c02      	lsrs	r2, r0, #16
 800dfb4:	0412      	lsls	r2, r2, #16
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	b9b2      	cbnz	r2, 800dfe8 <__hi0bits+0x36>
 800dfba:	0403      	lsls	r3, r0, #16
 800dfbc:	2010      	movs	r0, #16
 800dfbe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dfc2:	bf04      	itt	eq
 800dfc4:	021b      	lsleq	r3, r3, #8
 800dfc6:	3008      	addeq	r0, #8
 800dfc8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dfcc:	bf04      	itt	eq
 800dfce:	011b      	lsleq	r3, r3, #4
 800dfd0:	3004      	addeq	r0, #4
 800dfd2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dfd6:	bf04      	itt	eq
 800dfd8:	009b      	lsleq	r3, r3, #2
 800dfda:	3002      	addeq	r0, #2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	db06      	blt.n	800dfee <__hi0bits+0x3c>
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	d503      	bpl.n	800dfec <__hi0bits+0x3a>
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	4770      	bx	lr
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e7e8      	b.n	800dfbe <__hi0bits+0xc>
 800dfec:	2020      	movs	r0, #32
 800dfee:	4770      	bx	lr

0800dff0 <__lo0bits>:
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	f013 0207 	ands.w	r2, r3, #7
 800dff6:	4601      	mov	r1, r0
 800dff8:	d00b      	beq.n	800e012 <__lo0bits+0x22>
 800dffa:	07da      	lsls	r2, r3, #31
 800dffc:	d423      	bmi.n	800e046 <__lo0bits+0x56>
 800dffe:	0798      	lsls	r0, r3, #30
 800e000:	bf49      	itett	mi
 800e002:	085b      	lsrmi	r3, r3, #1
 800e004:	089b      	lsrpl	r3, r3, #2
 800e006:	2001      	movmi	r0, #1
 800e008:	600b      	strmi	r3, [r1, #0]
 800e00a:	bf5c      	itt	pl
 800e00c:	600b      	strpl	r3, [r1, #0]
 800e00e:	2002      	movpl	r0, #2
 800e010:	4770      	bx	lr
 800e012:	b298      	uxth	r0, r3
 800e014:	b9a8      	cbnz	r0, 800e042 <__lo0bits+0x52>
 800e016:	0c1b      	lsrs	r3, r3, #16
 800e018:	2010      	movs	r0, #16
 800e01a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e01e:	bf04      	itt	eq
 800e020:	0a1b      	lsreq	r3, r3, #8
 800e022:	3008      	addeq	r0, #8
 800e024:	071a      	lsls	r2, r3, #28
 800e026:	bf04      	itt	eq
 800e028:	091b      	lsreq	r3, r3, #4
 800e02a:	3004      	addeq	r0, #4
 800e02c:	079a      	lsls	r2, r3, #30
 800e02e:	bf04      	itt	eq
 800e030:	089b      	lsreq	r3, r3, #2
 800e032:	3002      	addeq	r0, #2
 800e034:	07da      	lsls	r2, r3, #31
 800e036:	d402      	bmi.n	800e03e <__lo0bits+0x4e>
 800e038:	085b      	lsrs	r3, r3, #1
 800e03a:	d006      	beq.n	800e04a <__lo0bits+0x5a>
 800e03c:	3001      	adds	r0, #1
 800e03e:	600b      	str	r3, [r1, #0]
 800e040:	4770      	bx	lr
 800e042:	4610      	mov	r0, r2
 800e044:	e7e9      	b.n	800e01a <__lo0bits+0x2a>
 800e046:	2000      	movs	r0, #0
 800e048:	4770      	bx	lr
 800e04a:	2020      	movs	r0, #32
 800e04c:	4770      	bx	lr

0800e04e <__i2b>:
 800e04e:	b510      	push	{r4, lr}
 800e050:	460c      	mov	r4, r1
 800e052:	2101      	movs	r1, #1
 800e054:	f7ff ff27 	bl	800dea6 <_Balloc>
 800e058:	2201      	movs	r2, #1
 800e05a:	6144      	str	r4, [r0, #20]
 800e05c:	6102      	str	r2, [r0, #16]
 800e05e:	bd10      	pop	{r4, pc}

0800e060 <__multiply>:
 800e060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	4614      	mov	r4, r2
 800e066:	690a      	ldr	r2, [r1, #16]
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	bfb8      	it	lt
 800e06e:	460b      	movlt	r3, r1
 800e070:	4688      	mov	r8, r1
 800e072:	bfbc      	itt	lt
 800e074:	46a0      	movlt	r8, r4
 800e076:	461c      	movlt	r4, r3
 800e078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e07c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e080:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e088:	eb07 0609 	add.w	r6, r7, r9
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	bfb8      	it	lt
 800e090:	3101      	addlt	r1, #1
 800e092:	f7ff ff08 	bl	800dea6 <_Balloc>
 800e096:	f100 0514 	add.w	r5, r0, #20
 800e09a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e09e:	462b      	mov	r3, r5
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4573      	cmp	r3, lr
 800e0a4:	d316      	bcc.n	800e0d4 <__multiply+0x74>
 800e0a6:	f104 0214 	add.w	r2, r4, #20
 800e0aa:	f108 0114 	add.w	r1, r8, #20
 800e0ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e0b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	9b00      	ldr	r3, [sp, #0]
 800e0ba:	9201      	str	r2, [sp, #4]
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d80c      	bhi.n	800e0da <__multiply+0x7a>
 800e0c0:	2e00      	cmp	r6, #0
 800e0c2:	dd03      	ble.n	800e0cc <__multiply+0x6c>
 800e0c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d05d      	beq.n	800e188 <__multiply+0x128>
 800e0cc:	6106      	str	r6, [r0, #16]
 800e0ce:	b003      	add	sp, #12
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d4:	f843 2b04 	str.w	r2, [r3], #4
 800e0d8:	e7e3      	b.n	800e0a2 <__multiply+0x42>
 800e0da:	f8b2 b000 	ldrh.w	fp, [r2]
 800e0de:	f1bb 0f00 	cmp.w	fp, #0
 800e0e2:	d023      	beq.n	800e12c <__multiply+0xcc>
 800e0e4:	4689      	mov	r9, r1
 800e0e6:	46ac      	mov	ip, r5
 800e0e8:	f04f 0800 	mov.w	r8, #0
 800e0ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800e0f0:	f8dc a000 	ldr.w	sl, [ip]
 800e0f4:	b2a3      	uxth	r3, r4
 800e0f6:	fa1f fa8a 	uxth.w	sl, sl
 800e0fa:	fb0b a303 	mla	r3, fp, r3, sl
 800e0fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e102:	f8dc 4000 	ldr.w	r4, [ip]
 800e106:	4443      	add	r3, r8
 800e108:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e10c:	fb0b 840a 	mla	r4, fp, sl, r8
 800e110:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e114:	46e2      	mov	sl, ip
 800e116:	b29b      	uxth	r3, r3
 800e118:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e11c:	454f      	cmp	r7, r9
 800e11e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e122:	f84a 3b04 	str.w	r3, [sl], #4
 800e126:	d82b      	bhi.n	800e180 <__multiply+0x120>
 800e128:	f8cc 8004 	str.w	r8, [ip, #4]
 800e12c:	9b01      	ldr	r3, [sp, #4]
 800e12e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e132:	3204      	adds	r2, #4
 800e134:	f1ba 0f00 	cmp.w	sl, #0
 800e138:	d020      	beq.n	800e17c <__multiply+0x11c>
 800e13a:	682b      	ldr	r3, [r5, #0]
 800e13c:	4689      	mov	r9, r1
 800e13e:	46a8      	mov	r8, r5
 800e140:	f04f 0b00 	mov.w	fp, #0
 800e144:	f8b9 c000 	ldrh.w	ip, [r9]
 800e148:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e14c:	fb0a 440c 	mla	r4, sl, ip, r4
 800e150:	445c      	add	r4, fp
 800e152:	46c4      	mov	ip, r8
 800e154:	b29b      	uxth	r3, r3
 800e156:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e15a:	f84c 3b04 	str.w	r3, [ip], #4
 800e15e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e162:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e166:	0c1b      	lsrs	r3, r3, #16
 800e168:	fb0a b303 	mla	r3, sl, r3, fp
 800e16c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e170:	454f      	cmp	r7, r9
 800e172:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e176:	d805      	bhi.n	800e184 <__multiply+0x124>
 800e178:	f8c8 3004 	str.w	r3, [r8, #4]
 800e17c:	3504      	adds	r5, #4
 800e17e:	e79b      	b.n	800e0b8 <__multiply+0x58>
 800e180:	46d4      	mov	ip, sl
 800e182:	e7b3      	b.n	800e0ec <__multiply+0x8c>
 800e184:	46e0      	mov	r8, ip
 800e186:	e7dd      	b.n	800e144 <__multiply+0xe4>
 800e188:	3e01      	subs	r6, #1
 800e18a:	e799      	b.n	800e0c0 <__multiply+0x60>

0800e18c <__pow5mult>:
 800e18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e190:	4615      	mov	r5, r2
 800e192:	f012 0203 	ands.w	r2, r2, #3
 800e196:	4606      	mov	r6, r0
 800e198:	460f      	mov	r7, r1
 800e19a:	d007      	beq.n	800e1ac <__pow5mult+0x20>
 800e19c:	3a01      	subs	r2, #1
 800e19e:	4c21      	ldr	r4, [pc, #132]	; (800e224 <__pow5mult+0x98>)
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1a6:	f7ff fec9 	bl	800df3c <__multadd>
 800e1aa:	4607      	mov	r7, r0
 800e1ac:	10ad      	asrs	r5, r5, #2
 800e1ae:	d035      	beq.n	800e21c <__pow5mult+0x90>
 800e1b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e1b2:	b93c      	cbnz	r4, 800e1c4 <__pow5mult+0x38>
 800e1b4:	2010      	movs	r0, #16
 800e1b6:	f7ff fe63 	bl	800de80 <malloc>
 800e1ba:	6270      	str	r0, [r6, #36]	; 0x24
 800e1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1c0:	6004      	str	r4, [r0, #0]
 800e1c2:	60c4      	str	r4, [r0, #12]
 800e1c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1cc:	b94c      	cbnz	r4, 800e1e2 <__pow5mult+0x56>
 800e1ce:	f240 2171 	movw	r1, #625	; 0x271
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f7ff ff3b 	bl	800e04e <__i2b>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1de:	4604      	mov	r4, r0
 800e1e0:	6003      	str	r3, [r0, #0]
 800e1e2:	f04f 0800 	mov.w	r8, #0
 800e1e6:	07eb      	lsls	r3, r5, #31
 800e1e8:	d50a      	bpl.n	800e200 <__pow5mult+0x74>
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	f7ff ff36 	bl	800e060 <__multiply>
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	4681      	mov	r9, r0
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7ff fe88 	bl	800df0e <_Bfree>
 800e1fe:	464f      	mov	r7, r9
 800e200:	106d      	asrs	r5, r5, #1
 800e202:	d00b      	beq.n	800e21c <__pow5mult+0x90>
 800e204:	6820      	ldr	r0, [r4, #0]
 800e206:	b938      	cbnz	r0, 800e218 <__pow5mult+0x8c>
 800e208:	4622      	mov	r2, r4
 800e20a:	4621      	mov	r1, r4
 800e20c:	4630      	mov	r0, r6
 800e20e:	f7ff ff27 	bl	800e060 <__multiply>
 800e212:	6020      	str	r0, [r4, #0]
 800e214:	f8c0 8000 	str.w	r8, [r0]
 800e218:	4604      	mov	r4, r0
 800e21a:	e7e4      	b.n	800e1e6 <__pow5mult+0x5a>
 800e21c:	4638      	mov	r0, r7
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	bf00      	nop
 800e224:	0800ef98 	.word	0x0800ef98

0800e228 <__lshift>:
 800e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e22c:	460c      	mov	r4, r1
 800e22e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e232:	6923      	ldr	r3, [r4, #16]
 800e234:	6849      	ldr	r1, [r1, #4]
 800e236:	eb0a 0903 	add.w	r9, sl, r3
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	4607      	mov	r7, r0
 800e23e:	4616      	mov	r6, r2
 800e240:	f109 0501 	add.w	r5, r9, #1
 800e244:	42ab      	cmp	r3, r5
 800e246:	db32      	blt.n	800e2ae <__lshift+0x86>
 800e248:	4638      	mov	r0, r7
 800e24a:	f7ff fe2c 	bl	800dea6 <_Balloc>
 800e24e:	2300      	movs	r3, #0
 800e250:	4680      	mov	r8, r0
 800e252:	f100 0114 	add.w	r1, r0, #20
 800e256:	461a      	mov	r2, r3
 800e258:	4553      	cmp	r3, sl
 800e25a:	db2b      	blt.n	800e2b4 <__lshift+0x8c>
 800e25c:	6920      	ldr	r0, [r4, #16]
 800e25e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e262:	f104 0314 	add.w	r3, r4, #20
 800e266:	f016 021f 	ands.w	r2, r6, #31
 800e26a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e26e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e272:	d025      	beq.n	800e2c0 <__lshift+0x98>
 800e274:	f1c2 0e20 	rsb	lr, r2, #32
 800e278:	2000      	movs	r0, #0
 800e27a:	681e      	ldr	r6, [r3, #0]
 800e27c:	468a      	mov	sl, r1
 800e27e:	4096      	lsls	r6, r2
 800e280:	4330      	orrs	r0, r6
 800e282:	f84a 0b04 	str.w	r0, [sl], #4
 800e286:	f853 0b04 	ldr.w	r0, [r3], #4
 800e28a:	459c      	cmp	ip, r3
 800e28c:	fa20 f00e 	lsr.w	r0, r0, lr
 800e290:	d814      	bhi.n	800e2bc <__lshift+0x94>
 800e292:	6048      	str	r0, [r1, #4]
 800e294:	b108      	cbz	r0, 800e29a <__lshift+0x72>
 800e296:	f109 0502 	add.w	r5, r9, #2
 800e29a:	3d01      	subs	r5, #1
 800e29c:	4638      	mov	r0, r7
 800e29e:	f8c8 5010 	str.w	r5, [r8, #16]
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	f7ff fe33 	bl	800df0e <_Bfree>
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ae:	3101      	adds	r1, #1
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	e7c7      	b.n	800e244 <__lshift+0x1c>
 800e2b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	e7cd      	b.n	800e258 <__lshift+0x30>
 800e2bc:	4651      	mov	r1, sl
 800e2be:	e7dc      	b.n	800e27a <__lshift+0x52>
 800e2c0:	3904      	subs	r1, #4
 800e2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2ca:	459c      	cmp	ip, r3
 800e2cc:	d8f9      	bhi.n	800e2c2 <__lshift+0x9a>
 800e2ce:	e7e4      	b.n	800e29a <__lshift+0x72>

0800e2d0 <__mcmp>:
 800e2d0:	6903      	ldr	r3, [r0, #16]
 800e2d2:	690a      	ldr	r2, [r1, #16]
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	b530      	push	{r4, r5, lr}
 800e2d8:	d10c      	bne.n	800e2f4 <__mcmp+0x24>
 800e2da:	0092      	lsls	r2, r2, #2
 800e2dc:	3014      	adds	r0, #20
 800e2de:	3114      	adds	r1, #20
 800e2e0:	1884      	adds	r4, r0, r2
 800e2e2:	4411      	add	r1, r2
 800e2e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e2e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e2ec:	4295      	cmp	r5, r2
 800e2ee:	d003      	beq.n	800e2f8 <__mcmp+0x28>
 800e2f0:	d305      	bcc.n	800e2fe <__mcmp+0x2e>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	bd30      	pop	{r4, r5, pc}
 800e2f8:	42a0      	cmp	r0, r4
 800e2fa:	d3f3      	bcc.n	800e2e4 <__mcmp+0x14>
 800e2fc:	e7fa      	b.n	800e2f4 <__mcmp+0x24>
 800e2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e302:	e7f7      	b.n	800e2f4 <__mcmp+0x24>

0800e304 <__mdiff>:
 800e304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e308:	460d      	mov	r5, r1
 800e30a:	4607      	mov	r7, r0
 800e30c:	4611      	mov	r1, r2
 800e30e:	4628      	mov	r0, r5
 800e310:	4614      	mov	r4, r2
 800e312:	f7ff ffdd 	bl	800e2d0 <__mcmp>
 800e316:	1e06      	subs	r6, r0, #0
 800e318:	d108      	bne.n	800e32c <__mdiff+0x28>
 800e31a:	4631      	mov	r1, r6
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff fdc2 	bl	800dea6 <_Balloc>
 800e322:	2301      	movs	r3, #1
 800e324:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32c:	bfa4      	itt	ge
 800e32e:	4623      	movge	r3, r4
 800e330:	462c      	movge	r4, r5
 800e332:	4638      	mov	r0, r7
 800e334:	6861      	ldr	r1, [r4, #4]
 800e336:	bfa6      	itte	ge
 800e338:	461d      	movge	r5, r3
 800e33a:	2600      	movge	r6, #0
 800e33c:	2601      	movlt	r6, #1
 800e33e:	f7ff fdb2 	bl	800dea6 <_Balloc>
 800e342:	692b      	ldr	r3, [r5, #16]
 800e344:	60c6      	str	r6, [r0, #12]
 800e346:	6926      	ldr	r6, [r4, #16]
 800e348:	f105 0914 	add.w	r9, r5, #20
 800e34c:	f104 0214 	add.w	r2, r4, #20
 800e350:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e354:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e358:	f100 0514 	add.w	r5, r0, #20
 800e35c:	f04f 0e00 	mov.w	lr, #0
 800e360:	f852 ab04 	ldr.w	sl, [r2], #4
 800e364:	f859 4b04 	ldr.w	r4, [r9], #4
 800e368:	fa1e f18a 	uxtah	r1, lr, sl
 800e36c:	b2a3      	uxth	r3, r4
 800e36e:	1ac9      	subs	r1, r1, r3
 800e370:	0c23      	lsrs	r3, r4, #16
 800e372:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e376:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e37a:	b289      	uxth	r1, r1
 800e37c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e380:	45c8      	cmp	r8, r9
 800e382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e386:	4694      	mov	ip, r2
 800e388:	f845 3b04 	str.w	r3, [r5], #4
 800e38c:	d8e8      	bhi.n	800e360 <__mdiff+0x5c>
 800e38e:	45bc      	cmp	ip, r7
 800e390:	d304      	bcc.n	800e39c <__mdiff+0x98>
 800e392:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e396:	b183      	cbz	r3, 800e3ba <__mdiff+0xb6>
 800e398:	6106      	str	r6, [r0, #16]
 800e39a:	e7c5      	b.n	800e328 <__mdiff+0x24>
 800e39c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3a0:	fa1e f381 	uxtah	r3, lr, r1
 800e3a4:	141a      	asrs	r2, r3, #16
 800e3a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e3b4:	f845 3b04 	str.w	r3, [r5], #4
 800e3b8:	e7e9      	b.n	800e38e <__mdiff+0x8a>
 800e3ba:	3e01      	subs	r6, #1
 800e3bc:	e7e9      	b.n	800e392 <__mdiff+0x8e>

0800e3be <__d2b>:
 800e3be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3c2:	460e      	mov	r6, r1
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	ec59 8b10 	vmov	r8, r9, d0
 800e3ca:	4615      	mov	r5, r2
 800e3cc:	f7ff fd6b 	bl	800dea6 <_Balloc>
 800e3d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e3d4:	4607      	mov	r7, r0
 800e3d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3da:	bb34      	cbnz	r4, 800e42a <__d2b+0x6c>
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	f1b8 0300 	subs.w	r3, r8, #0
 800e3e2:	d027      	beq.n	800e434 <__d2b+0x76>
 800e3e4:	a802      	add	r0, sp, #8
 800e3e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e3ea:	f7ff fe01 	bl	800dff0 <__lo0bits>
 800e3ee:	9900      	ldr	r1, [sp, #0]
 800e3f0:	b1f0      	cbz	r0, 800e430 <__d2b+0x72>
 800e3f2:	9a01      	ldr	r2, [sp, #4]
 800e3f4:	f1c0 0320 	rsb	r3, r0, #32
 800e3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fc:	430b      	orrs	r3, r1
 800e3fe:	40c2      	lsrs	r2, r0
 800e400:	617b      	str	r3, [r7, #20]
 800e402:	9201      	str	r2, [sp, #4]
 800e404:	9b01      	ldr	r3, [sp, #4]
 800e406:	61bb      	str	r3, [r7, #24]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bf14      	ite	ne
 800e40c:	2102      	movne	r1, #2
 800e40e:	2101      	moveq	r1, #1
 800e410:	6139      	str	r1, [r7, #16]
 800e412:	b1c4      	cbz	r4, 800e446 <__d2b+0x88>
 800e414:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e418:	4404      	add	r4, r0
 800e41a:	6034      	str	r4, [r6, #0]
 800e41c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e420:	6028      	str	r0, [r5, #0]
 800e422:	4638      	mov	r0, r7
 800e424:	b003      	add	sp, #12
 800e426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e42e:	e7d5      	b.n	800e3dc <__d2b+0x1e>
 800e430:	6179      	str	r1, [r7, #20]
 800e432:	e7e7      	b.n	800e404 <__d2b+0x46>
 800e434:	a801      	add	r0, sp, #4
 800e436:	f7ff fddb 	bl	800dff0 <__lo0bits>
 800e43a:	9b01      	ldr	r3, [sp, #4]
 800e43c:	617b      	str	r3, [r7, #20]
 800e43e:	2101      	movs	r1, #1
 800e440:	6139      	str	r1, [r7, #16]
 800e442:	3020      	adds	r0, #32
 800e444:	e7e5      	b.n	800e412 <__d2b+0x54>
 800e446:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e44a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e44e:	6030      	str	r0, [r6, #0]
 800e450:	6918      	ldr	r0, [r3, #16]
 800e452:	f7ff fdae 	bl	800dfb2 <__hi0bits>
 800e456:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e45a:	e7e1      	b.n	800e420 <__d2b+0x62>

0800e45c <_calloc_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	fb02 f401 	mul.w	r4, r2, r1
 800e462:	4621      	mov	r1, r4
 800e464:	f000 f856 	bl	800e514 <_malloc_r>
 800e468:	4605      	mov	r5, r0
 800e46a:	b118      	cbz	r0, 800e474 <_calloc_r+0x18>
 800e46c:	4622      	mov	r2, r4
 800e46e:	2100      	movs	r1, #0
 800e470:	f7fd ffc2 	bl	800c3f8 <memset>
 800e474:	4628      	mov	r0, r5
 800e476:	bd38      	pop	{r3, r4, r5, pc}

0800e478 <_free_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4605      	mov	r5, r0
 800e47c:	2900      	cmp	r1, #0
 800e47e:	d045      	beq.n	800e50c <_free_r+0x94>
 800e480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e484:	1f0c      	subs	r4, r1, #4
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfb8      	it	lt
 800e48a:	18e4      	addlt	r4, r4, r3
 800e48c:	f000 fa98 	bl	800e9c0 <__malloc_lock>
 800e490:	4a1f      	ldr	r2, [pc, #124]	; (800e510 <_free_r+0x98>)
 800e492:	6813      	ldr	r3, [r2, #0]
 800e494:	4610      	mov	r0, r2
 800e496:	b933      	cbnz	r3, 800e4a6 <_free_r+0x2e>
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	6014      	str	r4, [r2, #0]
 800e49c:	4628      	mov	r0, r5
 800e49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a2:	f000 ba8e 	b.w	800e9c2 <__malloc_unlock>
 800e4a6:	42a3      	cmp	r3, r4
 800e4a8:	d90c      	bls.n	800e4c4 <_free_r+0x4c>
 800e4aa:	6821      	ldr	r1, [r4, #0]
 800e4ac:	1862      	adds	r2, r4, r1
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	bf04      	itt	eq
 800e4b2:	681a      	ldreq	r2, [r3, #0]
 800e4b4:	685b      	ldreq	r3, [r3, #4]
 800e4b6:	6063      	str	r3, [r4, #4]
 800e4b8:	bf04      	itt	eq
 800e4ba:	1852      	addeq	r2, r2, r1
 800e4bc:	6022      	streq	r2, [r4, #0]
 800e4be:	6004      	str	r4, [r0, #0]
 800e4c0:	e7ec      	b.n	800e49c <_free_r+0x24>
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	685a      	ldr	r2, [r3, #4]
 800e4c6:	b10a      	cbz	r2, 800e4cc <_free_r+0x54>
 800e4c8:	42a2      	cmp	r2, r4
 800e4ca:	d9fa      	bls.n	800e4c2 <_free_r+0x4a>
 800e4cc:	6819      	ldr	r1, [r3, #0]
 800e4ce:	1858      	adds	r0, r3, r1
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d10b      	bne.n	800e4ec <_free_r+0x74>
 800e4d4:	6820      	ldr	r0, [r4, #0]
 800e4d6:	4401      	add	r1, r0
 800e4d8:	1858      	adds	r0, r3, r1
 800e4da:	4282      	cmp	r2, r0
 800e4dc:	6019      	str	r1, [r3, #0]
 800e4de:	d1dd      	bne.n	800e49c <_free_r+0x24>
 800e4e0:	6810      	ldr	r0, [r2, #0]
 800e4e2:	6852      	ldr	r2, [r2, #4]
 800e4e4:	605a      	str	r2, [r3, #4]
 800e4e6:	4401      	add	r1, r0
 800e4e8:	6019      	str	r1, [r3, #0]
 800e4ea:	e7d7      	b.n	800e49c <_free_r+0x24>
 800e4ec:	d902      	bls.n	800e4f4 <_free_r+0x7c>
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	602b      	str	r3, [r5, #0]
 800e4f2:	e7d3      	b.n	800e49c <_free_r+0x24>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	1821      	adds	r1, r4, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	bf04      	itt	eq
 800e4fc:	6811      	ldreq	r1, [r2, #0]
 800e4fe:	6852      	ldreq	r2, [r2, #4]
 800e500:	6062      	str	r2, [r4, #4]
 800e502:	bf04      	itt	eq
 800e504:	1809      	addeq	r1, r1, r0
 800e506:	6021      	streq	r1, [r4, #0]
 800e508:	605c      	str	r4, [r3, #4]
 800e50a:	e7c7      	b.n	800e49c <_free_r+0x24>
 800e50c:	bd38      	pop	{r3, r4, r5, pc}
 800e50e:	bf00      	nop
 800e510:	24000218 	.word	0x24000218

0800e514 <_malloc_r>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	1ccd      	adds	r5, r1, #3
 800e518:	f025 0503 	bic.w	r5, r5, #3
 800e51c:	3508      	adds	r5, #8
 800e51e:	2d0c      	cmp	r5, #12
 800e520:	bf38      	it	cc
 800e522:	250c      	movcc	r5, #12
 800e524:	2d00      	cmp	r5, #0
 800e526:	4606      	mov	r6, r0
 800e528:	db01      	blt.n	800e52e <_malloc_r+0x1a>
 800e52a:	42a9      	cmp	r1, r5
 800e52c:	d903      	bls.n	800e536 <_malloc_r+0x22>
 800e52e:	230c      	movs	r3, #12
 800e530:	6033      	str	r3, [r6, #0]
 800e532:	2000      	movs	r0, #0
 800e534:	bd70      	pop	{r4, r5, r6, pc}
 800e536:	f000 fa43 	bl	800e9c0 <__malloc_lock>
 800e53a:	4a21      	ldr	r2, [pc, #132]	; (800e5c0 <_malloc_r+0xac>)
 800e53c:	6814      	ldr	r4, [r2, #0]
 800e53e:	4621      	mov	r1, r4
 800e540:	b991      	cbnz	r1, 800e568 <_malloc_r+0x54>
 800e542:	4c20      	ldr	r4, [pc, #128]	; (800e5c4 <_malloc_r+0xb0>)
 800e544:	6823      	ldr	r3, [r4, #0]
 800e546:	b91b      	cbnz	r3, 800e550 <_malloc_r+0x3c>
 800e548:	4630      	mov	r0, r6
 800e54a:	f000 f97d 	bl	800e848 <_sbrk_r>
 800e54e:	6020      	str	r0, [r4, #0]
 800e550:	4629      	mov	r1, r5
 800e552:	4630      	mov	r0, r6
 800e554:	f000 f978 	bl	800e848 <_sbrk_r>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d124      	bne.n	800e5a6 <_malloc_r+0x92>
 800e55c:	230c      	movs	r3, #12
 800e55e:	6033      	str	r3, [r6, #0]
 800e560:	4630      	mov	r0, r6
 800e562:	f000 fa2e 	bl	800e9c2 <__malloc_unlock>
 800e566:	e7e4      	b.n	800e532 <_malloc_r+0x1e>
 800e568:	680b      	ldr	r3, [r1, #0]
 800e56a:	1b5b      	subs	r3, r3, r5
 800e56c:	d418      	bmi.n	800e5a0 <_malloc_r+0x8c>
 800e56e:	2b0b      	cmp	r3, #11
 800e570:	d90f      	bls.n	800e592 <_malloc_r+0x7e>
 800e572:	600b      	str	r3, [r1, #0]
 800e574:	50cd      	str	r5, [r1, r3]
 800e576:	18cc      	adds	r4, r1, r3
 800e578:	4630      	mov	r0, r6
 800e57a:	f000 fa22 	bl	800e9c2 <__malloc_unlock>
 800e57e:	f104 000b 	add.w	r0, r4, #11
 800e582:	1d23      	adds	r3, r4, #4
 800e584:	f020 0007 	bic.w	r0, r0, #7
 800e588:	1ac3      	subs	r3, r0, r3
 800e58a:	d0d3      	beq.n	800e534 <_malloc_r+0x20>
 800e58c:	425a      	negs	r2, r3
 800e58e:	50e2      	str	r2, [r4, r3]
 800e590:	e7d0      	b.n	800e534 <_malloc_r+0x20>
 800e592:	428c      	cmp	r4, r1
 800e594:	684b      	ldr	r3, [r1, #4]
 800e596:	bf16      	itet	ne
 800e598:	6063      	strne	r3, [r4, #4]
 800e59a:	6013      	streq	r3, [r2, #0]
 800e59c:	460c      	movne	r4, r1
 800e59e:	e7eb      	b.n	800e578 <_malloc_r+0x64>
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	6849      	ldr	r1, [r1, #4]
 800e5a4:	e7cc      	b.n	800e540 <_malloc_r+0x2c>
 800e5a6:	1cc4      	adds	r4, r0, #3
 800e5a8:	f024 0403 	bic.w	r4, r4, #3
 800e5ac:	42a0      	cmp	r0, r4
 800e5ae:	d005      	beq.n	800e5bc <_malloc_r+0xa8>
 800e5b0:	1a21      	subs	r1, r4, r0
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f000 f948 	bl	800e848 <_sbrk_r>
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d0cf      	beq.n	800e55c <_malloc_r+0x48>
 800e5bc:	6025      	str	r5, [r4, #0]
 800e5be:	e7db      	b.n	800e578 <_malloc_r+0x64>
 800e5c0:	24000218 	.word	0x24000218
 800e5c4:	2400021c 	.word	0x2400021c

0800e5c8 <__sfputc_r>:
 800e5c8:	6893      	ldr	r3, [r2, #8]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	b410      	push	{r4}
 800e5d0:	6093      	str	r3, [r2, #8]
 800e5d2:	da08      	bge.n	800e5e6 <__sfputc_r+0x1e>
 800e5d4:	6994      	ldr	r4, [r2, #24]
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	db01      	blt.n	800e5de <__sfputc_r+0x16>
 800e5da:	290a      	cmp	r1, #10
 800e5dc:	d103      	bne.n	800e5e6 <__sfputc_r+0x1e>
 800e5de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e2:	f7fe bbc9 	b.w	800cd78 <__swbuf_r>
 800e5e6:	6813      	ldr	r3, [r2, #0]
 800e5e8:	1c58      	adds	r0, r3, #1
 800e5ea:	6010      	str	r0, [r2, #0]
 800e5ec:	7019      	strb	r1, [r3, #0]
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <__sfputs_r>:
 800e5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	460f      	mov	r7, r1
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	18d5      	adds	r5, r2, r3
 800e600:	42ac      	cmp	r4, r5
 800e602:	d101      	bne.n	800e608 <__sfputs_r+0x12>
 800e604:	2000      	movs	r0, #0
 800e606:	e007      	b.n	800e618 <__sfputs_r+0x22>
 800e608:	463a      	mov	r2, r7
 800e60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff ffda 	bl	800e5c8 <__sfputc_r>
 800e614:	1c43      	adds	r3, r0, #1
 800e616:	d1f3      	bne.n	800e600 <__sfputs_r+0xa>
 800e618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e61c <_vfiprintf_r>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	460c      	mov	r4, r1
 800e622:	b09d      	sub	sp, #116	; 0x74
 800e624:	4617      	mov	r7, r2
 800e626:	461d      	mov	r5, r3
 800e628:	4606      	mov	r6, r0
 800e62a:	b118      	cbz	r0, 800e634 <_vfiprintf_r+0x18>
 800e62c:	6983      	ldr	r3, [r0, #24]
 800e62e:	b90b      	cbnz	r3, 800e634 <_vfiprintf_r+0x18>
 800e630:	f7ff fb2a 	bl	800dc88 <__sinit>
 800e634:	4b7c      	ldr	r3, [pc, #496]	; (800e828 <_vfiprintf_r+0x20c>)
 800e636:	429c      	cmp	r4, r3
 800e638:	d158      	bne.n	800e6ec <_vfiprintf_r+0xd0>
 800e63a:	6874      	ldr	r4, [r6, #4]
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	0718      	lsls	r0, r3, #28
 800e640:	d55e      	bpl.n	800e700 <_vfiprintf_r+0xe4>
 800e642:	6923      	ldr	r3, [r4, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d05b      	beq.n	800e700 <_vfiprintf_r+0xe4>
 800e648:	2300      	movs	r3, #0
 800e64a:	9309      	str	r3, [sp, #36]	; 0x24
 800e64c:	2320      	movs	r3, #32
 800e64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e652:	2330      	movs	r3, #48	; 0x30
 800e654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e658:	9503      	str	r5, [sp, #12]
 800e65a:	f04f 0b01 	mov.w	fp, #1
 800e65e:	46b8      	mov	r8, r7
 800e660:	4645      	mov	r5, r8
 800e662:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e666:	b10b      	cbz	r3, 800e66c <_vfiprintf_r+0x50>
 800e668:	2b25      	cmp	r3, #37	; 0x25
 800e66a:	d154      	bne.n	800e716 <_vfiprintf_r+0xfa>
 800e66c:	ebb8 0a07 	subs.w	sl, r8, r7
 800e670:	d00b      	beq.n	800e68a <_vfiprintf_r+0x6e>
 800e672:	4653      	mov	r3, sl
 800e674:	463a      	mov	r2, r7
 800e676:	4621      	mov	r1, r4
 800e678:	4630      	mov	r0, r6
 800e67a:	f7ff ffbc 	bl	800e5f6 <__sfputs_r>
 800e67e:	3001      	adds	r0, #1
 800e680:	f000 80c2 	beq.w	800e808 <_vfiprintf_r+0x1ec>
 800e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e686:	4453      	add	r3, sl
 800e688:	9309      	str	r3, [sp, #36]	; 0x24
 800e68a:	f898 3000 	ldrb.w	r3, [r8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f000 80ba 	beq.w	800e808 <_vfiprintf_r+0x1ec>
 800e694:	2300      	movs	r3, #0
 800e696:	f04f 32ff 	mov.w	r2, #4294967295
 800e69a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e69e:	9304      	str	r3, [sp, #16]
 800e6a0:	9307      	str	r3, [sp, #28]
 800e6a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6a6:	931a      	str	r3, [sp, #104]	; 0x68
 800e6a8:	46a8      	mov	r8, r5
 800e6aa:	2205      	movs	r2, #5
 800e6ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e6b0:	485e      	ldr	r0, [pc, #376]	; (800e82c <_vfiprintf_r+0x210>)
 800e6b2:	f7f1 fe1d 	bl	80002f0 <memchr>
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	bb78      	cbnz	r0, 800e71a <_vfiprintf_r+0xfe>
 800e6ba:	06d9      	lsls	r1, r3, #27
 800e6bc:	bf44      	itt	mi
 800e6be:	2220      	movmi	r2, #32
 800e6c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6c4:	071a      	lsls	r2, r3, #28
 800e6c6:	bf44      	itt	mi
 800e6c8:	222b      	movmi	r2, #43	; 0x2b
 800e6ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6ce:	782a      	ldrb	r2, [r5, #0]
 800e6d0:	2a2a      	cmp	r2, #42	; 0x2a
 800e6d2:	d02a      	beq.n	800e72a <_vfiprintf_r+0x10e>
 800e6d4:	9a07      	ldr	r2, [sp, #28]
 800e6d6:	46a8      	mov	r8, r5
 800e6d8:	2000      	movs	r0, #0
 800e6da:	250a      	movs	r5, #10
 800e6dc:	4641      	mov	r1, r8
 800e6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6e2:	3b30      	subs	r3, #48	; 0x30
 800e6e4:	2b09      	cmp	r3, #9
 800e6e6:	d969      	bls.n	800e7bc <_vfiprintf_r+0x1a0>
 800e6e8:	b360      	cbz	r0, 800e744 <_vfiprintf_r+0x128>
 800e6ea:	e024      	b.n	800e736 <_vfiprintf_r+0x11a>
 800e6ec:	4b50      	ldr	r3, [pc, #320]	; (800e830 <_vfiprintf_r+0x214>)
 800e6ee:	429c      	cmp	r4, r3
 800e6f0:	d101      	bne.n	800e6f6 <_vfiprintf_r+0xda>
 800e6f2:	68b4      	ldr	r4, [r6, #8]
 800e6f4:	e7a2      	b.n	800e63c <_vfiprintf_r+0x20>
 800e6f6:	4b4f      	ldr	r3, [pc, #316]	; (800e834 <_vfiprintf_r+0x218>)
 800e6f8:	429c      	cmp	r4, r3
 800e6fa:	bf08      	it	eq
 800e6fc:	68f4      	ldreq	r4, [r6, #12]
 800e6fe:	e79d      	b.n	800e63c <_vfiprintf_r+0x20>
 800e700:	4621      	mov	r1, r4
 800e702:	4630      	mov	r0, r6
 800e704:	f7fe fb8a 	bl	800ce1c <__swsetup_r>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d09d      	beq.n	800e648 <_vfiprintf_r+0x2c>
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	b01d      	add	sp, #116	; 0x74
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	46a8      	mov	r8, r5
 800e718:	e7a2      	b.n	800e660 <_vfiprintf_r+0x44>
 800e71a:	4a44      	ldr	r2, [pc, #272]	; (800e82c <_vfiprintf_r+0x210>)
 800e71c:	1a80      	subs	r0, r0, r2
 800e71e:	fa0b f000 	lsl.w	r0, fp, r0
 800e722:	4318      	orrs	r0, r3
 800e724:	9004      	str	r0, [sp, #16]
 800e726:	4645      	mov	r5, r8
 800e728:	e7be      	b.n	800e6a8 <_vfiprintf_r+0x8c>
 800e72a:	9a03      	ldr	r2, [sp, #12]
 800e72c:	1d11      	adds	r1, r2, #4
 800e72e:	6812      	ldr	r2, [r2, #0]
 800e730:	9103      	str	r1, [sp, #12]
 800e732:	2a00      	cmp	r2, #0
 800e734:	db01      	blt.n	800e73a <_vfiprintf_r+0x11e>
 800e736:	9207      	str	r2, [sp, #28]
 800e738:	e004      	b.n	800e744 <_vfiprintf_r+0x128>
 800e73a:	4252      	negs	r2, r2
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	9207      	str	r2, [sp, #28]
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	f898 3000 	ldrb.w	r3, [r8]
 800e748:	2b2e      	cmp	r3, #46	; 0x2e
 800e74a:	d10e      	bne.n	800e76a <_vfiprintf_r+0x14e>
 800e74c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e750:	2b2a      	cmp	r3, #42	; 0x2a
 800e752:	d138      	bne.n	800e7c6 <_vfiprintf_r+0x1aa>
 800e754:	9b03      	ldr	r3, [sp, #12]
 800e756:	1d1a      	adds	r2, r3, #4
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	9203      	str	r2, [sp, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bfb8      	it	lt
 800e760:	f04f 33ff 	movlt.w	r3, #4294967295
 800e764:	f108 0802 	add.w	r8, r8, #2
 800e768:	9305      	str	r3, [sp, #20]
 800e76a:	4d33      	ldr	r5, [pc, #204]	; (800e838 <_vfiprintf_r+0x21c>)
 800e76c:	f898 1000 	ldrb.w	r1, [r8]
 800e770:	2203      	movs	r2, #3
 800e772:	4628      	mov	r0, r5
 800e774:	f7f1 fdbc 	bl	80002f0 <memchr>
 800e778:	b140      	cbz	r0, 800e78c <_vfiprintf_r+0x170>
 800e77a:	2340      	movs	r3, #64	; 0x40
 800e77c:	1b40      	subs	r0, r0, r5
 800e77e:	fa03 f000 	lsl.w	r0, r3, r0
 800e782:	9b04      	ldr	r3, [sp, #16]
 800e784:	4303      	orrs	r3, r0
 800e786:	f108 0801 	add.w	r8, r8, #1
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	f898 1000 	ldrb.w	r1, [r8]
 800e790:	482a      	ldr	r0, [pc, #168]	; (800e83c <_vfiprintf_r+0x220>)
 800e792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e796:	2206      	movs	r2, #6
 800e798:	f108 0701 	add.w	r7, r8, #1
 800e79c:	f7f1 fda8 	bl	80002f0 <memchr>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d037      	beq.n	800e814 <_vfiprintf_r+0x1f8>
 800e7a4:	4b26      	ldr	r3, [pc, #152]	; (800e840 <_vfiprintf_r+0x224>)
 800e7a6:	bb1b      	cbnz	r3, 800e7f0 <_vfiprintf_r+0x1d4>
 800e7a8:	9b03      	ldr	r3, [sp, #12]
 800e7aa:	3307      	adds	r3, #7
 800e7ac:	f023 0307 	bic.w	r3, r3, #7
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	9303      	str	r3, [sp, #12]
 800e7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b6:	444b      	add	r3, r9
 800e7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ba:	e750      	b.n	800e65e <_vfiprintf_r+0x42>
 800e7bc:	fb05 3202 	mla	r2, r5, r2, r3
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	4688      	mov	r8, r1
 800e7c4:	e78a      	b.n	800e6dc <_vfiprintf_r+0xc0>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f108 0801 	add.w	r8, r8, #1
 800e7cc:	9305      	str	r3, [sp, #20]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	250a      	movs	r5, #10
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7d8:	3a30      	subs	r2, #48	; 0x30
 800e7da:	2a09      	cmp	r2, #9
 800e7dc:	d903      	bls.n	800e7e6 <_vfiprintf_r+0x1ca>
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d0c3      	beq.n	800e76a <_vfiprintf_r+0x14e>
 800e7e2:	9105      	str	r1, [sp, #20]
 800e7e4:	e7c1      	b.n	800e76a <_vfiprintf_r+0x14e>
 800e7e6:	fb05 2101 	mla	r1, r5, r1, r2
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	4680      	mov	r8, r0
 800e7ee:	e7f0      	b.n	800e7d2 <_vfiprintf_r+0x1b6>
 800e7f0:	ab03      	add	r3, sp, #12
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	4622      	mov	r2, r4
 800e7f6:	4b13      	ldr	r3, [pc, #76]	; (800e844 <_vfiprintf_r+0x228>)
 800e7f8:	a904      	add	r1, sp, #16
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7fd fe8c 	bl	800c518 <_printf_float>
 800e800:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e804:	4681      	mov	r9, r0
 800e806:	d1d5      	bne.n	800e7b4 <_vfiprintf_r+0x198>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	065b      	lsls	r3, r3, #25
 800e80c:	f53f af7e 	bmi.w	800e70c <_vfiprintf_r+0xf0>
 800e810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e812:	e77d      	b.n	800e710 <_vfiprintf_r+0xf4>
 800e814:	ab03      	add	r3, sp, #12
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	4622      	mov	r2, r4
 800e81a:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <_vfiprintf_r+0x228>)
 800e81c:	a904      	add	r1, sp, #16
 800e81e:	4630      	mov	r0, r6
 800e820:	f7fe f91c 	bl	800ca5c <_printf_i>
 800e824:	e7ec      	b.n	800e800 <_vfiprintf_r+0x1e4>
 800e826:	bf00      	nop
 800e828:	0800ee68 	.word	0x0800ee68
 800e82c:	0800efa4 	.word	0x0800efa4
 800e830:	0800ee88 	.word	0x0800ee88
 800e834:	0800ee48 	.word	0x0800ee48
 800e838:	0800efaa 	.word	0x0800efaa
 800e83c:	0800efae 	.word	0x0800efae
 800e840:	0800c519 	.word	0x0800c519
 800e844:	0800e5f7 	.word	0x0800e5f7

0800e848 <_sbrk_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4c06      	ldr	r4, [pc, #24]	; (800e864 <_sbrk_r+0x1c>)
 800e84c:	2300      	movs	r3, #0
 800e84e:	4605      	mov	r5, r0
 800e850:	4608      	mov	r0, r1
 800e852:	6023      	str	r3, [r4, #0]
 800e854:	f7fd fbce 	bl	800bff4 <_sbrk>
 800e858:	1c43      	adds	r3, r0, #1
 800e85a:	d102      	bne.n	800e862 <_sbrk_r+0x1a>
 800e85c:	6823      	ldr	r3, [r4, #0]
 800e85e:	b103      	cbz	r3, 800e862 <_sbrk_r+0x1a>
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	bd38      	pop	{r3, r4, r5, pc}
 800e864:	24000470 	.word	0x24000470

0800e868 <__sread>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	460c      	mov	r4, r1
 800e86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e870:	f000 f8a8 	bl	800e9c4 <_read_r>
 800e874:	2800      	cmp	r0, #0
 800e876:	bfab      	itete	ge
 800e878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e87a:	89a3      	ldrhlt	r3, [r4, #12]
 800e87c:	181b      	addge	r3, r3, r0
 800e87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e882:	bfac      	ite	ge
 800e884:	6563      	strge	r3, [r4, #84]	; 0x54
 800e886:	81a3      	strhlt	r3, [r4, #12]
 800e888:	bd10      	pop	{r4, pc}

0800e88a <__swrite>:
 800e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88e:	461f      	mov	r7, r3
 800e890:	898b      	ldrh	r3, [r1, #12]
 800e892:	05db      	lsls	r3, r3, #23
 800e894:	4605      	mov	r5, r0
 800e896:	460c      	mov	r4, r1
 800e898:	4616      	mov	r6, r2
 800e89a:	d505      	bpl.n	800e8a8 <__swrite+0x1e>
 800e89c:	2302      	movs	r3, #2
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a4:	f000 f868 	bl	800e978 <_lseek_r>
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8b2:	81a3      	strh	r3, [r4, #12]
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8be:	f000 b817 	b.w	800e8f0 <_write_r>

0800e8c2 <__sseek>:
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ca:	f000 f855 	bl	800e978 <_lseek_r>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	bf15      	itete	ne
 800e8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8de:	81a3      	strheq	r3, [r4, #12]
 800e8e0:	bf18      	it	ne
 800e8e2:	81a3      	strhne	r3, [r4, #12]
 800e8e4:	bd10      	pop	{r4, pc}

0800e8e6 <__sclose>:
 800e8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ea:	f000 b813 	b.w	800e914 <_close_r>
	...

0800e8f0 <_write_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4c07      	ldr	r4, [pc, #28]	; (800e910 <_write_r+0x20>)
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	6022      	str	r2, [r4, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f7fd fb27 	bl	800bf52 <_write>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d102      	bne.n	800e90e <_write_r+0x1e>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	b103      	cbz	r3, 800e90e <_write_r+0x1e>
 800e90c:	602b      	str	r3, [r5, #0]
 800e90e:	bd38      	pop	{r3, r4, r5, pc}
 800e910:	24000470 	.word	0x24000470

0800e914 <_close_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4c06      	ldr	r4, [pc, #24]	; (800e930 <_close_r+0x1c>)
 800e918:	2300      	movs	r3, #0
 800e91a:	4605      	mov	r5, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	f7fd fb33 	bl	800bf8a <_close>
 800e924:	1c43      	adds	r3, r0, #1
 800e926:	d102      	bne.n	800e92e <_close_r+0x1a>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	b103      	cbz	r3, 800e92e <_close_r+0x1a>
 800e92c:	602b      	str	r3, [r5, #0]
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	24000470 	.word	0x24000470

0800e934 <_fstat_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4c07      	ldr	r4, [pc, #28]	; (800e954 <_fstat_r+0x20>)
 800e938:	2300      	movs	r3, #0
 800e93a:	4605      	mov	r5, r0
 800e93c:	4608      	mov	r0, r1
 800e93e:	4611      	mov	r1, r2
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	f7fd fb2e 	bl	800bfa2 <_fstat>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d102      	bne.n	800e950 <_fstat_r+0x1c>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	b103      	cbz	r3, 800e950 <_fstat_r+0x1c>
 800e94e:	602b      	str	r3, [r5, #0]
 800e950:	bd38      	pop	{r3, r4, r5, pc}
 800e952:	bf00      	nop
 800e954:	24000470 	.word	0x24000470

0800e958 <_isatty_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4c06      	ldr	r4, [pc, #24]	; (800e974 <_isatty_r+0x1c>)
 800e95c:	2300      	movs	r3, #0
 800e95e:	4605      	mov	r5, r0
 800e960:	4608      	mov	r0, r1
 800e962:	6023      	str	r3, [r4, #0]
 800e964:	f7fd fb2d 	bl	800bfc2 <_isatty>
 800e968:	1c43      	adds	r3, r0, #1
 800e96a:	d102      	bne.n	800e972 <_isatty_r+0x1a>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	b103      	cbz	r3, 800e972 <_isatty_r+0x1a>
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	24000470 	.word	0x24000470

0800e978 <_lseek_r>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	4c07      	ldr	r4, [pc, #28]	; (800e998 <_lseek_r+0x20>)
 800e97c:	4605      	mov	r5, r0
 800e97e:	4608      	mov	r0, r1
 800e980:	4611      	mov	r1, r2
 800e982:	2200      	movs	r2, #0
 800e984:	6022      	str	r2, [r4, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	f7fd fb26 	bl	800bfd8 <_lseek>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_lseek_r+0x1e>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	b103      	cbz	r3, 800e996 <_lseek_r+0x1e>
 800e994:	602b      	str	r3, [r5, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	24000470 	.word	0x24000470

0800e99c <__ascii_mbtowc>:
 800e99c:	b082      	sub	sp, #8
 800e99e:	b901      	cbnz	r1, 800e9a2 <__ascii_mbtowc+0x6>
 800e9a0:	a901      	add	r1, sp, #4
 800e9a2:	b142      	cbz	r2, 800e9b6 <__ascii_mbtowc+0x1a>
 800e9a4:	b14b      	cbz	r3, 800e9ba <__ascii_mbtowc+0x1e>
 800e9a6:	7813      	ldrb	r3, [r2, #0]
 800e9a8:	600b      	str	r3, [r1, #0]
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	1c10      	adds	r0, r2, #0
 800e9ae:	bf18      	it	ne
 800e9b0:	2001      	movne	r0, #1
 800e9b2:	b002      	add	sp, #8
 800e9b4:	4770      	bx	lr
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	e7fb      	b.n	800e9b2 <__ascii_mbtowc+0x16>
 800e9ba:	f06f 0001 	mvn.w	r0, #1
 800e9be:	e7f8      	b.n	800e9b2 <__ascii_mbtowc+0x16>

0800e9c0 <__malloc_lock>:
 800e9c0:	4770      	bx	lr

0800e9c2 <__malloc_unlock>:
 800e9c2:	4770      	bx	lr

0800e9c4 <_read_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4c07      	ldr	r4, [pc, #28]	; (800e9e4 <_read_r+0x20>)
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	4608      	mov	r0, r1
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	6022      	str	r2, [r4, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	f7fd faa0 	bl	800bf18 <_read>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d102      	bne.n	800e9e2 <_read_r+0x1e>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	b103      	cbz	r3, 800e9e2 <_read_r+0x1e>
 800e9e0:	602b      	str	r3, [r5, #0]
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	24000470 	.word	0x24000470

0800e9e8 <__ascii_wctomb>:
 800e9e8:	b149      	cbz	r1, 800e9fe <__ascii_wctomb+0x16>
 800e9ea:	2aff      	cmp	r2, #255	; 0xff
 800e9ec:	bf85      	ittet	hi
 800e9ee:	238a      	movhi	r3, #138	; 0x8a
 800e9f0:	6003      	strhi	r3, [r0, #0]
 800e9f2:	700a      	strbls	r2, [r1, #0]
 800e9f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9f8:	bf98      	it	ls
 800e9fa:	2001      	movls	r0, #1
 800e9fc:	4770      	bx	lr
 800e9fe:	4608      	mov	r0, r1
 800ea00:	4770      	bx	lr
	...

0800ea04 <log>:
 800ea04:	b500      	push	{lr}
 800ea06:	ed2d 8b02 	vpush	{d8}
 800ea0a:	eeb0 8b40 	vmov.f64	d8, d0
 800ea0e:	b08b      	sub	sp, #44	; 0x2c
 800ea10:	f000 f866 	bl	800eae0 <__ieee754_log>
 800ea14:	4b2d      	ldr	r3, [pc, #180]	; (800eacc <log+0xc8>)
 800ea16:	f993 3000 	ldrsb.w	r3, [r3]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	d051      	beq.n	800eac2 <log+0xbe>
 800ea1e:	eeb4 8b48 	vcmp.f64	d8, d8
 800ea22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea26:	d64c      	bvs.n	800eac2 <log+0xbe>
 800ea28:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800ea2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea30:	dc47      	bgt.n	800eac2 <log+0xbe>
 800ea32:	4a27      	ldr	r2, [pc, #156]	; (800ead0 <log+0xcc>)
 800ea34:	9201      	str	r2, [sp, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	9208      	str	r2, [sp, #32]
 800ea3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea3e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea42:	b993      	cbnz	r3, 800ea6a <log+0x66>
 800ea44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea48:	4922      	ldr	r1, [pc, #136]	; (800ead4 <log+0xd0>)
 800ea4a:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800ea4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea56:	d025      	beq.n	800eaa4 <log+0xa0>
 800ea58:	2201      	movs	r2, #1
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	9200      	str	r2, [sp, #0]
 800ea5e:	d116      	bne.n	800ea8e <log+0x8a>
 800ea60:	f7fd fca0 	bl	800c3a4 <__errno>
 800ea64:	2321      	movs	r3, #33	; 0x21
 800ea66:	6003      	str	r3, [r0, #0]
 800ea68:	e016      	b.n	800ea98 <log+0x94>
 800ea6a:	491b      	ldr	r1, [pc, #108]	; (800ead8 <log+0xd4>)
 800ea6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea70:	2000      	movs	r0, #0
 800ea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea7a:	d1ed      	bne.n	800ea58 <log+0x54>
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	9200      	str	r2, [sp, #0]
 800ea82:	d111      	bne.n	800eaa8 <log+0xa4>
 800ea84:	f7fd fc8e 	bl	800c3a4 <__errno>
 800ea88:	2322      	movs	r3, #34	; 0x22
 800ea8a:	6003      	str	r3, [r0, #0]
 800ea8c:	e011      	b.n	800eab2 <log+0xae>
 800ea8e:	4668      	mov	r0, sp
 800ea90:	f000 f940 	bl	800ed14 <matherr>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0e3      	beq.n	800ea60 <log+0x5c>
 800ea98:	4810      	ldr	r0, [pc, #64]	; (800eadc <log+0xd8>)
 800ea9a:	f000 f93d 	bl	800ed18 <nan>
 800ea9e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800eaa2:	e006      	b.n	800eab2 <log+0xae>
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	4668      	mov	r0, sp
 800eaaa:	f000 f933 	bl	800ed14 <matherr>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d0e8      	beq.n	800ea84 <log+0x80>
 800eab2:	9b08      	ldr	r3, [sp, #32]
 800eab4:	b11b      	cbz	r3, 800eabe <log+0xba>
 800eab6:	f7fd fc75 	bl	800c3a4 <__errno>
 800eaba:	9b08      	ldr	r3, [sp, #32]
 800eabc:	6003      	str	r3, [r0, #0]
 800eabe:	ed9d 0b06 	vldr	d0, [sp, #24]
 800eac2:	b00b      	add	sp, #44	; 0x2c
 800eac4:	ecbd 8b02 	vpop	{d8}
 800eac8:	f85d fb04 	ldr.w	pc, [sp], #4
 800eacc:	240001e0 	.word	0x240001e0
 800ead0:	0800f0c0 	.word	0x0800f0c0
 800ead4:	c7efffff 	.word	0xc7efffff
 800ead8:	fff00000 	.word	0xfff00000
 800eadc:	0800efa9 	.word	0x0800efa9

0800eae0 <__ieee754_log>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	ed8d 0b00 	vstr	d0, [sp]
 800eae6:	9a01      	ldr	r2, [sp, #4]
 800eae8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800eaec:	da26      	bge.n	800eb3c <__ieee754_log+0x5c>
 800eaee:	9900      	ldr	r1, [sp, #0]
 800eaf0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800eaf4:	430b      	orrs	r3, r1
 800eaf6:	d107      	bne.n	800eb08 <__ieee754_log+0x28>
 800eaf8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800eca8 <__ieee754_log+0x1c8>
 800eafc:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800ecb0 <__ieee754_log+0x1d0>
 800eb00:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800eb04:	b003      	add	sp, #12
 800eb06:	bd30      	pop	{r4, r5, pc}
 800eb08:	2a00      	cmp	r2, #0
 800eb0a:	da04      	bge.n	800eb16 <__ieee754_log+0x36>
 800eb0c:	ed9d 7b00 	vldr	d7, [sp]
 800eb10:	ee37 6b47 	vsub.f64	d6, d7, d7
 800eb14:	e7f2      	b.n	800eafc <__ieee754_log+0x1c>
 800eb16:	ed9d 6b00 	vldr	d6, [sp]
 800eb1a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800ecb8 <__ieee754_log+0x1d8>
 800eb1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb22:	ed8d 7b00 	vstr	d7, [sp]
 800eb26:	9a01      	ldr	r2, [sp, #4]
 800eb28:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800eb2c:	4b78      	ldr	r3, [pc, #480]	; (800ed10 <__ieee754_log+0x230>)
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	dd06      	ble.n	800eb40 <__ieee754_log+0x60>
 800eb32:	ed9d 7b00 	vldr	d7, [sp]
 800eb36:	ee37 0b07 	vadd.f64	d0, d7, d7
 800eb3a:	e7e3      	b.n	800eb04 <__ieee754_log+0x24>
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	e7f5      	b.n	800eb2c <__ieee754_log+0x4c>
 800eb40:	1513      	asrs	r3, r2, #20
 800eb42:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800eb46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb4a:	4419      	add	r1, r3
 800eb4c:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800eb50:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800eb54:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800eb58:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800eb5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb60:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800eb64:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800eb68:	ea45 0300 	orr.w	r3, r5, r0
 800eb6c:	ec43 2b10 	vmov	d0, r2, r3
 800eb70:	1c82      	adds	r2, r0, #2
 800eb72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eb76:	2a02      	cmp	r2, #2
 800eb78:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800eb7c:	ee30 0b47 	vsub.f64	d0, d0, d7
 800eb80:	dc31      	bgt.n	800ebe6 <__ieee754_log+0x106>
 800eb82:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8a:	d10f      	bne.n	800ebac <__ieee754_log+0xcc>
 800eb8c:	2c00      	cmp	r4, #0
 800eb8e:	f000 8086 	beq.w	800ec9e <__ieee754_log+0x1be>
 800eb92:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ecc0 <__ieee754_log+0x1e0>
 800eb96:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800ecc8 <__ieee754_log+0x1e8>
 800eb9a:	ee07 4a90 	vmov	s15, r4
 800eb9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eba2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800eba6:	eea7 0b06 	vfma.f64	d0, d7, d6
 800ebaa:	e7ab      	b.n	800eb04 <__ieee754_log+0x24>
 800ebac:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800ecd0 <__ieee754_log+0x1f0>
 800ebb0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ebb4:	eea0 6b47 	vfms.f64	d6, d0, d7
 800ebb8:	ee20 7b00 	vmul.f64	d7, d0, d0
 800ebbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ebc0:	b914      	cbnz	r4, 800ebc8 <__ieee754_log+0xe8>
 800ebc2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ebc6:	e79d      	b.n	800eb04 <__ieee754_log+0x24>
 800ebc8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800ecc0 <__ieee754_log+0x1e0>
 800ebcc:	ee07 4a90 	vmov	s15, r4
 800ebd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ebd4:	eea7 6b45 	vfms.f64	d6, d7, d5
 800ebd8:	ee36 0b40 	vsub.f64	d0, d6, d0
 800ebdc:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800ecc8 <__ieee754_log+0x1e8>
 800ebe0:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800ebe4:	e78e      	b.n	800eb04 <__ieee754_log+0x24>
 800ebe6:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ebea:	ee30 7b07 	vadd.f64	d7, d0, d7
 800ebee:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800ebf2:	ee07 4a90 	vmov	s15, r4
 800ebf6:	ee24 2b04 	vmul.f64	d2, d4, d4
 800ebfa:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800ecd8 <__ieee754_log+0x1f8>
 800ebfe:	ee22 5b02 	vmul.f64	d5, d2, d2
 800ec02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ec06:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800ece0 <__ieee754_log+0x200>
 800ec0a:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ec0e:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800ece8 <__ieee754_log+0x208>
 800ec12:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800ecf0 <__ieee754_log+0x210>
 800ec16:	eea7 3b05 	vfma.f64	d3, d7, d5
 800ec1a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800ecf8 <__ieee754_log+0x218>
 800ec1e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ec22:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800ed00 <__ieee754_log+0x220>
 800ec26:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800ec2a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800ec2e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ec32:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800ec36:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800ed08 <__ieee754_log+0x228>
 800ec3a:	3251      	adds	r2, #81	; 0x51
 800ec3c:	430a      	orrs	r2, r1
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ec44:	ee27 7b02 	vmul.f64	d7, d7, d2
 800ec48:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ec4c:	dd1c      	ble.n	800ec88 <__ieee754_log+0x1a8>
 800ec4e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec52:	ee20 5b05 	vmul.f64	d5, d0, d5
 800ec56:	ee25 5b00 	vmul.f64	d5, d5, d0
 800ec5a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ec5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec62:	b924      	cbnz	r4, 800ec6e <__ieee754_log+0x18e>
 800ec64:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec68:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ec6c:	e74a      	b.n	800eb04 <__ieee754_log+0x24>
 800ec6e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800ecc0 <__ieee754_log+0x1e0>
 800ec72:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ec76:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec7a:	ee37 0b40 	vsub.f64	d0, d7, d0
 800ec7e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800ecc8 <__ieee754_log+0x1e8>
 800ec82:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800ec86:	e73d      	b.n	800eb04 <__ieee754_log+0x24>
 800ec88:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ec8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec90:	2c00      	cmp	r4, #0
 800ec92:	d0e9      	beq.n	800ec68 <__ieee754_log+0x188>
 800ec94:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800ecc0 <__ieee754_log+0x1e0>
 800ec98:	eea6 7b45 	vfms.f64	d7, d6, d5
 800ec9c:	e7ed      	b.n	800ec7a <__ieee754_log+0x19a>
 800ec9e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800ecb0 <__ieee754_log+0x1d0>
 800eca2:	e72f      	b.n	800eb04 <__ieee754_log+0x24>
 800eca4:	f3af 8000 	nop.w
 800eca8:	00000000 	.word	0x00000000
 800ecac:	c3500000 	.word	0xc3500000
	...
 800ecbc:	43500000 	.word	0x43500000
 800ecc0:	35793c76 	.word	0x35793c76
 800ecc4:	3dea39ef 	.word	0x3dea39ef
 800ecc8:	fee00000 	.word	0xfee00000
 800eccc:	3fe62e42 	.word	0x3fe62e42
 800ecd0:	55555555 	.word	0x55555555
 800ecd4:	3fd55555 	.word	0x3fd55555
 800ecd8:	d078c69f 	.word	0xd078c69f
 800ecdc:	3fc39a09 	.word	0x3fc39a09
 800ece0:	1d8e78af 	.word	0x1d8e78af
 800ece4:	3fcc71c5 	.word	0x3fcc71c5
 800ece8:	9997fa04 	.word	0x9997fa04
 800ecec:	3fd99999 	.word	0x3fd99999
 800ecf0:	df3e5244 	.word	0xdf3e5244
 800ecf4:	3fc2f112 	.word	0x3fc2f112
 800ecf8:	96cb03de 	.word	0x96cb03de
 800ecfc:	3fc74664 	.word	0x3fc74664
 800ed00:	94229359 	.word	0x94229359
 800ed04:	3fd24924 	.word	0x3fd24924
 800ed08:	55555593 	.word	0x55555593
 800ed0c:	3fe55555 	.word	0x3fe55555
 800ed10:	7fefffff 	.word	0x7fefffff

0800ed14 <matherr>:
 800ed14:	2000      	movs	r0, #0
 800ed16:	4770      	bx	lr

0800ed18 <nan>:
 800ed18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ed20 <nan+0x8>
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	00000000 	.word	0x00000000
 800ed24:	7ff80000 	.word	0x7ff80000

0800ed28 <_init>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	bf00      	nop
 800ed2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2e:	bc08      	pop	{r3}
 800ed30:	469e      	mov	lr, r3
 800ed32:	4770      	bx	lr

0800ed34 <_fini>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	bf00      	nop
 800ed38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3a:	bc08      	pop	{r3}
 800ed3c:	469e      	mov	lr, r3
 800ed3e:	4770      	bx	lr
