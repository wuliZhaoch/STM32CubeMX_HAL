
L431_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c98  08002c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ca0  08002ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002cb4  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0ca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6d  00000000  00000000  0002b106  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002cb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0002d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001dae  00000000  00000000  0002df40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091fd  00000000  00000000  0002fcee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c27fa  00000000  00000000  00038eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb6e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  000fb760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002c38 	.word	0x08002c38

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002c38 	.word	0x08002c38

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_GPIO_Init+0x74>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <MX_GPIO_Init+0x74>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_GPIO_Init+0x74>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_GPIO_Init+0x74>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <MX_GPIO_Init+0x74>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_GPIO_Init+0x74>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_GPIO_Init+0x74>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <MX_GPIO_Init+0x74>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_GPIO_Init+0x74>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_GPIO_Init+0x74>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <MX_GPIO_Init+0x74>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_GPIO_Init+0x74>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fa23 	bl	8000992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f807 	bl	800055e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff ffbc 	bl	80004cc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000554:	f000 f876 	bl	8000644 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000558:	f000 f97e 	bl	8000858 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x18>

0800055e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b0ae      	sub	sp, #184	; 0xb8
 8000562:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000564:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000568:	2244      	movs	r2, #68	; 0x44
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fb5b 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	225c      	movs	r2, #92	; 0x5c
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fb4d 	bl	8002c28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2301      	movs	r3, #1
 8000590:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005a4:	2305      	movs	r3, #5
 80005a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005aa:	2320      	movs	r3, #32
 80005ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fd18 	bl	8000ffc <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005d2:	f000 f82f 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005ee:	2104      	movs	r1, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f8f1 	bl	80017d8 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005fc:	f000 f81a 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fae8 	bl	8001be0 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000616:	f000 f80d 	bl	8000634 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f000 fc97 	bl	8000f50 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000628:	f000 f804 	bl	8000634 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	37b8      	adds	r7, #184	; 0xb8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_SPI2_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_SPI2_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_SPI2_Init+0x74>)
 800065e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000662:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_SPI2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000672:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000676:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_SPI2_Init+0x74>)
 800067a:	2218      	movs	r2, #24
 800067c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_SPI2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000692:	2207      	movs	r2, #7
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_SPI2_Init+0x74>)
 800069e:	2208      	movs	r2, #8
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_SPI2_Init+0x74>)
 80006a4:	f001 fda2 	bl	80021ec <HAL_SPI_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f7ff ffc1 	bl	8000634 <Error_Handler>
  }

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40003800 	.word	0x40003800

080006c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <HAL_SPI_MspInit+0x7c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d128      	bne.n	8000734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_SPI_MspInit+0x80>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_SPI_MspInit+0x80>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000712:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000724:	2305      	movs	r3, #5
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_SPI_MspInit+0x84>)
 8000730:	f000 fa86 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40003800 	.word	0x40003800
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x44>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6613      	str	r3, [r2, #96]	; 0x60
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x44>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x44>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6593      	str	r3, [r2, #88]	; 0x58
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x44>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f928 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SystemInit+0x64>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <SystemInit+0x64>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <SystemInit+0x68>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <SystemInit+0x68>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <SystemInit+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <SystemInit+0x68>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <SystemInit+0x68>)
 8000818:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800081c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000820:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <SystemInit+0x68>)
 8000824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000828:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <SystemInit+0x68>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <SystemInit+0x68>)
 8000830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000834:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <SystemInit+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SystemInit+0x64>)
 800083e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000842:	609a      	str	r2, [r3, #8]
#endif
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	40021000 	.word	0x40021000

08000858 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART1_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800089c:	f001 fd30 	bl	8002300 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f7ff fec5 	bl	8000634 <Error_Handler>
  }

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	40013800 	.word	0x40013800

080008b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <HAL_UART_MspInit+0x80>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d129      	bne.n	800092e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0x84>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x84>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0x84>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_UART_MspInit+0x84>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <HAL_UART_MspInit+0x84>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_UART_MspInit+0x84>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091c:	2307      	movs	r3, #7
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 f989 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40013800 	.word	0x40013800
 800093c:	40021000 	.word	0x40021000

08000940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
	ldr	r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopForever+0x12>)
	b	LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800095e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <LoopForever+0x16>)
	cmp	r2, r3
 8000966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ff3f 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 f937 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000972:	f7ff fde7 	bl	8000544 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000978:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800097c:	08002ca8 	.word	0x08002ca8
	ldr	r0, =_sdata
 8000980:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000984:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000988:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800098c:	20000110 	.word	0x20000110

08000990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_IRQHandler>

08000992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f91b 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f80e 	bl	80009c4 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e001      	b.n	80009b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b4:	f7ff fec8 	bl	8000748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_InitTick+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d022      	beq.n	8000a1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_InitTick+0x6c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_InitTick+0x68>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f91a 	bl	8000c26 <HAL_SYSTICK_Config>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10f      	bne.n	8000a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d809      	bhi.n	8000a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	f000 f8f2 	bl	8000bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_InitTick+0x70>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e004      	b.n	8000a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x20>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	2000010c 	.word	0x2000010c
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000010c 	.word	0x2000010c

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff47 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5c 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e154      	b.n	8000efa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8146 	beq.w	8000ef4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x38>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b12      	cmp	r3, #18
 8000c76:	d123      	bne.n	8000cc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691a      	ldr	r2, [r3, #16]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	6939      	ldr	r1, [r7, #16]
 8000cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0203 	and.w	r2, r3, #3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	2b11      	cmp	r3, #17
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80a0 	beq.w	8000ef4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db8:	4a57      	ldr	r2, [pc, #348]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dcc:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df6:	d019      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a49      	ldr	r2, [pc, #292]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a47      	ldr	r2, [pc, #284]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1dc>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e008      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e20:	2303      	movs	r3, #3
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e70:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aea3 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40007000 	.word	0x40007000

08000f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f5e:	d130      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f6c:	d038      	beq.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2232      	movs	r2, #50	; 0x32
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f94:	e002      	b.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa8:	d102      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f2      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fbc:	d110      	bne.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e00f      	b.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fce:	d007      	beq.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e3db      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100e:	4ba4      	ldr	r3, [pc, #656]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001018:	4ba1      	ldr	r3, [pc, #644]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80e1 	beq.w	80011f2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <HAL_RCC_OscConfig+0x4a>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b0c      	cmp	r3, #12
 800103a:	f040 8088 	bne.w	800114e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b01      	cmp	r3, #1
 8001042:	f040 8084 	bne.w	800114e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001046:	4b96      	ldr	r3, [pc, #600]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_RCC_OscConfig+0x62>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e3b3      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1a      	ldr	r2, [r3, #32]
 8001062:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <HAL_RCC_OscConfig+0x7c>
 800106e:	4b8c      	ldr	r3, [pc, #560]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001076:	e005      	b.n	8001084 <HAL_RCC_OscConfig+0x88>
 8001078:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800107a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001084:	4293      	cmp	r3, r2
 8001086:	d223      	bcs.n	80010d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fd47 	bl	8001b20 <RCC_SetFlashLatencyFromMSIRange>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e394      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109c:	4b80      	ldr	r3, [pc, #512]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b7d      	ldr	r3, [pc, #500]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	497a      	ldr	r1, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ba:	4b79      	ldr	r3, [pc, #484]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	4975      	ldr	r1, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
 80010ce:	e022      	b.n	8001116 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d0:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a72      	ldr	r2, [pc, #456]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	496d      	ldr	r1, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	4968      	ldr	r1, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd0a 	bl	8001b20 <RCC_SetFlashLatencyFromMSIRange>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e357      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001116:	f000 fc41 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800111a:	4601      	mov	r1, r0
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x2a8>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	fa21 f303 	lsr.w	r3, r1, r3
 8001132:	4a5d      	ldr	r2, [pc, #372]	; (80012a8 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <HAL_RCC_OscConfig+0x2b0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fc42 	bl	80009c4 <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d052      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	e33b      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d032      	beq.n	80011bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001156:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a51      	ldr	r2, [pc, #324]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001162:	f7ff fc7b 	bl	8000a5c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116a:	f7ff fc77 	bl	8000a5c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e324      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800117c:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	493f      	ldr	r1, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	493a      	ldr	r1, [pc, #232]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e01a      	b.n	80011f2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a37      	ldr	r2, [pc, #220]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc48 	bl	8000a5c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc44 	bl	8000a5c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e2f1      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1d4>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d074      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x214>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d10e      	bne.n	8001228 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d064      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2ea>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d160      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2ce      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x244>
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0x280>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x268>
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0x280>
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_RCC_OscConfig+0x2a4>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01c      	beq.n	80012be <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fbea 	bl	8000a5c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e011      	b.n	80012b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fbe6 	bl	8000a5c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d90a      	bls.n	80012b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e293      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	08002c50 	.word	0x08002c50
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b0:	4bae      	ldr	r3, [pc, #696]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0e7      	beq.n	800128c <HAL_RCC_OscConfig+0x290>
 80012bc:	e014      	b.n	80012e8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fbcd 	bl	8000a5c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fbc9 	bl	8000a5c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e276      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d8:	4ba4      	ldr	r3, [pc, #656]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2ca>
 80012e4:	e000      	b.n	80012e8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d060      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x30a>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d119      	bne.n	8001334 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x322>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e253      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b93      	ldr	r3, [pc, #588]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	498f      	ldr	r1, [pc, #572]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001332:	e040      	b.n	80013b6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d023      	beq.n	8001384 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b8b      	ldr	r3, [pc, #556]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a8a      	ldr	r2, [pc, #552]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb88 	bl	8000a5c <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fb84 	bl	8000a5c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e231      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b7f      	ldr	r3, [pc, #508]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	497b      	ldr	r1, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
 8001382:	e018      	b.n	80013b6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001384:	4b79      	ldr	r3, [pc, #484]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a78      	ldr	r2, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800138a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb64 	bl	8000a5c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fb60 	bl	8000a5c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e20d      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03c      	beq.n	800143c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01c      	beq.n	8001404 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80013cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d0:	4a66      	ldr	r2, [pc, #408]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013da:	f7ff fb3f 	bl	8000a5c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb3b 	bl	8000a5c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1e8      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0ef      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3e6>
 8001402:	e01b      	b.n	800143c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140a:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fb22 	bl	8000a5c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fb1e 	bl	8000a5c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1cb      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ef      	bne.n	800141c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a5 	beq.w	8001594 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_OscConfig+0x574>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x574>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x574>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fae5 	bl	8000a5c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fae1 	bl	8000a5c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e18e      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_RCC_OscConfig+0x574>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d2>
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014cc:	e024      	b.n	8001518 <HAL_RCC_OscConfig+0x51c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d110      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4fc>
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x51c>
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x570>)
 80014fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_RCC_OscConfig+0x570>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d016      	beq.n	800154e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fa9c 	bl	8000a5c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fa98 	bl	8000a5c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e143      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_OscConfig+0x570>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ed      	beq.n	8001528 <HAL_RCC_OscConfig+0x52c>
 800154c:	e019      	b.n	8001582 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fa85 	bl	8000a5c <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001554:	e00e      	b.n	8001574 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fa81 	bl	8000a5c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d905      	bls.n	8001574 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e12c      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001574:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b91      	ldr	r3, [pc, #580]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a90      	ldr	r2, [pc, #576]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a8:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80015aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ae:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa50 	bl	8000a5c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fa4c 	bl	8000a5c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0f9      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x5c4>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e2:	4b7b      	ldr	r3, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80015e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e8:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa33 	bl	8000a5c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fa:	f7ff fa2f 	bl	8000a5c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0dc      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80d0 	beq.w	80017c4 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	f000 808d 	beq.w	8001746 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	2b02      	cmp	r3, #2
 8001632:	d15a      	bne.n	80016ea <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001634:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800163a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fa0c 	bl	8000a5c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa08 	bl	8000a5c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0b5      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001666:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x7d8>)
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001676:	3a01      	subs	r2, #1
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001680:	0212      	lsls	r2, r2, #8
 8001682:	4311      	orrs	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001688:	0852      	lsrs	r2, r2, #1
 800168a:	3a01      	subs	r2, #1
 800168c:	0552      	lsls	r2, r2, #21
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001694:	0852      	lsrs	r2, r2, #1
 8001696:	3a01      	subs	r2, #1
 8001698:	0652      	lsls	r2, r2, #25
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a0:	06d2      	lsls	r2, r2, #27
 80016a2:	430a      	orrs	r2, r1
 80016a4:	494a      	ldr	r1, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b6:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff f9cb 	bl	8000a5c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f9c7 	bl	8000a5c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e074      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x6ce>
 80016e8:	e06c      	b.n	80017c4 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001708:	f023 0303 	bic.w	r3, r3, #3
 800170c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001714:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff f99d 	bl	8000a5c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff f999 	bl	8000a5c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e046      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x72a>
 8001744:	e03e      	b.n	80017c4 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e039      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_RCC_OscConfig+0x7d4>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	429a      	cmp	r2, r3
 8001764:	d12c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	3b01      	subs	r3, #1
 8001772:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d123      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d11b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d113      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d109      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	019d808c 	.word	0x019d808c

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0c8      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d910      	bls.n	800181c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0207 	bic.w	r2, r3, #7
 8001802:	4961      	ldr	r1, [pc, #388]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b0      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d04c      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d121      	bne.n	8001880 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e09e      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d115      	bne.n	8001880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e092      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e086      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001870:	4b46      	ldr	r3, [pc, #280]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e07e      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001880:	4b42      	ldr	r3, [pc, #264]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 0203 	bic.w	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	493f      	ldr	r1, [pc, #252]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001892:	f7ff f8e3 	bl	8000a5c <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f7ff f8df 	bl	8000a5c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e066      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 020c 	and.w	r2, r3, #12
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	429a      	cmp	r2, r3
 80018c0:	d1eb      	bne.n	800189a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	492c      	ldr	r1, [pc, #176]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d210      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4924      	ldr	r1, [pc, #144]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_ClockConfig+0x1b0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e036      	b.n	800197e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4918      	ldr	r1, [pc, #96]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4910      	ldr	r1, [pc, #64]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800194e:	f000 f825 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8001952:	4601      	mov	r1, r0
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_RCC_ClockConfig+0x1b4>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f826 	bl	80009c4 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	72fb      	strb	r3, [r7, #11]

  return status;
 800197c:	7afb      	ldrb	r3, [r7, #11]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000
 800198c:	40021000 	.word	0x40021000
 8001990:	08002c50 	.word	0x08002c50
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x34>
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d121      	bne.n	8001a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d11e      	bne.n	8001a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e005      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e004      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_GetSysClockFreq+0x110>)
 8001a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d133      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa4>
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0xaa>
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a42:	617b      	str	r3, [r7, #20]
      break;
 8001a44:	e005      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_GetSysClockFreq+0x110>)
 8001a48:	617b      	str	r3, [r7, #20]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	617b      	str	r3, [r7, #20]
      break;
 8001a50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	fb02 f203 	mul.w	r2, r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0e5b      	lsrs	r3, r3, #25
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a92:	69bb      	ldr	r3, [r7, #24]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3724      	adds	r7, #36	; 0x24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08002c68 	.word	0x08002c68
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	017d7840 	.word	0x017d7840

08001ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08002c60 	.word	0x08002c60

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001af8:	f7ff ffda 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4601      	mov	r1, r0
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08002c60 	.word	0x08002c60

08001b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b38:	f7ff f9fc 	bl	8000f34 <HAL_PWREx_GetVoltageRange>
 8001b3c:	6178      	str	r0, [r7, #20]
 8001b3e:	e014      	b.n	8001b6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b58:	f7ff f9ec 	bl	8000f34 <HAL_PWREx_GetVoltageRange>
 8001b5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b70:	d10b      	bne.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b80      	cmp	r3, #128	; 0x80
 8001b76:	d919      	bls.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001b7c:	d902      	bls.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b7e:	2302      	movs	r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e013      	b.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b84:	2301      	movs	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	e010      	b.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b80      	cmp	r3, #128	; 0x80
 8001b8e:	d902      	bls.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b90:	2303      	movs	r3, #3
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	e00a      	b.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b80      	cmp	r3, #128	; 0x80
 8001b9a:	d102      	bne.n	8001ba2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e004      	b.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b70      	cmp	r3, #112	; 0x70
 8001ba6:	d101      	bne.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba8:	2301      	movs	r3, #1
 8001baa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 0207 	bic.w	r2, r3, #7
 8001bb4:	4909      	ldr	r1, [pc, #36]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001be8:	2300      	movs	r3, #0
 8001bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bec:	2300      	movs	r3, #0
 8001bee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d02f      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c04:	d005      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001c06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001c10:	e00f      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c1e:	e00c      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f9f0 	bl	800200c <RCCEx_PLLSAI1_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c30:	e003      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	74fb      	strb	r3, [r7, #19]
      break;
 8001c36:	e000      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c40:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	494e      	ldr	r1, [pc, #312]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c56:	e001      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 809e 	beq.w	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c90:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cac:	f7fe fed6 	bl	8000a5c <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe fed2 	bl	8000a5c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d902      	bls.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	74fb      	strb	r3, [r7, #19]
        break;
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ef      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d15a      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fe92 	bl	8000a5c <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fe8e 	bl	8000a5c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d902      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	74fb      	strb	r3, [r7, #19]
            break;
 8001d52:	e006      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ec      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001d62:	7cfb      	ldrb	r3, [r7, #19]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4904      	ldr	r1, [pc, #16]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d7e:	e009      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	74bb      	strb	r3, [r7, #18]
 8001d84:	e006      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d94:	7c7b      	ldrb	r3, [r7, #17]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b9b      	ldr	r3, [pc, #620]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a9a      	ldr	r2, [pc, #616]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db2:	4b95      	ldr	r3, [pc, #596]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db8:	f023 0203 	bic.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4991      	ldr	r1, [pc, #580]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f023 020c 	bic.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	4989      	ldr	r1, [pc, #548]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df6:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	4980      	ldr	r1, [pc, #512]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e18:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	4978      	ldr	r1, [pc, #480]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	496f      	ldr	r1, [pc, #444]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4967      	ldr	r1, [pc, #412]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e7e:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	495e      	ldr	r1, [pc, #376]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	4956      	ldr	r1, [pc, #344]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec2:	4b51      	ldr	r3, [pc, #324]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d028      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ee4:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	4945      	ldr	r1, [pc, #276]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e011      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f872 	bl	800200c <RCCEx_PLLSAI1_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	492d      	ldr	r1, [pc, #180]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6c:	60d3      	str	r3, [r2, #12]
 8001f6e:	e011      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f843 	bl	800200c <RCCEx_PLLSAI1_Config>
 8001f86:	4603      	mov	r3, r0
 8001f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01c      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f820 	bl	800200c <RCCEx_PLLSAI1_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d018      	beq.n	8002058 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002026:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d10d      	bne.n	8002052 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
       ||
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800203e:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
       ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d044      	beq.n	80020dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e041      	b.n	80020dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d00c      	beq.n	800207a <RCCEx_PLLSAI1_Config+0x6e>
 8002060:	2b03      	cmp	r3, #3
 8002062:	d013      	beq.n	800208c <RCCEx_PLLSAI1_Config+0x80>
 8002064:	2b01      	cmp	r3, #1
 8002066:	d120      	bne.n	80020aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002068:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11d      	bne.n	80020b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002078:	e01a      	b.n	80020b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208a:	e013      	b.n	80020b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800208c:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020a8:	e006      	b.n	80020b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      break;
 80020ae:	e004      	b.n	80020ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020b0:	bf00      	nop
 80020b2:	e002      	b.n	80020ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020b4:	bf00      	nop
 80020b6:	e000      	b.n	80020ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	430b      	orrs	r3, r1
 80020d6:	4944      	ldr	r1, [pc, #272]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d17c      	bne.n	80021dc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ee:	f7fe fcb5 	bl	8000a5c <HAL_GetTick>
 80020f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020f4:	e009      	b.n	800210a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020f6:	f7fe fcb1 	bl	8000a5c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d902      	bls.n	800210a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	73fb      	strb	r3, [r7, #15]
        break;
 8002108:	e005      	b.n	8002116 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ef      	bne.n	80020f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d110      	bne.n	8002144 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800212a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6892      	ldr	r2, [r2, #8]
 8002132:	0211      	lsls	r1, r2, #8
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68d2      	ldr	r2, [r2, #12]
 8002138:	06d2      	lsls	r2, r2, #27
 800213a:	430a      	orrs	r2, r1
 800213c:	492a      	ldr	r1, [pc, #168]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	610b      	str	r3, [r1, #16]
 8002142:	e027      	b.n	8002194 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d112      	bne.n	8002170 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800214a:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002152:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	0211      	lsls	r1, r2, #8
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6912      	ldr	r2, [r2, #16]
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0552      	lsls	r2, r2, #21
 8002166:	430a      	orrs	r2, r1
 8002168:	491f      	ldr	r1, [pc, #124]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	610b      	str	r3, [r1, #16]
 800216e:	e011      	b.n	8002194 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002178:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6892      	ldr	r2, [r2, #8]
 8002180:	0211      	lsls	r1, r2, #8
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6952      	ldr	r2, [r2, #20]
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0652      	lsls	r2, r2, #25
 800218c:	430a      	orrs	r2, r1
 800218e:	4916      	ldr	r1, [pc, #88]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002190:	4313      	orrs	r3, r2
 8002192:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800219a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fc5c 	bl	8000a5c <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021a6:	e009      	b.n	80021bc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021a8:	f7fe fc58 	bl	8000a5c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d902      	bls.n	80021bc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	73fb      	strb	r3, [r7, #15]
          break;
 80021ba:	e005      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4904      	ldr	r1, [pc, #16]	; (80021e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07c      	b.n	80022f8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fa51 	bl	80006c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002234:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800223e:	d902      	bls.n	8002246 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e002      	b.n	800224c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002254:	d007      	beq.n	8002266 <HAL_SPI_Init+0x7a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002276:	d903      	bls.n	8002280 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
 800227e:	e002      	b.n	8002286 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	f003 0204 	and.w	r2, r3, #4
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	ea42 0103 	orr.w	r1, r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e040      	b.n	8002394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fac8 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f82c 	bl	800239c <UART_SetConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fb12 	bl	8002980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800236a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800237a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb99 	bl	8002ac4 <UART_CheckIdleState>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800239c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4baf      	ldr	r3, [pc, #700]	; (8002690 <UART_SetConfig+0x2f4>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	69f9      	ldr	r1, [r7, #28]
 80023da:	430b      	orrs	r3, r1
 80023dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4aa5      	ldr	r2, [pc, #660]	; (8002694 <UART_SetConfig+0x2f8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	4313      	orrs	r3, r2
 800240c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a9c      	ldr	r2, [pc, #624]	; (8002698 <UART_SetConfig+0x2fc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d121      	bne.n	8002470 <UART_SetConfig+0xd4>
 800242c:	4b9b      	ldr	r3, [pc, #620]	; (800269c <UART_SetConfig+0x300>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d816      	bhi.n	8002468 <UART_SetConfig+0xcc>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <UART_SetConfig+0xa4>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002451 	.word	0x08002451
 8002444:	0800245d 	.word	0x0800245d
 8002448:	08002457 	.word	0x08002457
 800244c:	08002463 	.word	0x08002463
 8002450:	2301      	movs	r3, #1
 8002452:	76fb      	strb	r3, [r7, #27]
 8002454:	e098      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002456:	2302      	movs	r3, #2
 8002458:	76fb      	strb	r3, [r7, #27]
 800245a:	e095      	b.n	8002588 <UART_SetConfig+0x1ec>
 800245c:	2304      	movs	r3, #4
 800245e:	76fb      	strb	r3, [r7, #27]
 8002460:	e092      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002462:	2308      	movs	r3, #8
 8002464:	76fb      	strb	r3, [r7, #27]
 8002466:	e08f      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002468:	2310      	movs	r3, #16
 800246a:	76fb      	strb	r3, [r7, #27]
 800246c:	bf00      	nop
 800246e:	e08b      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a8a      	ldr	r2, [pc, #552]	; (80026a0 <UART_SetConfig+0x304>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d134      	bne.n	80024e4 <UART_SetConfig+0x148>
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <UART_SetConfig+0x300>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d829      	bhi.n	80024dc <UART_SetConfig+0x140>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <UART_SetConfig+0xf4>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024c5 	.word	0x080024c5
 8002494:	080024dd 	.word	0x080024dd
 8002498:	080024dd 	.word	0x080024dd
 800249c:	080024dd 	.word	0x080024dd
 80024a0:	080024d1 	.word	0x080024d1
 80024a4:	080024dd 	.word	0x080024dd
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	080024dd 	.word	0x080024dd
 80024b0:	080024cb 	.word	0x080024cb
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	080024dd 	.word	0x080024dd
 80024c0:	080024d7 	.word	0x080024d7
 80024c4:	2300      	movs	r3, #0
 80024c6:	76fb      	strb	r3, [r7, #27]
 80024c8:	e05e      	b.n	8002588 <UART_SetConfig+0x1ec>
 80024ca:	2302      	movs	r3, #2
 80024cc:	76fb      	strb	r3, [r7, #27]
 80024ce:	e05b      	b.n	8002588 <UART_SetConfig+0x1ec>
 80024d0:	2304      	movs	r3, #4
 80024d2:	76fb      	strb	r3, [r7, #27]
 80024d4:	e058      	b.n	8002588 <UART_SetConfig+0x1ec>
 80024d6:	2308      	movs	r3, #8
 80024d8:	76fb      	strb	r3, [r7, #27]
 80024da:	e055      	b.n	8002588 <UART_SetConfig+0x1ec>
 80024dc:	2310      	movs	r3, #16
 80024de:	76fb      	strb	r3, [r7, #27]
 80024e0:	bf00      	nop
 80024e2:	e051      	b.n	8002588 <UART_SetConfig+0x1ec>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6e      	ldr	r2, [pc, #440]	; (80026a4 <UART_SetConfig+0x308>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d120      	bne.n	8002530 <UART_SetConfig+0x194>
 80024ee:	4b6b      	ldr	r3, [pc, #428]	; (800269c <UART_SetConfig+0x300>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d00f      	beq.n	800251c <UART_SetConfig+0x180>
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d802      	bhi.n	8002506 <UART_SetConfig+0x16a>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <UART_SetConfig+0x174>
 8002504:	e010      	b.n	8002528 <UART_SetConfig+0x18c>
 8002506:	2b20      	cmp	r3, #32
 8002508:	d005      	beq.n	8002516 <UART_SetConfig+0x17a>
 800250a:	2b30      	cmp	r3, #48	; 0x30
 800250c:	d009      	beq.n	8002522 <UART_SetConfig+0x186>
 800250e:	e00b      	b.n	8002528 <UART_SetConfig+0x18c>
 8002510:	2300      	movs	r3, #0
 8002512:	76fb      	strb	r3, [r7, #27]
 8002514:	e038      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002516:	2302      	movs	r3, #2
 8002518:	76fb      	strb	r3, [r7, #27]
 800251a:	e035      	b.n	8002588 <UART_SetConfig+0x1ec>
 800251c:	2304      	movs	r3, #4
 800251e:	76fb      	strb	r3, [r7, #27]
 8002520:	e032      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002522:	2308      	movs	r3, #8
 8002524:	76fb      	strb	r3, [r7, #27]
 8002526:	e02f      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002528:	2310      	movs	r3, #16
 800252a:	76fb      	strb	r3, [r7, #27]
 800252c:	bf00      	nop
 800252e:	e02b      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a57      	ldr	r2, [pc, #348]	; (8002694 <UART_SetConfig+0x2f8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d124      	bne.n	8002584 <UART_SetConfig+0x1e8>
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <UART_SetConfig+0x300>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d012      	beq.n	8002570 <UART_SetConfig+0x1d4>
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d802      	bhi.n	8002556 <UART_SetConfig+0x1ba>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <UART_SetConfig+0x1c8>
 8002554:	e012      	b.n	800257c <UART_SetConfig+0x1e0>
 8002556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255a:	d006      	beq.n	800256a <UART_SetConfig+0x1ce>
 800255c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002560:	d009      	beq.n	8002576 <UART_SetConfig+0x1da>
 8002562:	e00b      	b.n	800257c <UART_SetConfig+0x1e0>
 8002564:	2300      	movs	r3, #0
 8002566:	76fb      	strb	r3, [r7, #27]
 8002568:	e00e      	b.n	8002588 <UART_SetConfig+0x1ec>
 800256a:	2302      	movs	r3, #2
 800256c:	76fb      	strb	r3, [r7, #27]
 800256e:	e00b      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002570:	2304      	movs	r3, #4
 8002572:	76fb      	strb	r3, [r7, #27]
 8002574:	e008      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002576:	2308      	movs	r3, #8
 8002578:	76fb      	strb	r3, [r7, #27]
 800257a:	e005      	b.n	8002588 <UART_SetConfig+0x1ec>
 800257c:	2310      	movs	r3, #16
 800257e:	76fb      	strb	r3, [r7, #27]
 8002580:	bf00      	nop
 8002582:	e001      	b.n	8002588 <UART_SetConfig+0x1ec>
 8002584:	2310      	movs	r3, #16
 8002586:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a41      	ldr	r2, [pc, #260]	; (8002694 <UART_SetConfig+0x2f8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	f040 80f4 	bne.w	800277c <UART_SetConfig+0x3e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002594:	7efb      	ldrb	r3, [r7, #27]
 8002596:	2b08      	cmp	r3, #8
 8002598:	d823      	bhi.n	80025e2 <UART_SetConfig+0x246>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <UART_SetConfig+0x204>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025e3 	.word	0x080025e3
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	080025e3 	.word	0x080025e3
 80025b0:	080025d3 	.word	0x080025d3
 80025b4:	080025e3 	.word	0x080025e3
 80025b8:	080025e3 	.word	0x080025e3
 80025bc:	080025e3 	.word	0x080025e3
 80025c0:	080025db 	.word	0x080025db
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80025c4:	f7ff fa80 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80025ca:	e00d      	b.n	80025e8 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <UART_SetConfig+0x30c>)
 80025ce:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80025d0:	e00a      	b.n	80025e8 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80025d2:	f7ff f9e3 	bl	800199c <HAL_RCC_GetSysClockFreq>
 80025d6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80025d8:	e006      	b.n	80025e8 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80025da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025de:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80025e0:	e002      	b.n	80025e8 <UART_SetConfig+0x24c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	74fb      	strb	r3, [r7, #19]
        break;
 80025e6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81b9 	beq.w	8002962 <UART_SetConfig+0x5c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d305      	bcc.n	800260c <UART_SetConfig+0x270>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d902      	bls.n	8002612 <UART_SetConfig+0x276>
      {
        ret = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	74fb      	strb	r3, [r7, #19]
 8002610:	e1a7      	b.n	8002962 <UART_SetConfig+0x5c6>
      }
      else
      {
        switch (clocksource)
 8002612:	7efb      	ldrb	r3, [r7, #27]
 8002614:	2b08      	cmp	r3, #8
 8002616:	f200 809e 	bhi.w	8002756 <UART_SetConfig+0x3ba>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <UART_SetConfig+0x284>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002645 	.word	0x08002645
 8002624:	08002757 	.word	0x08002757
 8002628:	080026ad 	.word	0x080026ad
 800262c:	08002757 	.word	0x08002757
 8002630:	080026e1 	.word	0x080026e1
 8002634:	08002757 	.word	0x08002757
 8002638:	08002757 	.word	0x08002757
 800263c:	08002757 	.word	0x08002757
 8002640:	0800272d 	.word	0x0800272d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002644:	f7ff fa40 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	0214      	lsls	r4, r2, #8
 800265a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800265e:	020b      	lsls	r3, r1, #8
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	0852      	lsrs	r2, r2, #1
 8002666:	4611      	mov	r1, r2
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	eb13 0b01 	adds.w	fp, r3, r1
 8002670:	eb44 0c02 	adc.w	ip, r4, r2
 8002674:	4658      	mov	r0, fp
 8002676:	4661      	mov	r1, ip
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f04f 0400 	mov.w	r4, #0
 8002680:	461a      	mov	r2, r3
 8002682:	4623      	mov	r3, r4
 8002684:	f7fd fda2 	bl	80001cc <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800268e:	e065      	b.n	800275c <UART_SetConfig+0x3c0>
 8002690:	efff69f3 	.word	0xefff69f3
 8002694:	40008000 	.word	0x40008000
 8002698:	40013800 	.word	0x40013800
 800269c:	40021000 	.word	0x40021000
 80026a0:	40004400 	.word	0x40004400
 80026a4:	40004800 	.word	0x40004800
 80026a8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	f04f 0400 	mov.w	r4, #0
 80026b6:	49b1      	ldr	r1, [pc, #708]	; (800297c <UART_SetConfig+0x5e0>)
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	eb13 0b01 	adds.w	fp, r3, r1
 80026c0:	eb44 0c02 	adc.w	ip, r4, r2
 80026c4:	4658      	mov	r0, fp
 80026c6:	4661      	mov	r1, ip
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	f7fd fd7a 	bl	80001cc <__aeabi_uldivmod>
 80026d8:	4603      	mov	r3, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80026de:	e03d      	b.n	800275c <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026e0:	f7ff f95c 	bl	800199c <HAL_RCC_GetSysClockFreq>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	0214      	lsls	r4, r2, #8
 80026f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80026fa:	020b      	lsls	r3, r1, #8
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6852      	ldr	r2, [r2, #4]
 8002700:	0852      	lsrs	r2, r2, #1
 8002702:	4611      	mov	r1, r2
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	eb13 0b01 	adds.w	fp, r3, r1
 800270c:	eb44 0c02 	adc.w	ip, r4, r2
 8002710:	4658      	mov	r0, fp
 8002712:	4661      	mov	r1, ip
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f04f 0400 	mov.w	r4, #0
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	f7fd fd54 	bl	80001cc <__aeabi_uldivmod>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800272a:	e017      	b.n	800275c <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800273a:	f144 0100 	adc.w	r1, r4, #0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	461a      	mov	r2, r3
 8002748:	4623      	mov	r3, r4
 800274a:	f7fd fd3f 	bl	80001cc <__aeabi_uldivmod>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002754:	e002      	b.n	800275c <UART_SetConfig+0x3c0>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	74fb      	strb	r3, [r7, #19]
            break;
 800275a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002762:	d308      	bcc.n	8002776 <UART_SetConfig+0x3da>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276a:	d204      	bcs.n	8002776 <UART_SetConfig+0x3da>
        {
          huart->Instance->BRR = usartdiv;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	e0f5      	b.n	8002962 <UART_SetConfig+0x5c6>
        }
        else
        {
          ret = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	74fb      	strb	r3, [r7, #19]
 800277a:	e0f2      	b.n	8002962 <UART_SetConfig+0x5c6>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002784:	d17f      	bne.n	8002886 <UART_SetConfig+0x4ea>
  {
    switch (clocksource)
 8002786:	7efb      	ldrb	r3, [r7, #27]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d85c      	bhi.n	8002846 <UART_SetConfig+0x4aa>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <UART_SetConfig+0x3f8>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027b9 	.word	0x080027b9
 8002798:	080027d7 	.word	0x080027d7
 800279c:	080027f5 	.word	0x080027f5
 80027a0:	08002847 	.word	0x08002847
 80027a4:	08002811 	.word	0x08002811
 80027a8:	08002847 	.word	0x08002847
 80027ac:	08002847 	.word	0x08002847
 80027b0:	08002847 	.word	0x08002847
 80027b4:	0800282f 	.word	0x0800282f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027b8:	f7ff f986 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80027bc:	4603      	mov	r3, r0
 80027be:	005a      	lsls	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	441a      	add	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027d4:	e03a      	b.n	800284c <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027d6:	f7ff f98d 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 80027da:	4603      	mov	r3, r0
 80027dc:	005a      	lsls	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027f2:	e02b      	b.n	800284c <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80027fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6852      	ldr	r2, [r2, #4]
 8002806:	fbb3 f3f2 	udiv	r3, r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800280e:	e01d      	b.n	800284c <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002810:	f7ff f8c4 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8002814:	4603      	mov	r3, r0
 8002816:	005a      	lsls	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	441a      	add	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	b29b      	uxth	r3, r3
 800282a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800282c:	e00e      	b.n	800284c <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	b29b      	uxth	r3, r3
 8002842:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002844:	e002      	b.n	800284c <UART_SetConfig+0x4b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	74fb      	strb	r3, [r7, #19]
        break;
 800284a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d916      	bls.n	8002880 <UART_SetConfig+0x4e4>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d212      	bcs.n	8002880 <UART_SetConfig+0x4e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f023 030f 	bic.w	r3, r3, #15
 8002862:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	b29a      	uxth	r2, r3
 8002870:	897b      	ldrh	r3, [r7, #10]
 8002872:	4313      	orrs	r3, r2
 8002874:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	897a      	ldrh	r2, [r7, #10]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e070      	b.n	8002962 <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	74fb      	strb	r3, [r7, #19]
 8002884:	e06d      	b.n	8002962 <UART_SetConfig+0x5c6>
    }
  }
  else
  {
    switch (clocksource)
 8002886:	7efb      	ldrb	r3, [r7, #27]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d859      	bhi.n	8002940 <UART_SetConfig+0x5a4>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <UART_SetConfig+0x4f8>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028b9 	.word	0x080028b9
 8002898:	080028d5 	.word	0x080028d5
 800289c:	080028f1 	.word	0x080028f1
 80028a0:	08002941 	.word	0x08002941
 80028a4:	0800290d 	.word	0x0800290d
 80028a8:	08002941 	.word	0x08002941
 80028ac:	08002941 	.word	0x08002941
 80028b0:	08002941 	.word	0x08002941
 80028b4:	08002929 	.word	0x08002929
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028b8:	f7ff f906 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028d2:	e038      	b.n	8002946 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80028d4:	f7ff f90e 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028ee:	e02a      	b.n	8002946 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	fbb3 f3f2 	udiv	r3, r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800290a:	e01c      	b.n	8002946 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800290c:	f7ff f846 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	b29b      	uxth	r3, r3
 8002924:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002926:	e00e      	b.n	8002946 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	b29b      	uxth	r3, r3
 800293c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800293e:	e002      	b.n	8002946 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	74fb      	strb	r3, [r7, #19]
        break;
 8002944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d908      	bls.n	800295e <UART_SetConfig+0x5c2>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d204      	bcs.n	800295e <UART_SetConfig+0x5c2>
    {
      huart->Instance->BRR = usartdiv;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	e001      	b.n	8002962 <UART_SetConfig+0x5c6>
    }
    else
    {
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800297a:	bf00      	nop
 800297c:	f4240000 	.word	0xf4240000

08002980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01a      	beq.n	8002a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7e:	d10a      	bne.n	8002a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ad2:	f7fd ffc3 	bl	8000a5c <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d10e      	bne.n	8002b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f82a 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e020      	b.n	8002b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d10e      	bne.n	8002b30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f814 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e00a      	b.n	8002b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5e:	e02a      	b.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d026      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fd ff78 	bl	8000a5c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11b      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e00f      	b.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d0c5      	beq.n	8002b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1ba4      	subs	r4, r4, r6
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2500      	movs	r5, #0
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4e0b      	ldr	r6, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 f820 	bl	8002c38 <_init>
 8002bf8:	1ba4      	subs	r4, r4, r6
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	42a5      	cmp	r5, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c08:	4798      	blx	r3
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c12:	4798      	blx	r3
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002ca0 	.word	0x08002ca0
 8002c1c:	08002ca0 	.word	0x08002ca0
 8002c20:	08002ca0 	.word	0x08002ca0
 8002c24:	08002ca4 	.word	0x08002ca4

08002c28 <memset>:
 8002c28:	4402      	add	r2, r0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
