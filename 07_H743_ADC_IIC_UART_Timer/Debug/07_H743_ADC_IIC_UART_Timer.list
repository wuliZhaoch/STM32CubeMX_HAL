
07_H743_ADC_IIC_UART_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e36c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800e610  0800e610  0001e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e950  0800e950  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e950  0800e950  0001e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e958  0800e958  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e958  0800e958  0001e958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800e960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  240001e0  0800eb40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000420  0800eb40  00020420  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb3b  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004339  00000000  00000000  0004bd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  00050088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  000518e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b046  00000000  00000000  00052f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000182cb  00000000  00000000  0008dfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017599d  00000000  00000000  000a62a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021bc3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007394  00000000  00000000  0021bcbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5f4 	.word	0x0800e5f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e5f4 	.word	0x0800e5f4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	2003      	movs	r0, #3
 8000698:	f001 fea2 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800069c:	f005 fc56 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 80006a0:	4601      	mov	r1, r0
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_Init+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <HAL_Init+0x6c>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	fa21 f303 	lsr.w	r3, r1, r3
 80006b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_Init+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_Init+0x6c>)
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	fa22 f303 	lsr.w	r3, r2, r3
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_Init+0x70>)
 80006d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <HAL_Init+0x74>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f814 	bl	8000708 <HAL_InitTick>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e002      	b.n	80006f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006ea:	f00b f9a1 	bl	800ba30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400
 80006fc:	0800e680 	.word	0x0800e680
 8000700:	2400000c 	.word	0x2400000c
 8000704:	24000008 	.word	0x24000008

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e021      	b.n	8000760 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_InitTick+0x64>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_InitTick+0x60>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fe87 	bl	8002446 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f001 fe51 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x68>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000004 	.word	0x24000004
 800076c:	24000008 	.word	0x24000008
 8000770:	24000000 	.word	0x24000000

08000774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	24000004 	.word	0x24000004
 8000798:	24000218 	.word	0x24000218

0800079c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	24000218 	.word	0x24000218

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff ffee 	bl	800079c <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_Delay+0x40>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffde 	bl	800079c <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000004 	.word	0x24000004

080007f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetREVID+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	0c1b      	lsrs	r3, r3, #16
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	5c001000 	.word	0x5c001000

08000810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	609a      	str	r2, [r3, #8]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000878:	b490      	push	{r4, r7}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3360      	adds	r3, #96	; 0x60
 800088a:	461a      	mov	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	430b      	orrs	r3, r1
 80008a4:	4313      	orrs	r3, r2
 80008a6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc90      	pop	{r4, r7}
 80008b0:	4770      	bx	lr

080008b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f003 031f 	and.w	r3, r3, #31
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	431a      	orrs	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	611a      	str	r2, [r3, #16]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80008e4:	b490      	push	{r4, r7}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3360      	adds	r3, #96	; 0x60
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4313      	orrs	r3, r2
 8000908:	6023      	str	r3, [r4, #0]
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bc90      	pop	{r4, r7}
 8000912:	4770      	bx	lr

08000914 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800093a:	b490      	push	{r4, r7}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3330      	adds	r3, #48	; 0x30
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	f003 030c 	and.w	r3, r3, #12
 8000956:	4413      	add	r3, r2
 8000958:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800095a:	6822      	ldr	r2, [r4, #0]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	211f      	movs	r1, #31
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0e9b      	lsrs	r3, r3, #26
 8000970:	f003 011f 	and.w	r1, r3, #31
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	f003 031f 	and.w	r3, r3, #31
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bc90      	pop	{r4, r7}
 800098a:	4770      	bx	lr

0800098c <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	f023 0203 	bic.w	r2, r3, #3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60da      	str	r2, [r3, #12]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009d8:	b490      	push	{r4, r7}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3314      	adds	r3, #20
 80009e8:	461a      	mov	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	0e5b      	lsrs	r3, r3, #25
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	4413      	add	r3, r2
 80009f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	0d1b      	lsrs	r3, r3, #20
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	2107      	movs	r1, #7
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	0d1b      	lsrs	r3, r3, #20
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc90      	pop	{r4, r7}
 8000a26:	4770      	bx	lr

08000a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0318 	and.w	r3, r3, #24
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a4c:	40d9      	lsrs	r1, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	400b      	ands	r3, r1
 8000a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	000fffff 	.word	0x000fffff

08000a70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 031f 	and.w	r3, r3, #31
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6093      	str	r3, [r2, #8]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	5fffffc0 	.word	0x5fffffc0

08000acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ae0:	d101      	bne.n	8000ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LL_ADC_EnableInternalRegulator+0x24>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	6fffffc0 	.word	0x6fffffc0

08000b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b30:	d101      	bne.n	8000b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_ADC_Enable+0x24>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	7fffffc0 	.word	0x7fffffc0

08000b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <LL_ADC_IsEnabled+0x18>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <LL_ADC_IsEnabled+0x1a>
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_ADC_REG_StartConversion+0x24>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	f043 0204 	orr.w	r2, r3, #4
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	7fffffc0 	.word	0x7fffffc0

08000bbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d101      	bne.n	8000bd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d101      	bne.n	8000bfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e18e      	b.n	8000f40 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f00a fb9b 	bl	800b36c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff3f 	bl	8000acc <LL_ADC_IsDeepPowerDownEnabled>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff25 	bl	8000aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff5a 	bl	8000b1c <LL_ADC_IsInternalRegulatorEnabled>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d113      	bne.n	8000c96 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff3e 	bl	8000af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c78:	4b9a      	ldr	r3, [pc, #616]	; (8000ee4 <HAL_ADC_Init+0x2dc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	4a9a      	ldr	r2, [pc, #616]	; (8000ee8 <HAL_ADC_Init+0x2e0>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	099b      	lsrs	r3, r3, #6
 8000c86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c88:	e002      	b.n	8000c90 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f9      	bne.n	8000c8a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff3e 	bl	8000b1c <LL_ADC_IsInternalRegulatorEnabled>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10d      	bne.n	8000cc2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff78 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 8000ccc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8129 	bne.w	8000f2e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8125 	bne.w	8000f2e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cec:	f043 0202 	orr.w	r2, r3, #2
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff37 	bl	8000b6c <LL_ADC_IsEnabled>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d136      	bne.n	8000d72 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a78      	ldr	r2, [pc, #480]	; (8000eec <HAL_ADC_Init+0x2e4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d004      	beq.n	8000d18 <HAL_ADC_Init+0x110>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a77      	ldr	r2, [pc, #476]	; (8000ef0 <HAL_ADC_Init+0x2e8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10e      	bne.n	8000d36 <HAL_ADC_Init+0x12e>
 8000d18:	4874      	ldr	r0, [pc, #464]	; (8000eec <HAL_ADC_Init+0x2e4>)
 8000d1a:	f7ff ff27 	bl	8000b6c <LL_ADC_IsEnabled>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4873      	ldr	r0, [pc, #460]	; (8000ef0 <HAL_ADC_Init+0x2e8>)
 8000d22:	f7ff ff23 	bl	8000b6c <LL_ADC_IsEnabled>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	e008      	b.n	8000d48 <HAL_ADC_Init+0x140>
 8000d36:	486f      	ldr	r0, [pc, #444]	; (8000ef4 <HAL_ADC_Init+0x2ec>)
 8000d38:	f7ff ff18 	bl	8000b6c <LL_ADC_IsEnabled>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf0c      	ite	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	2300      	movne	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d012      	beq.n	8000d72 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a66      	ldr	r2, [pc, #408]	; (8000eec <HAL_ADC_Init+0x2e4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d004      	beq.n	8000d60 <HAL_ADC_Init+0x158>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a65      	ldr	r2, [pc, #404]	; (8000ef0 <HAL_ADC_Init+0x2e8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_ADC_Init+0x15c>
 8000d60:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <HAL_ADC_Init+0x2f0>)
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_Init+0x15e>
 8000d64:	4a65      	ldr	r2, [pc, #404]	; (8000efc <HAL_ADC_Init+0x2f4>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f7ff fd4f 	bl	8000810 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000d72:	f7ff fd41 	bl	80007f8 <HAL_GetREVID>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d914      	bls.n	8000daa <HAL_ADC_Init+0x1a2>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b10      	cmp	r3, #16
 8000d86:	d110      	bne.n	8000daa <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7d5b      	ldrb	r3, [r3, #21]
 8000d8c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d92:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000d98:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f1b      	ldrb	r3, [r3, #28]
 8000d9e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000da0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000da2:	f043 030c 	orr.w	r3, r3, #12
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	e00d      	b.n	8000dc6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7d5b      	ldrb	r3, [r3, #21]
 8000dae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000db4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000dba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7f1b      	ldrb	r3, [r3, #28]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d106      	bne.n	8000ddc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d009      	beq.n	8000df8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <HAL_ADC_Init+0x2f8>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fed3 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 8000e16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fee0 	bl	8000be2 <LL_ADC_INJ_IsConversionOngoing>
 8000e22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d14a      	bne.n	8000ec0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d147      	bne.n	8000ec0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7d1b      	ldrb	r3, [r3, #20]
 8000e34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <HAL_ADC_Init+0x2fc>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d11b      	bne.n	8000e94 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_ADC_Init+0x300>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000e70:	3a01      	subs	r2, #1
 8000e72:	0411      	lsls	r1, r2, #16
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e78:	4311      	orrs	r1, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e7e:	4311      	orrs	r1, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000e84:	430a      	orrs	r2, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0201 	orr.w	r2, r2, #1
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	e007      	b.n	8000ea4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 ff96 	bl	8001dec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d121      	bne.n	8000f0c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f023 010f 	bic.w	r1, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee0:	e01c      	b.n	8000f1c <HAL_ADC_Init+0x314>
 8000ee2:	bf00      	nop
 8000ee4:	24000008 	.word	0x24000008
 8000ee8:	053e2d63 	.word	0x053e2d63
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40022100 	.word	0x40022100
 8000ef4:	58026000 	.word	0x58026000
 8000ef8:	40022300 	.word	0x40022300
 8000efc:	58026300 	.word	0x58026300
 8000f00:	fff0c003 	.word	0xfff0c003
 8000f04:	ffffbffc 	.word	0xffffbffc
 8000f08:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020f 	bic.w	r2, r2, #15
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	f023 0303 	bic.w	r3, r3, #3
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8000f2c:	e007      	b.n	8000f3e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f32:	f043 0210 	orr.w	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_ADC_Start_DMA+0x168>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d004      	beq.n	8000f68 <HAL_ADC_Start_DMA+0x20>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_ADC_Start_DMA+0x16c>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_Start_DMA+0x24>
 8000f68:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_ADC_Start_DMA+0x170>)
 8000f6a:	e000      	b.n	8000f6e <HAL_ADC_Start_DMA+0x26>
 8000f6c:	4b53      	ldr	r3, [pc, #332]	; (80010bc <HAL_ADC_Start_DMA+0x174>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fd7e 	bl	8000a70 <LL_ADC_GetMultimode>
 8000f74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe1e 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 808c 	bne.w	80010a0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Start_DMA+0x4e>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e087      	b.n	80010a6 <HAL_ADC_Start_DMA+0x15e>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d002      	beq.n	8000fb0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d170      	bne.n	8001092 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 fe03 	bl	8001bbc <ADC_Enable>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d163      	bne.n	8001088 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <HAL_ADC_Start_DMA+0x178>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a37      	ldr	r2, [pc, #220]	; (80010b4 <HAL_ADC_Start_DMA+0x16c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d002      	beq.n	8000fe0 <HAL_ADC_Start_DMA+0x98>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	e000      	b.n	8000fe2 <HAL_ADC_Start_DMA+0x9a>
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_ADC_Start_DMA+0x168>)
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d002      	beq.n	8000ff0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	f023 0206 	bic.w	r2, r3, #6
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	659a      	str	r2, [r3, #88]	; 0x58
 8001014:	e002      	b.n	800101c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <HAL_ADC_Start_DMA+0x17c>)
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_ADC_Start_DMA+0x180>)
 800102a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_ADC_Start_DMA+0x184>)
 8001032:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	221c      	movs	r2, #28
 800103a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0210 	orr.w	r2, r2, #16
 8001052:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff fc94 	bl	800098c <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3340      	adds	r3, #64	; 0x40
 800106e:	4619      	mov	r1, r3
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f001 fd50 	bl	8002b18 <HAL_DMA_Start_IT>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fd87 	bl	8000b94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001086:	e00d      	b.n	80010a4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001090:	e008      	b.n	80010a4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800109e:	e001      	b.n	80010a4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000
 80010b4:	40022100 	.word	0x40022100
 80010b8:	40022300 	.word	0x40022300
 80010bc:	58026300 	.word	0x58026300
 80010c0:	fffff0fe 	.word	0xfffff0fe
 80010c4:	08001cc5 	.word	0x08001cc5
 80010c8:	08001d9d 	.word	0x08001d9d
 80010cc:	08001db9 	.word	0x08001db9

080010d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a87      	ldr	r2, [pc, #540]	; (8001310 <HAL_ADC_IRQHandler+0x240>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d004      	beq.n	8001100 <HAL_ADC_IRQHandler+0x30>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a86      	ldr	r2, [pc, #536]	; (8001314 <HAL_ADC_IRQHandler+0x244>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_IRQHandler+0x34>
 8001100:	4b85      	ldr	r3, [pc, #532]	; (8001318 <HAL_ADC_IRQHandler+0x248>)
 8001102:	e000      	b.n	8001106 <HAL_ADC_IRQHandler+0x36>
 8001104:	4b85      	ldr	r3, [pc, #532]	; (800131c <HAL_ADC_IRQHandler+0x24c>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fcb2 	bl	8000a70 <LL_ADC_GetMultimode>
 800110c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d017      	beq.n	8001148 <HAL_ADC_IRQHandler+0x78>
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001132:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 ff9c 	bl	8002078 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_ADC_IRQHandler+0x8c>
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8083 	beq.w	800126e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d07d      	beq.n	800126e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fbc0 	bl	8000914 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d062      	beq.n	8001260 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <HAL_ADC_IRQHandler+0x244>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d002      	beq.n	80011aa <HAL_ADC_IRQHandler+0xda>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e000      	b.n	80011ac <HAL_ADC_IRQHandler+0xdc>
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_ADC_IRQHandler+0x240>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d008      	beq.n	80011c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d002      	beq.n	80011c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b09      	cmp	r3, #9
 80011c4:	d104      	bne.n	80011d0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	e00c      	b.n	80011ea <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_ADC_IRQHandler+0x244>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d002      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x110>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e000      	b.n	80011e2 <HAL_ADC_IRQHandler+0x112>
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_ADC_IRQHandler+0x240>)
 80011e2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d135      	bne.n	8001260 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d12e      	bne.n	8001260 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fcd8 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11a      	bne.n	8001248 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 020c 	bic.w	r2, r2, #12
 8001220:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d112      	bne.n	8001260 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
 8001246:	e00b      	b.n	8001260 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	f043 0210 	orr.w	r2, r3, #16
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f96f 	bl	8001544 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_ADC_IRQHandler+0x1b2>
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a0 	beq.w	80013ce <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 809a 	beq.w	80013ce <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb7b 	bl	80009b2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80012bc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb26 	bl	8000914 <LL_ADC_REG_IsTriggerSourceSWStart>
 80012c8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_ADC_IRQHandler+0x244>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d002      	beq.n	80012da <HAL_ADC_IRQHandler+0x20a>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	e000      	b.n	80012dc <HAL_ADC_IRQHandler+0x20c>
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_IRQHandler+0x240>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d008      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d002      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	d104      	bne.n	8001300 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	623b      	str	r3, [r7, #32]
 80012fe:	e014      	b.n	800132a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_ADC_IRQHandler+0x244>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00a      	beq.n	8001320 <HAL_ADC_IRQHandler+0x250>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	e008      	b.n	8001322 <HAL_ADC_IRQHandler+0x252>
 8001310:	40022000 	.word	0x40022000
 8001314:	40022100 	.word	0x40022100
 8001318:	40022300 	.word	0x40022300
 800131c:	58026300 	.word	0x58026300
 8001320:	4b84      	ldr	r3, [pc, #528]	; (8001534 <HAL_ADC_IRQHandler+0x464>)
 8001322:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10c      	bne.n	800134a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001336:	2b00      	cmp	r3, #0
 8001338:	d142      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d03f      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d13a      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d133      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12e      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc3b 	bl	8000be2 <LL_ADC_INJ_IsConversionOngoing>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11a      	bne.n	80013a8 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001380:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d112      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
 80013a6:	e00b      	b.n	80013c0 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0210 	orr.w	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fe31 	bl	8002028 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2260      	movs	r2, #96	; 0x60
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d011      	beq.n	80013fc <HAL_ADC_IRQHandler+0x32c>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8bc 	bl	800156c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d012      	beq.n	800142c <HAL_ADC_IRQHandler+0x35c>
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00d      	beq.n	800142c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe17 	bl	8002050 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <HAL_ADC_IRQHandler+0x38c>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001444:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fe09 	bl	8002064 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d043      	beq.n	80014ee <HAL_ADC_IRQHandler+0x41e>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d03e      	beq.n	80014ee <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	e021      	b.n	80014c2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <HAL_ADC_IRQHandler+0x464>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d004      	beq.n	8001498 <HAL_ADC_IRQHandler+0x3c8>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_ADC_IRQHandler+0x468>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_ADC_IRQHandler+0x3cc>
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_ADC_IRQHandler+0x46c>)
 800149a:	e000      	b.n	800149e <HAL_ADC_IRQHandler+0x3ce>
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_ADC_IRQHandler+0x470>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff faf4 	bl	8000a8c <LL_ADC_GetMultiDMATransfer>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80014aa:	2301      	movs	r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e008      	b.n	80014c2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }

    if (overrun_error == 1UL)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d10e      	bne.n	80014e6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f84d 	bl	8001580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2210      	movs	r2, #16
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d018      	beq.n	800152a <HAL_ADC_IRQHandler+0x45a>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d013      	beq.n	800152a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f043 0208 	orr.w	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fd89 	bl	800203c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40022100 	.word	0x40022100
 800153c:	40022300 	.word	0x40022300
 8001540:	58026300 	.word	0x58026300

08001544 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b099      	sub	sp, #100	; 0x64
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a99      	ldr	r2, [pc, #612]	; (8001814 <HAL_ADC_ConfigChannel+0x280>)
 80015ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_ADC_ConfigChannel+0x2a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e2e6      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x5f8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff faf6 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 82cb 	bne.w	8001b6e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x62>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2201      	movs	r2, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	e00f      	b.n	8001616 <HAL_ADC_ConfigChannel+0x82>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2201      	movs	r2, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	69d1      	ldr	r1, [r2, #28]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	f7ff f982 	bl	800093a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fabe 	bl	8000bbc <LL_ADC_REG_IsConversionOngoing>
 8001640:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff facb 	bl	8000be2 <LL_ADC_INJ_IsConversionOngoing>
 800164c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800164e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 80b3 	bne.w	80017bc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 80af 	bne.w	80017bc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	461a      	mov	r2, r3
 800166c:	f7ff f9b4 	bl	80009d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001670:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_ADC_ConfigChannel+0x284>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800167c:	d10b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x102>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	e01d      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10b      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x128>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	e00a      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x13e>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d027      	beq.n	800172c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ea:	f7ff f8c5 	bl	8000878 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	7e5b      	ldrb	r3, [r3, #25]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x170>
 80016fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001702:	e000      	b.n	8001706 <HAL_ADC_ConfigChannel+0x172>
 8001704:	2300      	movs	r3, #0
 8001706:	461a      	mov	r2, r3
 8001708:	f7ff f8ec 	bl	80008e4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6919      	ldr	r1, [r3, #16]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	7e1b      	ldrb	r3, [r3, #24]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d102      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x18e>
 800171c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001720:	e000      	b.n	8001724 <HAL_ADC_ConfigChannel+0x190>
 8001722:	2300      	movs	r3, #0
 8001724:	461a      	mov	r2, r3
 8001726:	f7ff f8c4 	bl	80008b2 <LL_ADC_SetDataRightShift>
 800172a:	e047      	b.n	80017bc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	429a      	cmp	r2, r3
 800173e:	d107      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800174e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	069b      	lsls	r3, r3, #26
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001772:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800177a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	069b      	lsls	r3, r3, #26
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001796:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800179e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	069b      	lsls	r3, r3, #26
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f9d3 	bl	8000b6c <LL_ADC_IsEnabled>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 81d9 	bne.w	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	461a      	mov	r2, r3
 80017dc:	f7ff f924 	bl	8000a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_ADC_ConfigChannel+0x280>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f040 8101 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10f      	bne.n	800181c <HAL_ADC_ConfigChannel+0x288>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	3301      	adds	r3, #1
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	2b09      	cmp	r3, #9
 800180a:	bf94      	ite	ls
 800180c:	2301      	movls	r3, #1
 800180e:	2300      	movhi	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e016      	b.n	8001842 <HAL_ADC_ConfigChannel+0x2ae>
 8001814:	47ff0000 	.word	0x47ff0000
 8001818:	5c001000 	.word	0x5c001000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800182a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2b09      	cmp	r3, #9
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001842:	2b00      	cmp	r3, #0
 8001844:	d064      	beq.n	8001910 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x2ce>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	3301      	adds	r3, #1
 800185a:	069b      	lsls	r3, r3, #26
 800185c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001860:	e00e      	b.n	8001880 <HAL_ADC_ConfigChannel+0x2ec>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3301      	adds	r3, #1
 800187a:	069b      	lsls	r3, r3, #26
 800187c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x30c>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	3301      	adds	r3, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	e010      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x32e>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	ea42 0103 	orr.w	r1, r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x354>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0e9b      	lsrs	r3, r3, #26
 80018d8:	3301      	adds	r3, #1
 80018da:	f003 021f 	and.w	r2, r3, #31
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	e011      	b.n	800190c <HAL_ADC_ConfigChannel+0x378>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800190c:	430b      	orrs	r3, r1
 800190e:	e069      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_ADC_ConfigChannel+0x398>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0e9b      	lsrs	r3, r3, #26
 8001922:	3301      	adds	r3, #1
 8001924:	069b      	lsls	r3, r3, #26
 8001926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800192a:	e00e      	b.n	800194a <HAL_ADC_ConfigChannel+0x3b6>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	61fb      	str	r3, [r7, #28]
  return result;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3301      	adds	r3, #1
 8001944:	069b      	lsls	r3, r3, #26
 8001946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_ADC_ConfigChannel+0x3d6>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	3301      	adds	r3, #1
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	e010      	b.n	800198c <HAL_ADC_ConfigChannel+0x3f8>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	617b      	str	r3, [r7, #20]
  return result;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	ea42 0103 	orr.w	r1, r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x424>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	3301      	adds	r3, #1
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b6:	e014      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x44e>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	60fb      	str	r3, [r7, #12]
  return result;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	3b1e      	subs	r3, #30
 80019dc:	051b      	lsls	r3, r3, #20
 80019de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e2:	430b      	orrs	r3, r1
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	6892      	ldr	r2, [r2, #8]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7fe fff5 	bl	80009d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f280 80c4 	bge.w	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x478>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a64      	ldr	r2, [pc, #400]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x47c>
 8001a0c:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_ADC_ConfigChannel+0x608>)
 8001a0e:	e000      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x47e>
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_ADC_ConfigChannel+0x60c>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe ff22 	bl	800085c <LL_ADC_GetCommonPathInternalCh>
 8001a18:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x49a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5b      	ldr	r2, [pc, #364]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4b8>
 8001a2e:	4859      	ldr	r0, [pc, #356]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 8001a30:	f7ff f89c 	bl	8000b6c <LL_ADC_IsEnabled>
 8001a34:	4604      	mov	r4, r0
 8001a36:	4858      	ldr	r0, [pc, #352]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001a38:	f7ff f898 	bl	8000b6c <LL_ADC_IsEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4323      	orrs	r3, r4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e008      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x4ca>
 8001a4c:	4855      	ldr	r0, [pc, #340]	; (8001ba4 <HAL_ADC_ConfigChannel+0x610>)
 8001a4e:	f7ff f88d 	bl	8000b6c <LL_ADC_IsEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07b      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a50      	ldr	r2, [pc, #320]	; (8001ba8 <HAL_ADC_ConfigChannel+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d12e      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x536>
 8001a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d129      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_ADC_ConfigChannel+0x610>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d17f      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x500>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x504>
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_ADC_ConfigChannel+0x608>)
 8001a96:	e000      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x506>
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <HAL_ADC_ConfigChannel+0x60c>)
 8001a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7fe fec7 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_ADC_ConfigChannel+0x618>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_ADC_ConfigChannel+0x61c>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001aba:	e002      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ac8:	e05a      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <HAL_ADC_ConfigChannel+0x620>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d11e      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x57e>
 8001ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d119      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_ADC_ConfigChannel+0x610>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d14b      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x568>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x56c>
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_ADC_ConfigChannel+0x608>)
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x56e>
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_ADC_ConfigChannel+0x60c>)
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f7fe fe93 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b10:	e036      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <HAL_ADC_ConfigChannel+0x624>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d131      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
 8001b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12c      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_ADC_ConfigChannel+0x610>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d127      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_ADC_ConfigChannel+0x600>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x5b0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_ADC_ConfigChannel+0x604>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5b4>
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <HAL_ADC_ConfigChannel+0x608>)
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x5b6>
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_ADC_ConfigChannel+0x60c>)
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7fe fe6f 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
 8001b58:	e012      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0220 	orr.w	r2, r3, #32
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b6c:	e008      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f043 0220 	orr.w	r2, r3, #32
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3764      	adds	r7, #100	; 0x64
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022100 	.word	0x40022100
 8001b9c:	40022300 	.word	0x40022300
 8001ba0:	58026300 	.word	0x58026300
 8001ba4:	58026000 	.word	0x58026000
 8001ba8:	cb840000 	.word	0xcb840000
 8001bac:	24000008 	.word	0x24000008
 8001bb0:	053e2d63 	.word	0x053e2d63
 8001bb4:	c7520000 	.word	0xc7520000
 8001bb8:	cfb80000 	.word	0xcfb80000

08001bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe ffcf 	bl	8000b6c <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d167      	bne.n	8001ca4 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <ADC_Enable+0xf4>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e053      	b.n	8001ca6 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ff9e 	bl	8000b44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c08:	f7fe fdc8 	bl	800079c <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <ADC_Enable+0xf8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d004      	beq.n	8001c22 <ADC_Enable+0x66>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <ADC_Enable+0xfc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <ADC_Enable+0x6a>
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <ADC_Enable+0x100>)
 8001c24:	e000      	b.n	8001c28 <ADC_Enable+0x6c>
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <ADC_Enable+0x104>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ff21 	bl	8000a70 <LL_ADC_GetMultimode>
 8001c2e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <ADC_Enable+0xfc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d002      	beq.n	8001c40 <ADC_Enable+0x84>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e000      	b.n	8001c42 <ADC_Enable+0x86>
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <ADC_Enable+0xf8>)
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d129      	bne.n	8001ca4 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c50:	e021      	b.n	8001c96 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ff88 	bl	8000b6c <LL_ADC_IsEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe ff6c 	bl	8000b44 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6c:	f7fe fd96 	bl	800079c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d90d      	bls.n	8001c96 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d1d6      	bne.n	8001c52 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	8000003f 	.word	0x8000003f
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40022100 	.word	0x40022100
 8001cbc:	40022300 	.word	0x40022300
 8001cc0:	58026300 	.word	0x58026300

08001cc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d14b      	bne.n	8001d76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d021      	beq.n	8001d3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fe09 	bl	8000914 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d032      	beq.n	8001d6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d12b      	bne.n	8001d6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11f      	bne.n	8001d6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3a:	e018      	b.n	8001d6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d111      	bne.n	8001d6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fbe8 	bl	8001544 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d74:	e00e      	b.n	8001d94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fbfc 	bl	8001580 <HAL_ADC_ErrorCallback>
}
 8001d88:	e004      	b.n	8001d94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fbd4 	bl	8001558 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f043 0204 	orr.w	r2, r3, #4
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fbce 	bl	8001580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a70      	ldr	r2, [pc, #448]	; (8001fbc <ADC_ConfigureBoostMode+0x1d0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <ADC_ConfigureBoostMode+0x1c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6f      	ldr	r2, [pc, #444]	; (8001fc0 <ADC_ConfigureBoostMode+0x1d4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d109      	bne.n	8001e1c <ADC_ConfigureBoostMode+0x30>
 8001e08:	4b6e      	ldr	r3, [pc, #440]	; (8001fc4 <ADC_ConfigureBoostMode+0x1d8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e008      	b.n	8001e2e <ADC_ConfigureBoostMode+0x42>
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <ADC_ConfigureBoostMode+0x1dc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01a      	beq.n	8001e68 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001e32:	f004 f9fd 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8001e36:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e40:	d006      	beq.n	8001e50 <ADC_ConfigureBoostMode+0x64>
 8001e42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e46:	d00b      	beq.n	8001e60 <ADC_ConfigureBoostMode+0x74>
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d000      	beq.n	8001e50 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8001e4e:	e05d      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	60fb      	str	r3, [r7, #12]
        break;
 8001e5e:	e055      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	60fb      	str	r3, [r7, #12]
        break;
 8001e66:	e051      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e6c:	f005 f91a 	bl	80070a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e70:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e7a:	d02a      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
 8001e7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e80:	d813      	bhi.n	8001eaa <ADC_ConfigureBoostMode+0xbe>
 8001e82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e86:	d024      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
 8001e88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e8c:	d806      	bhi.n	8001e9c <ADC_ConfigureBoostMode+0xb0>
 8001e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e92:	d01e      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
 8001e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e98:	d01b      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8001e9a:	e037      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea0:	d017      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
 8001ea2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ea6:	d014      	beq.n	8001ed2 <ADC_ConfigureBoostMode+0xe6>
        break;
 8001ea8:	e030      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001eaa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001eae:	d021      	beq.n	8001ef4 <ADC_ConfigureBoostMode+0x108>
 8001eb0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001eb4:	d806      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0xd8>
 8001eb6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001eba:	d013      	beq.n	8001ee4 <ADC_ConfigureBoostMode+0xf8>
 8001ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ec0:	d014      	beq.n	8001eec <ADC_ConfigureBoostMode+0x100>
        break;
 8001ec2:	e023      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001ec4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ec8:	d018      	beq.n	8001efc <ADC_ConfigureBoostMode+0x110>
 8001eca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001ece:	d019      	beq.n	8001f04 <ADC_ConfigureBoostMode+0x118>
        break;
 8001ed0:	e01c      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	60fb      	str	r3, [r7, #12]
        break;
 8001ee2:	e013      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
      break;
 8001eea:	e00f      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	60fb      	str	r3, [r7, #12]
        break;
 8001ef2:	e00b      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	60fb      	str	r3, [r7, #12]
        break;
 8001efa:	e007      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	09db      	lsrs	r3, r3, #7
 8001f00:	60fb      	str	r3, [r7, #12]
        break;
 8001f02:	e003      	b.n	8001f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	60fb      	str	r3, [r7, #12]
        break;
 8001f0a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001f0c:	f7fe fc74 	bl	80007f8 <HAL_GetREVID>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d815      	bhi.n	8001f46 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <ADC_ConfigureBoostMode+0x1e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d908      	bls.n	8001f34 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f32:	e03e      	b.n	8001fb2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	e035      	b.n	8001fb2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <ADC_ConfigureBoostMode+0x1e4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d808      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	e025      	b.n	8001fb2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <ADC_ConfigureBoostMode+0x1e8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d80a      	bhi.n	8001f84 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f80:	609a      	str	r2, [r3, #8]
}
 8001f82:	e016      	b.n	8001fb2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <ADC_ConfigureBoostMode+0x1ec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d80a      	bhi.n	8001fa2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	609a      	str	r2, [r3, #8]
}
 8001fa0:	e007      	b.n	8001fb2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fb0:	609a      	str	r2, [r3, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40022100 	.word	0x40022100
 8001fc4:	40022300 	.word	0x40022300
 8001fc8:	58026300 	.word	0x58026300
 8001fcc:	01312d00 	.word	0x01312d00
 8001fd0:	005f5e10 	.word	0x005f5e10
 8001fd4:	00bebc20 	.word	0x00bebc20
 8001fd8:	017d7840 	.word	0x017d7840

08001fdc <LL_ADC_IsEnabled>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <LL_ADC_IsEnabled+0x18>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_ADC_IsEnabled+0x1a>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_REG_IsConversionOngoing>:
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d101      	bne.n	800201a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b09f      	sub	sp, #124	; 0x7c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e0ba      	b.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d102      	bne.n	80020c2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80020bc:	4b5b      	ldr	r3, [pc, #364]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	e001      	b.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e09d      	b.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff8b 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 80020ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff85 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d17f      	bne.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	2b00      	cmp	r3, #0
 8002102:	d17c      	bne.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002118:	4b45      	ldr	r3, [pc, #276]	; (8002230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800211a:	e000      	b.n	800211e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800211c:	4b45      	ldr	r3, [pc, #276]	; (8002234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800211e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d039      	beq.n	800219c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	431a      	orrs	r2, r3
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002138:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a38      	ldr	r2, [pc, #224]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10e      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800214e:	4836      	ldr	r0, [pc, #216]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002150:	f7ff ff44 	bl	8001fdc <LL_ADC_IsEnabled>
 8002154:	4604      	mov	r4, r0
 8002156:	4835      	ldr	r0, [pc, #212]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002158:	f7ff ff40 	bl	8001fdc <LL_ADC_IsEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	4323      	orrs	r3, r4
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e008      	b.n	800217e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800216c:	4832      	ldr	r0, [pc, #200]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800216e:	f7ff ff35 	bl	8001fdc <LL_ADC_IsEnabled>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d047      	beq.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002188:	4013      	ands	r3, r2
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	6811      	ldr	r1, [r2, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	430a      	orrs	r2, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002198:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800219a:	e03a      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10e      	bne.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80021bc:	481a      	ldr	r0, [pc, #104]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80021be:	f7ff ff0d 	bl	8001fdc <LL_ADC_IsEnabled>
 80021c2:	4604      	mov	r4, r0
 80021c4:	4819      	ldr	r0, [pc, #100]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80021c6:	f7ff ff09 	bl	8001fdc <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4323      	orrs	r3, r4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e008      	b.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80021da:	4817      	ldr	r0, [pc, #92]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80021dc:	f7ff fefe 	bl	8001fdc <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	e009      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002210:	e000      	b.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002212:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800221c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002220:	4618      	mov	r0, r3
 8002222:	377c      	adds	r7, #124	; 0x7c
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	40022000 	.word	0x40022000
 800222c:	40022100 	.word	0x40022100
 8002230:	40022300 	.word	0x40022300
 8002234:	58026300 	.word	0x58026300
 8002238:	58026000 	.word	0x58026000
 800223c:	fffff0e0 	.word	0xfffff0e0

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <__NVIC_SetPriorityGrouping+0x40>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	4313      	orrs	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x40>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	05fa0000 	.word	0x05fa0000

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff40 	bl	8002288 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff90 	bl	8002334 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5f 	bl	80022e0 <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff33 	bl	80022a4 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa4 	bl	800239c <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7fe f998 	bl	800079c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e316      	b.n	8002aa6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a66      	ldr	r2, [pc, #408]	; (8002618 <HAL_DMA_Init+0x1b8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d04a      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_DMA_Init+0x1bc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d045      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_DMA_Init+0x1c0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d040      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_DMA_Init+0x1c4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d03b      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_DMA_Init+0x1c8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d036      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5f      	ldr	r2, [pc, #380]	; (800262c <HAL_DMA_Init+0x1cc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d031      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <HAL_DMA_Init+0x1d0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02c      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5c      	ldr	r2, [pc, #368]	; (8002634 <HAL_DMA_Init+0x1d4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d027      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5a      	ldr	r2, [pc, #360]	; (8002638 <HAL_DMA_Init+0x1d8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d022      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a59      	ldr	r2, [pc, #356]	; (800263c <HAL_DMA_Init+0x1dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01d      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_DMA_Init+0x1e0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d018      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a56      	ldr	r2, [pc, #344]	; (8002644 <HAL_DMA_Init+0x1e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_DMA_Init+0x1e8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a53      	ldr	r2, [pc, #332]	; (800264c <HAL_DMA_Init+0x1ec>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a51      	ldr	r2, [pc, #324]	; (8002650 <HAL_DMA_Init+0x1f0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Init+0xb8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_DMA_Init+0x1f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_DMA_Init+0xbc>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_DMA_Init+0xbe>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 813b 	beq.w	800279a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a37      	ldr	r2, [pc, #220]	; (8002618 <HAL_DMA_Init+0x1b8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a36      	ldr	r2, [pc, #216]	; (800261c <HAL_DMA_Init+0x1bc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d045      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_DMA_Init+0x1c0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <HAL_DMA_Init+0x1c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d03b      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a31      	ldr	r2, [pc, #196]	; (8002628 <HAL_DMA_Init+0x1c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_DMA_Init+0x1cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_DMA_Init+0x1d0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2d      	ldr	r2, [pc, #180]	; (8002634 <HAL_DMA_Init+0x1d4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_DMA_Init+0x1d8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d022      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2a      	ldr	r2, [pc, #168]	; (800263c <HAL_DMA_Init+0x1dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d01d      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_DMA_Init+0x1e0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a27      	ldr	r2, [pc, #156]	; (8002644 <HAL_DMA_Init+0x1e4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a25      	ldr	r2, [pc, #148]	; (8002648 <HAL_DMA_Init+0x1e8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_DMA_Init+0x1ec>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_DMA_Init+0x1f0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_Init+0x174>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_DMA_Init+0x1f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <HAL_DMA_Init+0x186>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_DMA_Init+0x196>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f6:	e02f      	b.n	8002658 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f8:	f7fe f8d0 	bl	800079c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b05      	cmp	r3, #5
 8002604:	d928      	bls.n	8002658 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e246      	b.n	8002aa6 <HAL_DMA_Init+0x646>
 8002618:	40020010 	.word	0x40020010
 800261c:	40020028 	.word	0x40020028
 8002620:	40020040 	.word	0x40020040
 8002624:	40020058 	.word	0x40020058
 8002628:	40020070 	.word	0x40020070
 800262c:	40020088 	.word	0x40020088
 8002630:	400200a0 	.word	0x400200a0
 8002634:	400200b8 	.word	0x400200b8
 8002638:	40020410 	.word	0x40020410
 800263c:	40020428 	.word	0x40020428
 8002640:	40020440 	.word	0x40020440
 8002644:	40020458 	.word	0x40020458
 8002648:	40020470 	.word	0x40020470
 800264c:	40020488 	.word	0x40020488
 8002650:	400204a0 	.word	0x400204a0
 8002654:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c8      	bne.n	80025f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4b83      	ldr	r3, [pc, #524]	; (8002880 <HAL_DMA_Init+0x420>)
 8002672:	4013      	ands	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800267e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002696:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d107      	bne.n	80026bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4313      	orrs	r3, r2
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026bc:	4b71      	ldr	r3, [pc, #452]	; (8002884 <HAL_DMA_Init+0x424>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b71      	ldr	r3, [pc, #452]	; (8002888 <HAL_DMA_Init+0x428>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d328      	bcc.n	800271c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b28      	cmp	r3, #40	; 0x28
 80026d0:	d903      	bls.n	80026da <HAL_DMA_Init+0x27a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b2e      	cmp	r3, #46	; 0x2e
 80026d8:	d917      	bls.n	800270a <HAL_DMA_Init+0x2aa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b3e      	cmp	r3, #62	; 0x3e
 80026e0:	d903      	bls.n	80026ea <HAL_DMA_Init+0x28a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b42      	cmp	r3, #66	; 0x42
 80026e8:	d90f      	bls.n	800270a <HAL_DMA_Init+0x2aa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b46      	cmp	r3, #70	; 0x46
 80026f0:	d903      	bls.n	80026fa <HAL_DMA_Init+0x29a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b48      	cmp	r3, #72	; 0x48
 80026f8:	d907      	bls.n	800270a <HAL_DMA_Init+0x2aa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b4e      	cmp	r3, #78	; 0x4e
 8002700:	d905      	bls.n	800270e <HAL_DMA_Init+0x2ae>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b52      	cmp	r3, #82	; 0x52
 8002708:	d801      	bhi.n	800270e <HAL_DMA_Init+0x2ae>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_DMA_Init+0x2b0>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0307 	bic.w	r3, r3, #7
 8002732:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b04      	cmp	r3, #4
 8002744:	d117      	bne.n	8002776 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 fdcf 	bl	80042fc <DMA_CheckFifoParam>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e197      	b.n	8002aa6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f001 fd0a 	bl	8004198 <DMA_CalcBaseAndBitshift>
 8002784:	4603      	mov	r3, r0
 8002786:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	223f      	movs	r2, #63	; 0x3f
 8002792:	409a      	lsls	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e0cd      	b.n	8002936 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_DMA_Init+0x42c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a39      	ldr	r2, [pc, #228]	; (8002890 <HAL_DMA_Init+0x430>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01d      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a38      	ldr	r2, [pc, #224]	; (8002894 <HAL_DMA_Init+0x434>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d018      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_DMA_Init+0x438>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a35      	ldr	r2, [pc, #212]	; (800289c <HAL_DMA_Init+0x43c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <HAL_DMA_Init+0x440>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_DMA_Init+0x444>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Init+0x38a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a30      	ldr	r2, [pc, #192]	; (80028a8 <HAL_DMA_Init+0x448>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_DMA_Init+0x38e>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_Init+0x390>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_DMA_Init+0x42c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d021      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_DMA_Init+0x430>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01c      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_DMA_Init+0x434>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d017      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_DMA_Init+0x438>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d012      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_DMA_Init+0x43c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00d      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_DMA_Init+0x440>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_DMA_Init+0x444>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_DMA_Init+0x3e4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_DMA_Init+0x448>)
 8002842:	4293      	cmp	r3, r2
 8002844:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_DMA_Init+0x44c>)
 8002862:	4013      	ands	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d020      	beq.n	80028b0 <HAL_DMA_Init+0x450>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d102      	bne.n	800287c <HAL_DMA_Init+0x41c>
 8002876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287a:	e01a      	b.n	80028b2 <HAL_DMA_Init+0x452>
 800287c:	2300      	movs	r3, #0
 800287e:	e018      	b.n	80028b2 <HAL_DMA_Init+0x452>
 8002880:	fe10803f 	.word	0xfe10803f
 8002884:	5c001000 	.word	0x5c001000
 8002888:	ffff0000 	.word	0xffff0000
 800288c:	58025408 	.word	0x58025408
 8002890:	5802541c 	.word	0x5802541c
 8002894:	58025430 	.word	0x58025430
 8002898:	58025444 	.word	0x58025444
 800289c:	58025458 	.word	0x58025458
 80028a0:	5802546c 	.word	0x5802546c
 80028a4:	58025480 	.word	0x58025480
 80028a8:	58025494 	.word	0x58025494
 80028ac:	fffe000f 	.word	0xfffe000f
 80028b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <HAL_DMA_Init+0x650>)
 80028f8:	4413      	add	r3, r2
 80028fa:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <HAL_DMA_Init+0x654>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	009a      	lsls	r2, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f001 fc45 	bl	8004198 <DMA_CalcBaseAndBitshift>
 800290e:	4603      	mov	r3, r0
 8002910:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	e008      	b.n	8002936 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0b7      	b.n	8002aa6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a5f      	ldr	r2, [pc, #380]	; (8002ab8 <HAL_DMA_Init+0x658>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d072      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5d      	ldr	r2, [pc, #372]	; (8002abc <HAL_DMA_Init+0x65c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d06d      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5c      	ldr	r2, [pc, #368]	; (8002ac0 <HAL_DMA_Init+0x660>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d068      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5a      	ldr	r2, [pc, #360]	; (8002ac4 <HAL_DMA_Init+0x664>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d063      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a59      	ldr	r2, [pc, #356]	; (8002ac8 <HAL_DMA_Init+0x668>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d05e      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_DMA_Init+0x66c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d059      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <HAL_DMA_Init+0x670>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d054      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_DMA_Init+0x674>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d04f      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_DMA_Init+0x678>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04a      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a51      	ldr	r2, [pc, #324]	; (8002adc <HAL_DMA_Init+0x67c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d045      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a50      	ldr	r2, [pc, #320]	; (8002ae0 <HAL_DMA_Init+0x680>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <HAL_DMA_Init+0x684>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d03b      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <HAL_DMA_Init+0x688>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	; (8002aec <HAL_DMA_Init+0x68c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <HAL_DMA_Init+0x690>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02c      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <HAL_DMA_Init+0x694>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_DMA_Init+0x698>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_DMA_Init+0x69c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <HAL_DMA_Init+0x6a0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a42      	ldr	r2, [pc, #264]	; (8002b04 <HAL_DMA_Init+0x6a4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_DMA_Init+0x6a8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_DMA_Init+0x6ac>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3e      	ldr	r2, [pc, #248]	; (8002b10 <HAL_DMA_Init+0x6b0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_DMA_Init+0x5c6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3c      	ldr	r2, [pc, #240]	; (8002b14 <HAL_DMA_Init+0x6b4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_DMA_Init+0x5ca>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_DMA_Init+0x5cc>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f001 fcdf 	bl	80043f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d102      	bne.n	8002a44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_DMA_Init+0x624>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d80c      	bhi.n	8002a84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f001 fd5c 	bl	8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	e008      	b.n	8002a96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	a7fdabf8 	.word	0xa7fdabf8
 8002ab4:	cccccccd 	.word	0xcccccccd
 8002ab8:	40020010 	.word	0x40020010
 8002abc:	40020028 	.word	0x40020028
 8002ac0:	40020040 	.word	0x40020040
 8002ac4:	40020058 	.word	0x40020058
 8002ac8:	40020070 	.word	0x40020070
 8002acc:	40020088 	.word	0x40020088
 8002ad0:	400200a0 	.word	0x400200a0
 8002ad4:	400200b8 	.word	0x400200b8
 8002ad8:	40020410 	.word	0x40020410
 8002adc:	40020428 	.word	0x40020428
 8002ae0:	40020440 	.word	0x40020440
 8002ae4:	40020458 	.word	0x40020458
 8002ae8:	40020470 	.word	0x40020470
 8002aec:	40020488 	.word	0x40020488
 8002af0:	400204a0 	.word	0x400204a0
 8002af4:	400204b8 	.word	0x400204b8
 8002af8:	58025408 	.word	0x58025408
 8002afc:	5802541c 	.word	0x5802541c
 8002b00:	58025430 	.word	0x58025430
 8002b04:	58025444 	.word	0x58025444
 8002b08:	58025458 	.word	0x58025458
 8002b0c:	5802546c 	.word	0x5802546c
 8002b10:	58025480 	.word	0x58025480
 8002b14:	58025494 	.word	0x58025494

08002b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e226      	b.n	8002f82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_DMA_Start_IT+0x2a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e21f      	b.n	8002f82 <HAL_DMA_Start_IT+0x46a>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 820a 	bne.w	8002f6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a68      	ldr	r2, [pc, #416]	; (8002d0c <HAL_DMA_Start_IT+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04a      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a66      	ldr	r2, [pc, #408]	; (8002d10 <HAL_DMA_Start_IT+0x1f8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d045      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a65      	ldr	r2, [pc, #404]	; (8002d14 <HAL_DMA_Start_IT+0x1fc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d040      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_DMA_Start_IT+0x200>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d03b      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <HAL_DMA_Start_IT+0x204>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d036      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <HAL_DMA_Start_IT+0x208>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	; (8002d24 <HAL_DMA_Start_IT+0x20c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <HAL_DMA_Start_IT+0x210>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_DMA_Start_IT+0x214>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_DMA_Start_IT+0x218>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a59      	ldr	r2, [pc, #356]	; (8002d34 <HAL_DMA_Start_IT+0x21c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_DMA_Start_IT+0x220>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_DMA_Start_IT+0x224>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a54      	ldr	r2, [pc, #336]	; (8002d40 <HAL_DMA_Start_IT+0x228>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a53      	ldr	r2, [pc, #332]	; (8002d44 <HAL_DMA_Start_IT+0x22c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_Start_IT+0xee>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_DMA_Start_IT+0x230>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <HAL_DMA_Start_IT+0x100>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e007      	b.n	8002c28 <HAL_DMA_Start_IT+0x110>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f001 f906 	bl	8003e40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_DMA_Start_IT+0x1f4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04a      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <HAL_DMA_Start_IT+0x1f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d045      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_DMA_Start_IT+0x1fc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d040      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a30      	ldr	r2, [pc, #192]	; (8002d18 <HAL_DMA_Start_IT+0x200>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2e      	ldr	r2, [pc, #184]	; (8002d1c <HAL_DMA_Start_IT+0x204>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d036      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <HAL_DMA_Start_IT+0x208>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d031      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <HAL_DMA_Start_IT+0x20c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02c      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <HAL_DMA_Start_IT+0x210>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d027      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_DMA_Start_IT+0x214>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <HAL_DMA_Start_IT+0x218>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01d      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_DMA_Start_IT+0x21c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d018      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_DMA_Start_IT+0x220>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_DMA_Start_IT+0x224>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a21      	ldr	r2, [pc, #132]	; (8002d40 <HAL_DMA_Start_IT+0x228>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_DMA_Start_IT+0x22c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_DMA_Start_IT+0x230>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Start_IT+0x1c0>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_DMA_Start_IT+0x1c2>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d036      	beq.n	8002d4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 021e 	bic.w	r2, r3, #30
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0216 	orr.w	r2, r2, #22
 8002cf0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03e      	beq.n	8002d78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0208 	orr.w	r2, r2, #8
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e035      	b.n	8002d78 <HAL_DMA_Start_IT+0x260>
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 020e 	bic.w	r2, r3, #14
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 020a 	orr.w	r2, r2, #10
 8002d5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a83      	ldr	r2, [pc, #524]	; (8002f8c <HAL_DMA_Start_IT+0x474>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d072      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a82      	ldr	r2, [pc, #520]	; (8002f90 <HAL_DMA_Start_IT+0x478>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d06d      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_DMA_Start_IT+0x47c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d068      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7f      	ldr	r2, [pc, #508]	; (8002f98 <HAL_DMA_Start_IT+0x480>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d063      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7d      	ldr	r2, [pc, #500]	; (8002f9c <HAL_DMA_Start_IT+0x484>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d05e      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7c      	ldr	r2, [pc, #496]	; (8002fa0 <HAL_DMA_Start_IT+0x488>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d059      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_DMA_Start_IT+0x48c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d054      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_DMA_Start_IT+0x490>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04f      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a77      	ldr	r2, [pc, #476]	; (8002fac <HAL_DMA_Start_IT+0x494>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a76      	ldr	r2, [pc, #472]	; (8002fb0 <HAL_DMA_Start_IT+0x498>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d045      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a74      	ldr	r2, [pc, #464]	; (8002fb4 <HAL_DMA_Start_IT+0x49c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d040      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a73      	ldr	r2, [pc, #460]	; (8002fb8 <HAL_DMA_Start_IT+0x4a0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d03b      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a71      	ldr	r2, [pc, #452]	; (8002fbc <HAL_DMA_Start_IT+0x4a4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a70      	ldr	r2, [pc, #448]	; (8002fc0 <HAL_DMA_Start_IT+0x4a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d031      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_DMA_Start_IT+0x4ac>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02c      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <HAL_DMA_Start_IT+0x4b0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d027      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	; (8002fcc <HAL_DMA_Start_IT+0x4b4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6a      	ldr	r2, [pc, #424]	; (8002fd0 <HAL_DMA_Start_IT+0x4b8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01d      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a68      	ldr	r2, [pc, #416]	; (8002fd4 <HAL_DMA_Start_IT+0x4bc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <HAL_DMA_Start_IT+0x4c0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a65      	ldr	r2, [pc, #404]	; (8002fdc <HAL_DMA_Start_IT+0x4c4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a64      	ldr	r2, [pc, #400]	; (8002fe0 <HAL_DMA_Start_IT+0x4c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a62      	ldr	r2, [pc, #392]	; (8002fe4 <HAL_DMA_Start_IT+0x4cc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_Start_IT+0x350>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_DMA_Start_IT+0x4d0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Start_IT+0x354>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_DMA_Start_IT+0x356>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_DMA_Start_IT+0x474>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d04a      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <HAL_DMA_Start_IT+0x478>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d045      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <HAL_DMA_Start_IT+0x47c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d040      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a33      	ldr	r2, [pc, #204]	; (8002f98 <HAL_DMA_Start_IT+0x480>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03b      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a31      	ldr	r2, [pc, #196]	; (8002f9c <HAL_DMA_Start_IT+0x484>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d036      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <HAL_DMA_Start_IT+0x488>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d031      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_DMA_Start_IT+0x48c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02c      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_DMA_Start_IT+0x490>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d027      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_DMA_Start_IT+0x494>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_DMA_Start_IT+0x498>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01d      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_DMA_Start_IT+0x49c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_DMA_Start_IT+0x4a0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <HAL_DMA_Start_IT+0x4a4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_DMA_Start_IT+0x4a8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_DMA_Start_IT+0x4ac>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_DMA_Start_IT+0x430>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <HAL_DMA_Start_IT+0x4b0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <HAL_DMA_Start_IT+0x442>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e012      	b.n	8002f80 <HAL_DMA_Start_IT+0x468>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e009      	b.n	8002f80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40020010 	.word	0x40020010
 8002f90:	40020028 	.word	0x40020028
 8002f94:	40020040 	.word	0x40020040
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	40020070 	.word	0x40020070
 8002fa0:	40020088 	.word	0x40020088
 8002fa4:	400200a0 	.word	0x400200a0
 8002fa8:	400200b8 	.word	0x400200b8
 8002fac:	40020410 	.word	0x40020410
 8002fb0:	40020428 	.word	0x40020428
 8002fb4:	40020440 	.word	0x40020440
 8002fb8:	40020458 	.word	0x40020458
 8002fbc:	40020470 	.word	0x40020470
 8002fc0:	40020488 	.word	0x40020488
 8002fc4:	400204a0 	.word	0x400204a0
 8002fc8:	400204b8 	.word	0x400204b8
 8002fcc:	58025408 	.word	0x58025408
 8002fd0:	5802541c 	.word	0x5802541c
 8002fd4:	58025430 	.word	0x58025430
 8002fd8:	58025444 	.word	0x58025444
 8002fdc:	58025458 	.word	0x58025458
 8002fe0:	5802546c 	.word	0x5802546c
 8002fe4:	58025480 	.word	0x58025480
 8002fe8:	58025494 	.word	0x58025494

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_DMA_IRQHandler+0x1ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a67      	ldr	r2, [pc, #412]	; (800319c <HAL_DMA_IRQHandler+0x1b0>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a4e      	ldr	r2, [pc, #312]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_IRQHandler+0xd6>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 842b 	beq.w	8003920 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2208      	movs	r2, #8
 80030d4:	409a      	lsls	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a2 	beq.w	8003224 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d045      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d040      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d03b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d036      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d031      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d027      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d12f      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x1f4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e02e      	b.n	80031f4 <HAL_DMA_IRQHandler+0x208>
 8003196:	bf00      	nop
 8003198:	24000008 	.word	0x24000008
 800319c:	1b4e81b5 	.word	0x1b4e81b5
 80031a0:	40020010 	.word	0x40020010
 80031a4:	40020028 	.word	0x40020028
 80031a8:	40020040 	.word	0x40020040
 80031ac:	40020058 	.word	0x40020058
 80031b0:	40020070 	.word	0x40020070
 80031b4:	40020088 	.word	0x40020088
 80031b8:	400200a0 	.word	0x400200a0
 80031bc:	400200b8 	.word	0x400200b8
 80031c0:	40020410 	.word	0x40020410
 80031c4:	40020428 	.word	0x40020428
 80031c8:	40020440 	.word	0x40020440
 80031cc:	40020458 	.word	0x40020458
 80031d0:	40020470 	.word	0x40020470
 80031d4:	40020488 	.word	0x40020488
 80031d8:	400204a0 	.word	0x400204a0
 80031dc:	400204b8 	.word	0x400204b8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2208      	movs	r2, #8
 8003212:	409a      	lsls	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a66      	ldr	r2, [pc, #408]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5e      	ldr	r2, [pc, #376]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10a      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x304>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e003      	b.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0202 	orr.w	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 808f 	beq.w	800344c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a20      	ldr	r2, [pc, #128]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12a      	bne.n	8003424 <HAL_DMA_IRQHandler+0x438>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e023      	b.n	800342c <HAL_DMA_IRQHandler+0x440>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a6 	beq.w	80035ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a85      	ldr	r2, [pc, #532]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a83      	ldr	r2, [pc, #524]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a82      	ldr	r2, [pc, #520]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a80      	ldr	r2, [pc, #512]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7f      	ldr	r2, [pc, #508]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7d      	ldr	r2, [pc, #500]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7a      	ldr	r2, [pc, #488]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a79      	ldr	r2, [pc, #484]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a77      	ldr	r2, [pc, #476]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a76      	ldr	r2, [pc, #472]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a74      	ldr	r2, [pc, #464]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a73      	ldr	r2, [pc, #460]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a71      	ldr	r2, [pc, #452]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a70      	ldr	r2, [pc, #448]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10a      	bne.n	8003518 <HAL_DMA_IRQHandler+0x52c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e009      	b.n	800352c <HAL_DMA_IRQHandler+0x540>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d024      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01f      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e016      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2220      	movs	r2, #32
 80035b8:	409a      	lsls	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8110 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d12b      	bne.n	80036bc <HAL_DMA_IRQHandler+0x6d0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e02a      	b.n	80036d0 <HAL_DMA_IRQHandler+0x6e4>
 800367a:	bf00      	nop
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8087 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2220      	movs	r2, #32
 80036e0:	409a      	lsls	r2, r3
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d139      	bne.n	8003766 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0216 	bic.w	r2, r2, #22
 8003700:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_DMA_IRQHandler+0x736>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 834a 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
          }
          return;
 8003764:	e344      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e027      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e01e      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0210 	bic.w	r2, r2, #16
 80037c2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8306 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8088 	beq.w	800390c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <HAL_DMA_IRQHandler+0xa08>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_DMA_IRQHandler+0xa10>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_DMA_IRQHandler+0xa14>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_DMA_IRQHandler+0xa18>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a73      	ldr	r2, [pc, #460]	; (8003a08 <HAL_DMA_IRQHandler+0xa1c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_DMA_IRQHandler+0xa20>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a70      	ldr	r2, [pc, #448]	; (8003a10 <HAL_DMA_IRQHandler+0xa24>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_DMA_IRQHandler+0xa28>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <HAL_DMA_IRQHandler+0xa2c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_DMA_IRQHandler+0xa30>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6a      	ldr	r2, [pc, #424]	; (8003a20 <HAL_DMA_IRQHandler+0xa34>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_DMA_IRQHandler+0xa38>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <HAL_DMA_IRQHandler+0xa3c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_DMA_IRQHandler+0xa40>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_DMA_IRQHandler+0xa44>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x8ca>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d307      	bcc.n	80038e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f2      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038e2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003902:	e003      	b.n	800390c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8272 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e26c      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <HAL_DMA_IRQHandler+0xa48>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_DMA_IRQHandler+0xa4c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a40      	ldr	r2, [pc, #256]	; (8003a3c <HAL_DMA_IRQHandler+0xa50>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <HAL_DMA_IRQHandler+0xa54>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_DMA_IRQHandler+0xa58>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_DMA_IRQHandler+0xa5c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_DMA_IRQHandler+0xa60>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <HAL_DMA_IRQHandler+0xa64>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_DMA_IRQHandler+0x988>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x98a>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 823f 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80cd 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80c7 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2204      	movs	r2, #4
 80039b0:	409a      	lsls	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d049      	beq.n	8003a54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8210 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039dc:	e20a      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8206 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e200      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a8c      	ldr	r2, [pc, #560]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a89      	ldr	r2, [pc, #548]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a87      	ldr	r2, [pc, #540]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a84      	ldr	r2, [pc, #528]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a81      	ldr	r2, [pc, #516]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7e      	ldr	r2, [pc, #504]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7d      	ldr	r2, [pc, #500]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7a      	ldr	r2, [pc, #488]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a77      	ldr	r2, [pc, #476]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xb24>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8165 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b32:	e15f      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80c5 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80bf 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2202      	movs	r2, #2
 8003b60:	409a      	lsls	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 813a 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8c:	e134      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8130 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e12a      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d168      	bne.n	8003c7e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d03b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d031      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d027      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01d      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xc72>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0214 	bic.w	r2, r2, #20
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e007      	b.n	8003c6e <HAL_DMA_IRQHandler+0xc82>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020a 	bic.w	r2, r2, #10
 8003c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b8 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c90:	e0b2      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2208      	movs	r2, #8
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8088 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8082 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a41      	ldr	r2, [pc, #260]	; (8003e00 <HAL_DMA_IRQHandler+0xe14>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <HAL_DMA_IRQHandler+0xe18>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <HAL_DMA_IRQHandler+0xe1c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_DMA_IRQHandler+0xe20>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_DMA_IRQHandler+0xe24>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_DMA_IRQHandler+0xe28>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_DMA_IRQHandler+0xe2c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_DMA_IRQHandler+0xe30>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_IRQHandler+0xe34>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_DMA_IRQHandler+0xe38>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <HAL_DMA_IRQHandler+0xe3c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_DMA_IRQHandler+0xe40>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_DMA_IRQHandler+0xe44>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_DMA_IRQHandler+0xe48>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_DMA_IRQHandler+0xe4c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <HAL_DMA_IRQHandler+0xe50>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0xdbc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 021c 	bic.w	r2, r2, #28
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_IRQHandler+0xdcc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e004      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8

08003e40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a84      	ldr	r2, [pc, #528]	; (8004070 <DMA_SetConfig+0x230>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d072      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a82      	ldr	r2, [pc, #520]	; (8004074 <DMA_SetConfig+0x234>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d06d      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a81      	ldr	r2, [pc, #516]	; (8004078 <DMA_SetConfig+0x238>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d068      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7f      	ldr	r2, [pc, #508]	; (800407c <DMA_SetConfig+0x23c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d063      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7e      	ldr	r2, [pc, #504]	; (8004080 <DMA_SetConfig+0x240>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d05e      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7c      	ldr	r2, [pc, #496]	; (8004084 <DMA_SetConfig+0x244>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d059      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <DMA_SetConfig+0x248>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d054      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a79      	ldr	r2, [pc, #484]	; (800408c <DMA_SetConfig+0x24c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04f      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a78      	ldr	r2, [pc, #480]	; (8004090 <DMA_SetConfig+0x250>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d04a      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a76      	ldr	r2, [pc, #472]	; (8004094 <DMA_SetConfig+0x254>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d045      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a75      	ldr	r2, [pc, #468]	; (8004098 <DMA_SetConfig+0x258>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a73      	ldr	r2, [pc, #460]	; (800409c <DMA_SetConfig+0x25c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d03b      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a72      	ldr	r2, [pc, #456]	; (80040a0 <DMA_SetConfig+0x260>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d036      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a70      	ldr	r2, [pc, #448]	; (80040a4 <DMA_SetConfig+0x264>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6f      	ldr	r2, [pc, #444]	; (80040a8 <DMA_SetConfig+0x268>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d02c      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6d      	ldr	r2, [pc, #436]	; (80040ac <DMA_SetConfig+0x26c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d027      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <DMA_SetConfig+0x270>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d022      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6a      	ldr	r2, [pc, #424]	; (80040b4 <DMA_SetConfig+0x274>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01d      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <DMA_SetConfig+0x278>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d018      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a67      	ldr	r2, [pc, #412]	; (80040bc <DMA_SetConfig+0x27c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a66      	ldr	r2, [pc, #408]	; (80040c0 <DMA_SetConfig+0x280>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a64      	ldr	r2, [pc, #400]	; (80040c4 <DMA_SetConfig+0x284>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d009      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a63      	ldr	r2, [pc, #396]	; (80040c8 <DMA_SetConfig+0x288>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <DMA_SetConfig+0x10a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a61      	ldr	r2, [pc, #388]	; (80040cc <DMA_SetConfig+0x28c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <DMA_SetConfig+0x10e>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <DMA_SetConfig+0x110>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3e      	ldr	r2, [pc, #248]	; (8004070 <DMA_SetConfig+0x230>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04a      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3d      	ldr	r2, [pc, #244]	; (8004074 <DMA_SetConfig+0x234>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d045      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3b      	ldr	r2, [pc, #236]	; (8004078 <DMA_SetConfig+0x238>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d040      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <DMA_SetConfig+0x23c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d03b      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a38      	ldr	r2, [pc, #224]	; (8004080 <DMA_SetConfig+0x240>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d036      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a37      	ldr	r2, [pc, #220]	; (8004084 <DMA_SetConfig+0x244>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d031      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a35      	ldr	r2, [pc, #212]	; (8004088 <DMA_SetConfig+0x248>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02c      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a34      	ldr	r2, [pc, #208]	; (800408c <DMA_SetConfig+0x24c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d027      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a32      	ldr	r2, [pc, #200]	; (8004090 <DMA_SetConfig+0x250>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a31      	ldr	r2, [pc, #196]	; (8004094 <DMA_SetConfig+0x254>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <DMA_SetConfig+0x258>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2e      	ldr	r2, [pc, #184]	; (800409c <DMA_SetConfig+0x25c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <DMA_SetConfig+0x260>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <DMA_SetConfig+0x264>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <DMA_SetConfig+0x268>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <DMA_SetConfig+0x1d0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a28      	ldr	r2, [pc, #160]	; (80040ac <DMA_SetConfig+0x26c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <DMA_SetConfig+0x1d4>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <DMA_SetConfig+0x1d6>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d05a      	beq.n	80040d0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	223f      	movs	r2, #63	; 0x3f
 8004024:	409a      	lsls	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004038:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d108      	bne.n	800405c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800405a:	e087      	b.n	800416c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	e07e      	b.n	800416c <DMA_SetConfig+0x32c>
 800406e:	bf00      	nop
 8004070:	40020010 	.word	0x40020010
 8004074:	40020028 	.word	0x40020028
 8004078:	40020040 	.word	0x40020040
 800407c:	40020058 	.word	0x40020058
 8004080:	40020070 	.word	0x40020070
 8004084:	40020088 	.word	0x40020088
 8004088:	400200a0 	.word	0x400200a0
 800408c:	400200b8 	.word	0x400200b8
 8004090:	40020410 	.word	0x40020410
 8004094:	40020428 	.word	0x40020428
 8004098:	40020440 	.word	0x40020440
 800409c:	40020458 	.word	0x40020458
 80040a0:	40020470 	.word	0x40020470
 80040a4:	40020488 	.word	0x40020488
 80040a8:	400204a0 	.word	0x400204a0
 80040ac:	400204b8 	.word	0x400204b8
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <DMA_SetConfig+0x338>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a27      	ldr	r2, [pc, #156]	; (800417c <DMA_SetConfig+0x33c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01d      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a25      	ldr	r2, [pc, #148]	; (8004180 <DMA_SetConfig+0x340>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a24      	ldr	r2, [pc, #144]	; (8004184 <DMA_SetConfig+0x344>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a22      	ldr	r2, [pc, #136]	; (8004188 <DMA_SetConfig+0x348>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a21      	ldr	r2, [pc, #132]	; (800418c <DMA_SetConfig+0x34c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <DMA_SetConfig+0x350>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <DMA_SetConfig+0x2e0>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <DMA_SetConfig+0x354>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <DMA_SetConfig+0x2e4>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <DMA_SetConfig+0x2e6>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d020      	beq.n	800416c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	409a      	lsls	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d108      	bne.n	800415c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
}
 800415a:	e007      	b.n	800416c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	58025408 	.word	0x58025408
 800417c:	5802541c 	.word	0x5802541c
 8004180:	58025430 	.word	0x58025430
 8004184:	58025444 	.word	0x58025444
 8004188:	58025458 	.word	0x58025458
 800418c:	5802546c 	.word	0x5802546c
 8004190:	58025480 	.word	0x58025480
 8004194:	58025494 	.word	0x58025494

08004198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <DMA_CalcBaseAndBitshift+0x118>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04a      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d045      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <DMA_CalcBaseAndBitshift+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d040      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3e      	ldr	r2, [pc, #248]	; (80042bc <DMA_CalcBaseAndBitshift+0x124>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d03b      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3c      	ldr	r2, [pc, #240]	; (80042c0 <DMA_CalcBaseAndBitshift+0x128>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d036      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d031      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <DMA_CalcBaseAndBitshift+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02c      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a38      	ldr	r2, [pc, #224]	; (80042cc <DMA_CalcBaseAndBitshift+0x134>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d027      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a36      	ldr	r2, [pc, #216]	; (80042d0 <DMA_CalcBaseAndBitshift+0x138>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a33      	ldr	r2, [pc, #204]	; (80042d8 <DMA_CalcBaseAndBitshift+0x140>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a32      	ldr	r2, [pc, #200]	; (80042dc <DMA_CalcBaseAndBitshift+0x144>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <DMA_CalcBaseAndBitshift+0x148>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <DMA_CalcBaseAndBitshift+0x150>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <DMA_CalcBaseAndBitshift+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2c      	ldr	r2, [pc, #176]	; (80042ec <DMA_CalcBaseAndBitshift+0x154>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <DMA_CalcBaseAndBitshift+0xac>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <DMA_CalcBaseAndBitshift+0xae>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d024      	beq.n	8004294 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3b10      	subs	r3, #16
 8004252:	4a27      	ldr	r2, [pc, #156]	; (80042f0 <DMA_CalcBaseAndBitshift+0x158>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004264:	5cd3      	ldrb	r3, [r2, r3]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d908      	bls.n	8004284 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <DMA_CalcBaseAndBitshift+0x160>)
 800427a:	4013      	ands	r3, r2
 800427c:	1d1a      	adds	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	659a      	str	r2, [r3, #88]	; 0x58
 8004282:	e00d      	b.n	80042a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <DMA_CalcBaseAndBitshift+0x160>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6593      	str	r3, [r2, #88]	; 0x58
 8004292:	e005      	b.n	80042a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
 80042f0:	aaaaaaab 	.word	0xaaaaaaab
 80042f4:	0800e678 	.word	0x0800e678
 80042f8:	fffffc00 	.word	0xfffffc00

080042fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d120      	bne.n	8004352 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	2b03      	cmp	r3, #3
 8004316:	d858      	bhi.n	80043ca <DMA_CheckFifoParam+0xce>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <DMA_CheckFifoParam+0x24>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	08004331 	.word	0x08004331
 8004324:	08004343 	.word	0x08004343
 8004328:	08004331 	.word	0x08004331
 800432c:	080043cb 	.word	0x080043cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d048      	beq.n	80043ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004340:	e045      	b.n	80043ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800434a:	d142      	bne.n	80043d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004350:	e03f      	b.n	80043d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	d123      	bne.n	80043a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	2b03      	cmp	r3, #3
 8004362:	d838      	bhi.n	80043d6 <DMA_CheckFifoParam+0xda>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <DMA_CheckFifoParam+0x70>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	0800437d 	.word	0x0800437d
 8004370:	08004383 	.word	0x08004383
 8004374:	0800437d 	.word	0x0800437d
 8004378:	08004395 	.word	0x08004395
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
        break;
 8004380:	e030      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d025      	beq.n	80043da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004392:	e022      	b.n	80043da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800439c:	d11f      	bne.n	80043de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a2:	e01c      	b.n	80043de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <DMA_CheckFifoParam+0xb6>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d003      	beq.n	80043b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043b0:	e018      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
        break;
 80043b6:	e015      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
    break;
 80043c8:	e00b      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
        break;
 80043ca:	bf00      	nop
 80043cc:	e00a      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        break;
 80043ce:	bf00      	nop
 80043d0:	e008      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e006      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        break;
 80043d6:	bf00      	nop
 80043d8:	e004      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
        break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
    break;
 80043e2:	bf00      	nop
    }
  }

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a36      	ldr	r2, [pc, #216]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a33      	ldr	r2, [pc, #204]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a32      	ldr	r2, [pc, #200]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a30      	ldr	r2, [pc, #192]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004456:	2300      	movs	r3, #0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01a      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	3b08      	subs	r3, #8
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a24      	ldr	r2, [pc, #144]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004480:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2201      	movs	r2, #1
 800448a:	409a      	lsls	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004490:	e024      	b.n	80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3b10      	subs	r3, #16
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d806      	bhi.n	80044ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d902      	bls.n	80044ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3308      	adds	r3, #8
 80044b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	58025408 	.word	0x58025408
 80044ec:	5802541c 	.word	0x5802541c
 80044f0:	58025430 	.word	0x58025430
 80044f4:	58025444 	.word	0x58025444
 80044f8:	58025458 	.word	0x58025458
 80044fc:	5802546c 	.word	0x5802546c
 8004500:	58025480 	.word	0x58025480
 8004504:	58025494 	.word	0x58025494
 8004508:	cccccccd 	.word	0xcccccccd
 800450c:	16009600 	.word	0x16009600
 8004510:	58025880 	.word	0x58025880
 8004514:	aaaaaaab 	.word	0xaaaaaaab
 8004518:	400204b8 	.word	0x400204b8
 800451c:	4002040f 	.word	0x4002040f
 8004520:	10008200 	.word	0x10008200
 8004524:	40020880 	.word	0x40020880

08004528 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d04a      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d847      	bhi.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a22      	ldr	r2, [pc, #136]	; (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045b0:	671a      	str	r2, [r3, #112]	; 0x70
 80045b2:	e009      	b.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a11      	ldr	r2, [pc, #68]	; (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	58025408 	.word	0x58025408
 80045e4:	5802541c 	.word	0x5802541c
 80045e8:	58025430 	.word	0x58025430
 80045ec:	58025444 	.word	0x58025444
 80045f0:	58025458 	.word	0x58025458
 80045f4:	5802546c 	.word	0x5802546c
 80045f8:	58025480 	.word	0x58025480
 80045fc:	58025494 	.word	0x58025494
 8004600:	1600963f 	.word	0x1600963f
 8004604:	58025940 	.word	0x58025940
 8004608:	1000823f 	.word	0x1000823f
 800460c:	40020940 	.word	0x40020940

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800461e:	4b89      	ldr	r3, [pc, #548]	; (8004844 <HAL_GPIO_Init+0x234>)
 8004620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004622:	e194      	b.n	800494e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8186 	beq.w	8004948 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d00b      	beq.n	800465c <HAL_GPIO_Init+0x4c>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004650:	2b11      	cmp	r3, #17
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b12      	cmp	r3, #18
 800465a:	d130      	bne.n	80046be <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	2203      	movs	r2, #3
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004692:	2201      	movs	r2, #1
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0201 	and.w	r2, r3, #1
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0xee>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d123      	bne.n	8004746 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	08da      	lsrs	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3208      	adds	r2, #8
 8004706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2203      	movs	r2, #3
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0203 	and.w	r2, r3, #3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80e0 	beq.w	8004948 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004788:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <HAL_GPIO_Init+0x238>)
 800478a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800478e:	4a2e      	ldr	r2, [pc, #184]	; (8004848 <HAL_GPIO_Init+0x238>)
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_GPIO_Init+0x238>)
 800479a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_GPIO_Init+0x23c>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <HAL_GPIO_Init+0x240>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d052      	beq.n	8004878 <HAL_GPIO_Init+0x268>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_GPIO_Init+0x244>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d031      	beq.n	800483e <HAL_GPIO_Init+0x22e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_GPIO_Init+0x248>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02b      	beq.n	800483a <HAL_GPIO_Init+0x22a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	; (800485c <HAL_GPIO_Init+0x24c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d025      	beq.n	8004836 <HAL_GPIO_Init+0x226>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <HAL_GPIO_Init+0x250>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01f      	beq.n	8004832 <HAL_GPIO_Init+0x222>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_GPIO_Init+0x254>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d019      	beq.n	800482e <HAL_GPIO_Init+0x21e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_GPIO_Init+0x258>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_GPIO_Init+0x21a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <HAL_GPIO_Init+0x25c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00d      	beq.n	8004826 <HAL_GPIO_Init+0x216>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_GPIO_Init+0x260>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <HAL_GPIO_Init+0x212>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a17      	ldr	r2, [pc, #92]	; (8004874 <HAL_GPIO_Init+0x264>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_GPIO_Init+0x20e>
 800481a:	2309      	movs	r3, #9
 800481c:	e02d      	b.n	800487a <HAL_GPIO_Init+0x26a>
 800481e:	230a      	movs	r3, #10
 8004820:	e02b      	b.n	800487a <HAL_GPIO_Init+0x26a>
 8004822:	2308      	movs	r3, #8
 8004824:	e029      	b.n	800487a <HAL_GPIO_Init+0x26a>
 8004826:	2307      	movs	r3, #7
 8004828:	e027      	b.n	800487a <HAL_GPIO_Init+0x26a>
 800482a:	2306      	movs	r3, #6
 800482c:	e025      	b.n	800487a <HAL_GPIO_Init+0x26a>
 800482e:	2305      	movs	r3, #5
 8004830:	e023      	b.n	800487a <HAL_GPIO_Init+0x26a>
 8004832:	2304      	movs	r3, #4
 8004834:	e021      	b.n	800487a <HAL_GPIO_Init+0x26a>
 8004836:	2303      	movs	r3, #3
 8004838:	e01f      	b.n	800487a <HAL_GPIO_Init+0x26a>
 800483a:	2302      	movs	r3, #2
 800483c:	e01d      	b.n	800487a <HAL_GPIO_Init+0x26a>
 800483e:	2301      	movs	r3, #1
 8004840:	e01b      	b.n	800487a <HAL_GPIO_Init+0x26a>
 8004842:	bf00      	nop
 8004844:	58000080 	.word	0x58000080
 8004848:	58024400 	.word	0x58024400
 800484c:	58000400 	.word	0x58000400
 8004850:	58020000 	.word	0x58020000
 8004854:	58020400 	.word	0x58020400
 8004858:	58020800 	.word	0x58020800
 800485c:	58020c00 	.word	0x58020c00
 8004860:	58021000 	.word	0x58021000
 8004864:	58021400 	.word	0x58021400
 8004868:	58021800 	.word	0x58021800
 800486c:	58021c00 	.word	0x58021c00
 8004870:	58022000 	.word	0x58022000
 8004874:	58022400 	.word	0x58022400
 8004878:	2300      	movs	r3, #0
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	f002 0203 	and.w	r2, r2, #3
 8004880:	0092      	lsls	r2, r2, #2
 8004882:	4093      	lsls	r3, r2
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800488a:	4938      	ldr	r1, [pc, #224]	; (800496c <HAL_GPIO_Init+0x35c>)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3302      	adds	r3, #2
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800491a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	f47f ae63 	bne.w	8004624 <HAL_GPIO_Init+0x14>
  }
}
 800495e:	bf00      	nop
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58000400 	.word	0x58000400

08004970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
 800497c:	4613      	mov	r3, r2
 800497e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004980:	787b      	ldrb	r3, [r7, #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004986:	887a      	ldrh	r2, [r7, #2]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800498c:	e003      	b.n	8004996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	041a      	lsls	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	619a      	str	r2, [r3, #24]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	887b      	ldrh	r3, [r7, #2]
 80049b4:	401a      	ands	r2, r3
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d104      	bne.n	80049c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	041a      	lsls	r2, r3, #16
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80049c4:	e002      	b.n	80049cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f006 fe08 	bl	800b614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	e006      	b.n	8004a60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d104      	bne.n	8004a72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_I2C_Init+0x11c>)
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	ea42 0103 	orr.w	r1, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	02008000 	.word	0x02008000

08004af8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	461a      	mov	r2, r3
 8004b04:	460b      	mov	r3, r1
 8004b06:	817b      	strh	r3, [r7, #10]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	f040 80da 	bne.w	8004cce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_I2C_Master_Transmit+0x30>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0d3      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b30:	f7fb fe34 	bl	800079c <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2319      	movs	r3, #25
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f9e6 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0be      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2221      	movs	r2, #33	; 0x21
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	893a      	ldrh	r2, [r7, #8]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2bff      	cmp	r3, #255	; 0xff
 8004b82:	d90e      	bls.n	8004ba2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	8979      	ldrh	r1, [r7, #10]
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fb48 	bl	8005230 <I2C_TransferConfig>
 8004ba0:	e06c      	b.n	8004c7c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	8979      	ldrh	r1, [r7, #10]
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fb37 	bl	8005230 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004bc2:	e05b      	b.n	8004c7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	6a39      	ldr	r1, [r7, #32]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f9e3 	bl	8004f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e07b      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d034      	beq.n	8004c7c <HAL_I2C_Master_Transmit+0x184>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d130      	bne.n	8004c7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f975 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04d      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2bff      	cmp	r3, #255	; 0xff
 8004c3c:	d90e      	bls.n	8004c5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	8979      	ldrh	r1, [r7, #10]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 faeb 	bl	8005230 <I2C_TransferConfig>
 8004c5a:	e00f      	b.n	8004c7c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	8979      	ldrh	r1, [r7, #10]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fada 	bl	8005230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d19e      	bne.n	8004bc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f9c2 	bl	8005014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01a      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_I2C_Master_Transmit+0x1e4>)
 8004cae:	400b      	ands	r3, r1
 8004cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e000      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
  }
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	80002000 	.word	0x80002000
 8004cdc:	fe00e800 	.word	0xfe00e800

08004ce0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 80db 	bne.w	8004eb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2C_Master_Receive+0x30>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0d4      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d18:	f7fb fd40 	bl	800079c <HAL_GetTick>
 8004d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2319      	movs	r3, #25
 8004d24:	2201      	movs	r2, #1
 8004d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f8f2 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0bf      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2222      	movs	r2, #34	; 0x22
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2210      	movs	r2, #16
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2bff      	cmp	r3, #255	; 0xff
 8004d6a:	d90e      	bls.n	8004d8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	8979      	ldrh	r1, [r7, #10]
 8004d7a:	4b52      	ldr	r3, [pc, #328]	; (8004ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fa54 	bl	8005230 <I2C_TransferConfig>
 8004d88:	e06d      	b.n	8004e66 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	4b49      	ldr	r3, [pc, #292]	; (8004ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fa43 	bl	8005230 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004daa:	e05c      	b.n	8004e66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	6a39      	ldr	r1, [r7, #32]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f96b 	bl	800508c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e07c      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d034      	beq.n	8004e66 <HAL_I2C_Master_Receive+0x186>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d130      	bne.n	8004e66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f880 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e04d      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2bff      	cmp	r3, #255	; 0xff
 8004e26:	d90e      	bls.n	8004e46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f9f6 	bl	8005230 <I2C_TransferConfig>
 8004e44:	e00f      	b.n	8004e66 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	8979      	ldrh	r1, [r7, #10]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f9e5 	bl	8005230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d19d      	bne.n	8004dac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6a39      	ldr	r1, [r7, #32]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f8cd 	bl	8005014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e01a      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_I2C_Master_Receive+0x1e8>)
 8004e98:	400b      	ands	r3, r1
 8004e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	80002400 	.word	0x80002400
 8004ec8:	fe00e800 	.word	0xfe00e800

08004ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d103      	bne.n	8004eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d007      	beq.n	8004f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	619a      	str	r2, [r3, #24]
  }
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f24:	e022      	b.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d01e      	beq.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fb fc35 	bl	800079c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e00f      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d0cd      	beq.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fa0:	e02c      	b.n	8004ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f8dc 	bl	8005164 <I2C_IsAcknowledgeFailed>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e02a      	b.n	800500c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d01e      	beq.n	8004ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fb fbed 	bl	800079c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d113      	bne.n	8004ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e007      	b.n	800500c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d1cb      	bne.n	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005020:	e028      	b.n	8005074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f89c 	bl	8005164 <I2C_IsAcknowledgeFailed>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e026      	b.n	8005084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fb fbb1 	bl	800079c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d113      	bne.n	8005074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e007      	b.n	8005084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d1cf      	bne.n	8005022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005098:	e055      	b.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f860 	bl	8005164 <I2C_IsAcknowledgeFailed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e053      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d129      	bne.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d105      	bne.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e03f      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2220      	movs	r2, #32
 80050dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80050ea:	400b      	ands	r3, r1
 80050ec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e022      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fb fb44 	bl	800079c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d1a2      	bne.n	800509a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	fe00e800 	.word	0xfe00e800

08005164 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d151      	bne.n	8005222 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800517e:	e022      	b.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d01e      	beq.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fb fb08 	bl	800079c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <I2C_IsAcknowledgeFailed+0x3a>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d113      	bne.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e02e      	b.n	8005224 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d1d5      	bne.n	8005180 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2210      	movs	r2, #16
 80051da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2220      	movs	r2, #32
 80051e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fe71 	bl	8004ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <I2C_IsAcknowledgeFailed+0xc8>)
 80051f6:	400b      	ands	r3, r1
 80051f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0204 	orr.w	r2, r3, #4
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fe00e800 	.word	0xfe00e800

08005230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	4613      	mov	r3, r2
 8005240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	0d5b      	lsrs	r3, r3, #21
 800524c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <I2C_TransferConfig+0x58>)
 8005252:	430b      	orrs	r3, r1
 8005254:	43db      	mvns	r3, r3
 8005256:	ea02 0103 	and.w	r1, r2, r3
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005260:	7a7b      	ldrb	r3, [r7, #9]
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	431a      	orrs	r2, r3
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	03ff63ff 	.word	0x03ff63ff

0800528c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d138      	bne.n	8005314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e032      	b.n	8005316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b20      	cmp	r3, #32
 8005336:	d139      	bne.n	80053ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005342:	2302      	movs	r3, #2
 8005344:	e033      	b.n	80053ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2224      	movs	r2, #36	; 0x24
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_PWREx_ConfigSupply+0x70>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d00a      	beq.n	80053e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <HAL_PWREx_ConfigSupply+0x70>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d001      	beq.n	80053e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e01f      	b.n	8005422 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e01d      	b.n	8005422 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <HAL_PWREx_ConfigSupply+0x70>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 0207 	bic.w	r2, r3, #7
 80053ee:	490f      	ldr	r1, [pc, #60]	; (800542c <HAL_PWREx_ConfigSupply+0x70>)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053f6:	f7fb f9d1 	bl	800079c <HAL_GetTick>
 80053fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053fc:	e009      	b.n	8005412 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053fe:	f7fb f9cd 	bl	800079c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800540c:	d901      	bls.n	8005412 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_PWREx_ConfigSupply+0x70>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	d1ee      	bne.n	80053fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024800 	.word	0x58024800

08005430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e3c4      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8087 	beq.w	800555e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005450:	4ba2      	ldr	r3, [pc, #648]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800545a:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	2b10      	cmp	r3, #16
 8005464:	d007      	beq.n	8005476 <HAL_RCC_OscConfig+0x46>
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	2b18      	cmp	r3, #24
 800546a:	d110      	bne.n	800548e <HAL_RCC_OscConfig+0x5e>
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d10b      	bne.n	800548e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005476:	4b99      	ldr	r3, [pc, #612]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d06c      	beq.n	800555c <HAL_RCC_OscConfig+0x12c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d168      	bne.n	800555c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e39e      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_OscConfig+0x76>
 8005498:	4b90      	ldr	r3, [pc, #576]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a8f      	ldr	r2, [pc, #572]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e02e      	b.n	8005504 <HAL_RCC_OscConfig+0xd4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x98>
 80054ae:	4b8b      	ldr	r3, [pc, #556]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a8a      	ldr	r2, [pc, #552]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a87      	ldr	r2, [pc, #540]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e01d      	b.n	8005504 <HAL_RCC_OscConfig+0xd4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCC_OscConfig+0xbc>
 80054d2:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a81      	ldr	r2, [pc, #516]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b7f      	ldr	r3, [pc, #508]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7e      	ldr	r2, [pc, #504]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e00b      	b.n	8005504 <HAL_RCC_OscConfig+0xd4>
 80054ec:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7a      	ldr	r2, [pc, #488]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b78      	ldr	r3, [pc, #480]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a77      	ldr	r2, [pc, #476]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d013      	beq.n	8005534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fb f946 	bl	800079c <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005514:	f7fb f942 	bl	800079c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e352      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005526:	4b6d      	ldr	r3, [pc, #436]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0xe4>
 8005532:	e014      	b.n	800555e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fb f932 	bl	800079c <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800553c:	f7fb f92e 	bl	800079c <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	; 0x64
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e33e      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800554e:	4b63      	ldr	r3, [pc, #396]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x10c>
 800555a:	e000      	b.n	800555e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8092 	beq.w	8005690 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800556c:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005574:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005576:	4b59      	ldr	r3, [pc, #356]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_RCC_OscConfig+0x162>
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	2b18      	cmp	r3, #24
 8005586:	d12d      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1b4>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d128      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005592:	4b52      	ldr	r3, [pc, #328]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCC_OscConfig+0x17a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e310      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	f7fb f925 	bl	80007f8 <HAL_GetREVID>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d80a      	bhi.n	80055ce <HAL_RCC_OscConfig+0x19e>
 80055b8:	4b48      	ldr	r3, [pc, #288]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	4945      	ldr	r1, [pc, #276]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055cc:	e060      	b.n	8005690 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	493f      	ldr	r1, [pc, #252]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e2:	e055      	b.n	8005690 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d038      	beq.n	800565e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 0219 	bic.w	r2, r3, #25
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4938      	ldr	r1, [pc, #224]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fb f8cd 	bl	800079c <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005606:	f7fb f8c9 	bl	800079c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e2d9      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005618:	4b30      	ldr	r3, [pc, #192]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005624:	f7fb f8e8 	bl	80007f8 <HAL_GetREVID>
 8005628:	4602      	mov	r2, r0
 800562a:	f241 0303 	movw	r3, #4099	; 0x1003
 800562e:	429a      	cmp	r2, r3
 8005630:	d80a      	bhi.n	8005648 <HAL_RCC_OscConfig+0x218>
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	031b      	lsls	r3, r3, #12
 8005640:	4926      	ldr	r1, [pc, #152]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
 8005646:	e023      	b.n	8005690 <HAL_RCC_OscConfig+0x260>
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	4921      	ldr	r1, [pc, #132]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565e:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fb f897 	bl	800079c <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005672:	f7fb f893 	bl	800079c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e2a3      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8091 	beq.w	80057c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d007      	beq.n	80056c4 <HAL_RCC_OscConfig+0x294>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b18      	cmp	r3, #24
 80056b8:	d12f      	bne.n	800571a <HAL_RCC_OscConfig+0x2ea>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d12a      	bne.n	800571a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_RCC_OscConfig+0x2b0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d003      	beq.n	80056e0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e277      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
 80056dc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e0:	f7fb f88a 	bl	80007f8 <HAL_GetREVID>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d80a      	bhi.n	8005704 <HAL_RCC_OscConfig+0x2d4>
 80056ee:	4ba2      	ldr	r3, [pc, #648]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	069b      	lsls	r3, r3, #26
 80056fc:	499e      	ldr	r1, [pc, #632]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005702:	e05d      	b.n	80057c0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005704:	4b9c      	ldr	r3, [pc, #624]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	4999      	ldr	r1, [pc, #612]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005714:	4313      	orrs	r3, r2
 8005716:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005718:	e052      	b.n	80057c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d035      	beq.n	800578e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005722:	4b95      	ldr	r3, [pc, #596]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a94      	ldr	r2, [pc, #592]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fb f835 	bl	800079c <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005736:	f7fb f831 	bl	800079c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e241      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005748:	4b8b      	ldr	r3, [pc, #556]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005754:	f7fb f850 	bl	80007f8 <HAL_GetREVID>
 8005758:	4602      	mov	r2, r0
 800575a:	f241 0303 	movw	r3, #4099	; 0x1003
 800575e:	429a      	cmp	r2, r3
 8005760:	d80a      	bhi.n	8005778 <HAL_RCC_OscConfig+0x348>
 8005762:	4b85      	ldr	r3, [pc, #532]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	069b      	lsls	r3, r3, #26
 8005770:	4981      	ldr	r1, [pc, #516]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
 8005776:	e023      	b.n	80057c0 <HAL_RCC_OscConfig+0x390>
 8005778:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	497c      	ldr	r1, [pc, #496]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005788:	4313      	orrs	r3, r2
 800578a:	60cb      	str	r3, [r1, #12]
 800578c:	e018      	b.n	80057c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800578e:	4b7a      	ldr	r3, [pc, #488]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a79      	ldr	r2, [pc, #484]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fa ffff 	bl	800079c <HAL_GetTick>
 800579e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057a2:	f7fa fffb 	bl	800079c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e20b      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057b4:	4b70      	ldr	r3, [pc, #448]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d036      	beq.n	800583a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d019      	beq.n	8005808 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d4:	4b68      	ldr	r3, [pc, #416]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80057d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d8:	4a67      	ldr	r2, [pc, #412]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fa ffdc 	bl	800079c <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fa ffd8 	bl	800079c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1e8      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057fa:	4b5f      	ldr	r3, [pc, #380]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80057fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x3b8>
 8005806:	e018      	b.n	800583a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005808:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800580a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580c:	4a5a      	ldr	r2, [pc, #360]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fa ffc2 	bl	800079c <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581c:	f7fa ffbe 	bl	800079c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1ce      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800582e:	4b52      	ldr	r3, [pc, #328]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d036      	beq.n	80058b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d019      	beq.n	8005882 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800584e:	4b4a      	ldr	r3, [pc, #296]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a49      	ldr	r2, [pc, #292]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005858:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585a:	f7fa ff9f 	bl	800079c <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005862:	f7fa ff9b 	bl	800079c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e1ab      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005874:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x432>
 8005880:	e018      	b.n	80058b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005882:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800588e:	f7fa ff85 	bl	800079c <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005896:	f7fa ff81 	bl	800079c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e191      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058a8:	4b33      	ldr	r3, [pc, #204]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f0      	bne.n	8005896 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8086 	beq.w	80059ce <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058c2:	4b2e      	ldr	r3, [pc, #184]	; (800597c <HAL_RCC_OscConfig+0x54c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2d      	ldr	r2, [pc, #180]	; (800597c <HAL_RCC_OscConfig+0x54c>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ce:	f7fa ff65 	bl	800079c <HAL_GetTick>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fa ff61 	bl	800079c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b64      	cmp	r3, #100	; 0x64
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e171      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e8:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCC_OscConfig+0x54c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x4da>
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	e02d      	b.n	8005966 <HAL_RCC_OscConfig+0x536>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x4fc>
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	e01c      	b.n	8005966 <HAL_RCC_OscConfig+0x536>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b05      	cmp	r3, #5
 8005932:	d10c      	bne.n	800594e <HAL_RCC_OscConfig+0x51e>
 8005934:	4b10      	ldr	r3, [pc, #64]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a0f      	ldr	r2, [pc, #60]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800593a:	f043 0304 	orr.w	r3, r3, #4
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
 8005940:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	e00b      	b.n	8005966 <HAL_RCC_OscConfig+0x536>
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a06      	ldr	r2, [pc, #24]	; (8005978 <HAL_RCC_OscConfig+0x548>)
 8005960:	f023 0304 	bic.w	r3, r3, #4
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fa ff15 	bl	800079c <HAL_GetTick>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005974:	e00f      	b.n	8005996 <HAL_RCC_OscConfig+0x566>
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fa ff0c 	bl	800079c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e11a      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005996:	4b8f      	ldr	r3, [pc, #572]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ee      	beq.n	8005980 <HAL_RCC_OscConfig+0x550>
 80059a2:	e014      	b.n	80059ce <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fa fefa 	bl	800079c <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059aa:	e00a      	b.n	80059c2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fa fef6 	bl	800079c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e104      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c2:	4b84      	ldr	r3, [pc, #528]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1ee      	bne.n	80059ac <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80f9 	beq.w	8005bca <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059d8:	4b7e      	ldr	r3, [pc, #504]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e0:	2b18      	cmp	r3, #24
 80059e2:	f000 80b4 	beq.w	8005b4e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	f040 8095 	bne.w	8005b1a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f0:	4b78      	ldr	r3, [pc, #480]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a77      	ldr	r2, [pc, #476]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fa fece 	bl	800079c <HAL_GetTick>
 8005a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fa feca 	bl	800079c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0da      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a16:	4b6f      	ldr	r3, [pc, #444]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a22:	4b6c      	ldr	r3, [pc, #432]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a26:	4b6c      	ldr	r3, [pc, #432]	; (8005bd8 <HAL_RCC_OscConfig+0x7a8>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	430a      	orrs	r2, r1
 8005a36:	4967      	ldr	r1, [pc, #412]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	3b01      	subs	r3, #1
 8005a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	025b      	lsls	r3, r3, #9
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	3b01      	subs	r3, #1
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	3b01      	subs	r3, #1
 8005a66:	061b      	lsls	r3, r3, #24
 8005a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a6c:	4959      	ldr	r1, [pc, #356]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a72:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4a57      	ldr	r2, [pc, #348]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a7e:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a82:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <HAL_RCC_OscConfig+0x7ac>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8a:	00d2      	lsls	r2, r2, #3
 8005a8c:	4951      	ldr	r1, [pc, #324]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a92:	4b50      	ldr	r3, [pc, #320]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	f023 020c 	bic.w	r2, r3, #12
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	494d      	ldr	r1, [pc, #308]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f023 0202 	bic.w	r2, r3, #2
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	4948      	ldr	r1, [pc, #288]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ab6:	4b47      	ldr	r3, [pc, #284]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	4a46      	ldr	r2, [pc, #280]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac2:	4b44      	ldr	r3, [pc, #272]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	4a43      	ldr	r2, [pc, #268]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ace:	4b41      	ldr	r3, [pc, #260]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	4a40      	ldr	r2, [pc, #256]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ada:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a3d      	ldr	r2, [pc, #244]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fa fe53 	bl	800079c <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afa:	f7fa fe4f 	bl	800079c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e05f      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCC_OscConfig+0x6ca>
 8005b18:	e057      	b.n	8005bca <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1a:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b26:	f7fa fe39 	bl	800079c <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fa fe35 	bl	800079c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e045      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b40:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f0      	bne.n	8005b2e <HAL_RCC_OscConfig+0x6fe>
 8005b4c:	e03d      	b.n	8005bca <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <HAL_RCC_OscConfig+0x7a4>)
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d031      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f003 0203 	and.w	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d12a      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d122      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d11a      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	0a5b      	lsrs	r3, r3, #9
 8005b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d111      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d108      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0e1b      	lsrs	r3, r3, #24
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d001      	beq.n	8005bca <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3730      	adds	r7, #48	; 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	fffffc0c 	.word	0xfffffc0c
 8005bdc:	ffff0007 	.word	0xffff0007

08005be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e19c      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf4:	4b8a      	ldr	r3, [pc, #552]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d910      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c02:	4b87      	ldr	r3, [pc, #540]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 020f 	bic.w	r2, r3, #15
 8005c0a:	4985      	ldr	r1, [pc, #532]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e184      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	4b7b      	ldr	r3, [pc, #492]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d908      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c40:	4b78      	ldr	r3, [pc, #480]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	4975      	ldr	r1, [pc, #468]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	4b70      	ldr	r3, [pc, #448]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d908      	bls.n	8005c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c6e:	4b6d      	ldr	r3, [pc, #436]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	496a      	ldr	r1, [pc, #424]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699a      	ldr	r2, [r3, #24]
 8005c90:	4b64      	ldr	r3, [pc, #400]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d908      	bls.n	8005cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c9c:	4b61      	ldr	r3, [pc, #388]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	495e      	ldr	r1, [pc, #376]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69da      	ldr	r2, [r3, #28]
 8005cbe:	4b59      	ldr	r3, [pc, #356]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d908      	bls.n	8005cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cca:	4b56      	ldr	r3, [pc, #344]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	4953      	ldr	r1, [pc, #332]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4b4d      	ldr	r3, [pc, #308]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d908      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f023 020f 	bic.w	r2, r3, #15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4947      	ldr	r1, [pc, #284]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d055      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d16:	4b43      	ldr	r3, [pc, #268]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4940      	ldr	r1, [pc, #256]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d30:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d121      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0f6      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d107      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d48:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d115      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0ea      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d60:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0de      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d70:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0d6      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f023 0207 	bic.w	r2, r3, #7
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4925      	ldr	r1, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fa fd03 	bl	800079c <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d9a:	f7fa fcff 	bl	800079c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0be      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d1eb      	bne.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d208      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f023 020f 	bic.w	r2, r3, #15
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	490e      	ldr	r1, [pc, #56]	; (8005e24 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d214      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f023 020f 	bic.w	r2, r3, #15
 8005e06:	4906      	ldr	r1, [pc, #24]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <HAL_RCC_ClockConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e086      	b.n	8005f2e <HAL_RCC_ClockConfig+0x34e>
 8005e20:	52002000 	.word	0x52002000
 8005e24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d208      	bcs.n	8005e56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e44:	4b3c      	ldr	r3, [pc, #240]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	4939      	ldr	r1, [pc, #228]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	4b34      	ldr	r3, [pc, #208]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d208      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e72:	4b31      	ldr	r3, [pc, #196]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	492e      	ldr	r1, [pc, #184]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d010      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d208      	bcs.n	8005eb2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	4922      	ldr	r1, [pc, #136]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d208      	bcs.n	8005ee0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ece:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4917      	ldr	r1, [pc, #92]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ee0:	f000 f834 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <HAL_RCC_ClockConfig+0x35c>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8005efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005efe:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <HAL_RCC_ClockConfig+0x358>)
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	4a0d      	ldr	r2, [pc, #52]	; (8005f3c <HAL_RCC_ClockConfig+0x35c>)
 8005f08:	5cd3      	ldrb	r3, [r2, r3]
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_RCC_ClockConfig+0x360>)
 8005f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <HAL_RCC_ClockConfig+0x364>)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x368>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fa fbf0 	bl	8000708 <HAL_InitTick>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	0800e680 	.word	0x0800e680
 8005f40:	2400000c 	.word	0x2400000c
 8005f44:	24000008 	.word	0x24000008
 8005f48:	24000000 	.word	0x24000000

08005f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f52:	4baf      	ldr	r3, [pc, #700]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5a:	2b18      	cmp	r3, #24
 8005f5c:	f200 814e 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	080061fd 	.word	0x080061fd
 8005f70:	080061fd 	.word	0x080061fd
 8005f74:	080061fd 	.word	0x080061fd
 8005f78:	080061fd 	.word	0x080061fd
 8005f7c:	080061fd 	.word	0x080061fd
 8005f80:	080061fd 	.word	0x080061fd
 8005f84:	080061fd 	.word	0x080061fd
 8005f88:	08005ff3 	.word	0x08005ff3
 8005f8c:	080061fd 	.word	0x080061fd
 8005f90:	080061fd 	.word	0x080061fd
 8005f94:	080061fd 	.word	0x080061fd
 8005f98:	080061fd 	.word	0x080061fd
 8005f9c:	080061fd 	.word	0x080061fd
 8005fa0:	080061fd 	.word	0x080061fd
 8005fa4:	080061fd 	.word	0x080061fd
 8005fa8:	08005ff9 	.word	0x08005ff9
 8005fac:	080061fd 	.word	0x080061fd
 8005fb0:	080061fd 	.word	0x080061fd
 8005fb4:	080061fd 	.word	0x080061fd
 8005fb8:	080061fd 	.word	0x080061fd
 8005fbc:	080061fd 	.word	0x080061fd
 8005fc0:	080061fd 	.word	0x080061fd
 8005fc4:	080061fd 	.word	0x080061fd
 8005fc8:	08005fff 	.word	0x08005fff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fcc:	4b90      	ldr	r3, [pc, #576]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd8:	4b8d      	ldr	r3, [pc, #564]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	4a8c      	ldr	r2, [pc, #560]	; (8006214 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fea:	e10a      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fec:	4b89      	ldr	r3, [pc, #548]	; (8006214 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fee:	61bb      	str	r3, [r7, #24]
    break;
 8005ff0:	e107      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005ff4:	61bb      	str	r3, [r7, #24]
    break;
 8005ff6:	e104      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ff8:	4b88      	ldr	r3, [pc, #544]	; (800621c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005ffa:	61bb      	str	r3, [r7, #24]
    break;
 8005ffc:	e101      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ffe:	4b84      	ldr	r3, [pc, #528]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006008:	4b81      	ldr	r3, [pc, #516]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006012:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006014:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800601e:	4b7c      	ldr	r3, [pc, #496]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	08db      	lsrs	r3, r3, #3
 8006024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80da 	beq.w	80061f6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d05a      	beq.n	80060fe <HAL_RCC_GetSysClockFreq+0x1b2>
 8006048:	2b01      	cmp	r3, #1
 800604a:	d302      	bcc.n	8006052 <HAL_RCC_GetSysClockFreq+0x106>
 800604c:	2b02      	cmp	r3, #2
 800604e:	d078      	beq.n	8006142 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006050:	e099      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006052:	4b6f      	ldr	r3, [pc, #444]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d02d      	beq.n	80060ba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800605e:	4b6c      	ldr	r3, [pc, #432]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	4a6a      	ldr	r2, [pc, #424]	; (8006214 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006088:	4b61      	ldr	r3, [pc, #388]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006098:	ed97 6a02 	vldr	s12, [r7, #8]
 800609c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060b8:	e087      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006224 <HAL_RCC_GetSysClockFreq+0x2d8>
 80060c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060cc:	4b50      	ldr	r3, [pc, #320]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060fc:	e065      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006228 <HAL_RCC_GetSysClockFreq+0x2dc>
 800610c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006110:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006120:	ed97 6a02 	vldr	s12, [r7, #8]
 8006124:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006140:	e043      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800622c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006164:	ed97 6a02 	vldr	s12, [r7, #8]
 8006168:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2d4>
 800616c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006184:	e021      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006190:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006228 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2d4>
 80061b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	0a5b      	lsrs	r3, r3, #9
 80061d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d4:	3301      	adds	r3, #1
 80061d6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ee:	ee17 3a90 	vmov	r3, s15
 80061f2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061f4:	e005      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
    break;
 80061fa:	e002      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061fe:	61bb      	str	r3, [r7, #24]
    break;
 8006200:	bf00      	nop
  }

  return sysclockfreq;
 8006202:	69bb      	ldr	r3, [r7, #24]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3724      	adds	r7, #36	; 0x24
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	58024400 	.word	0x58024400
 8006214:	03d09000 	.word	0x03d09000
 8006218:	003d0900 	.word	0x003d0900
 800621c:	017d7840 	.word	0x017d7840
 8006220:	46000000 	.word	0x46000000
 8006224:	4c742400 	.word	0x4c742400
 8006228:	4a742400 	.word	0x4a742400
 800622c:	4bbebc20 	.word	0x4bbebc20

08006230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006236:	f7ff fe89 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 800623a:	4601      	mov	r1, r0
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCC_GetHCLKFreq+0x50>)
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	4a0f      	ldr	r2, [pc, #60]	; (8006284 <HAL_RCC_GetHCLKFreq+0x54>)
 8006248:	5cd3      	ldrb	r3, [r2, r3]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	fa21 f303 	lsr.w	r3, r1, r3
 8006252:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_RCC_GetHCLKFreq+0x50>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <HAL_RCC_GetHCLKFreq+0x54>)
 800625e:	5cd3      	ldrb	r3, [r2, r3]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <HAL_RCC_GetHCLKFreq+0x58>)
 800626c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800626e:	4a07      	ldr	r2, [pc, #28]	; (800628c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <HAL_RCC_GetHCLKFreq+0x58>)
 8006276:	681b      	ldr	r3, [r3, #0]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	58024400 	.word	0x58024400
 8006284:	0800e680 	.word	0x0800e680
 8006288:	2400000c 	.word	0x2400000c
 800628c:	24000008 	.word	0x24000008

08006290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006294:	f7ff ffcc 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8006298:	4601      	mov	r1, r0
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	091b      	lsrs	r3, r3, #4
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062a6:	5cd3      	ldrb	r3, [r2, r3]
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	58024400 	.word	0x58024400
 80062b8:	0800e680 	.word	0x0800e680

080062bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062c0:	f7ff ffb6 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 80062c4:	4601      	mov	r1, r0
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062d2:	5cd3      	ldrb	r3, [r2, r3]
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	58024400 	.word	0x58024400
 80062e4:	0800e680 	.word	0x0800e680

080062e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062f4:	2300      	movs	r3, #0
 80062f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d03d      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630c:	d013      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d802      	bhi.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006318:	e01f      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800631a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631e:	d013      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006320:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006324:	d01c      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006326:	e018      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4baf      	ldr	r3, [pc, #700]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	4aae      	ldr	r2, [pc, #696]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006334:	e015      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	2102      	movs	r1, #2
 800633c:	4618      	mov	r0, r3
 800633e:	f001 fd23 	bl	8007d88 <RCCEx_PLL2_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006346:	e00c      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f001 fdcc 	bl	8007eec <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
      break;
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006368:	4b9f      	ldr	r3, [pc, #636]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006374:	499c      	ldr	r1, [pc, #624]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006376:	4313      	orrs	r3, r2
 8006378:	650b      	str	r3, [r1, #80]	; 0x50
 800637a:	e001      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	2b04      	cmp	r3, #4
 8006392:	d826      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063b1 	.word	0x080063b1
 80063a0:	080063bf 	.word	0x080063bf
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063e9 	.word	0x080063e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b8d      	ldr	r3, [pc, #564]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a8c      	ldr	r2, [pc, #560]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063bc:	e015      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	2100      	movs	r1, #0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fcdf 	bl	8007d88 <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ce:	e00c      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3324      	adds	r3, #36	; 0x24
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fd88 	bl	8007eec <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e0:	e003      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
      break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80063e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063f0:	4b7d      	ldr	r3, [pc, #500]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	f023 0207 	bic.w	r2, r3, #7
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	497a      	ldr	r1, [pc, #488]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	650b      	str	r3, [r1, #80]	; 0x50
 8006402:	e001      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006410:	2b00      	cmp	r3, #0
 8006412:	d03e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d01c      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800641c:	2b80      	cmp	r3, #128	; 0x80
 800641e:	d804      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d00d      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006428:	e01e      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800642a:	2bc0      	cmp	r3, #192	; 0xc0
 800642c:	d01f      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006432:	d01e      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006434:	e018      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b6c      	ldr	r3, [pc, #432]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a6b      	ldr	r2, [pc, #428]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006442:	e017      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 fc9c 	bl	8007d88 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006454:	e00e      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fd45 	bl	8007eec <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800647a:	4b5b      	ldr	r3, [pc, #364]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	4958      	ldr	r1, [pc, #352]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006488:	4313      	orrs	r3, r2
 800648a:	650b      	str	r3, [r1, #80]	; 0x50
 800648c:	e001      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	2b00      	cmp	r3, #0
 800649c:	d044      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a8:	d01f      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ae:	d805      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b8:	d00e      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80064ba:	e01f      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x214>
 80064bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064c0:	d01f      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80064c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064c6:	d01e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064c8:	e018      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ca:	4b47      	ldr	r3, [pc, #284]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	4a46      	ldr	r2, [pc, #280]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d6:	e017      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fc52 	bl	8007d88 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064e8:	e00e      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3324      	adds	r3, #36	; 0x24
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fcfb 	bl	8007eec <RCCEx_PLL3_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064fa:	e005      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800650e:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006512:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800651c:	4932      	ldr	r1, [pc, #200]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651e:	4313      	orrs	r3, r2
 8006520:	658b      	str	r3, [r1, #88]	; 0x58
 8006522:	e001      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006530:	2b00      	cmp	r3, #0
 8006532:	d044      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800653a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800653e:	d01f      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006544:	d805      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800654a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800654e:	d00e      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006550:	e01f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006556:	d01f      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655c:	d01e      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800655e:	e018      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006560:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800656c:	e017      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fc07 	bl	8007d88 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800657e:	e00e      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f001 fcb0 	bl	8007eec <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006590:	e005      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	e002      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006598:	bf00      	nop
 800659a:	e000      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800659c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065b2:	490d      	ldr	r1, [pc, #52]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	658b      	str	r3, [r1, #88]	; 0x58
 80065b8:	e001      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d035      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d00c      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x304>
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d802      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01b      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80065da:	e017      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d00c      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x312>
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d018      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80065e4:	e012      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4baf      	ldr	r3, [pc, #700]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	4aae      	ldr	r2, [pc, #696]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065f8:	e00e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2102      	movs	r1, #2
 8006600:	4618      	mov	r0, r3
 8006602:	f001 fbc1 	bl	8007d88 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800660a:	e005      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
      break;
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800661e:	4ba3      	ldr	r3, [pc, #652]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662a:	49a0      	ldr	r1, [pc, #640]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800662c:	4313      	orrs	r3, r2
 800662e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006630:	e001      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d042      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664a:	d01f      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800664c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006650:	d805      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d00e      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800665c:	e01f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800665e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006662:	d01f      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006668:	d01e      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800666a:	e018      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666c:	4b8f      	ldr	r3, [pc, #572]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4a8e      	ldr	r2, [pc, #568]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006678:	e017      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fb81 	bl	8007d88 <RCCEx_PLL2_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800668a:	e00e      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3324      	adds	r3, #36	; 0x24
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f001 fc2a 	bl	8007eec <RCCEx_PLL3_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800669c:	e005      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
      break;
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b0:	4b7e      	ldr	r3, [pc, #504]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	497b      	ldr	r1, [pc, #492]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	650b      	str	r3, [r1, #80]	; 0x50
 80066c2:	e001      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d042      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066dc:	d01b      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e2:	d805      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d022      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d00a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066ee:	e01b      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80066f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f4:	d01d      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80066f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fa:	d01c      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80066fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006700:	d01b      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	2101      	movs	r1, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fb3c 	bl	8007d88 <RCCEx_PLL2_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006714:	e012      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	2101      	movs	r1, #1
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fbe5 	bl	8007eec <RCCEx_PLL3_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006726:	e009      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800673a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006742:	4b5a      	ldr	r3, [pc, #360]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	4957      	ldr	r1, [pc, #348]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006750:	4313      	orrs	r3, r2
 8006752:	650b      	str	r3, [r1, #80]	; 0x50
 8006754:	e001      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d044      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800676c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006770:	d01b      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006776:	d805      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d022      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800677c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006782:	e01b      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d01d      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800678a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678e:	d01c      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006794:	d01b      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006796:	e011      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 faf2 	bl	8007d88 <RCCEx_PLL2_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067a8:	e012      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3324      	adds	r3, #36	; 0x24
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fb9b 	bl	8007eec <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067ba:	e009      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067c2:	bf00      	nop
 80067c4:	e004      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067d6:	4b35      	ldr	r3, [pc, #212]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067e4:	4931      	ldr	r1, [pc, #196]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	658b      	str	r3, [r1, #88]	; 0x58
 80067ea:	e001      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02d      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006804:	d005      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680a:	d009      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006810:	e00f      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006812:	4b26      	ldr	r3, [pc, #152]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	4a25      	ldr	r2, [pc, #148]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800681e:	e00c      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f001 faae 	bl	8007d88 <RCCEx_PLL2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006830:	e003      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
      break;
 8006836:	e000      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	4917      	ldr	r1, [pc, #92]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800684e:	4313      	orrs	r3, r2
 8006850:	650b      	str	r3, [r1, #80]	; 0x50
 8006852:	e001      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d035      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006868:	2b03      	cmp	r3, #3
 800686a:	d81b      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068b1 	.word	0x080068b1
 8006878:	08006885 	.word	0x08006885
 800687c:	08006893 	.word	0x08006893
 8006880:	080068b1 	.word	0x080068b1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	4a08      	ldr	r2, [pc, #32]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800688a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006890:	e00f      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3304      	adds	r3, #4
 8006896:	2102      	movs	r1, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f001 fa75 	bl	8007d88 <RCCEx_PLL2_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068a2:	e006      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e003      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068aa:	bf00      	nop
 80068ac:	58024400 	.word	0x58024400
      break;
 80068b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068b8:	4bba      	ldr	r3, [pc, #744]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068bc:	f023 0203 	bic.w	r2, r3, #3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c4:	49b7      	ldr	r1, [pc, #732]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068ca:	e001      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8086 	beq.w	80069ea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068de:	4bb2      	ldr	r3, [pc, #712]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4ab1      	ldr	r2, [pc, #708]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ea:	f7f9 ff57 	bl	800079c <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f0:	e009      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f2:	f7f9 ff53 	bl	800079c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b64      	cmp	r3, #100	; 0x64
 80068fe:	d902      	bls.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	75fb      	strb	r3, [r7, #23]
        break;
 8006904:	e005      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006906:	4ba8      	ldr	r3, [pc, #672]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0ef      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d166      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006918:	4ba2      	ldr	r3, [pc, #648]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800691a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006922:	4053      	eors	r3, r2
 8006924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006928:	2b00      	cmp	r3, #0
 800692a:	d013      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800692c:	4b9d      	ldr	r3, [pc, #628]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006936:	4b9b      	ldr	r3, [pc, #620]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a9a      	ldr	r2, [pc, #616]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006942:	4b98      	ldr	r3, [pc, #608]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a97      	ldr	r2, [pc, #604]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800694e:	4a95      	ldr	r2, [pc, #596]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	d115      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7f9 ff1c 	bl	800079c <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006966:	e00b      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006968:	f7f9 ff18 	bl	800079c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f241 3288 	movw	r2, #5000	; 0x1388
 8006976:	4293      	cmp	r3, r2
 8006978:	d902      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	75fb      	strb	r3, [r7, #23]
            break;
 800697e:	e005      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006980:	4b88      	ldr	r3, [pc, #544]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0ed      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d126      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a0:	d10d      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80069a2:	4b80      	ldr	r3, [pc, #512]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b0:	0919      	lsrs	r1, r3, #4
 80069b2:	4b7e      	ldr	r3, [pc, #504]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80069b4:	400b      	ands	r3, r1
 80069b6:	497b      	ldr	r1, [pc, #492]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	610b      	str	r3, [r1, #16]
 80069bc:	e005      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80069be:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	4a78      	ldr	r2, [pc, #480]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069c8:	6113      	str	r3, [r2, #16]
 80069ca:	4b76      	ldr	r3, [pc, #472]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	4972      	ldr	r1, [pc, #456]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	670b      	str	r3, [r1, #112]	; 0x70
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	75bb      	strb	r3, [r7, #22]
 80069e4:	e001      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d07d      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069fa:	2b28      	cmp	r3, #40	; 0x28
 80069fc:	d866      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006ad3 	.word	0x08006ad3
 8006a08:	08006acd 	.word	0x08006acd
 8006a0c:	08006acd 	.word	0x08006acd
 8006a10:	08006acd 	.word	0x08006acd
 8006a14:	08006acd 	.word	0x08006acd
 8006a18:	08006acd 	.word	0x08006acd
 8006a1c:	08006acd 	.word	0x08006acd
 8006a20:	08006acd 	.word	0x08006acd
 8006a24:	08006aa9 	.word	0x08006aa9
 8006a28:	08006acd 	.word	0x08006acd
 8006a2c:	08006acd 	.word	0x08006acd
 8006a30:	08006acd 	.word	0x08006acd
 8006a34:	08006acd 	.word	0x08006acd
 8006a38:	08006acd 	.word	0x08006acd
 8006a3c:	08006acd 	.word	0x08006acd
 8006a40:	08006acd 	.word	0x08006acd
 8006a44:	08006abb 	.word	0x08006abb
 8006a48:	08006acd 	.word	0x08006acd
 8006a4c:	08006acd 	.word	0x08006acd
 8006a50:	08006acd 	.word	0x08006acd
 8006a54:	08006acd 	.word	0x08006acd
 8006a58:	08006acd 	.word	0x08006acd
 8006a5c:	08006acd 	.word	0x08006acd
 8006a60:	08006acd 	.word	0x08006acd
 8006a64:	08006ad3 	.word	0x08006ad3
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006acd 	.word	0x08006acd
 8006a70:	08006acd 	.word	0x08006acd
 8006a74:	08006acd 	.word	0x08006acd
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006acd 	.word	0x08006acd
 8006a84:	08006ad3 	.word	0x08006ad3
 8006a88:	08006acd 	.word	0x08006acd
 8006a8c:	08006acd 	.word	0x08006acd
 8006a90:	08006acd 	.word	0x08006acd
 8006a94:	08006acd 	.word	0x08006acd
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006acd 	.word	0x08006acd
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ad3 	.word	0x08006ad3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	2101      	movs	r1, #1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f96a 	bl	8007d88 <RCCEx_PLL2_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3324      	adds	r3, #36	; 0x24
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 fa13 	bl	8007eec <RCCEx_PLL3_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ada:	4b32      	ldr	r3, [pc, #200]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ade:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae6:	492f      	ldr	r1, [pc, #188]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	654b      	str	r3, [r1, #84]	; 0x54
 8006aec:	e001      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d037      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d820      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b37 	.word	0x08006b37
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b4f 	.word	0x08006b4f
 8006b20:	08006b4f 	.word	0x08006b4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f92c 	bl	8007d88 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b34:	e00c      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3324      	adds	r3, #36	; 0x24
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f9d5 	bl	8007eec <RCCEx_PLL3_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b46:	e003      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f023 0207 	bic.w	r2, r3, #7
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	4910      	ldr	r1, [pc, #64]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	654b      	str	r3, [r1, #84]	; 0x54
 8006b68:	e001      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d040      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d827      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bdb 	.word	0x08006bdb
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006bc3 	.word	0x08006bc3
 8006b98:	08006bdb 	.word	0x08006bdb
 8006b9c:	08006bdb 	.word	0x08006bdb
 8006ba0:	08006bdb 	.word	0x08006bdb
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	58024800 	.word	0x58024800
 8006bac:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 f8e6 	bl	8007d88 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bc0:	e00c      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f98f 	bl	8007eec <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e003      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e000      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006be2:	4bb2      	ldr	r3, [pc, #712]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	f023 0207 	bic.w	r2, r3, #7
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	49ae      	ldr	r1, [pc, #696]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8006bf6:	e001      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d044      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c12:	d01b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c18:	d805      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d022      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c24:	e01b      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d01d      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c30:	d01c      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c36:	d01b      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c38:	e011      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f8a1 	bl	8007d88 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c4a:	e012      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3324      	adds	r3, #36	; 0x24
 8006c50:	2102      	movs	r1, #2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 f94a 	bl	8007eec <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c5c:	e009      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      break;
 8006c62:	e006      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c64:	bf00      	nop
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c78:	4b8c      	ldr	r3, [pc, #560]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c86:	4989      	ldr	r1, [pc, #548]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c8c:	e001      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d044      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca8:	d01b      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cae:	d805      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d022      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006cba:	e01b      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006cc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cc6:	d01c      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ccc:	d01b      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006cce:	e011      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f856 	bl	8007d88 <RCCEx_PLL2_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ce0:	e012      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 f8ff 	bl	8007eec <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cf2:	e009      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	e006      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e004      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d1c:	4963      	ldr	r1, [pc, #396]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	658b      	str	r3, [r1, #88]	; 0x58
 8006d22:	e001      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d044      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3e:	d01b      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d44:	d805      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d022      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d50:	e01b      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d01d      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d5c:	d01c      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d62:	d01b      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d64:	e011      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f80b 	bl	8007d88 <RCCEx_PLL2_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d76:	e012      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 f8b4 	bl	8007eec <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d88:	e009      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8e:	e006      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d90:	bf00      	nop
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d94:	bf00      	nop
 8006d96:	e002      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006da4:	4b41      	ldr	r3, [pc, #260]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db2:	493e      	ldr	r1, [pc, #248]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	658b      	str	r3, [r1, #88]	; 0x58
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd4:	d10a      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	2102      	movs	r1, #2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 f885 	bl	8007eec <RCCEx_PLL3_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006dec:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dfa:	492c      	ldr	r1, [pc, #176]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01a      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d10a      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3324      	adds	r3, #36	; 0x24
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 f864 	bl	8007eec <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3c:	491b      	ldr	r1, [pc, #108]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d032      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e58:	d00d      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5e:	d016      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d111      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 ff8c 	bl	8007d88 <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e74:	e00c      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3324      	adds	r3, #36	; 0x24
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 f835 	bl	8007eec <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e86:	e003      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8c:	e000      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ea4:	4901      	ldr	r1, [pc, #4]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02f      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eca:	d00c      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ecc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ed0:	d015      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed6:	d10f      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed8:	4b71      	ldr	r3, [pc, #452]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	4a70      	ldr	r2, [pc, #448]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ee4:	e00c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fffd 	bl	8007eec <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
      break;
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f06:	4b66      	ldr	r3, [pc, #408]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f14:	4962      	ldr	r1, [pc, #392]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	654b      	str	r3, [r1, #84]	; 0x54
 8006f1a:	e001      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d029      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f38:	d007      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f3a:	e00f      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b58      	ldr	r3, [pc, #352]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	4a57      	ldr	r2, [pc, #348]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f48:	e00b      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2102      	movs	r1, #2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 ff19 	bl	8007d88 <RCCEx_PLL2_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f68:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f74:	494a      	ldr	r1, [pc, #296]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f7a:	e001      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2102      	movs	r1, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ffaa 	bl	8007eec <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02f      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbc:	d802      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006fc2:	e00d      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc8:	d00f      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fce:	d00e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd2:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	4a32      	ldr	r2, [pc, #200]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fde:	e007      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe4:	e004      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e002      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ff6:	4b2a      	ldr	r3, [pc, #168]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007002:	4927      	ldr	r1, [pc, #156]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007004:	4313      	orrs	r3, r2
 8007006:	654b      	str	r3, [r1, #84]	; 0x54
 8007008:	e001      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800701a:	4b21      	ldr	r3, [pc, #132]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800701c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	491e      	ldr	r1, [pc, #120]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007028:	4313      	orrs	r3, r2
 800702a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007038:	4b19      	ldr	r3, [pc, #100]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007044:	4916      	ldr	r1, [pc, #88]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007046:	4313      	orrs	r3, r2
 8007048:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007056:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	4a11      	ldr	r2, [pc, #68]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800705c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007060:	6113      	str	r3, [r2, #16]
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800706c:	490c      	ldr	r1, [pc, #48]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	da08      	bge.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007086:	4906      	ldr	r1, [pc, #24]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007088:	4313      	orrs	r3, r2
 800708a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800708c:	7dbb      	ldrb	r3, [r7, #22]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	e000      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	58024400 	.word	0x58024400

080070a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b090      	sub	sp, #64	; 0x40
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	d150      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80070b4:	4ba1      	ldr	r3, [pc, #644]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d844      	bhi.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	080070e1 	.word	0x080070e1
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	08007101 	.word	0x08007101
 80070d8:	08007149 	.word	0x08007149
 80070dc:	08007111 	.word	0x08007111
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd03 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ee:	e241      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f0:	f107 0318 	add.w	r3, r7, #24
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fa63 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fe:	e239      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fba7 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710e:	e231      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007110:	4b8a      	ldr	r3, [pc, #552]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007118:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007120:	4b87      	ldr	r3, [pc, #540]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007124:	e226      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800712c:	d102      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800712e:	4b85      	ldr	r3, [pc, #532]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007132:	e21f      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800713c:	4b82      	ldr	r3, [pc, #520]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007140:	e218      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007146:	e215      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007148:	4b80      	ldr	r3, [pc, #512]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714c:	e212      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007152:	bf00      	nop
 8007154:	e20e      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d14f      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800715e:	4b77      	ldr	r3, [pc, #476]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007166:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2b80      	cmp	r3, #128	; 0x80
 800716c:	d01c      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d804      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d00e      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800717a:	e03c      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800717c:	2bc0      	cmp	r3, #192	; 0xc0
 800717e:	d037      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007184:	d018      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007186:	e036      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fcaf 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e1ed      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007198:	f107 0318 	add.w	r3, r7, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fa0f 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a6:	e1e5      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fb53 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	e1dd      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071b8:	4b60      	ldr	r3, [pc, #384]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071c8:	4b5d      	ldr	r3, [pc, #372]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071cc:	e1d2      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d4:	d102      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80071d6:	4b5b      	ldr	r3, [pc, #364]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071da:	e1cb      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e2:	d102      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80071e4:	4b58      	ldr	r3, [pc, #352]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e8:	e1c4      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e1c1      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071f0:	4b56      	ldr	r3, [pc, #344]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f4:	e1be      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fa:	bf00      	nop
 80071fc:	e1ba      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007204:	d153      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007206:	4b4d      	ldr	r3, [pc, #308]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800720e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007216:	d01f      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721c:	d805      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007226:	d00f      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007228:	e03d      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800722a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800722e:	d037      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007234:	d018      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007236:	e036      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fc57 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	e195      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007248:	f107 0318 	add.w	r3, r7, #24
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f9b7 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007256:	e18d      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fafb 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007266:	e185      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007268:	4b34      	ldr	r3, [pc, #208]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007270:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007278:	4b31      	ldr	r3, [pc, #196]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800727c:	e17a      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007284:	d102      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	e173      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007298:	e16c      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729e:	e169      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072a0:	4b2a      	ldr	r3, [pc, #168]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a4:	e166      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072aa:	bf00      	nop
 80072ac:	e162      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b4:	d15d      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80072b6:	4b21      	ldr	r3, [pc, #132]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80072be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072c6:	d01f      	beq.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80072c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072cc:	d805      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80072d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d6:	d00f      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80072d8:	e047      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80072da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072de:	d041      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80072e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072e4:	d018      	beq.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80072e6:	e040      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fbff 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e13d      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f8:	f107 0318 	add.w	r3, r7, #24
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f95f 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007306:	e135      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007308:	f107 030c 	add.w	r3, r7, #12
 800730c:	4618      	mov	r0, r3
 800730e:	f000 faa3 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007316:	e12d      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007318:	4b08      	ldr	r3, [pc, #32]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800731a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007320:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800732c:	e122      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007334:	d10c      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007336:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733a:	e11b      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800733c:	58024400 	.word	0x58024400
 8007340:	03d09000 	.word	0x03d09000
 8007344:	003d0900 	.word	0x003d0900
 8007348:	017d7840 	.word	0x017d7840
 800734c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007356:	d102      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007358:	4b89      	ldr	r3, [pc, #548]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735c:	e10a      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007362:	e107      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007364:	4b87      	ldr	r3, [pc, #540]	; (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007368:	e104      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736e:	bf00      	nop
 8007370:	e100      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007378:	d153      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800737a:	4b83      	ldr	r3, [pc, #524]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800737c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d01f      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800738c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007390:	d805      	bhi.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739a:	d00f      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800739c:	e03d      	b.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800739e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073a2:	d037      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80073a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a8:	d018      	beq.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073aa:	e036      	b.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fb9d 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ba:	e0db      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073bc:	f107 0318 	add.w	r3, r7, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f8fd 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ca:	e0d3      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073cc:	f107 030c 	add.w	r3, r7, #12
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fa41 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073da:	e0cb      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073dc:	4b6a      	ldr	r3, [pc, #424]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073ec:	4b67      	ldr	r3, [pc, #412]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80073f0:	e0c0      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073f8:	d102      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80073fa:	4b65      	ldr	r3, [pc, #404]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073fe:	e0b9      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007406:	d102      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007408:	4b5d      	ldr	r3, [pc, #372]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740c:	e0b2      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007412:	e0af      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007414:	4b5b      	ldr	r3, [pc, #364]	; (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007418:	e0ac      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	bf00      	nop
 8007420:	e0a8      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007428:	d13d      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800742a:	4b57      	ldr	r3, [pc, #348]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007432:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743a:	d00c      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007440:	d011      	beq.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d12b      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007446:	f107 0318 	add.w	r3, r7, #24
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f8b8 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007454:	e08e      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007456:	f107 030c 	add.w	r3, r7, #12
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f9fc 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007464:	e086      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007466:	4b48      	ldr	r3, [pc, #288]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800746e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007476:	4b45      	ldr	r3, [pc, #276]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800747a:	e07b      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007482:	d102      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007484:	4b42      	ldr	r3, [pc, #264]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007488:	e074      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007490:	d102      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007492:	4b3b      	ldr	r3, [pc, #236]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007496:	e06d      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800749c:	e06a      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a2:	bf00      	nop
 80074a4:	e066      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ac:	d11f      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c2:	d008      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80074c4:	e00f      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fb10 	bl	8007af0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074d4:	e04e      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d6:	f107 0318 	add.w	r3, r7, #24
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f870 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e4:	e046      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ea:	bf00      	nop
 80074ec:	e042      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f4:	d13c      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80074fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007506:	d01e      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750c:	d805      	bhi.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007516:	d00e      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007518:	e026      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800751a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751e:	d01d      	beq.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007524:	d01d      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800752a:	d014      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800752c:	e01c      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800752e:	f000 f831 	bl	8007594 <HAL_RCCEx_GetD3PCLK1Freq>
 8007532:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007534:	e01e      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007536:	f107 0318 	add.w	r3, r7, #24
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f840 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007544:	e016      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f984 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007554:	e00e      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755a:	e00b      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007560:	e008      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007566:	e005      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800756c:	bf00      	nop
 800756e:	e001      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007576:	4618      	mov	r0, r3
 8007578:	3740      	adds	r7, #64	; 0x40
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	017d7840 	.word	0x017d7840
 8007584:	00bb8000 	.word	0x00bb8000
 8007588:	58024400 	.word	0x58024400
 800758c:	03d09000 	.word	0x03d09000
 8007590:	003d0900 	.word	0x003d0900

08007594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007598:	f7fe fe4a 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 800759c:	4601      	mov	r1, r0
 800759e:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075aa:	5cd3      	ldrb	r3, [r2, r3]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	58024400 	.word	0x58024400
 80075bc:	0800e680 	.word	0x0800e680

080075c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	; 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075c8:	4b9d      	ldr	r3, [pc, #628]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075d2:	4b9b      	ldr	r3, [pc, #620]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	0b1b      	lsrs	r3, r3, #12
 80075d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075de:	4b98      	ldr	r3, [pc, #608]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075ea:	4b95      	ldr	r3, [pc, #596]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 810a 	beq.w	8007822 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d05a      	beq.n	80076ca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007614:	2b01      	cmp	r3, #1
 8007616:	d302      	bcc.n	800761e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007618:	2b02      	cmp	r3, #2
 800761a:	d078      	beq.n	800770e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800761c:	e099      	b.n	8007752 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800761e:	4b88      	ldr	r3, [pc, #544]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02d      	beq.n	8007686 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800762a:	4b85      	ldr	r3, [pc, #532]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	4a83      	ldr	r2, [pc, #524]	; (8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007636:	fa22 f303 	lsr.w	r3, r2, r3
 800763a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007654:	4b7a      	ldr	r3, [pc, #488]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	ed97 6a03 	vldr	s12, [r7, #12]
 8007668:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800766c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007680:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007684:	e087      	b.n	8007796 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007690:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800784c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007698:	4b69      	ldr	r3, [pc, #420]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076c8:	e065      	b.n	8007796 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076dc:	4b58      	ldr	r3, [pc, #352]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800770c:	e043      	b.n	8007796 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007718:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800771c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007720:	4b47      	ldr	r3, [pc, #284]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007730:	ed97 6a03 	vldr	s12, [r7, #12]
 8007734:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007750:	e021      	b.n	8007796 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007764:	4b36      	ldr	r3, [pc, #216]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	ed97 6a03 	vldr	s12, [r7, #12]
 8007778:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800777c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007790:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007794:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	0a5b      	lsrs	r3, r3, #9
 800779c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077bc:	ee17 2a90 	vmov	r2, s15
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077c4:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077de:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ea:	ee17 2a90 	vmov	r2, s15
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	0e1b      	lsrs	r3, r3, #24
 80077f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007818:	ee17 2a90 	vmov	r2, s15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007820:	e008      	b.n	8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	609a      	str	r2, [r3, #8]
}
 8007834:	bf00      	nop
 8007836:	3724      	adds	r7, #36	; 0x24
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	58024400 	.word	0x58024400
 8007844:	03d09000 	.word	0x03d09000
 8007848:	46000000 	.word	0x46000000
 800784c:	4c742400 	.word	0x4c742400
 8007850:	4a742400 	.word	0x4a742400
 8007854:	4bbebc20 	.word	0x4bbebc20

08007858 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007858:	b480      	push	{r7}
 800785a:	b089      	sub	sp, #36	; 0x24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007860:	4b9d      	ldr	r3, [pc, #628]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800786a:	4b9b      	ldr	r3, [pc, #620]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	0d1b      	lsrs	r3, r3, #20
 8007870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007874:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007876:	4b98      	ldr	r3, [pc, #608]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007882:	4b95      	ldr	r3, [pc, #596]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 810a 	beq.w	8007aba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d05a      	beq.n	8007962 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d302      	bcc.n	80078b6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d078      	beq.n	80079a6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80078b4:	e099      	b.n	80079ea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078b6:	4b88      	ldr	r3, [pc, #544]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d02d      	beq.n	800791e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078c2:	4b85      	ldr	r3, [pc, #532]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	08db      	lsrs	r3, r3, #3
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	4a83      	ldr	r2, [pc, #524]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80078ce:	fa22 f303 	lsr.w	r3, r2, r3
 80078d2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ec:	4b7a      	ldr	r3, [pc, #488]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007900:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007918:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800791c:	e087      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007928:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800792c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007930:	4b69      	ldr	r3, [pc, #420]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007940:	ed97 6a03 	vldr	s12, [r7, #12]
 8007944:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007960:	e065      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007974:	4b58      	ldr	r3, [pc, #352]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007984:	ed97 6a03 	vldr	s12, [r7, #12]
 8007988:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800798c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079a4:	e043      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80079b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b8:	4b47      	ldr	r3, [pc, #284]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079e8:	e021      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fc:	4b36      	ldr	r3, [pc, #216]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a2c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a2e:	4b2a      	ldr	r3, [pc, #168]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	0a5b      	lsrs	r3, r3, #9
 8007a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a54:	ee17 2a90 	vmov	r2, s15
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a82:	ee17 2a90 	vmov	r2, s15
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a8a:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	0e1b      	lsrs	r3, r3, #24
 8007a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab0:	ee17 2a90 	vmov	r2, s15
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ab8:	e008      	b.n	8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	3724      	adds	r7, #36	; 0x24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	03d09000 	.word	0x03d09000
 8007ae0:	46000000 	.word	0x46000000
 8007ae4:	4c742400 	.word	0x4c742400
 8007ae8:	4a742400 	.word	0x4a742400
 8007aec:	4bbebc20 	.word	0x4bbebc20

08007af0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b089      	sub	sp, #36	; 0x24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007af8:	4b9d      	ldr	r3, [pc, #628]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b02:	4b9b      	ldr	r3, [pc, #620]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	091b      	lsrs	r3, r3, #4
 8007b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b0e:	4b98      	ldr	r3, [pc, #608]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b18:	4b95      	ldr	r3, [pc, #596]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	08db      	lsrs	r3, r3, #3
 8007b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 810a 	beq.w	8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d05a      	beq.n	8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d302      	bcc.n	8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d078      	beq.n	8007c3c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007b4a:	e099      	b.n	8007c80 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b4c:	4b88      	ldr	r3, [pc, #544]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d02d      	beq.n	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b58:	4b85      	ldr	r3, [pc, #532]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	4a84      	ldr	r2, [pc, #528]	; (8007d74 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b7b      	ldr	r3, [pc, #492]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bb2:	e087      	b.n	8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b6a      	ldr	r3, [pc, #424]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bf6:	e065      	b.n	8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b59      	ldr	r3, [pc, #356]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c3a:	e043      	b.n	8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b48      	ldr	r3, [pc, #288]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7e:	e021      	b.n	8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cc2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007cc4:	4b2a      	ldr	r3, [pc, #168]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc8:	0a5b      	lsrs	r3, r3, #9
 8007cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cea:	ee17 2a90 	vmov	r2, s15
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007cf2:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	0c1b      	lsrs	r3, r3, #16
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d18:	ee17 2a90 	vmov	r2, s15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	0e1b      	lsrs	r3, r3, #24
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d46:	ee17 2a90 	vmov	r2, s15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d4e:	e008      	b.n	8007d62 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]
}
 8007d62:	bf00      	nop
 8007d64:	3724      	adds	r7, #36	; 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	46000000 	.word	0x46000000
 8007d7c:	4c742400 	.word	0x4c742400
 8007d80:	4a742400 	.word	0x4a742400
 8007d84:	4bbebc20 	.word	0x4bbebc20

08007d88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d96:	4b53      	ldr	r3, [pc, #332]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d101      	bne.n	8007da6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e099      	b.n	8007eda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007da6:	4b4f      	ldr	r3, [pc, #316]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a4e      	ldr	r2, [pc, #312]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007dac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db2:	f7f8 fcf3 	bl	800079c <HAL_GetTick>
 8007db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007db8:	e008      	b.n	8007dcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007dba:	f7f8 fcef 	bl	800079c <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e086      	b.n	8007eda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dcc:	4b45      	ldr	r3, [pc, #276]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1f0      	bne.n	8007dba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007dd8:	4b42      	ldr	r3, [pc, #264]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	031b      	lsls	r3, r3, #12
 8007de6:	493f      	ldr	r1, [pc, #252]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	628b      	str	r3, [r1, #40]	; 0x28
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	025b      	lsls	r3, r3, #9
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	041b      	lsls	r3, r3, #16
 8007e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	061b      	lsls	r3, r3, #24
 8007e18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e1c:	4931      	ldr	r1, [pc, #196]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e22:	4b30      	ldr	r3, [pc, #192]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	492d      	ldr	r1, [pc, #180]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e34:	4b2b      	ldr	r3, [pc, #172]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f023 0220 	bic.w	r2, r3, #32
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	4928      	ldr	r1, [pc, #160]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e46:	4b27      	ldr	r3, [pc, #156]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a26      	ldr	r2, [pc, #152]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e56:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <RCCEx_PLL2_Config+0x160>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	69d2      	ldr	r2, [r2, #28]
 8007e5e:	00d2      	lsls	r2, r2, #3
 8007e60:	4920      	ldr	r1, [pc, #128]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e66:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e6c:	f043 0310 	orr.w	r3, r3, #16
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e78:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e84:	e00f      	b.n	8007ea6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d106      	bne.n	8007e9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e8c:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	4a14      	ldr	r2, [pc, #80]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e98:	e005      	b.n	8007ea6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	4a11      	ldr	r2, [pc, #68]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb2:	f7f8 fc73 	bl	800079c <HAL_GetTick>
 8007eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eb8:	e008      	b.n	8007ecc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007eba:	f7f8 fc6f 	bl	800079c <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <RCCEx_PLL2_Config+0x15c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	ffff0007 	.word	0xffff0007

08007eec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007efa:	4b53      	ldr	r3, [pc, #332]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d101      	bne.n	8007f0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e099      	b.n	800803e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f0a:	4b4f      	ldr	r3, [pc, #316]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a4e      	ldr	r2, [pc, #312]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f16:	f7f8 fc41 	bl	800079c <HAL_GetTick>
 8007f1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f1c:	e008      	b.n	8007f30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f1e:	f7f8 fc3d 	bl	800079c <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e086      	b.n	800803e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f30:	4b45      	ldr	r3, [pc, #276]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f0      	bne.n	8007f1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f3c:	4b42      	ldr	r3, [pc, #264]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	051b      	lsls	r3, r3, #20
 8007f4a:	493f      	ldr	r1, [pc, #252]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	025b      	lsls	r3, r3, #9
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	061b      	lsls	r3, r3, #24
 8007f7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f80:	4931      	ldr	r1, [pc, #196]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f86:	4b30      	ldr	r3, [pc, #192]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	492d      	ldr	r1, [pc, #180]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f98:	4b2b      	ldr	r3, [pc, #172]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	4928      	ldr	r1, [pc, #160]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007faa:	4b27      	ldr	r3, [pc, #156]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a26      	ldr	r2, [pc, #152]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <RCCEx_PLL3_Config+0x160>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	69d2      	ldr	r2, [r2, #28]
 8007fc2:	00d2      	lsls	r2, r2, #3
 8007fc4:	4920      	ldr	r1, [pc, #128]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007fe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fe8:	e00f      	b.n	800800a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d106      	bne.n	8007ffe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ff0:	4b15      	ldr	r3, [pc, #84]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	4a14      	ldr	r2, [pc, #80]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8007ff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ffc:	e005      	b.n	800800a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a11      	ldr	r2, [pc, #68]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8008004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a0e      	ldr	r2, [pc, #56]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8008010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008016:	f7f8 fbc1 	bl	800079c <HAL_GetTick>
 800801a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800801c:	e008      	b.n	8008030 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800801e:	f7f8 fbbd 	bl	800079c <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e006      	b.n	800803e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <RCCEx_PLL3_Config+0x15c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	ffff0007 	.word	0xffff0007

08008050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e01d      	b.n	800809e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f003 fe92 	bl	800bda0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f000 fa2a 	bl	80084e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d122      	bne.n	8008102 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d11b      	bne.n	8008102 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f06f 0202 	mvn.w	r2, #2
 80080d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9df 	bl	80084ac <HAL_TIM_IC_CaptureCallback>
 80080ee:	e005      	b.n	80080fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9d1 	bl	8008498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f9e2 	bl	80084c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b04      	cmp	r3, #4
 800810e:	d122      	bne.n	8008156 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b04      	cmp	r3, #4
 800811c:	d11b      	bne.n	8008156 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f06f 0204 	mvn.w	r2, #4
 8008126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9b5 	bl	80084ac <HAL_TIM_IC_CaptureCallback>
 8008142:	e005      	b.n	8008150 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9a7 	bl	8008498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9b8 	bl	80084c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b08      	cmp	r3, #8
 8008162:	d122      	bne.n	80081aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b08      	cmp	r3, #8
 8008170:	d11b      	bne.n	80081aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f06f 0208 	mvn.w	r2, #8
 800817a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2204      	movs	r2, #4
 8008180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f98b 	bl	80084ac <HAL_TIM_IC_CaptureCallback>
 8008196:	e005      	b.n	80081a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f97d 	bl	8008498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f98e 	bl	80084c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	d122      	bne.n	80081fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f003 0310 	and.w	r3, r3, #16
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	d11b      	bne.n	80081fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f06f 0210 	mvn.w	r2, #16
 80081ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2208      	movs	r2, #8
 80081d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f961 	bl	80084ac <HAL_TIM_IC_CaptureCallback>
 80081ea:	e005      	b.n	80081f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f953 	bl	8008498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f964 	bl	80084c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b01      	cmp	r3, #1
 800820a:	d10e      	bne.n	800822a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b01      	cmp	r3, #1
 8008218:	d107      	bne.n	800822a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f06f 0201 	mvn.w	r2, #1
 8008222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f92d 	bl	8008484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	d10e      	bne.n	8008256 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b80      	cmp	r3, #128	; 0x80
 8008244:	d107      	bne.n	8008256 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800824e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb13 	bl	800887c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008264:	d10e      	bne.n	8008284 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d107      	bne.n	8008284 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800827c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb06 	bl	8008890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d10e      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d107      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f912 	bl	80084d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d10e      	bne.n	80082dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d107      	bne.n	80082dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0220 	mvn.w	r2, #32
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fac6 	bl	8008868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_TIM_ConfigClockSource+0x18>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0b7      	b.n	800846c <HAL_TIM_ConfigClockSource+0x188>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4b57      	ldr	r3, [pc, #348]	; (8008474 <HAL_TIM_ConfigClockSource+0x190>)
 8008318:	4013      	ands	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008322:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b70      	cmp	r3, #112	; 0x70
 8008332:	d02e      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0xae>
 8008334:	2b70      	cmp	r3, #112	; 0x70
 8008336:	d812      	bhi.n	800835e <HAL_TIM_ConfigClockSource+0x7a>
 8008338:	2b30      	cmp	r3, #48	; 0x30
 800833a:	f000 8084 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x162>
 800833e:	2b30      	cmp	r3, #48	; 0x30
 8008340:	d806      	bhi.n	8008350 <HAL_TIM_ConfigClockSource+0x6c>
 8008342:	2b10      	cmp	r3, #16
 8008344:	d07f      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 8008346:	2b20      	cmp	r3, #32
 8008348:	d07d      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d07b      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800834e:	e084      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008350:	2b50      	cmp	r3, #80	; 0x50
 8008352:	d048      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x102>
 8008354:	2b60      	cmp	r3, #96	; 0x60
 8008356:	d056      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x122>
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d064      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800835c:	e07d      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800835e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008362:	d070      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 8008364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008368:	d809      	bhi.n	800837e <HAL_TIM_ConfigClockSource+0x9a>
 800836a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836e:	d027      	beq.n	80083c0 <HAL_TIM_ConfigClockSource+0xdc>
 8008370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008374:	d067      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 8008376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837a:	d06d      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800837c:	e06d      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800837e:	4a3e      	ldr	r2, [pc, #248]	; (8008478 <HAL_TIM_ConfigClockSource+0x194>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d060      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 8008384:	4a3d      	ldr	r2, [pc, #244]	; (800847c <HAL_TIM_ConfigClockSource+0x198>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d05d      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
 800838a:	4a3d      	ldr	r2, [pc, #244]	; (8008480 <HAL_TIM_ConfigClockSource+0x19c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d05a      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008390:	e063      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6899      	ldr	r1, [r3, #8]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f000 f9b9 	bl	8008718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	609a      	str	r2, [r3, #8]
      break;
 80083be:	e04c      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6899      	ldr	r1, [r3, #8]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f000 f9a2 	bl	8008718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083e2:	609a      	str	r2, [r3, #8]
      break;
 80083e4:	e039      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f000 f912 	bl	800861c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2150      	movs	r1, #80	; 0x50
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f96c 	bl	80086dc <TIM_ITRx_SetConfig>
      break;
 8008404:	e029      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6859      	ldr	r1, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	461a      	mov	r2, r3
 8008414:	f000 f931 	bl	800867a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2160      	movs	r1, #96	; 0x60
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f95c 	bl	80086dc <TIM_ITRx_SetConfig>
      break;
 8008424:	e019      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6859      	ldr	r1, [r3, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	461a      	mov	r2, r3
 8008434:	f000 f8f2 	bl	800861c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2140      	movs	r1, #64	; 0x40
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f94c 	bl	80086dc <TIM_ITRx_SetConfig>
      break;
 8008444:	e009      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f000 f943 	bl	80086dc <TIM_ITRx_SetConfig>
      break;
 8008456:	e000      	b.n	800845a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	ffceff88 	.word	0xffceff88
 8008478:	00100030 	.word	0x00100030
 800847c:	00100040 	.word	0x00100040
 8008480:	00100020 	.word	0x00100020

08008484 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a40      	ldr	r2, [pc, #256]	; (80085fc <TIM_Base_SetConfig+0x114>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d013      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008506:	d00f      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3d      	ldr	r2, [pc, #244]	; (8008600 <TIM_Base_SetConfig+0x118>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00b      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3c      	ldr	r2, [pc, #240]	; (8008604 <TIM_Base_SetConfig+0x11c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <TIM_Base_SetConfig+0x120>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a3a      	ldr	r2, [pc, #232]	; (800860c <TIM_Base_SetConfig+0x124>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d108      	bne.n	800853a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a2f      	ldr	r2, [pc, #188]	; (80085fc <TIM_Base_SetConfig+0x114>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d01f      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008548:	d01b      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <TIM_Base_SetConfig+0x118>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d017      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <TIM_Base_SetConfig+0x11c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <TIM_Base_SetConfig+0x120>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00f      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a29      	ldr	r2, [pc, #164]	; (800860c <TIM_Base_SetConfig+0x124>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00b      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a28      	ldr	r2, [pc, #160]	; (8008610 <TIM_Base_SetConfig+0x128>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d007      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <TIM_Base_SetConfig+0x12c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_Base_SetConfig+0x9a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a26      	ldr	r2, [pc, #152]	; (8008618 <TIM_Base_SetConfig+0x130>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d108      	bne.n	8008594 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <TIM_Base_SetConfig+0x114>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00f      	beq.n	80085e0 <TIM_Base_SetConfig+0xf8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a12      	ldr	r2, [pc, #72]	; (800860c <TIM_Base_SetConfig+0x124>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00b      	beq.n	80085e0 <TIM_Base_SetConfig+0xf8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <TIM_Base_SetConfig+0x128>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d007      	beq.n	80085e0 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a10      	ldr	r2, [pc, #64]	; (8008614 <TIM_Base_SetConfig+0x12c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_Base_SetConfig+0xf8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a0f      	ldr	r2, [pc, #60]	; (8008618 <TIM_Base_SetConfig+0x130>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d103      	bne.n	80085e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	615a      	str	r2, [r3, #20]
}
 80085ee:	bf00      	nop
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	40010000 	.word	0x40010000
 8008600:	40000400 	.word	0x40000400
 8008604:	40000800 	.word	0x40000800
 8008608:	40000c00 	.word	0x40000c00
 800860c:	40010400 	.word	0x40010400
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800

0800861c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f023 030a 	bic.w	r3, r3, #10
 8008658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800867a:	b480      	push	{r7}
 800867c:	b087      	sub	sp, #28
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f023 0210 	bic.w	r2, r3, #16
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	031b      	lsls	r3, r3, #12
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <TIM_ITRx_SetConfig+0x38>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f043 0307 	orr.w	r3, r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	609a      	str	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	ffcfff8f 	.word	0xffcfff8f

08008718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	021a      	lsls	r2, r3, #8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	431a      	orrs	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4313      	orrs	r3, r2
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	609a      	str	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800876c:	2302      	movs	r3, #2
 800876e:	e068      	b.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a2e      	ldr	r2, [pc, #184]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a2d      	ldr	r2, [pc, #180]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d108      	bne.n	80087b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d01d      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d018      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00e      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d009      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a13      	ldr	r2, [pc, #76]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a14      	ldr	r2, [pc, #80]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10c      	bne.n	8008830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800881c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40001800 	.word	0x40001800

08008868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e042      	b.n	800893c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f003 fadd 	bl	800be88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2224      	movs	r2, #36	; 0x24
 80088d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f8c2 	bl	8008a70 <UART_SetConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e022      	b.n	800893c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f002 fa34 	bl	800ad6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f002 fabb 	bl	800aeb0 <UART_CheckIdleState>
 800893a:	4603      	mov	r3, r0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800895a:	2b20      	cmp	r3, #32
 800895c:	f040 8083 	bne.w	8008a66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <HAL_UART_Transmit+0x28>
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e07b      	b.n	8008a68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_UART_Transmit+0x3a>
 800897a:	2302      	movs	r3, #2
 800897c:	e074      	b.n	8008a68 <HAL_UART_Transmit+0x124>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2221      	movs	r2, #33	; 0x21
 8008992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008996:	f7f7 ff01 	bl	800079c <HAL_GetTick>
 800899a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	88fa      	ldrh	r2, [r7, #6]
 80089a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	d108      	bne.n	80089c8 <HAL_UART_Transmit+0x84>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	e003      	b.n	80089d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089d0:	e02c      	b.n	8008a2c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2200      	movs	r2, #0
 80089da:	2180      	movs	r1, #128	; 0x80
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f002 faaf 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e03d      	b.n	8008a68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	3302      	adds	r3, #2
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	e007      	b.n	8008a1a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	3301      	adds	r3, #1
 8008a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1cc      	bne.n	80089d2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2140      	movs	r1, #64	; 0x40
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f002 fa7c 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e00a      	b.n	8008a68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e000      	b.n	8008a68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a66:	2302      	movs	r3, #2
  }
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008a74:	b090      	sub	sp, #64	; 0x40
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	4bc1      	ldr	r3, [pc, #772]	; (8008db8 <UART_SetConfig+0x348>)
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aba:	430b      	orrs	r3, r1
 8008abc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4ab7      	ldr	r2, [pc, #732]	; (8008dbc <UART_SetConfig+0x34c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aea:	4313      	orrs	r3, r2
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	4bb2      	ldr	r3, [pc, #712]	; (8008dc0 <UART_SetConfig+0x350>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008afe:	430b      	orrs	r3, r1
 8008b00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	f023 010f 	bic.w	r1, r3, #15
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4aa9      	ldr	r2, [pc, #676]	; (8008dc4 <UART_SetConfig+0x354>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d177      	bne.n	8008c12 <UART_SetConfig+0x1a2>
 8008b22:	4ba9      	ldr	r3, [pc, #676]	; (8008dc8 <UART_SetConfig+0x358>)
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b2a:	2b28      	cmp	r3, #40	; 0x28
 8008b2c:	d86c      	bhi.n	8008c08 <UART_SetConfig+0x198>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0xc4>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008bd9 	.word	0x08008bd9
 8008b38:	08008c09 	.word	0x08008c09
 8008b3c:	08008c09 	.word	0x08008c09
 8008b40:	08008c09 	.word	0x08008c09
 8008b44:	08008c09 	.word	0x08008c09
 8008b48:	08008c09 	.word	0x08008c09
 8008b4c:	08008c09 	.word	0x08008c09
 8008b50:	08008c09 	.word	0x08008c09
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008c09 	.word	0x08008c09
 8008b5c:	08008c09 	.word	0x08008c09
 8008b60:	08008c09 	.word	0x08008c09
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c09 	.word	0x08008c09
 8008b6c:	08008c09 	.word	0x08008c09
 8008b70:	08008c09 	.word	0x08008c09
 8008b74:	08008be9 	.word	0x08008be9
 8008b78:	08008c09 	.word	0x08008c09
 8008b7c:	08008c09 	.word	0x08008c09
 8008b80:	08008c09 	.word	0x08008c09
 8008b84:	08008c09 	.word	0x08008c09
 8008b88:	08008c09 	.word	0x08008c09
 8008b8c:	08008c09 	.word	0x08008c09
 8008b90:	08008c09 	.word	0x08008c09
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008c09 	.word	0x08008c09
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008c09 	.word	0x08008c09
 8008ba8:	08008c09 	.word	0x08008c09
 8008bac:	08008c09 	.word	0x08008c09
 8008bb0:	08008c09 	.word	0x08008c09
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008c09 	.word	0x08008c09
 8008bbc:	08008c09 	.word	0x08008c09
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c09 	.word	0x08008c09
 8008bc8:	08008c09 	.word	0x08008c09
 8008bcc:	08008c09 	.word	0x08008c09
 8008bd0:	08008c09 	.word	0x08008c09
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bde:	e233      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008be6:	e22f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bee:	e22b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bf6:	e227      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bfe:	e223      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c06:	e21f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c0e:	bf00      	nop
 8008c10:	e21a      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6d      	ldr	r2, [pc, #436]	; (8008dcc <UART_SetConfig+0x35c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d132      	bne.n	8008c82 <UART_SetConfig+0x212>
 8008c1c:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <UART_SetConfig+0x358>)
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d827      	bhi.n	8008c78 <UART_SetConfig+0x208>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x1c0>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c4e:	e1fb      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c56:	e1f7      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c5e:	e1f3      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c66:	e1ef      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c6e:	e1eb      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c76:	e1e7      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c7e:	bf00      	nop
 8008c80:	e1e2      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a52      	ldr	r2, [pc, #328]	; (8008dd0 <UART_SetConfig+0x360>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d132      	bne.n	8008cf2 <UART_SetConfig+0x282>
 8008c8c:	4b4e      	ldr	r3, [pc, #312]	; (8008dc8 <UART_SetConfig+0x358>)
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d827      	bhi.n	8008ce8 <UART_SetConfig+0x278>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <UART_SetConfig+0x230>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb9 	.word	0x08008cb9
 8008ca4:	08008cc1 	.word	0x08008cc1
 8008ca8:	08008cc9 	.word	0x08008cc9
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cbe:	e1c3      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cc6:	e1bf      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cce:	e1bb      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cd6:	e1b7      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008cd8:	2320      	movs	r3, #32
 8008cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cde:	e1b3      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ce6:	e1af      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008cee:	bf00      	nop
 8008cf0:	e1aa      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a37      	ldr	r2, [pc, #220]	; (8008dd4 <UART_SetConfig+0x364>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d132      	bne.n	8008d62 <UART_SetConfig+0x2f2>
 8008cfc:	4b32      	ldr	r3, [pc, #200]	; (8008dc8 <UART_SetConfig+0x358>)
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	2b05      	cmp	r3, #5
 8008d06:	d827      	bhi.n	8008d58 <UART_SetConfig+0x2e8>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x2a0>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d29 	.word	0x08008d29
 8008d14:	08008d31 	.word	0x08008d31
 8008d18:	08008d39 	.word	0x08008d39
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d2e:	e18b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d36:	e187      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d3e:	e183      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d46:	e17f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d4e:	e17b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d50:	2340      	movs	r3, #64	; 0x40
 8008d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d56:	e177      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d5e:	bf00      	nop
 8008d60:	e172      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1c      	ldr	r2, [pc, #112]	; (8008dd8 <UART_SetConfig+0x368>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d144      	bne.n	8008df6 <UART_SetConfig+0x386>
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <UART_SetConfig+0x358>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d839      	bhi.n	8008dec <UART_SetConfig+0x37c>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x310>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008ddd 	.word	0x08008ddd
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d9e:	e153      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008da6:	e14f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dae:	e14b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008db6:	e147      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008db8:	cfff69f3 	.word	0xcfff69f3
 8008dbc:	58000c00 	.word	0x58000c00
 8008dc0:	11fff4ff 	.word	0x11fff4ff
 8008dc4:	40011000 	.word	0x40011000
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	40004400 	.word	0x40004400
 8008dd0:	40004800 	.word	0x40004800
 8008dd4:	40004c00 	.word	0x40004c00
 8008dd8:	40005000 	.word	0x40005000
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008de2:	e131      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008de4:	2340      	movs	r3, #64	; 0x40
 8008de6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dea:	e12d      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008df2:	bf00      	nop
 8008df4:	e128      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4ac3      	ldr	r2, [pc, #780]	; (8009108 <UART_SetConfig+0x698>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d178      	bne.n	8008ef2 <UART_SetConfig+0x482>
 8008e00:	4bc2      	ldr	r3, [pc, #776]	; (800910c <UART_SetConfig+0x69c>)
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e08:	2b28      	cmp	r3, #40	; 0x28
 8008e0a:	d86d      	bhi.n	8008ee8 <UART_SetConfig+0x478>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x3a4>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008ee9 	.word	0x08008ee9
 8008e1c:	08008ee9 	.word	0x08008ee9
 8008e20:	08008ee9 	.word	0x08008ee9
 8008e24:	08008ee9 	.word	0x08008ee9
 8008e28:	08008ee9 	.word	0x08008ee9
 8008e2c:	08008ee9 	.word	0x08008ee9
 8008e30:	08008ee9 	.word	0x08008ee9
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008ee9 	.word	0x08008ee9
 8008e3c:	08008ee9 	.word	0x08008ee9
 8008e40:	08008ee9 	.word	0x08008ee9
 8008e44:	08008ee9 	.word	0x08008ee9
 8008e48:	08008ee9 	.word	0x08008ee9
 8008e4c:	08008ee9 	.word	0x08008ee9
 8008e50:	08008ee9 	.word	0x08008ee9
 8008e54:	08008ec9 	.word	0x08008ec9
 8008e58:	08008ee9 	.word	0x08008ee9
 8008e5c:	08008ee9 	.word	0x08008ee9
 8008e60:	08008ee9 	.word	0x08008ee9
 8008e64:	08008ee9 	.word	0x08008ee9
 8008e68:	08008ee9 	.word	0x08008ee9
 8008e6c:	08008ee9 	.word	0x08008ee9
 8008e70:	08008ee9 	.word	0x08008ee9
 8008e74:	08008ed1 	.word	0x08008ed1
 8008e78:	08008ee9 	.word	0x08008ee9
 8008e7c:	08008ee9 	.word	0x08008ee9
 8008e80:	08008ee9 	.word	0x08008ee9
 8008e84:	08008ee9 	.word	0x08008ee9
 8008e88:	08008ee9 	.word	0x08008ee9
 8008e8c:	08008ee9 	.word	0x08008ee9
 8008e90:	08008ee9 	.word	0x08008ee9
 8008e94:	08008ed9 	.word	0x08008ed9
 8008e98:	08008ee9 	.word	0x08008ee9
 8008e9c:	08008ee9 	.word	0x08008ee9
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008ee9 	.word	0x08008ee9
 8008ea8:	08008ee9 	.word	0x08008ee9
 8008eac:	08008ee9 	.word	0x08008ee9
 8008eb0:	08008ee9 	.word	0x08008ee9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ebe:	e0c3      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ec6:	e0bf      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ece:	e0bb      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ed6:	e0b7      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ede:	e0b3      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ee0:	2340      	movs	r3, #64	; 0x40
 8008ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ee6:	e0af      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008eee:	bf00      	nop
 8008ef0:	e0aa      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a86      	ldr	r2, [pc, #536]	; (8009110 <UART_SetConfig+0x6a0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d132      	bne.n	8008f62 <UART_SetConfig+0x4f2>
 8008efc:	4b83      	ldr	r3, [pc, #524]	; (800910c <UART_SetConfig+0x69c>)
 8008efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	2b05      	cmp	r3, #5
 8008f06:	d827      	bhi.n	8008f58 <UART_SetConfig+0x4e8>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <UART_SetConfig+0x4a0>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f39 	.word	0x08008f39
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f2e:	e08b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f30:	2304      	movs	r3, #4
 8008f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f36:	e087      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f38:	2308      	movs	r3, #8
 8008f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f3e:	e083      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f46:	e07f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f4e:	e07b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f50:	2340      	movs	r3, #64	; 0x40
 8008f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f56:	e077      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f5e:	bf00      	nop
 8008f60:	e072      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a6b      	ldr	r2, [pc, #428]	; (8009114 <UART_SetConfig+0x6a4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d132      	bne.n	8008fd2 <UART_SetConfig+0x562>
 8008f6c:	4b67      	ldr	r3, [pc, #412]	; (800910c <UART_SetConfig+0x69c>)
 8008f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	d827      	bhi.n	8008fc8 <UART_SetConfig+0x558>
 8008f78:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <UART_SetConfig+0x510>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008fa1 	.word	0x08008fa1
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb9 	.word	0x08008fb9
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008f9e:	e053      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fa6:	e04f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fa8:	2308      	movs	r3, #8
 8008faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fae:	e04b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fb6:	e047      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fbe:	e043      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fc6:	e03f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008fce:	bf00      	nop
 8008fd0:	e03a      	b.n	8009048 <UART_SetConfig+0x5d8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a50      	ldr	r2, [pc, #320]	; (8009118 <UART_SetConfig+0x6a8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d132      	bne.n	8009042 <UART_SetConfig+0x5d2>
 8008fdc:	4b4b      	ldr	r3, [pc, #300]	; (800910c <UART_SetConfig+0x69c>)
 8008fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	2b05      	cmp	r3, #5
 8008fe6:	d827      	bhi.n	8009038 <UART_SetConfig+0x5c8>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x580>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	2302      	movs	r3, #2
 800900a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800900e:	e01b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009016:	e017      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800901e:	e013      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009026:	e00f      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009028:	2320      	movs	r3, #32
 800902a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800902e:	e00b      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009036:	e007      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009038:	2380      	movs	r3, #128	; 0x80
 800903a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800903e:	bf00      	nop
 8009040:	e002      	b.n	8009048 <UART_SetConfig+0x5d8>
 8009042:	2380      	movs	r3, #128	; 0x80
 8009044:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a32      	ldr	r2, [pc, #200]	; (8009118 <UART_SetConfig+0x6a8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	f040 86f7 	bne.w	8009e42 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009054:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009058:	2b08      	cmp	r3, #8
 800905a:	f000 80c0 	beq.w	80091de <UART_SetConfig+0x76e>
 800905e:	2b08      	cmp	r3, #8
 8009060:	dc04      	bgt.n	800906c <UART_SetConfig+0x5fc>
 8009062:	2b02      	cmp	r3, #2
 8009064:	d00c      	beq.n	8009080 <UART_SetConfig+0x610>
 8009066:	2b04      	cmp	r3, #4
 8009068:	d065      	beq.n	8009136 <UART_SetConfig+0x6c6>
 800906a:	e27a      	b.n	8009562 <UART_SetConfig+0xaf2>
 800906c:	2b20      	cmp	r3, #32
 800906e:	f000 81b0 	beq.w	80093d2 <UART_SetConfig+0x962>
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	f000 821e 	beq.w	80094b4 <UART_SetConfig+0xa44>
 8009078:	2b10      	cmp	r3, #16
 800907a:	f000 8104 	beq.w	8009286 <UART_SetConfig+0x816>
 800907e:	e270      	b.n	8009562 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009080:	f7fe fa88 	bl	8007594 <HAL_RCCEx_GetD3PCLK1Freq>
 8009084:	4602      	mov	r2, r0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	d04e      	beq.n	800912c <UART_SetConfig+0x6bc>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b01      	cmp	r3, #1
 8009094:	d048      	beq.n	8009128 <UART_SetConfig+0x6b8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b02      	cmp	r3, #2
 800909c:	d042      	beq.n	8009124 <UART_SetConfig+0x6b4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d03c      	beq.n	8009120 <UART_SetConfig+0x6b0>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d036      	beq.n	800911c <UART_SetConfig+0x6ac>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b05      	cmp	r3, #5
 80090b4:	d026      	beq.n	8009104 <UART_SetConfig+0x694>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	2b06      	cmp	r3, #6
 80090bc:	d020      	beq.n	8009100 <UART_SetConfig+0x690>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b07      	cmp	r3, #7
 80090c4:	d01a      	beq.n	80090fc <UART_SetConfig+0x68c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d014      	beq.n	80090f8 <UART_SetConfig+0x688>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b09      	cmp	r3, #9
 80090d4:	d00e      	beq.n	80090f4 <UART_SetConfig+0x684>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	2b0a      	cmp	r3, #10
 80090dc:	d008      	beq.n	80090f0 <UART_SetConfig+0x680>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	2b0b      	cmp	r3, #11
 80090e4:	d102      	bne.n	80090ec <UART_SetConfig+0x67c>
 80090e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ea:	e020      	b.n	800912e <UART_SetConfig+0x6be>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e01e      	b.n	800912e <UART_SetConfig+0x6be>
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	e01c      	b.n	800912e <UART_SetConfig+0x6be>
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	e01a      	b.n	800912e <UART_SetConfig+0x6be>
 80090f8:	2320      	movs	r3, #32
 80090fa:	e018      	b.n	800912e <UART_SetConfig+0x6be>
 80090fc:	2310      	movs	r3, #16
 80090fe:	e016      	b.n	800912e <UART_SetConfig+0x6be>
 8009100:	230c      	movs	r3, #12
 8009102:	e014      	b.n	800912e <UART_SetConfig+0x6be>
 8009104:	230a      	movs	r3, #10
 8009106:	e012      	b.n	800912e <UART_SetConfig+0x6be>
 8009108:	40011400 	.word	0x40011400
 800910c:	58024400 	.word	0x58024400
 8009110:	40007800 	.word	0x40007800
 8009114:	40007c00 	.word	0x40007c00
 8009118:	58000c00 	.word	0x58000c00
 800911c:	2308      	movs	r3, #8
 800911e:	e006      	b.n	800912e <UART_SetConfig+0x6be>
 8009120:	2306      	movs	r3, #6
 8009122:	e004      	b.n	800912e <UART_SetConfig+0x6be>
 8009124:	2304      	movs	r3, #4
 8009126:	e002      	b.n	800912e <UART_SetConfig+0x6be>
 8009128:	2302      	movs	r3, #2
 800912a:	e000      	b.n	800912e <UART_SetConfig+0x6be>
 800912c:	2301      	movs	r3, #1
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009134:	e219      	b.n	800956a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009136:	f107 0318 	add.w	r3, r7, #24
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fa40 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d044      	beq.n	80091d4 <UART_SetConfig+0x764>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	2b01      	cmp	r3, #1
 8009150:	d03e      	beq.n	80091d0 <UART_SetConfig+0x760>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	2b02      	cmp	r3, #2
 8009158:	d038      	beq.n	80091cc <UART_SetConfig+0x75c>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b03      	cmp	r3, #3
 8009160:	d032      	beq.n	80091c8 <UART_SetConfig+0x758>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	2b04      	cmp	r3, #4
 8009168:	d02c      	beq.n	80091c4 <UART_SetConfig+0x754>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	2b05      	cmp	r3, #5
 8009170:	d026      	beq.n	80091c0 <UART_SetConfig+0x750>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	2b06      	cmp	r3, #6
 8009178:	d020      	beq.n	80091bc <UART_SetConfig+0x74c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2b07      	cmp	r3, #7
 8009180:	d01a      	beq.n	80091b8 <UART_SetConfig+0x748>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b08      	cmp	r3, #8
 8009188:	d014      	beq.n	80091b4 <UART_SetConfig+0x744>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	2b09      	cmp	r3, #9
 8009190:	d00e      	beq.n	80091b0 <UART_SetConfig+0x740>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	2b0a      	cmp	r3, #10
 8009198:	d008      	beq.n	80091ac <UART_SetConfig+0x73c>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2b0b      	cmp	r3, #11
 80091a0:	d102      	bne.n	80091a8 <UART_SetConfig+0x738>
 80091a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a6:	e016      	b.n	80091d6 <UART_SetConfig+0x766>
 80091a8:	2301      	movs	r3, #1
 80091aa:	e014      	b.n	80091d6 <UART_SetConfig+0x766>
 80091ac:	2380      	movs	r3, #128	; 0x80
 80091ae:	e012      	b.n	80091d6 <UART_SetConfig+0x766>
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	e010      	b.n	80091d6 <UART_SetConfig+0x766>
 80091b4:	2320      	movs	r3, #32
 80091b6:	e00e      	b.n	80091d6 <UART_SetConfig+0x766>
 80091b8:	2310      	movs	r3, #16
 80091ba:	e00c      	b.n	80091d6 <UART_SetConfig+0x766>
 80091bc:	230c      	movs	r3, #12
 80091be:	e00a      	b.n	80091d6 <UART_SetConfig+0x766>
 80091c0:	230a      	movs	r3, #10
 80091c2:	e008      	b.n	80091d6 <UART_SetConfig+0x766>
 80091c4:	2308      	movs	r3, #8
 80091c6:	e006      	b.n	80091d6 <UART_SetConfig+0x766>
 80091c8:	2306      	movs	r3, #6
 80091ca:	e004      	b.n	80091d6 <UART_SetConfig+0x766>
 80091cc:	2304      	movs	r3, #4
 80091ce:	e002      	b.n	80091d6 <UART_SetConfig+0x766>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e000      	b.n	80091d6 <UART_SetConfig+0x766>
 80091d4:	2301      	movs	r3, #1
 80091d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091dc:	e1c5      	b.n	800956a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fb38 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d044      	beq.n	800927c <UART_SetConfig+0x80c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d03e      	beq.n	8009278 <UART_SetConfig+0x808>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d038      	beq.n	8009274 <UART_SetConfig+0x804>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	2b03      	cmp	r3, #3
 8009208:	d032      	beq.n	8009270 <UART_SetConfig+0x800>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b04      	cmp	r3, #4
 8009210:	d02c      	beq.n	800926c <UART_SetConfig+0x7fc>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b05      	cmp	r3, #5
 8009218:	d026      	beq.n	8009268 <UART_SetConfig+0x7f8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	2b06      	cmp	r3, #6
 8009220:	d020      	beq.n	8009264 <UART_SetConfig+0x7f4>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	2b07      	cmp	r3, #7
 8009228:	d01a      	beq.n	8009260 <UART_SetConfig+0x7f0>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	2b08      	cmp	r3, #8
 8009230:	d014      	beq.n	800925c <UART_SetConfig+0x7ec>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	2b09      	cmp	r3, #9
 8009238:	d00e      	beq.n	8009258 <UART_SetConfig+0x7e8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	2b0a      	cmp	r3, #10
 8009240:	d008      	beq.n	8009254 <UART_SetConfig+0x7e4>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b0b      	cmp	r3, #11
 8009248:	d102      	bne.n	8009250 <UART_SetConfig+0x7e0>
 800924a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800924e:	e016      	b.n	800927e <UART_SetConfig+0x80e>
 8009250:	2301      	movs	r3, #1
 8009252:	e014      	b.n	800927e <UART_SetConfig+0x80e>
 8009254:	2380      	movs	r3, #128	; 0x80
 8009256:	e012      	b.n	800927e <UART_SetConfig+0x80e>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	e010      	b.n	800927e <UART_SetConfig+0x80e>
 800925c:	2320      	movs	r3, #32
 800925e:	e00e      	b.n	800927e <UART_SetConfig+0x80e>
 8009260:	2310      	movs	r3, #16
 8009262:	e00c      	b.n	800927e <UART_SetConfig+0x80e>
 8009264:	230c      	movs	r3, #12
 8009266:	e00a      	b.n	800927e <UART_SetConfig+0x80e>
 8009268:	230a      	movs	r3, #10
 800926a:	e008      	b.n	800927e <UART_SetConfig+0x80e>
 800926c:	2308      	movs	r3, #8
 800926e:	e006      	b.n	800927e <UART_SetConfig+0x80e>
 8009270:	2306      	movs	r3, #6
 8009272:	e004      	b.n	800927e <UART_SetConfig+0x80e>
 8009274:	2304      	movs	r3, #4
 8009276:	e002      	b.n	800927e <UART_SetConfig+0x80e>
 8009278:	2302      	movs	r3, #2
 800927a:	e000      	b.n	800927e <UART_SetConfig+0x80e>
 800927c:	2301      	movs	r3, #1
 800927e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009284:	e171      	b.n	800956a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009286:	4b7a      	ldr	r3, [pc, #488]	; (8009470 <UART_SetConfig+0xa00>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d054      	beq.n	800933c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009292:	4b77      	ldr	r3, [pc, #476]	; (8009470 <UART_SetConfig+0xa00>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a75      	ldr	r2, [pc, #468]	; (8009474 <UART_SetConfig+0xa04>)
 800929e:	40da      	lsrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d044      	beq.n	8009332 <UART_SetConfig+0x8c2>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d03e      	beq.n	800932e <UART_SetConfig+0x8be>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d038      	beq.n	800932a <UART_SetConfig+0x8ba>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d032      	beq.n	8009326 <UART_SetConfig+0x8b6>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d02c      	beq.n	8009322 <UART_SetConfig+0x8b2>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	d026      	beq.n	800931e <UART_SetConfig+0x8ae>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	2b06      	cmp	r3, #6
 80092d6:	d020      	beq.n	800931a <UART_SetConfig+0x8aa>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	2b07      	cmp	r3, #7
 80092de:	d01a      	beq.n	8009316 <UART_SetConfig+0x8a6>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d014      	beq.n	8009312 <UART_SetConfig+0x8a2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d00e      	beq.n	800930e <UART_SetConfig+0x89e>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	2b0a      	cmp	r3, #10
 80092f6:	d008      	beq.n	800930a <UART_SetConfig+0x89a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	2b0b      	cmp	r3, #11
 80092fe:	d102      	bne.n	8009306 <UART_SetConfig+0x896>
 8009300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009304:	e016      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009306:	2301      	movs	r3, #1
 8009308:	e014      	b.n	8009334 <UART_SetConfig+0x8c4>
 800930a:	2380      	movs	r3, #128	; 0x80
 800930c:	e012      	b.n	8009334 <UART_SetConfig+0x8c4>
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	e010      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009312:	2320      	movs	r3, #32
 8009314:	e00e      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009316:	2310      	movs	r3, #16
 8009318:	e00c      	b.n	8009334 <UART_SetConfig+0x8c4>
 800931a:	230c      	movs	r3, #12
 800931c:	e00a      	b.n	8009334 <UART_SetConfig+0x8c4>
 800931e:	230a      	movs	r3, #10
 8009320:	e008      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009322:	2308      	movs	r3, #8
 8009324:	e006      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009326:	2306      	movs	r3, #6
 8009328:	e004      	b.n	8009334 <UART_SetConfig+0x8c4>
 800932a:	2304      	movs	r3, #4
 800932c:	e002      	b.n	8009334 <UART_SetConfig+0x8c4>
 800932e:	2302      	movs	r3, #2
 8009330:	e000      	b.n	8009334 <UART_SetConfig+0x8c4>
 8009332:	2301      	movs	r3, #1
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800933a:	e116      	b.n	800956a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d043      	beq.n	80093cc <UART_SetConfig+0x95c>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b01      	cmp	r3, #1
 800934a:	d03d      	beq.n	80093c8 <UART_SetConfig+0x958>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b02      	cmp	r3, #2
 8009352:	d037      	beq.n	80093c4 <UART_SetConfig+0x954>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b03      	cmp	r3, #3
 800935a:	d031      	beq.n	80093c0 <UART_SetConfig+0x950>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b04      	cmp	r3, #4
 8009362:	d02b      	beq.n	80093bc <UART_SetConfig+0x94c>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b05      	cmp	r3, #5
 800936a:	d025      	beq.n	80093b8 <UART_SetConfig+0x948>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b06      	cmp	r3, #6
 8009372:	d01f      	beq.n	80093b4 <UART_SetConfig+0x944>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b07      	cmp	r3, #7
 800937a:	d019      	beq.n	80093b0 <UART_SetConfig+0x940>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b08      	cmp	r3, #8
 8009382:	d013      	beq.n	80093ac <UART_SetConfig+0x93c>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b09      	cmp	r3, #9
 800938a:	d00d      	beq.n	80093a8 <UART_SetConfig+0x938>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b0a      	cmp	r3, #10
 8009392:	d007      	beq.n	80093a4 <UART_SetConfig+0x934>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	2b0b      	cmp	r3, #11
 800939a:	d101      	bne.n	80093a0 <UART_SetConfig+0x930>
 800939c:	4b36      	ldr	r3, [pc, #216]	; (8009478 <UART_SetConfig+0xa08>)
 800939e:	e016      	b.n	80093ce <UART_SetConfig+0x95e>
 80093a0:	4b34      	ldr	r3, [pc, #208]	; (8009474 <UART_SetConfig+0xa04>)
 80093a2:	e014      	b.n	80093ce <UART_SetConfig+0x95e>
 80093a4:	4b35      	ldr	r3, [pc, #212]	; (800947c <UART_SetConfig+0xa0c>)
 80093a6:	e012      	b.n	80093ce <UART_SetConfig+0x95e>
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <UART_SetConfig+0xa10>)
 80093aa:	e010      	b.n	80093ce <UART_SetConfig+0x95e>
 80093ac:	4b35      	ldr	r3, [pc, #212]	; (8009484 <UART_SetConfig+0xa14>)
 80093ae:	e00e      	b.n	80093ce <UART_SetConfig+0x95e>
 80093b0:	4b35      	ldr	r3, [pc, #212]	; (8009488 <UART_SetConfig+0xa18>)
 80093b2:	e00c      	b.n	80093ce <UART_SetConfig+0x95e>
 80093b4:	4b35      	ldr	r3, [pc, #212]	; (800948c <UART_SetConfig+0xa1c>)
 80093b6:	e00a      	b.n	80093ce <UART_SetConfig+0x95e>
 80093b8:	4b35      	ldr	r3, [pc, #212]	; (8009490 <UART_SetConfig+0xa20>)
 80093ba:	e008      	b.n	80093ce <UART_SetConfig+0x95e>
 80093bc:	4b35      	ldr	r3, [pc, #212]	; (8009494 <UART_SetConfig+0xa24>)
 80093be:	e006      	b.n	80093ce <UART_SetConfig+0x95e>
 80093c0:	4b35      	ldr	r3, [pc, #212]	; (8009498 <UART_SetConfig+0xa28>)
 80093c2:	e004      	b.n	80093ce <UART_SetConfig+0x95e>
 80093c4:	4b35      	ldr	r3, [pc, #212]	; (800949c <UART_SetConfig+0xa2c>)
 80093c6:	e002      	b.n	80093ce <UART_SetConfig+0x95e>
 80093c8:	4b35      	ldr	r3, [pc, #212]	; (80094a0 <UART_SetConfig+0xa30>)
 80093ca:	e000      	b.n	80093ce <UART_SetConfig+0x95e>
 80093cc:	4b29      	ldr	r3, [pc, #164]	; (8009474 <UART_SetConfig+0xa04>)
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093d0:	e0cb      	b.n	800956a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d046      	beq.n	8009468 <UART_SetConfig+0x9f8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d040      	beq.n	8009464 <UART_SetConfig+0x9f4>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d03a      	beq.n	8009460 <UART_SetConfig+0x9f0>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d034      	beq.n	800945c <UART_SetConfig+0x9ec>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d02e      	beq.n	8009458 <UART_SetConfig+0x9e8>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d028      	beq.n	8009454 <UART_SetConfig+0x9e4>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	2b06      	cmp	r3, #6
 8009408:	d022      	beq.n	8009450 <UART_SetConfig+0x9e0>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	2b07      	cmp	r3, #7
 8009410:	d01c      	beq.n	800944c <UART_SetConfig+0x9dc>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	2b08      	cmp	r3, #8
 8009418:	d016      	beq.n	8009448 <UART_SetConfig+0x9d8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	2b09      	cmp	r3, #9
 8009420:	d00f      	beq.n	8009442 <UART_SetConfig+0x9d2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b0a      	cmp	r3, #10
 8009428:	d008      	beq.n	800943c <UART_SetConfig+0x9cc>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2b0b      	cmp	r3, #11
 8009430:	d102      	bne.n	8009438 <UART_SetConfig+0x9c8>
 8009432:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009436:	e018      	b.n	800946a <UART_SetConfig+0x9fa>
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <UART_SetConfig+0xa18>)
 800943a:	e016      	b.n	800946a <UART_SetConfig+0x9fa>
 800943c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009440:	e013      	b.n	800946a <UART_SetConfig+0x9fa>
 8009442:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009446:	e010      	b.n	800946a <UART_SetConfig+0x9fa>
 8009448:	4b16      	ldr	r3, [pc, #88]	; (80094a4 <UART_SetConfig+0xa34>)
 800944a:	e00e      	b.n	800946a <UART_SetConfig+0x9fa>
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <UART_SetConfig+0xa08>)
 800944e:	e00c      	b.n	800946a <UART_SetConfig+0x9fa>
 8009450:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <UART_SetConfig+0xa38>)
 8009452:	e00a      	b.n	800946a <UART_SetConfig+0x9fa>
 8009454:	4b15      	ldr	r3, [pc, #84]	; (80094ac <UART_SetConfig+0xa3c>)
 8009456:	e008      	b.n	800946a <UART_SetConfig+0x9fa>
 8009458:	4b08      	ldr	r3, [pc, #32]	; (800947c <UART_SetConfig+0xa0c>)
 800945a:	e006      	b.n	800946a <UART_SetConfig+0x9fa>
 800945c:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <UART_SetConfig+0xa40>)
 800945e:	e004      	b.n	800946a <UART_SetConfig+0x9fa>
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <UART_SetConfig+0xa10>)
 8009462:	e002      	b.n	800946a <UART_SetConfig+0x9fa>
 8009464:	4b07      	ldr	r3, [pc, #28]	; (8009484 <UART_SetConfig+0xa14>)
 8009466:	e000      	b.n	800946a <UART_SetConfig+0x9fa>
 8009468:	4b07      	ldr	r3, [pc, #28]	; (8009488 <UART_SetConfig+0xa18>)
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800946c:	e07d      	b.n	800956a <UART_SetConfig+0xafa>
 800946e:	bf00      	nop
 8009470:	58024400 	.word	0x58024400
 8009474:	03d09000 	.word	0x03d09000
 8009478:	0003d090 	.word	0x0003d090
 800947c:	0007a120 	.word	0x0007a120
 8009480:	000f4240 	.word	0x000f4240
 8009484:	001e8480 	.word	0x001e8480
 8009488:	003d0900 	.word	0x003d0900
 800948c:	00516155 	.word	0x00516155
 8009490:	0061a800 	.word	0x0061a800
 8009494:	007a1200 	.word	0x007a1200
 8009498:	00a2c2aa 	.word	0x00a2c2aa
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	01e84800 	.word	0x01e84800
 80094a4:	0001e848 	.word	0x0001e848
 80094a8:	00051615 	.word	0x00051615
 80094ac:	00061a80 	.word	0x00061a80
 80094b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d04e      	beq.n	800955a <UART_SetConfig+0xaea>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d047      	beq.n	8009554 <UART_SetConfig+0xae4>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d040      	beq.n	800954e <UART_SetConfig+0xade>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d039      	beq.n	8009548 <UART_SetConfig+0xad8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d032      	beq.n	8009542 <UART_SetConfig+0xad2>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	2b05      	cmp	r3, #5
 80094e2:	d02b      	beq.n	800953c <UART_SetConfig+0xacc>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	d024      	beq.n	8009536 <UART_SetConfig+0xac6>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	d01d      	beq.n	8009530 <UART_SetConfig+0xac0>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d016      	beq.n	800952a <UART_SetConfig+0xaba>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b09      	cmp	r3, #9
 8009502:	d00f      	beq.n	8009524 <UART_SetConfig+0xab4>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2b0a      	cmp	r3, #10
 800950a:	d008      	beq.n	800951e <UART_SetConfig+0xaae>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b0b      	cmp	r3, #11
 8009512:	d101      	bne.n	8009518 <UART_SetConfig+0xaa8>
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	e022      	b.n	800955e <UART_SetConfig+0xaee>
 8009518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800951c:	e01f      	b.n	800955e <UART_SetConfig+0xaee>
 800951e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009522:	e01c      	b.n	800955e <UART_SetConfig+0xaee>
 8009524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009528:	e019      	b.n	800955e <UART_SetConfig+0xaee>
 800952a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952e:	e016      	b.n	800955e <UART_SetConfig+0xaee>
 8009530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009534:	e013      	b.n	800955e <UART_SetConfig+0xaee>
 8009536:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800953a:	e010      	b.n	800955e <UART_SetConfig+0xaee>
 800953c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009540:	e00d      	b.n	800955e <UART_SetConfig+0xaee>
 8009542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009546:	e00a      	b.n	800955e <UART_SetConfig+0xaee>
 8009548:	f241 5355 	movw	r3, #5461	; 0x1555
 800954c:	e007      	b.n	800955e <UART_SetConfig+0xaee>
 800954e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009552:	e004      	b.n	800955e <UART_SetConfig+0xaee>
 8009554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009558:	e001      	b.n	800955e <UART_SetConfig+0xaee>
 800955a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800955e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009560:	e003      	b.n	800956a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009568:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	2b00      	cmp	r3, #0
 800956e:	f001 83e8 	beq.w	800ad42 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	4413      	add	r3, r2
 800957c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800957e:	429a      	cmp	r2, r3
 8009580:	d305      	bcc.n	800958e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958a:	429a      	cmp	r2, r3
 800958c:	d904      	bls.n	8009598 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009594:	f001 bbd5 	b.w	800ad42 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009598:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800959c:	2b08      	cmp	r3, #8
 800959e:	f000 8154 	beq.w	800984a <UART_SetConfig+0xdda>
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	dc06      	bgt.n	80095b4 <UART_SetConfig+0xb44>
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d00f      	beq.n	80095ca <UART_SetConfig+0xb5a>
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	f000 80ac 	beq.w	8009708 <UART_SetConfig+0xc98>
 80095b0:	f000 bc30 	b.w	8009e14 <UART_SetConfig+0x13a4>
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	f000 832d 	beq.w	8009c14 <UART_SetConfig+0x11a4>
 80095ba:	2b40      	cmp	r3, #64	; 0x40
 80095bc:	f000 83a5 	beq.w	8009d0a <UART_SetConfig+0x129a>
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	f000 81e3 	beq.w	800998c <UART_SetConfig+0xf1c>
 80095c6:	f000 bc25 	b.w	8009e14 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80095ca:	f7fd ffe3 	bl	8007594 <HAL_RCCEx_GetD3PCLK1Freq>
 80095ce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	4618      	mov	r0, r3
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d067      	beq.n	80096b0 <UART_SetConfig+0xc40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d05e      	beq.n	80096a6 <UART_SetConfig+0xc36>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d055      	beq.n	800969c <UART_SetConfig+0xc2c>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d04c      	beq.n	8009692 <UART_SetConfig+0xc22>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d043      	beq.n	8009688 <UART_SetConfig+0xc18>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	2b05      	cmp	r3, #5
 8009606:	d03a      	beq.n	800967e <UART_SetConfig+0xc0e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	2b06      	cmp	r3, #6
 800960e:	d031      	beq.n	8009674 <UART_SetConfig+0xc04>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b07      	cmp	r3, #7
 8009616:	d028      	beq.n	800966a <UART_SetConfig+0xbfa>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2b08      	cmp	r3, #8
 800961e:	d01f      	beq.n	8009660 <UART_SetConfig+0xbf0>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	2b09      	cmp	r3, #9
 8009626:	d016      	beq.n	8009656 <UART_SetConfig+0xbe6>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	2b0a      	cmp	r3, #10
 800962e:	d00d      	beq.n	800964c <UART_SetConfig+0xbdc>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b0b      	cmp	r3, #11
 8009636:	d104      	bne.n	8009642 <UART_SetConfig+0xbd2>
 8009638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800963c:	f04f 0400 	mov.w	r4, #0
 8009640:	e03a      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009642:	f04f 0301 	mov.w	r3, #1
 8009646:	f04f 0400 	mov.w	r4, #0
 800964a:	e035      	b.n	80096b8 <UART_SetConfig+0xc48>
 800964c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009650:	f04f 0400 	mov.w	r4, #0
 8009654:	e030      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009656:	f04f 0340 	mov.w	r3, #64	; 0x40
 800965a:	f04f 0400 	mov.w	r4, #0
 800965e:	e02b      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009660:	f04f 0320 	mov.w	r3, #32
 8009664:	f04f 0400 	mov.w	r4, #0
 8009668:	e026      	b.n	80096b8 <UART_SetConfig+0xc48>
 800966a:	f04f 0310 	mov.w	r3, #16
 800966e:	f04f 0400 	mov.w	r4, #0
 8009672:	e021      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009674:	f04f 030c 	mov.w	r3, #12
 8009678:	f04f 0400 	mov.w	r4, #0
 800967c:	e01c      	b.n	80096b8 <UART_SetConfig+0xc48>
 800967e:	f04f 030a 	mov.w	r3, #10
 8009682:	f04f 0400 	mov.w	r4, #0
 8009686:	e017      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009688:	f04f 0308 	mov.w	r3, #8
 800968c:	f04f 0400 	mov.w	r4, #0
 8009690:	e012      	b.n	80096b8 <UART_SetConfig+0xc48>
 8009692:	f04f 0306 	mov.w	r3, #6
 8009696:	f04f 0400 	mov.w	r4, #0
 800969a:	e00d      	b.n	80096b8 <UART_SetConfig+0xc48>
 800969c:	f04f 0304 	mov.w	r3, #4
 80096a0:	f04f 0400 	mov.w	r4, #0
 80096a4:	e008      	b.n	80096b8 <UART_SetConfig+0xc48>
 80096a6:	f04f 0302 	mov.w	r3, #2
 80096aa:	f04f 0400 	mov.w	r4, #0
 80096ae:	e003      	b.n	80096b8 <UART_SetConfig+0xc48>
 80096b0:	f04f 0301 	mov.w	r3, #1
 80096b4:	f04f 0400 	mov.w	r4, #0
 80096b8:	461a      	mov	r2, r3
 80096ba:	4623      	mov	r3, r4
 80096bc:	f7f6 fe68 	bl	8000390 <__aeabi_uldivmod>
 80096c0:	4603      	mov	r3, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4619      	mov	r1, r3
 80096c6:	4622      	mov	r2, r4
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	f04f 0400 	mov.w	r4, #0
 80096d0:	0214      	lsls	r4, r2, #8
 80096d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80096d6:	020b      	lsls	r3, r1, #8
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6852      	ldr	r2, [r2, #4]
 80096dc:	0852      	lsrs	r2, r2, #1
 80096de:	4611      	mov	r1, r2
 80096e0:	f04f 0200 	mov.w	r2, #0
 80096e4:	eb13 0b01 	adds.w	fp, r3, r1
 80096e8:	eb44 0c02 	adc.w	ip, r4, r2
 80096ec:	4658      	mov	r0, fp
 80096ee:	4661      	mov	r1, ip
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f04f 0400 	mov.w	r4, #0
 80096f8:	461a      	mov	r2, r3
 80096fa:	4623      	mov	r3, r4
 80096fc:	f7f6 fe48 	bl	8000390 <__aeabi_uldivmod>
 8009700:	4603      	mov	r3, r0
 8009702:	460c      	mov	r4, r1
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009706:	e389      	b.n	8009e1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009708:	f107 0318 	add.w	r3, r7, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd ff57 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4618      	mov	r0, r3
 8009716:	f04f 0100 	mov.w	r1, #0
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	d067      	beq.n	80097f2 <UART_SetConfig+0xd82>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b01      	cmp	r3, #1
 8009728:	d05e      	beq.n	80097e8 <UART_SetConfig+0xd78>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b02      	cmp	r3, #2
 8009730:	d055      	beq.n	80097de <UART_SetConfig+0xd6e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b03      	cmp	r3, #3
 8009738:	d04c      	beq.n	80097d4 <UART_SetConfig+0xd64>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b04      	cmp	r3, #4
 8009740:	d043      	beq.n	80097ca <UART_SetConfig+0xd5a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b05      	cmp	r3, #5
 8009748:	d03a      	beq.n	80097c0 <UART_SetConfig+0xd50>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	2b06      	cmp	r3, #6
 8009750:	d031      	beq.n	80097b6 <UART_SetConfig+0xd46>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b07      	cmp	r3, #7
 8009758:	d028      	beq.n	80097ac <UART_SetConfig+0xd3c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b08      	cmp	r3, #8
 8009760:	d01f      	beq.n	80097a2 <UART_SetConfig+0xd32>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b09      	cmp	r3, #9
 8009768:	d016      	beq.n	8009798 <UART_SetConfig+0xd28>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b0a      	cmp	r3, #10
 8009770:	d00d      	beq.n	800978e <UART_SetConfig+0xd1e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b0b      	cmp	r3, #11
 8009778:	d104      	bne.n	8009784 <UART_SetConfig+0xd14>
 800977a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977e:	f04f 0400 	mov.w	r4, #0
 8009782:	e03a      	b.n	80097fa <UART_SetConfig+0xd8a>
 8009784:	f04f 0301 	mov.w	r3, #1
 8009788:	f04f 0400 	mov.w	r4, #0
 800978c:	e035      	b.n	80097fa <UART_SetConfig+0xd8a>
 800978e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009792:	f04f 0400 	mov.w	r4, #0
 8009796:	e030      	b.n	80097fa <UART_SetConfig+0xd8a>
 8009798:	f04f 0340 	mov.w	r3, #64	; 0x40
 800979c:	f04f 0400 	mov.w	r4, #0
 80097a0:	e02b      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097a2:	f04f 0320 	mov.w	r3, #32
 80097a6:	f04f 0400 	mov.w	r4, #0
 80097aa:	e026      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097ac:	f04f 0310 	mov.w	r3, #16
 80097b0:	f04f 0400 	mov.w	r4, #0
 80097b4:	e021      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097b6:	f04f 030c 	mov.w	r3, #12
 80097ba:	f04f 0400 	mov.w	r4, #0
 80097be:	e01c      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097c0:	f04f 030a 	mov.w	r3, #10
 80097c4:	f04f 0400 	mov.w	r4, #0
 80097c8:	e017      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097ca:	f04f 0308 	mov.w	r3, #8
 80097ce:	f04f 0400 	mov.w	r4, #0
 80097d2:	e012      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097d4:	f04f 0306 	mov.w	r3, #6
 80097d8:	f04f 0400 	mov.w	r4, #0
 80097dc:	e00d      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097de:	f04f 0304 	mov.w	r3, #4
 80097e2:	f04f 0400 	mov.w	r4, #0
 80097e6:	e008      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097e8:	f04f 0302 	mov.w	r3, #2
 80097ec:	f04f 0400 	mov.w	r4, #0
 80097f0:	e003      	b.n	80097fa <UART_SetConfig+0xd8a>
 80097f2:	f04f 0301 	mov.w	r3, #1
 80097f6:	f04f 0400 	mov.w	r4, #0
 80097fa:	461a      	mov	r2, r3
 80097fc:	4623      	mov	r3, r4
 80097fe:	f7f6 fdc7 	bl	8000390 <__aeabi_uldivmod>
 8009802:	4603      	mov	r3, r0
 8009804:	460c      	mov	r4, r1
 8009806:	4619      	mov	r1, r3
 8009808:	4622      	mov	r2, r4
 800980a:	f04f 0300 	mov.w	r3, #0
 800980e:	f04f 0400 	mov.w	r4, #0
 8009812:	0214      	lsls	r4, r2, #8
 8009814:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009818:	020b      	lsls	r3, r1, #8
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6852      	ldr	r2, [r2, #4]
 800981e:	0852      	lsrs	r2, r2, #1
 8009820:	4611      	mov	r1, r2
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	eb13 0b01 	adds.w	fp, r3, r1
 800982a:	eb44 0c02 	adc.w	ip, r4, r2
 800982e:	4658      	mov	r0, fp
 8009830:	4661      	mov	r1, ip
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f04f 0400 	mov.w	r4, #0
 800983a:	461a      	mov	r2, r3
 800983c:	4623      	mov	r3, r4
 800983e:	f7f6 fda7 	bl	8000390 <__aeabi_uldivmod>
 8009842:	4603      	mov	r3, r0
 8009844:	460c      	mov	r4, r1
 8009846:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009848:	e2e8      	b.n	8009e1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984a:	f107 030c 	add.w	r3, r7, #12
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe f802 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4618      	mov	r0, r3
 8009858:	f04f 0100 	mov.w	r1, #0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d067      	beq.n	8009934 <UART_SetConfig+0xec4>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2b01      	cmp	r3, #1
 800986a:	d05e      	beq.n	800992a <UART_SetConfig+0xeba>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b02      	cmp	r3, #2
 8009872:	d055      	beq.n	8009920 <UART_SetConfig+0xeb0>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2b03      	cmp	r3, #3
 800987a:	d04c      	beq.n	8009916 <UART_SetConfig+0xea6>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	2b04      	cmp	r3, #4
 8009882:	d043      	beq.n	800990c <UART_SetConfig+0xe9c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b05      	cmp	r3, #5
 800988a:	d03a      	beq.n	8009902 <UART_SetConfig+0xe92>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b06      	cmp	r3, #6
 8009892:	d031      	beq.n	80098f8 <UART_SetConfig+0xe88>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	2b07      	cmp	r3, #7
 800989a:	d028      	beq.n	80098ee <UART_SetConfig+0xe7e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d01f      	beq.n	80098e4 <UART_SetConfig+0xe74>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d016      	beq.n	80098da <UART_SetConfig+0xe6a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	2b0a      	cmp	r3, #10
 80098b2:	d00d      	beq.n	80098d0 <UART_SetConfig+0xe60>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	2b0b      	cmp	r3, #11
 80098ba:	d104      	bne.n	80098c6 <UART_SetConfig+0xe56>
 80098bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c0:	f04f 0400 	mov.w	r4, #0
 80098c4:	e03a      	b.n	800993c <UART_SetConfig+0xecc>
 80098c6:	f04f 0301 	mov.w	r3, #1
 80098ca:	f04f 0400 	mov.w	r4, #0
 80098ce:	e035      	b.n	800993c <UART_SetConfig+0xecc>
 80098d0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80098d4:	f04f 0400 	mov.w	r4, #0
 80098d8:	e030      	b.n	800993c <UART_SetConfig+0xecc>
 80098da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80098de:	f04f 0400 	mov.w	r4, #0
 80098e2:	e02b      	b.n	800993c <UART_SetConfig+0xecc>
 80098e4:	f04f 0320 	mov.w	r3, #32
 80098e8:	f04f 0400 	mov.w	r4, #0
 80098ec:	e026      	b.n	800993c <UART_SetConfig+0xecc>
 80098ee:	f04f 0310 	mov.w	r3, #16
 80098f2:	f04f 0400 	mov.w	r4, #0
 80098f6:	e021      	b.n	800993c <UART_SetConfig+0xecc>
 80098f8:	f04f 030c 	mov.w	r3, #12
 80098fc:	f04f 0400 	mov.w	r4, #0
 8009900:	e01c      	b.n	800993c <UART_SetConfig+0xecc>
 8009902:	f04f 030a 	mov.w	r3, #10
 8009906:	f04f 0400 	mov.w	r4, #0
 800990a:	e017      	b.n	800993c <UART_SetConfig+0xecc>
 800990c:	f04f 0308 	mov.w	r3, #8
 8009910:	f04f 0400 	mov.w	r4, #0
 8009914:	e012      	b.n	800993c <UART_SetConfig+0xecc>
 8009916:	f04f 0306 	mov.w	r3, #6
 800991a:	f04f 0400 	mov.w	r4, #0
 800991e:	e00d      	b.n	800993c <UART_SetConfig+0xecc>
 8009920:	f04f 0304 	mov.w	r3, #4
 8009924:	f04f 0400 	mov.w	r4, #0
 8009928:	e008      	b.n	800993c <UART_SetConfig+0xecc>
 800992a:	f04f 0302 	mov.w	r3, #2
 800992e:	f04f 0400 	mov.w	r4, #0
 8009932:	e003      	b.n	800993c <UART_SetConfig+0xecc>
 8009934:	f04f 0301 	mov.w	r3, #1
 8009938:	f04f 0400 	mov.w	r4, #0
 800993c:	461a      	mov	r2, r3
 800993e:	4623      	mov	r3, r4
 8009940:	f7f6 fd26 	bl	8000390 <__aeabi_uldivmod>
 8009944:	4603      	mov	r3, r0
 8009946:	460c      	mov	r4, r1
 8009948:	4619      	mov	r1, r3
 800994a:	4622      	mov	r2, r4
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	f04f 0400 	mov.w	r4, #0
 8009954:	0214      	lsls	r4, r2, #8
 8009956:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800995a:	020b      	lsls	r3, r1, #8
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	6852      	ldr	r2, [r2, #4]
 8009960:	0852      	lsrs	r2, r2, #1
 8009962:	4611      	mov	r1, r2
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	eb13 0b01 	adds.w	fp, r3, r1
 800996c:	eb44 0c02 	adc.w	ip, r4, r2
 8009970:	4658      	mov	r0, fp
 8009972:	4661      	mov	r1, ip
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f04f 0400 	mov.w	r4, #0
 800997c:	461a      	mov	r2, r3
 800997e:	4623      	mov	r3, r4
 8009980:	f7f6 fd06 	bl	8000390 <__aeabi_uldivmod>
 8009984:	4603      	mov	r3, r0
 8009986:	460c      	mov	r4, r1
 8009988:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800998a:	e247      	b.n	8009e1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800998c:	4b96      	ldr	r3, [pc, #600]	; (8009be8 <UART_SetConfig+0x1178>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80a3 	beq.w	8009ae0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999a:	4b93      	ldr	r3, [pc, #588]	; (8009be8 <UART_SetConfig+0x1178>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	08db      	lsrs	r3, r3, #3
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	4a91      	ldr	r2, [pc, #580]	; (8009bec <UART_SetConfig+0x117c>)
 80099a6:	fa22 f303 	lsr.w	r3, r2, r3
 80099aa:	4618      	mov	r0, r3
 80099ac:	f04f 0100 	mov.w	r1, #0
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d067      	beq.n	8009a88 <UART_SetConfig+0x1018>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d05e      	beq.n	8009a7e <UART_SetConfig+0x100e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d055      	beq.n	8009a74 <UART_SetConfig+0x1004>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d04c      	beq.n	8009a6a <UART_SetConfig+0xffa>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d043      	beq.n	8009a60 <UART_SetConfig+0xff0>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d03a      	beq.n	8009a56 <UART_SetConfig+0xfe6>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	2b06      	cmp	r3, #6
 80099e6:	d031      	beq.n	8009a4c <UART_SetConfig+0xfdc>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	d028      	beq.n	8009a42 <UART_SetConfig+0xfd2>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d01f      	beq.n	8009a38 <UART_SetConfig+0xfc8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	2b09      	cmp	r3, #9
 80099fe:	d016      	beq.n	8009a2e <UART_SetConfig+0xfbe>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b0a      	cmp	r3, #10
 8009a06:	d00d      	beq.n	8009a24 <UART_SetConfig+0xfb4>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2b0b      	cmp	r3, #11
 8009a0e:	d104      	bne.n	8009a1a <UART_SetConfig+0xfaa>
 8009a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a14:	f04f 0400 	mov.w	r4, #0
 8009a18:	e03a      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a1a:	f04f 0301 	mov.w	r3, #1
 8009a1e:	f04f 0400 	mov.w	r4, #0
 8009a22:	e035      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a24:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009a28:	f04f 0400 	mov.w	r4, #0
 8009a2c:	e030      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009a32:	f04f 0400 	mov.w	r4, #0
 8009a36:	e02b      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a38:	f04f 0320 	mov.w	r3, #32
 8009a3c:	f04f 0400 	mov.w	r4, #0
 8009a40:	e026      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a42:	f04f 0310 	mov.w	r3, #16
 8009a46:	f04f 0400 	mov.w	r4, #0
 8009a4a:	e021      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a4c:	f04f 030c 	mov.w	r3, #12
 8009a50:	f04f 0400 	mov.w	r4, #0
 8009a54:	e01c      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a56:	f04f 030a 	mov.w	r3, #10
 8009a5a:	f04f 0400 	mov.w	r4, #0
 8009a5e:	e017      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a60:	f04f 0308 	mov.w	r3, #8
 8009a64:	f04f 0400 	mov.w	r4, #0
 8009a68:	e012      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a6a:	f04f 0306 	mov.w	r3, #6
 8009a6e:	f04f 0400 	mov.w	r4, #0
 8009a72:	e00d      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a74:	f04f 0304 	mov.w	r3, #4
 8009a78:	f04f 0400 	mov.w	r4, #0
 8009a7c:	e008      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a7e:	f04f 0302 	mov.w	r3, #2
 8009a82:	f04f 0400 	mov.w	r4, #0
 8009a86:	e003      	b.n	8009a90 <UART_SetConfig+0x1020>
 8009a88:	f04f 0301 	mov.w	r3, #1
 8009a8c:	f04f 0400 	mov.w	r4, #0
 8009a90:	461a      	mov	r2, r3
 8009a92:	4623      	mov	r3, r4
 8009a94:	f7f6 fc7c 	bl	8000390 <__aeabi_uldivmod>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	f04f 0400 	mov.w	r4, #0
 8009aa8:	0214      	lsls	r4, r2, #8
 8009aaa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009aae:	020b      	lsls	r3, r1, #8
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6852      	ldr	r2, [r2, #4]
 8009ab4:	0852      	lsrs	r2, r2, #1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	eb13 0b01 	adds.w	fp, r3, r1
 8009ac0:	eb44 0c02 	adc.w	ip, r4, r2
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	4661      	mov	r1, ip
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f04f 0400 	mov.w	r4, #0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4623      	mov	r3, r4
 8009ad4:	f7f6 fc5c 	bl	8000390 <__aeabi_uldivmod>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8009ade:	e19d      	b.n	8009e1c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d05b      	beq.n	8009ba0 <UART_SetConfig+0x1130>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d053      	beq.n	8009b98 <UART_SetConfig+0x1128>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d04b      	beq.n	8009b90 <UART_SetConfig+0x1120>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d043      	beq.n	8009b88 <UART_SetConfig+0x1118>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d03b      	beq.n	8009b80 <UART_SetConfig+0x1110>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b05      	cmp	r3, #5
 8009b0e:	d033      	beq.n	8009b78 <UART_SetConfig+0x1108>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b06      	cmp	r3, #6
 8009b16:	d02b      	beq.n	8009b70 <UART_SetConfig+0x1100>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b07      	cmp	r3, #7
 8009b1e:	d023      	beq.n	8009b68 <UART_SetConfig+0x10f8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d01b      	beq.n	8009b60 <UART_SetConfig+0x10f0>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d013      	beq.n	8009b58 <UART_SetConfig+0x10e8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b0a      	cmp	r3, #10
 8009b36:	d00b      	beq.n	8009b50 <UART_SetConfig+0x10e0>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	2b0b      	cmp	r3, #11
 8009b3e:	d103      	bne.n	8009b48 <UART_SetConfig+0x10d8>
 8009b40:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <UART_SetConfig+0x117c>)
 8009b42:	f04f 0400 	mov.w	r4, #0
 8009b46:	e02e      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b48:	4b29      	ldr	r3, [pc, #164]	; (8009bf0 <UART_SetConfig+0x1180>)
 8009b4a:	f04f 0403 	mov.w	r4, #3
 8009b4e:	e02a      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <UART_SetConfig+0x1184>)
 8009b52:	f04f 0400 	mov.w	r4, #0
 8009b56:	e026      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b58:	4b27      	ldr	r3, [pc, #156]	; (8009bf8 <UART_SetConfig+0x1188>)
 8009b5a:	f04f 0400 	mov.w	r4, #0
 8009b5e:	e022      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b60:	4b26      	ldr	r3, [pc, #152]	; (8009bfc <UART_SetConfig+0x118c>)
 8009b62:	f04f 0400 	mov.w	r4, #0
 8009b66:	e01e      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <UART_SetConfig+0x1190>)
 8009b6a:	f04f 0400 	mov.w	r4, #0
 8009b6e:	e01a      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b70:	a419      	add	r4, pc, #100	; (adr r4, 8009bd8 <UART_SetConfig+0x1168>)
 8009b72:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b76:	e016      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b78:	4b22      	ldr	r3, [pc, #136]	; (8009c04 <UART_SetConfig+0x1194>)
 8009b7a:	f04f 0400 	mov.w	r4, #0
 8009b7e:	e012      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b80:	4b21      	ldr	r3, [pc, #132]	; (8009c08 <UART_SetConfig+0x1198>)
 8009b82:	f04f 0400 	mov.w	r4, #0
 8009b86:	e00e      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b88:	a415      	add	r4, pc, #84	; (adr r4, 8009be0 <UART_SetConfig+0x1170>)
 8009b8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b8e:	e00a      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b90:	4b1e      	ldr	r3, [pc, #120]	; (8009c0c <UART_SetConfig+0x119c>)
 8009b92:	f04f 0400 	mov.w	r4, #0
 8009b96:	e006      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009b98:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <UART_SetConfig+0x11a0>)
 8009b9a:	f04f 0401 	mov.w	r4, #1
 8009b9e:	e002      	b.n	8009ba6 <UART_SetConfig+0x1136>
 8009ba0:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <UART_SetConfig+0x1180>)
 8009ba2:	f04f 0403 	mov.w	r4, #3
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6852      	ldr	r2, [r2, #4]
 8009baa:	0852      	lsrs	r2, r2, #1
 8009bac:	4611      	mov	r1, r2
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	eb13 0b01 	adds.w	fp, r3, r1
 8009bb6:	eb44 0c02 	adc.w	ip, r4, r2
 8009bba:	4658      	mov	r0, fp
 8009bbc:	4661      	mov	r1, ip
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f04f 0400 	mov.w	r4, #0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4623      	mov	r3, r4
 8009bca:	f7f6 fbe1 	bl	8000390 <__aeabi_uldivmod>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009bd4:	e122      	b.n	8009e1c <UART_SetConfig+0x13ac>
 8009bd6:	bf00      	nop
 8009bd8:	51615500 	.word	0x51615500
 8009bdc:	00000000 	.word	0x00000000
 8009be0:	a2c2aa00 	.word	0xa2c2aa00
 8009be4:	00000000 	.word	0x00000000
 8009be8:	58024400 	.word	0x58024400
 8009bec:	03d09000 	.word	0x03d09000
 8009bf0:	d0900000 	.word	0xd0900000
 8009bf4:	07a12000 	.word	0x07a12000
 8009bf8:	0f424000 	.word	0x0f424000
 8009bfc:	1e848000 	.word	0x1e848000
 8009c00:	3d090000 	.word	0x3d090000
 8009c04:	61a80000 	.word	0x61a80000
 8009c08:	7a120000 	.word	0x7a120000
 8009c0c:	f4240000 	.word	0xf4240000
 8009c10:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d05b      	beq.n	8009cd4 <UART_SetConfig+0x1264>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d053      	beq.n	8009ccc <UART_SetConfig+0x125c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d04b      	beq.n	8009cc4 <UART_SetConfig+0x1254>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d043      	beq.n	8009cbc <UART_SetConfig+0x124c>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d03b      	beq.n	8009cb4 <UART_SetConfig+0x1244>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b05      	cmp	r3, #5
 8009c42:	d033      	beq.n	8009cac <UART_SetConfig+0x123c>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b06      	cmp	r3, #6
 8009c4a:	d02b      	beq.n	8009ca4 <UART_SetConfig+0x1234>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	d023      	beq.n	8009c9c <UART_SetConfig+0x122c>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d01b      	beq.n	8009c94 <UART_SetConfig+0x1224>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b09      	cmp	r3, #9
 8009c62:	d013      	beq.n	8009c8c <UART_SetConfig+0x121c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	2b0a      	cmp	r3, #10
 8009c6a:	d00b      	beq.n	8009c84 <UART_SetConfig+0x1214>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b0b      	cmp	r3, #11
 8009c72:	d103      	bne.n	8009c7c <UART_SetConfig+0x120c>
 8009c74:	4bc0      	ldr	r3, [pc, #768]	; (8009f78 <UART_SetConfig+0x1508>)
 8009c76:	f04f 0400 	mov.w	r4, #0
 8009c7a:	e02e      	b.n	8009cda <UART_SetConfig+0x126a>
 8009c7c:	4bbf      	ldr	r3, [pc, #764]	; (8009f7c <UART_SetConfig+0x150c>)
 8009c7e:	f04f 0400 	mov.w	r4, #0
 8009c82:	e02a      	b.n	8009cda <UART_SetConfig+0x126a>
 8009c84:	4bbe      	ldr	r3, [pc, #760]	; (8009f80 <UART_SetConfig+0x1510>)
 8009c86:	f04f 0400 	mov.w	r4, #0
 8009c8a:	e026      	b.n	8009cda <UART_SetConfig+0x126a>
 8009c8c:	4bbd      	ldr	r3, [pc, #756]	; (8009f84 <UART_SetConfig+0x1514>)
 8009c8e:	f04f 0400 	mov.w	r4, #0
 8009c92:	e022      	b.n	8009cda <UART_SetConfig+0x126a>
 8009c94:	4bbc      	ldr	r3, [pc, #752]	; (8009f88 <UART_SetConfig+0x1518>)
 8009c96:	f04f 0400 	mov.w	r4, #0
 8009c9a:	e01e      	b.n	8009cda <UART_SetConfig+0x126a>
 8009c9c:	4bbb      	ldr	r3, [pc, #748]	; (8009f8c <UART_SetConfig+0x151c>)
 8009c9e:	f04f 0400 	mov.w	r4, #0
 8009ca2:	e01a      	b.n	8009cda <UART_SetConfig+0x126a>
 8009ca4:	a4b0      	add	r4, pc, #704	; (adr r4, 8009f68 <UART_SetConfig+0x14f8>)
 8009ca6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009caa:	e016      	b.n	8009cda <UART_SetConfig+0x126a>
 8009cac:	4bb8      	ldr	r3, [pc, #736]	; (8009f90 <UART_SetConfig+0x1520>)
 8009cae:	f04f 0400 	mov.w	r4, #0
 8009cb2:	e012      	b.n	8009cda <UART_SetConfig+0x126a>
 8009cb4:	4bb7      	ldr	r3, [pc, #732]	; (8009f94 <UART_SetConfig+0x1524>)
 8009cb6:	f04f 0400 	mov.w	r4, #0
 8009cba:	e00e      	b.n	8009cda <UART_SetConfig+0x126a>
 8009cbc:	a4ac      	add	r4, pc, #688	; (adr r4, 8009f70 <UART_SetConfig+0x1500>)
 8009cbe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009cc2:	e00a      	b.n	8009cda <UART_SetConfig+0x126a>
 8009cc4:	4bb4      	ldr	r3, [pc, #720]	; (8009f98 <UART_SetConfig+0x1528>)
 8009cc6:	f04f 0400 	mov.w	r4, #0
 8009cca:	e006      	b.n	8009cda <UART_SetConfig+0x126a>
 8009ccc:	4bb3      	ldr	r3, [pc, #716]	; (8009f9c <UART_SetConfig+0x152c>)
 8009cce:	f04f 0400 	mov.w	r4, #0
 8009cd2:	e002      	b.n	8009cda <UART_SetConfig+0x126a>
 8009cd4:	4ba9      	ldr	r3, [pc, #676]	; (8009f7c <UART_SetConfig+0x150c>)
 8009cd6:	f04f 0400 	mov.w	r4, #0
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	6852      	ldr	r2, [r2, #4]
 8009cde:	0852      	lsrs	r2, r2, #1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	eb13 0b01 	adds.w	fp, r3, r1
 8009cea:	eb44 0c02 	adc.w	ip, r4, r2
 8009cee:	4658      	mov	r0, fp
 8009cf0:	4661      	mov	r1, ip
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f04f 0400 	mov.w	r4, #0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7f6 fb47 	bl	8000390 <__aeabi_uldivmod>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009d08:	e088      	b.n	8009e1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d064      	beq.n	8009ddc <UART_SetConfig+0x136c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d05b      	beq.n	8009dd2 <UART_SetConfig+0x1362>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d052      	beq.n	8009dc8 <UART_SetConfig+0x1358>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d04a      	beq.n	8009dc0 <UART_SetConfig+0x1350>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d041      	beq.n	8009db6 <UART_SetConfig+0x1346>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	d039      	beq.n	8009dae <UART_SetConfig+0x133e>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b06      	cmp	r3, #6
 8009d40:	d031      	beq.n	8009da6 <UART_SetConfig+0x1336>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b07      	cmp	r3, #7
 8009d48:	d028      	beq.n	8009d9c <UART_SetConfig+0x132c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d01f      	beq.n	8009d92 <UART_SetConfig+0x1322>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d016      	beq.n	8009d88 <UART_SetConfig+0x1318>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b0a      	cmp	r3, #10
 8009d60:	d00d      	beq.n	8009d7e <UART_SetConfig+0x130e>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	2b0b      	cmp	r3, #11
 8009d68:	d104      	bne.n	8009d74 <UART_SetConfig+0x1304>
 8009d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6e:	f04f 0400 	mov.w	r4, #0
 8009d72:	e037      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009d74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d78:	f04f 0400 	mov.w	r4, #0
 8009d7c:	e032      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d82:	f04f 0400 	mov.w	r4, #0
 8009d86:	e02d      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d8c:	f04f 0400 	mov.w	r4, #0
 8009d90:	e028      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009d92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d96:	f04f 0400 	mov.w	r4, #0
 8009d9a:	e023      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009d9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009da0:	f04f 0400 	mov.w	r4, #0
 8009da4:	e01e      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009da6:	4b7e      	ldr	r3, [pc, #504]	; (8009fa0 <UART_SetConfig+0x1530>)
 8009da8:	f04f 0400 	mov.w	r4, #0
 8009dac:	e01a      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009dae:	4b7d      	ldr	r3, [pc, #500]	; (8009fa4 <UART_SetConfig+0x1534>)
 8009db0:	f04f 0400 	mov.w	r4, #0
 8009db4:	e016      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009db6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009dba:	f04f 0400 	mov.w	r4, #0
 8009dbe:	e011      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009dc0:	4b79      	ldr	r3, [pc, #484]	; (8009fa8 <UART_SetConfig+0x1538>)
 8009dc2:	f04f 0400 	mov.w	r4, #0
 8009dc6:	e00d      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dcc:	f04f 0400 	mov.w	r4, #0
 8009dd0:	e008      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dd6:	f04f 0400 	mov.w	r4, #0
 8009dda:	e003      	b.n	8009de4 <UART_SetConfig+0x1374>
 8009ddc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009de0:	f04f 0400 	mov.w	r4, #0
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6852      	ldr	r2, [r2, #4]
 8009de8:	0852      	lsrs	r2, r2, #1
 8009dea:	4611      	mov	r1, r2
 8009dec:	f04f 0200 	mov.w	r2, #0
 8009df0:	eb13 0b01 	adds.w	fp, r3, r1
 8009df4:	eb44 0c02 	adc.w	ip, r4, r2
 8009df8:	4658      	mov	r0, fp
 8009dfa:	4661      	mov	r1, ip
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f04f 0400 	mov.w	r4, #0
 8009e04:	461a      	mov	r2, r3
 8009e06:	4623      	mov	r3, r4
 8009e08:	f7f6 fac2 	bl	8000390 <__aeabi_uldivmod>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e12:	e003      	b.n	8009e1c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009e1a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e22:	d309      	bcc.n	8009e38 <UART_SetConfig+0x13c8>
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e2a:	d205      	bcs.n	8009e38 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	f000 bf85 	b.w	800ad42 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	f000 bf80 	b.w	800ad42 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e4a:	f040 83da 	bne.w	800a602 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009e4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e52:	2b40      	cmp	r3, #64	; 0x40
 8009e54:	f200 83b3 	bhi.w	800a5be <UART_SetConfig+0x1b4e>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x13f0>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009fad 	.word	0x08009fad
 8009e64:	0800a065 	.word	0x0800a065
 8009e68:	0800a5bf 	.word	0x0800a5bf
 8009e6c:	0800a5bf 	.word	0x0800a5bf
 8009e70:	0800a11d 	.word	0x0800a11d
 8009e74:	0800a5bf 	.word	0x0800a5bf
 8009e78:	0800a5bf 	.word	0x0800a5bf
 8009e7c:	0800a5bf 	.word	0x0800a5bf
 8009e80:	0800a1d9 	.word	0x0800a1d9
 8009e84:	0800a5bf 	.word	0x0800a5bf
 8009e88:	0800a5bf 	.word	0x0800a5bf
 8009e8c:	0800a5bf 	.word	0x0800a5bf
 8009e90:	0800a5bf 	.word	0x0800a5bf
 8009e94:	0800a5bf 	.word	0x0800a5bf
 8009e98:	0800a5bf 	.word	0x0800a5bf
 8009e9c:	0800a5bf 	.word	0x0800a5bf
 8009ea0:	0800a295 	.word	0x0800a295
 8009ea4:	0800a5bf 	.word	0x0800a5bf
 8009ea8:	0800a5bf 	.word	0x0800a5bf
 8009eac:	0800a5bf 	.word	0x0800a5bf
 8009eb0:	0800a5bf 	.word	0x0800a5bf
 8009eb4:	0800a5bf 	.word	0x0800a5bf
 8009eb8:	0800a5bf 	.word	0x0800a5bf
 8009ebc:	0800a5bf 	.word	0x0800a5bf
 8009ec0:	0800a5bf 	.word	0x0800a5bf
 8009ec4:	0800a5bf 	.word	0x0800a5bf
 8009ec8:	0800a5bf 	.word	0x0800a5bf
 8009ecc:	0800a5bf 	.word	0x0800a5bf
 8009ed0:	0800a5bf 	.word	0x0800a5bf
 8009ed4:	0800a5bf 	.word	0x0800a5bf
 8009ed8:	0800a5bf 	.word	0x0800a5bf
 8009edc:	0800a5bf 	.word	0x0800a5bf
 8009ee0:	0800a407 	.word	0x0800a407
 8009ee4:	0800a5bf 	.word	0x0800a5bf
 8009ee8:	0800a5bf 	.word	0x0800a5bf
 8009eec:	0800a5bf 	.word	0x0800a5bf
 8009ef0:	0800a5bf 	.word	0x0800a5bf
 8009ef4:	0800a5bf 	.word	0x0800a5bf
 8009ef8:	0800a5bf 	.word	0x0800a5bf
 8009efc:	0800a5bf 	.word	0x0800a5bf
 8009f00:	0800a5bf 	.word	0x0800a5bf
 8009f04:	0800a5bf 	.word	0x0800a5bf
 8009f08:	0800a5bf 	.word	0x0800a5bf
 8009f0c:	0800a5bf 	.word	0x0800a5bf
 8009f10:	0800a5bf 	.word	0x0800a5bf
 8009f14:	0800a5bf 	.word	0x0800a5bf
 8009f18:	0800a5bf 	.word	0x0800a5bf
 8009f1c:	0800a5bf 	.word	0x0800a5bf
 8009f20:	0800a5bf 	.word	0x0800a5bf
 8009f24:	0800a5bf 	.word	0x0800a5bf
 8009f28:	0800a5bf 	.word	0x0800a5bf
 8009f2c:	0800a5bf 	.word	0x0800a5bf
 8009f30:	0800a5bf 	.word	0x0800a5bf
 8009f34:	0800a5bf 	.word	0x0800a5bf
 8009f38:	0800a5bf 	.word	0x0800a5bf
 8009f3c:	0800a5bf 	.word	0x0800a5bf
 8009f40:	0800a5bf 	.word	0x0800a5bf
 8009f44:	0800a5bf 	.word	0x0800a5bf
 8009f48:	0800a5bf 	.word	0x0800a5bf
 8009f4c:	0800a5bf 	.word	0x0800a5bf
 8009f50:	0800a5bf 	.word	0x0800a5bf
 8009f54:	0800a5bf 	.word	0x0800a5bf
 8009f58:	0800a5bf 	.word	0x0800a5bf
 8009f5c:	0800a5bf 	.word	0x0800a5bf
 8009f60:	0800a4fd 	.word	0x0800a4fd
 8009f64:	f3af 8000 	nop.w
 8009f68:	05161500 	.word	0x05161500
 8009f6c:	00000000 	.word	0x00000000
 8009f70:	0a2c2a00 	.word	0x0a2c2a00
 8009f74:	00000000 	.word	0x00000000
 8009f78:	003d0900 	.word	0x003d0900
 8009f7c:	3d090000 	.word	0x3d090000
 8009f80:	007a1200 	.word	0x007a1200
 8009f84:	00f42400 	.word	0x00f42400
 8009f88:	01e84800 	.word	0x01e84800
 8009f8c:	03d09000 	.word	0x03d09000
 8009f90:	061a8000 	.word	0x061a8000
 8009f94:	07a12000 	.word	0x07a12000
 8009f98:	0f424000 	.word	0x0f424000
 8009f9c:	1e848000 	.word	0x1e848000
 8009fa0:	000aaa00 	.word	0x000aaa00
 8009fa4:	000ccc00 	.word	0x000ccc00
 8009fa8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fac:	f7fc f970 	bl	8006290 <HAL_RCC_GetPCLK1Freq>
 8009fb0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d044      	beq.n	800a044 <UART_SetConfig+0x15d4>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d03e      	beq.n	800a040 <UART_SetConfig+0x15d0>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d038      	beq.n	800a03c <UART_SetConfig+0x15cc>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d032      	beq.n	800a038 <UART_SetConfig+0x15c8>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d02c      	beq.n	800a034 <UART_SetConfig+0x15c4>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d026      	beq.n	800a030 <UART_SetConfig+0x15c0>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b06      	cmp	r3, #6
 8009fe8:	d020      	beq.n	800a02c <UART_SetConfig+0x15bc>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	d01a      	beq.n	800a028 <UART_SetConfig+0x15b8>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d014      	beq.n	800a024 <UART_SetConfig+0x15b4>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d00e      	beq.n	800a020 <UART_SetConfig+0x15b0>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b0a      	cmp	r3, #10
 800a008:	d008      	beq.n	800a01c <UART_SetConfig+0x15ac>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b0b      	cmp	r3, #11
 800a010:	d102      	bne.n	800a018 <UART_SetConfig+0x15a8>
 800a012:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a016:	e016      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a018:	2301      	movs	r3, #1
 800a01a:	e014      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a01c:	2380      	movs	r3, #128	; 0x80
 800a01e:	e012      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a020:	2340      	movs	r3, #64	; 0x40
 800a022:	e010      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a024:	2320      	movs	r3, #32
 800a026:	e00e      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a028:	2310      	movs	r3, #16
 800a02a:	e00c      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a02c:	230c      	movs	r3, #12
 800a02e:	e00a      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a030:	230a      	movs	r3, #10
 800a032:	e008      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a034:	2308      	movs	r3, #8
 800a036:	e006      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a038:	2306      	movs	r3, #6
 800a03a:	e004      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a03c:	2304      	movs	r3, #4
 800a03e:	e002      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a040:	2302      	movs	r3, #2
 800a042:	e000      	b.n	800a046 <UART_SetConfig+0x15d6>
 800a044:	2301      	movs	r3, #1
 800a046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a048:	fbb2 f3f3 	udiv	r3, r2, r3
 800a04c:	005a      	lsls	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	441a      	add	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05e:	b29b      	uxth	r3, r3
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a062:	e2b0      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a064:	f7fc f92a 	bl	80062bc <HAL_RCC_GetPCLK2Freq>
 800a068:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d044      	beq.n	800a0fc <UART_SetConfig+0x168c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	2b01      	cmp	r3, #1
 800a078:	d03e      	beq.n	800a0f8 <UART_SetConfig+0x1688>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d038      	beq.n	800a0f4 <UART_SetConfig+0x1684>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b03      	cmp	r3, #3
 800a088:	d032      	beq.n	800a0f0 <UART_SetConfig+0x1680>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d02c      	beq.n	800a0ec <UART_SetConfig+0x167c>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b05      	cmp	r3, #5
 800a098:	d026      	beq.n	800a0e8 <UART_SetConfig+0x1678>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d020      	beq.n	800a0e4 <UART_SetConfig+0x1674>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	d01a      	beq.n	800a0e0 <UART_SetConfig+0x1670>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	d014      	beq.n	800a0dc <UART_SetConfig+0x166c>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b09      	cmp	r3, #9
 800a0b8:	d00e      	beq.n	800a0d8 <UART_SetConfig+0x1668>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b0a      	cmp	r3, #10
 800a0c0:	d008      	beq.n	800a0d4 <UART_SetConfig+0x1664>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b0b      	cmp	r3, #11
 800a0c8:	d102      	bne.n	800a0d0 <UART_SetConfig+0x1660>
 800a0ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0ce:	e016      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e014      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0d4:	2380      	movs	r3, #128	; 0x80
 800a0d6:	e012      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	e010      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0dc:	2320      	movs	r3, #32
 800a0de:	e00e      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	e00c      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	e00a      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0e8:	230a      	movs	r3, #10
 800a0ea:	e008      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	e006      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0f0:	2306      	movs	r3, #6
 800a0f2:	e004      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	e002      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e000      	b.n	800a0fe <UART_SetConfig+0x168e>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a100:	fbb2 f3f3 	udiv	r3, r2, r3
 800a104:	005a      	lsls	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	fbb2 f3f3 	udiv	r3, r2, r3
 800a116:	b29b      	uxth	r3, r3
 800a118:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a11a:	e254      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a11c:	f107 0318 	add.w	r3, r7, #24
 800a120:	4618      	mov	r0, r3
 800a122:	f7fd fa4d 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d044      	beq.n	800a1ba <UART_SetConfig+0x174a>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	2b01      	cmp	r3, #1
 800a136:	d03e      	beq.n	800a1b6 <UART_SetConfig+0x1746>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d038      	beq.n	800a1b2 <UART_SetConfig+0x1742>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	2b03      	cmp	r3, #3
 800a146:	d032      	beq.n	800a1ae <UART_SetConfig+0x173e>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d02c      	beq.n	800a1aa <UART_SetConfig+0x173a>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b05      	cmp	r3, #5
 800a156:	d026      	beq.n	800a1a6 <UART_SetConfig+0x1736>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	d020      	beq.n	800a1a2 <UART_SetConfig+0x1732>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	2b07      	cmp	r3, #7
 800a166:	d01a      	beq.n	800a19e <UART_SetConfig+0x172e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d014      	beq.n	800a19a <UART_SetConfig+0x172a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	2b09      	cmp	r3, #9
 800a176:	d00e      	beq.n	800a196 <UART_SetConfig+0x1726>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2b0a      	cmp	r3, #10
 800a17e:	d008      	beq.n	800a192 <UART_SetConfig+0x1722>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	2b0b      	cmp	r3, #11
 800a186:	d102      	bne.n	800a18e <UART_SetConfig+0x171e>
 800a188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a18c:	e016      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a18e:	2301      	movs	r3, #1
 800a190:	e014      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	e012      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	e010      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a19a:	2320      	movs	r3, #32
 800a19c:	e00e      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a19e:	2310      	movs	r3, #16
 800a1a0:	e00c      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	e00a      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	e008      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	e006      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1ae:	2306      	movs	r3, #6
 800a1b0:	e004      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1b2:	2304      	movs	r3, #4
 800a1b4:	e002      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e000      	b.n	800a1bc <UART_SetConfig+0x174c>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c0:	005a      	lsls	r2, r3, #1
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	441a      	add	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1d6:	e1f6      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1d8:	f107 030c 	add.w	r3, r7, #12
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fd fb3b 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d044      	beq.n	800a276 <UART_SetConfig+0x1806>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d03e      	beq.n	800a272 <UART_SetConfig+0x1802>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d038      	beq.n	800a26e <UART_SetConfig+0x17fe>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	2b03      	cmp	r3, #3
 800a202:	d032      	beq.n	800a26a <UART_SetConfig+0x17fa>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d02c      	beq.n	800a266 <UART_SetConfig+0x17f6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	2b05      	cmp	r3, #5
 800a212:	d026      	beq.n	800a262 <UART_SetConfig+0x17f2>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	2b06      	cmp	r3, #6
 800a21a:	d020      	beq.n	800a25e <UART_SetConfig+0x17ee>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b07      	cmp	r3, #7
 800a222:	d01a      	beq.n	800a25a <UART_SetConfig+0x17ea>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d014      	beq.n	800a256 <UART_SetConfig+0x17e6>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	2b09      	cmp	r3, #9
 800a232:	d00e      	beq.n	800a252 <UART_SetConfig+0x17e2>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b0a      	cmp	r3, #10
 800a23a:	d008      	beq.n	800a24e <UART_SetConfig+0x17de>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	2b0b      	cmp	r3, #11
 800a242:	d102      	bne.n	800a24a <UART_SetConfig+0x17da>
 800a244:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a248:	e016      	b.n	800a278 <UART_SetConfig+0x1808>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e014      	b.n	800a278 <UART_SetConfig+0x1808>
 800a24e:	2380      	movs	r3, #128	; 0x80
 800a250:	e012      	b.n	800a278 <UART_SetConfig+0x1808>
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	e010      	b.n	800a278 <UART_SetConfig+0x1808>
 800a256:	2320      	movs	r3, #32
 800a258:	e00e      	b.n	800a278 <UART_SetConfig+0x1808>
 800a25a:	2310      	movs	r3, #16
 800a25c:	e00c      	b.n	800a278 <UART_SetConfig+0x1808>
 800a25e:	230c      	movs	r3, #12
 800a260:	e00a      	b.n	800a278 <UART_SetConfig+0x1808>
 800a262:	230a      	movs	r3, #10
 800a264:	e008      	b.n	800a278 <UART_SetConfig+0x1808>
 800a266:	2308      	movs	r3, #8
 800a268:	e006      	b.n	800a278 <UART_SetConfig+0x1808>
 800a26a:	2306      	movs	r3, #6
 800a26c:	e004      	b.n	800a278 <UART_SetConfig+0x1808>
 800a26e:	2304      	movs	r3, #4
 800a270:	e002      	b.n	800a278 <UART_SetConfig+0x1808>
 800a272:	2302      	movs	r3, #2
 800a274:	e000      	b.n	800a278 <UART_SetConfig+0x1808>
 800a276:	2301      	movs	r3, #1
 800a278:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	b29b      	uxth	r3, r3
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a292:	e198      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a294:	4b87      	ldr	r3, [pc, #540]	; (800a4b4 <UART_SetConfig+0x1a44>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0320 	and.w	r3, r3, #32
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d05e      	beq.n	800a35e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a0:	4b84      	ldr	r3, [pc, #528]	; (800a4b4 <UART_SetConfig+0x1a44>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	08db      	lsrs	r3, r3, #3
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	4a83      	ldr	r2, [pc, #524]	; (800a4b8 <UART_SetConfig+0x1a48>)
 800a2ac:	40da      	lsrs	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d044      	beq.n	800a340 <UART_SetConfig+0x18d0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d03e      	beq.n	800a33c <UART_SetConfig+0x18cc>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d038      	beq.n	800a338 <UART_SetConfig+0x18c8>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d032      	beq.n	800a334 <UART_SetConfig+0x18c4>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d02c      	beq.n	800a330 <UART_SetConfig+0x18c0>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	d026      	beq.n	800a32c <UART_SetConfig+0x18bc>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	2b06      	cmp	r3, #6
 800a2e4:	d020      	beq.n	800a328 <UART_SetConfig+0x18b8>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	2b07      	cmp	r3, #7
 800a2ec:	d01a      	beq.n	800a324 <UART_SetConfig+0x18b4>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	2b08      	cmp	r3, #8
 800a2f4:	d014      	beq.n	800a320 <UART_SetConfig+0x18b0>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d00e      	beq.n	800a31c <UART_SetConfig+0x18ac>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	2b0a      	cmp	r3, #10
 800a304:	d008      	beq.n	800a318 <UART_SetConfig+0x18a8>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	2b0b      	cmp	r3, #11
 800a30c:	d102      	bne.n	800a314 <UART_SetConfig+0x18a4>
 800a30e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a312:	e016      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a314:	2301      	movs	r3, #1
 800a316:	e014      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a318:	2380      	movs	r3, #128	; 0x80
 800a31a:	e012      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a320:	2320      	movs	r3, #32
 800a322:	e00e      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a324:	2310      	movs	r3, #16
 800a326:	e00c      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a328:	230c      	movs	r3, #12
 800a32a:	e00a      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a32c:	230a      	movs	r3, #10
 800a32e:	e008      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a330:	2308      	movs	r3, #8
 800a332:	e006      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a334:	2306      	movs	r3, #6
 800a336:	e004      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a338:	2304      	movs	r3, #4
 800a33a:	e002      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a33c:	2302      	movs	r3, #2
 800a33e:	e000      	b.n	800a342 <UART_SetConfig+0x18d2>
 800a340:	2301      	movs	r3, #1
 800a342:	fbb2 f3f3 	udiv	r3, r2, r3
 800a346:	005a      	lsls	r2, r3, #1
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	441a      	add	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	fbb2 f3f3 	udiv	r3, r2, r3
 800a358:	b29b      	uxth	r3, r3
 800a35a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a35c:	e133      	b.n	800a5c6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d043      	beq.n	800a3ee <UART_SetConfig+0x197e>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d03d      	beq.n	800a3ea <UART_SetConfig+0x197a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	2b02      	cmp	r3, #2
 800a374:	d037      	beq.n	800a3e6 <UART_SetConfig+0x1976>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d031      	beq.n	800a3e2 <UART_SetConfig+0x1972>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	2b04      	cmp	r3, #4
 800a384:	d02b      	beq.n	800a3de <UART_SetConfig+0x196e>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d025      	beq.n	800a3da <UART_SetConfig+0x196a>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	2b06      	cmp	r3, #6
 800a394:	d01f      	beq.n	800a3d6 <UART_SetConfig+0x1966>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	2b07      	cmp	r3, #7
 800a39c:	d019      	beq.n	800a3d2 <UART_SetConfig+0x1962>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d013      	beq.n	800a3ce <UART_SetConfig+0x195e>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d00d      	beq.n	800a3ca <UART_SetConfig+0x195a>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	2b0a      	cmp	r3, #10
 800a3b4:	d007      	beq.n	800a3c6 <UART_SetConfig+0x1956>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	2b0b      	cmp	r3, #11
 800a3bc:	d101      	bne.n	800a3c2 <UART_SetConfig+0x1952>
 800a3be:	4b3f      	ldr	r3, [pc, #252]	; (800a4bc <UART_SetConfig+0x1a4c>)
 800a3c0:	e016      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3c2:	4b3f      	ldr	r3, [pc, #252]	; (800a4c0 <UART_SetConfig+0x1a50>)
 800a3c4:	e014      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3c6:	4b3f      	ldr	r3, [pc, #252]	; (800a4c4 <UART_SetConfig+0x1a54>)
 800a3c8:	e012      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3ca:	4b3f      	ldr	r3, [pc, #252]	; (800a4c8 <UART_SetConfig+0x1a58>)
 800a3cc:	e010      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3ce:	4b3f      	ldr	r3, [pc, #252]	; (800a4cc <UART_SetConfig+0x1a5c>)
 800a3d0:	e00e      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3d2:	4b3f      	ldr	r3, [pc, #252]	; (800a4d0 <UART_SetConfig+0x1a60>)
 800a3d4:	e00c      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3d6:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <UART_SetConfig+0x1a64>)
 800a3d8:	e00a      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3da:	4b3f      	ldr	r3, [pc, #252]	; (800a4d8 <UART_SetConfig+0x1a68>)
 800a3dc:	e008      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3de:	4b3f      	ldr	r3, [pc, #252]	; (800a4dc <UART_SetConfig+0x1a6c>)
 800a3e0:	e006      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3e2:	4b3f      	ldr	r3, [pc, #252]	; (800a4e0 <UART_SetConfig+0x1a70>)
 800a3e4:	e004      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3e6:	4b3f      	ldr	r3, [pc, #252]	; (800a4e4 <UART_SetConfig+0x1a74>)
 800a3e8:	e002      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3ea:	4b33      	ldr	r3, [pc, #204]	; (800a4b8 <UART_SetConfig+0x1a48>)
 800a3ec:	e000      	b.n	800a3f0 <UART_SetConfig+0x1980>
 800a3ee:	4b34      	ldr	r3, [pc, #208]	; (800a4c0 <UART_SetConfig+0x1a50>)
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6852      	ldr	r2, [r2, #4]
 800a3f4:	0852      	lsrs	r2, r2, #1
 800a3f6:	441a      	add	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a400:	b29b      	uxth	r3, r3
 800a402:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a404:	e0df      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d045      	beq.n	800a49a <UART_SetConfig+0x1a2a>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	2b01      	cmp	r3, #1
 800a414:	d03f      	beq.n	800a496 <UART_SetConfig+0x1a26>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d039      	beq.n	800a492 <UART_SetConfig+0x1a22>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b03      	cmp	r3, #3
 800a424:	d033      	beq.n	800a48e <UART_SetConfig+0x1a1e>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d02d      	beq.n	800a48a <UART_SetConfig+0x1a1a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	2b05      	cmp	r3, #5
 800a434:	d027      	beq.n	800a486 <UART_SetConfig+0x1a16>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	2b06      	cmp	r3, #6
 800a43c:	d021      	beq.n	800a482 <UART_SetConfig+0x1a12>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	2b07      	cmp	r3, #7
 800a444:	d01b      	beq.n	800a47e <UART_SetConfig+0x1a0e>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	2b08      	cmp	r3, #8
 800a44c:	d015      	beq.n	800a47a <UART_SetConfig+0x1a0a>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	2b09      	cmp	r3, #9
 800a454:	d00f      	beq.n	800a476 <UART_SetConfig+0x1a06>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	2b0a      	cmp	r3, #10
 800a45c:	d008      	beq.n	800a470 <UART_SetConfig+0x1a00>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2b0b      	cmp	r3, #11
 800a464:	d102      	bne.n	800a46c <UART_SetConfig+0x19fc>
 800a466:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a46a:	e017      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a46c:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <UART_SetConfig+0x1a60>)
 800a46e:	e015      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a470:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a474:	e012      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a476:	4b1c      	ldr	r3, [pc, #112]	; (800a4e8 <UART_SetConfig+0x1a78>)
 800a478:	e010      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a47a:	4b1c      	ldr	r3, [pc, #112]	; (800a4ec <UART_SetConfig+0x1a7c>)
 800a47c:	e00e      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a47e:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <UART_SetConfig+0x1a4c>)
 800a480:	e00c      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a482:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <UART_SetConfig+0x1a80>)
 800a484:	e00a      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a486:	4b1b      	ldr	r3, [pc, #108]	; (800a4f4 <UART_SetConfig+0x1a84>)
 800a488:	e008      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a48a:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <UART_SetConfig+0x1a54>)
 800a48c:	e006      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <UART_SetConfig+0x1a88>)
 800a490:	e004      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a492:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <UART_SetConfig+0x1a58>)
 800a494:	e002      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <UART_SetConfig+0x1a5c>)
 800a498:	e000      	b.n	800a49c <UART_SetConfig+0x1a2c>
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <UART_SetConfig+0x1a60>)
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	6852      	ldr	r2, [r2, #4]
 800a4a0:	0852      	lsrs	r2, r2, #1
 800a4a2:	441a      	add	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4b0:	e089      	b.n	800a5c6 <UART_SetConfig+0x1b56>
 800a4b2:	bf00      	nop
 800a4b4:	58024400 	.word	0x58024400
 800a4b8:	03d09000 	.word	0x03d09000
 800a4bc:	0007a120 	.word	0x0007a120
 800a4c0:	07a12000 	.word	0x07a12000
 800a4c4:	000f4240 	.word	0x000f4240
 800a4c8:	001e8480 	.word	0x001e8480
 800a4cc:	003d0900 	.word	0x003d0900
 800a4d0:	007a1200 	.word	0x007a1200
 800a4d4:	00a2c2aa 	.word	0x00a2c2aa
 800a4d8:	00c35000 	.word	0x00c35000
 800a4dc:	00f42400 	.word	0x00f42400
 800a4e0:	01458554 	.word	0x01458554
 800a4e4:	01e84800 	.word	0x01e84800
 800a4e8:	0001e848 	.word	0x0001e848
 800a4ec:	0003d090 	.word	0x0003d090
 800a4f0:	000a2c2a 	.word	0x000a2c2a
 800a4f4:	000c3500 	.word	0x000c3500
 800a4f8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	d04f      	beq.n	800a5a4 <UART_SetConfig+0x1b34>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d048      	beq.n	800a59e <UART_SetConfig+0x1b2e>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	2b02      	cmp	r3, #2
 800a512:	d041      	beq.n	800a598 <UART_SetConfig+0x1b28>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d03a      	beq.n	800a592 <UART_SetConfig+0x1b22>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b04      	cmp	r3, #4
 800a522:	d033      	beq.n	800a58c <UART_SetConfig+0x1b1c>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	2b05      	cmp	r3, #5
 800a52a:	d02c      	beq.n	800a586 <UART_SetConfig+0x1b16>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	2b06      	cmp	r3, #6
 800a532:	d025      	beq.n	800a580 <UART_SetConfig+0x1b10>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	2b07      	cmp	r3, #7
 800a53a:	d01e      	beq.n	800a57a <UART_SetConfig+0x1b0a>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	2b08      	cmp	r3, #8
 800a542:	d017      	beq.n	800a574 <UART_SetConfig+0x1b04>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	2b09      	cmp	r3, #9
 800a54a:	d010      	beq.n	800a56e <UART_SetConfig+0x1afe>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	2b0a      	cmp	r3, #10
 800a552:	d009      	beq.n	800a568 <UART_SetConfig+0x1af8>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b0b      	cmp	r3, #11
 800a55a:	d102      	bne.n	800a562 <UART_SetConfig+0x1af2>
 800a55c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a560:	e022      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a566:	e01f      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a56c:	e01c      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a572:	e019      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a574:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a578:	e016      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a57e:	e013      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a580:	f241 5354 	movw	r3, #5460	; 0x1554
 800a584:	e010      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a586:	f641 1398 	movw	r3, #6552	; 0x1998
 800a58a:	e00d      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a58c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a590:	e00a      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a592:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a596:	e007      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a59c:	e004      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5a2:	e001      	b.n	800a5a8 <UART_SetConfig+0x1b38>
 800a5a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6852      	ldr	r2, [r2, #4]
 800a5ac:	0852      	lsrs	r2, r2, #1
 800a5ae:	441a      	add	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5bc:	e003      	b.n	800a5c6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a5c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	2b0f      	cmp	r3, #15
 800a5ca:	d916      	bls.n	800a5fa <UART_SetConfig+0x1b8a>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	d212      	bcs.n	800a5fa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	f023 030f 	bic.w	r3, r3, #15
 800a5dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e0:	085b      	lsrs	r3, r3, #1
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	f003 0307 	and.w	r3, r3, #7
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5f6:	60da      	str	r2, [r3, #12]
 800a5f8:	e3a3      	b.n	800ad42 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a600:	e39f      	b.n	800ad42 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800a602:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	f200 8388 	bhi.w	800ad1c <UART_SetConfig+0x22ac>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0x1ba4>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a719 	.word	0x0800a719
 800a618:	0800a7cf 	.word	0x0800a7cf
 800a61c:	0800ad1d 	.word	0x0800ad1d
 800a620:	0800ad1d 	.word	0x0800ad1d
 800a624:	0800a885 	.word	0x0800a885
 800a628:	0800ad1d 	.word	0x0800ad1d
 800a62c:	0800ad1d 	.word	0x0800ad1d
 800a630:	0800ad1d 	.word	0x0800ad1d
 800a634:	0800a93f 	.word	0x0800a93f
 800a638:	0800ad1d 	.word	0x0800ad1d
 800a63c:	0800ad1d 	.word	0x0800ad1d
 800a640:	0800ad1d 	.word	0x0800ad1d
 800a644:	0800ad1d 	.word	0x0800ad1d
 800a648:	0800ad1d 	.word	0x0800ad1d
 800a64c:	0800ad1d 	.word	0x0800ad1d
 800a650:	0800ad1d 	.word	0x0800ad1d
 800a654:	0800a9f9 	.word	0x0800a9f9
 800a658:	0800ad1d 	.word	0x0800ad1d
 800a65c:	0800ad1d 	.word	0x0800ad1d
 800a660:	0800ad1d 	.word	0x0800ad1d
 800a664:	0800ad1d 	.word	0x0800ad1d
 800a668:	0800ad1d 	.word	0x0800ad1d
 800a66c:	0800ad1d 	.word	0x0800ad1d
 800a670:	0800ad1d 	.word	0x0800ad1d
 800a674:	0800ad1d 	.word	0x0800ad1d
 800a678:	0800ad1d 	.word	0x0800ad1d
 800a67c:	0800ad1d 	.word	0x0800ad1d
 800a680:	0800ad1d 	.word	0x0800ad1d
 800a684:	0800ad1d 	.word	0x0800ad1d
 800a688:	0800ad1d 	.word	0x0800ad1d
 800a68c:	0800ad1d 	.word	0x0800ad1d
 800a690:	0800ad1d 	.word	0x0800ad1d
 800a694:	0800ab69 	.word	0x0800ab69
 800a698:	0800ad1d 	.word	0x0800ad1d
 800a69c:	0800ad1d 	.word	0x0800ad1d
 800a6a0:	0800ad1d 	.word	0x0800ad1d
 800a6a4:	0800ad1d 	.word	0x0800ad1d
 800a6a8:	0800ad1d 	.word	0x0800ad1d
 800a6ac:	0800ad1d 	.word	0x0800ad1d
 800a6b0:	0800ad1d 	.word	0x0800ad1d
 800a6b4:	0800ad1d 	.word	0x0800ad1d
 800a6b8:	0800ad1d 	.word	0x0800ad1d
 800a6bc:	0800ad1d 	.word	0x0800ad1d
 800a6c0:	0800ad1d 	.word	0x0800ad1d
 800a6c4:	0800ad1d 	.word	0x0800ad1d
 800a6c8:	0800ad1d 	.word	0x0800ad1d
 800a6cc:	0800ad1d 	.word	0x0800ad1d
 800a6d0:	0800ad1d 	.word	0x0800ad1d
 800a6d4:	0800ad1d 	.word	0x0800ad1d
 800a6d8:	0800ad1d 	.word	0x0800ad1d
 800a6dc:	0800ad1d 	.word	0x0800ad1d
 800a6e0:	0800ad1d 	.word	0x0800ad1d
 800a6e4:	0800ad1d 	.word	0x0800ad1d
 800a6e8:	0800ad1d 	.word	0x0800ad1d
 800a6ec:	0800ad1d 	.word	0x0800ad1d
 800a6f0:	0800ad1d 	.word	0x0800ad1d
 800a6f4:	0800ad1d 	.word	0x0800ad1d
 800a6f8:	0800ad1d 	.word	0x0800ad1d
 800a6fc:	0800ad1d 	.word	0x0800ad1d
 800a700:	0800ad1d 	.word	0x0800ad1d
 800a704:	0800ad1d 	.word	0x0800ad1d
 800a708:	0800ad1d 	.word	0x0800ad1d
 800a70c:	0800ad1d 	.word	0x0800ad1d
 800a710:	0800ad1d 	.word	0x0800ad1d
 800a714:	0800ac5d 	.word	0x0800ac5d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a718:	f7fb fdba 	bl	8006290 <HAL_RCC_GetPCLK1Freq>
 800a71c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d044      	beq.n	800a7b0 <UART_SetConfig+0x1d40>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d03e      	beq.n	800a7ac <UART_SetConfig+0x1d3c>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	2b02      	cmp	r3, #2
 800a734:	d038      	beq.n	800a7a8 <UART_SetConfig+0x1d38>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d032      	beq.n	800a7a4 <UART_SetConfig+0x1d34>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	2b04      	cmp	r3, #4
 800a744:	d02c      	beq.n	800a7a0 <UART_SetConfig+0x1d30>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	2b05      	cmp	r3, #5
 800a74c:	d026      	beq.n	800a79c <UART_SetConfig+0x1d2c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	2b06      	cmp	r3, #6
 800a754:	d020      	beq.n	800a798 <UART_SetConfig+0x1d28>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	2b07      	cmp	r3, #7
 800a75c:	d01a      	beq.n	800a794 <UART_SetConfig+0x1d24>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	2b08      	cmp	r3, #8
 800a764:	d014      	beq.n	800a790 <UART_SetConfig+0x1d20>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	d00e      	beq.n	800a78c <UART_SetConfig+0x1d1c>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	2b0a      	cmp	r3, #10
 800a774:	d008      	beq.n	800a788 <UART_SetConfig+0x1d18>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	2b0b      	cmp	r3, #11
 800a77c:	d102      	bne.n	800a784 <UART_SetConfig+0x1d14>
 800a77e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a782:	e016      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a784:	2301      	movs	r3, #1
 800a786:	e014      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a788:	2380      	movs	r3, #128	; 0x80
 800a78a:	e012      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	e010      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a790:	2320      	movs	r3, #32
 800a792:	e00e      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a794:	2310      	movs	r3, #16
 800a796:	e00c      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a798:	230c      	movs	r3, #12
 800a79a:	e00a      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a79c:	230a      	movs	r3, #10
 800a79e:	e008      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	e006      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	e004      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	e002      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e000      	b.n	800a7b2 <UART_SetConfig+0x1d42>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	085b      	lsrs	r3, r3, #1
 800a7be:	441a      	add	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7cc:	e2aa      	b.n	800ad24 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7ce:	f7fb fd75 	bl	80062bc <HAL_RCC_GetPCLK2Freq>
 800a7d2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d044      	beq.n	800a866 <UART_SetConfig+0x1df6>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d03e      	beq.n	800a862 <UART_SetConfig+0x1df2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d038      	beq.n	800a85e <UART_SetConfig+0x1dee>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d032      	beq.n	800a85a <UART_SetConfig+0x1dea>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d02c      	beq.n	800a856 <UART_SetConfig+0x1de6>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b05      	cmp	r3, #5
 800a802:	d026      	beq.n	800a852 <UART_SetConfig+0x1de2>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b06      	cmp	r3, #6
 800a80a:	d020      	beq.n	800a84e <UART_SetConfig+0x1dde>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b07      	cmp	r3, #7
 800a812:	d01a      	beq.n	800a84a <UART_SetConfig+0x1dda>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d014      	beq.n	800a846 <UART_SetConfig+0x1dd6>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b09      	cmp	r3, #9
 800a822:	d00e      	beq.n	800a842 <UART_SetConfig+0x1dd2>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b0a      	cmp	r3, #10
 800a82a:	d008      	beq.n	800a83e <UART_SetConfig+0x1dce>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b0b      	cmp	r3, #11
 800a832:	d102      	bne.n	800a83a <UART_SetConfig+0x1dca>
 800a834:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a838:	e016      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e014      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a83e:	2380      	movs	r3, #128	; 0x80
 800a840:	e012      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a842:	2340      	movs	r3, #64	; 0x40
 800a844:	e010      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a846:	2320      	movs	r3, #32
 800a848:	e00e      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a84a:	2310      	movs	r3, #16
 800a84c:	e00c      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a84e:	230c      	movs	r3, #12
 800a850:	e00a      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a852:	230a      	movs	r3, #10
 800a854:	e008      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a856:	2308      	movs	r3, #8
 800a858:	e006      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a85a:	2306      	movs	r3, #6
 800a85c:	e004      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a85e:	2304      	movs	r3, #4
 800a860:	e002      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a862:	2302      	movs	r3, #2
 800a864:	e000      	b.n	800a868 <UART_SetConfig+0x1df8>
 800a866:	2301      	movs	r3, #1
 800a868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	085b      	lsrs	r3, r3, #1
 800a874:	441a      	add	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87e:	b29b      	uxth	r3, r3
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a882:	e24f      	b.n	800ad24 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a884:	f107 0318 	add.w	r3, r7, #24
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fc fe99 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	2b00      	cmp	r3, #0
 800a896:	d044      	beq.n	800a922 <UART_SetConfig+0x1eb2>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d03e      	beq.n	800a91e <UART_SetConfig+0x1eae>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d038      	beq.n	800a91a <UART_SetConfig+0x1eaa>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d032      	beq.n	800a916 <UART_SetConfig+0x1ea6>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d02c      	beq.n	800a912 <UART_SetConfig+0x1ea2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	d026      	beq.n	800a90e <UART_SetConfig+0x1e9e>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b06      	cmp	r3, #6
 800a8c6:	d020      	beq.n	800a90a <UART_SetConfig+0x1e9a>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b07      	cmp	r3, #7
 800a8ce:	d01a      	beq.n	800a906 <UART_SetConfig+0x1e96>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d014      	beq.n	800a902 <UART_SetConfig+0x1e92>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d00e      	beq.n	800a8fe <UART_SetConfig+0x1e8e>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b0a      	cmp	r3, #10
 800a8e6:	d008      	beq.n	800a8fa <UART_SetConfig+0x1e8a>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d102      	bne.n	800a8f6 <UART_SetConfig+0x1e86>
 800a8f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8f4:	e016      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e014      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a8fa:	2380      	movs	r3, #128	; 0x80
 800a8fc:	e012      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a8fe:	2340      	movs	r3, #64	; 0x40
 800a900:	e010      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a902:	2320      	movs	r3, #32
 800a904:	e00e      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a906:	2310      	movs	r3, #16
 800a908:	e00c      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a90a:	230c      	movs	r3, #12
 800a90c:	e00a      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a90e:	230a      	movs	r3, #10
 800a910:	e008      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a912:	2308      	movs	r3, #8
 800a914:	e006      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a916:	2306      	movs	r3, #6
 800a918:	e004      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a91a:	2304      	movs	r3, #4
 800a91c:	e002      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a91e:	2302      	movs	r3, #2
 800a920:	e000      	b.n	800a924 <UART_SetConfig+0x1eb4>
 800a922:	2301      	movs	r3, #1
 800a924:	fbb2 f2f3 	udiv	r2, r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	085b      	lsrs	r3, r3, #1
 800a92e:	441a      	add	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	fbb2 f3f3 	udiv	r3, r2, r3
 800a938:	b29b      	uxth	r3, r3
 800a93a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a93c:	e1f2      	b.n	800ad24 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	4618      	mov	r0, r3
 800a944:	f7fc ff88 	bl	8007858 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d044      	beq.n	800a9dc <UART_SetConfig+0x1f6c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b01      	cmp	r3, #1
 800a958:	d03e      	beq.n	800a9d8 <UART_SetConfig+0x1f68>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d038      	beq.n	800a9d4 <UART_SetConfig+0x1f64>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b03      	cmp	r3, #3
 800a968:	d032      	beq.n	800a9d0 <UART_SetConfig+0x1f60>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d02c      	beq.n	800a9cc <UART_SetConfig+0x1f5c>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	2b05      	cmp	r3, #5
 800a978:	d026      	beq.n	800a9c8 <UART_SetConfig+0x1f58>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b06      	cmp	r3, #6
 800a980:	d020      	beq.n	800a9c4 <UART_SetConfig+0x1f54>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	2b07      	cmp	r3, #7
 800a988:	d01a      	beq.n	800a9c0 <UART_SetConfig+0x1f50>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d014      	beq.n	800a9bc <UART_SetConfig+0x1f4c>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b09      	cmp	r3, #9
 800a998:	d00e      	beq.n	800a9b8 <UART_SetConfig+0x1f48>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b0a      	cmp	r3, #10
 800a9a0:	d008      	beq.n	800a9b4 <UART_SetConfig+0x1f44>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b0b      	cmp	r3, #11
 800a9a8:	d102      	bne.n	800a9b0 <UART_SetConfig+0x1f40>
 800a9aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ae:	e016      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e014      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	e012      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	e010      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9bc:	2320      	movs	r3, #32
 800a9be:	e00e      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	e00c      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	e00a      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9c8:	230a      	movs	r3, #10
 800a9ca:	e008      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	e006      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9d0:	2306      	movs	r3, #6
 800a9d2:	e004      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	e002      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e000      	b.n	800a9de <UART_SetConfig+0x1f6e>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	085b      	lsrs	r3, r3, #1
 800a9e8:	441a      	add	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9f6:	e195      	b.n	800ad24 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f8:	4b87      	ldr	r3, [pc, #540]	; (800ac18 <UART_SetConfig+0x21a8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d05d      	beq.n	800aac0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa04:	4b84      	ldr	r3, [pc, #528]	; (800ac18 <UART_SetConfig+0x21a8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	08db      	lsrs	r3, r3, #3
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	4a83      	ldr	r2, [pc, #524]	; (800ac1c <UART_SetConfig+0x21ac>)
 800aa10:	40da      	lsrs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d044      	beq.n	800aaa4 <UART_SetConfig+0x2034>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d03e      	beq.n	800aaa0 <UART_SetConfig+0x2030>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d038      	beq.n	800aa9c <UART_SetConfig+0x202c>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d032      	beq.n	800aa98 <UART_SetConfig+0x2028>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d02c      	beq.n	800aa94 <UART_SetConfig+0x2024>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d026      	beq.n	800aa90 <UART_SetConfig+0x2020>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d020      	beq.n	800aa8c <UART_SetConfig+0x201c>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4e:	2b07      	cmp	r3, #7
 800aa50:	d01a      	beq.n	800aa88 <UART_SetConfig+0x2018>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d014      	beq.n	800aa84 <UART_SetConfig+0x2014>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	d00e      	beq.n	800aa80 <UART_SetConfig+0x2010>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b0a      	cmp	r3, #10
 800aa68:	d008      	beq.n	800aa7c <UART_SetConfig+0x200c>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b0b      	cmp	r3, #11
 800aa70:	d102      	bne.n	800aa78 <UART_SetConfig+0x2008>
 800aa72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa76:	e016      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e014      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa7c:	2380      	movs	r3, #128	; 0x80
 800aa7e:	e012      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa80:	2340      	movs	r3, #64	; 0x40
 800aa82:	e010      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa84:	2320      	movs	r3, #32
 800aa86:	e00e      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa88:	2310      	movs	r3, #16
 800aa8a:	e00c      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	e00a      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa90:	230a      	movs	r3, #10
 800aa92:	e008      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa94:	2308      	movs	r3, #8
 800aa96:	e006      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa98:	2306      	movs	r3, #6
 800aa9a:	e004      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	e002      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e000      	b.n	800aaa6 <UART_SetConfig+0x2036>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	fbb2 f2f3 	udiv	r2, r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	441a      	add	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800aabe:	e131      	b.n	800ad24 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d043      	beq.n	800ab50 <UART_SetConfig+0x20e0>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d03d      	beq.n	800ab4c <UART_SetConfig+0x20dc>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d037      	beq.n	800ab48 <UART_SetConfig+0x20d8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d031      	beq.n	800ab44 <UART_SetConfig+0x20d4>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	d02b      	beq.n	800ab40 <UART_SetConfig+0x20d0>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	2b05      	cmp	r3, #5
 800aaee:	d025      	beq.n	800ab3c <UART_SetConfig+0x20cc>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b06      	cmp	r3, #6
 800aaf6:	d01f      	beq.n	800ab38 <UART_SetConfig+0x20c8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	2b07      	cmp	r3, #7
 800aafe:	d019      	beq.n	800ab34 <UART_SetConfig+0x20c4>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d013      	beq.n	800ab30 <UART_SetConfig+0x20c0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	2b09      	cmp	r3, #9
 800ab0e:	d00d      	beq.n	800ab2c <UART_SetConfig+0x20bc>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	2b0a      	cmp	r3, #10
 800ab16:	d007      	beq.n	800ab28 <UART_SetConfig+0x20b8>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	2b0b      	cmp	r3, #11
 800ab1e:	d101      	bne.n	800ab24 <UART_SetConfig+0x20b4>
 800ab20:	4b3f      	ldr	r3, [pc, #252]	; (800ac20 <UART_SetConfig+0x21b0>)
 800ab22:	e016      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab24:	4b3d      	ldr	r3, [pc, #244]	; (800ac1c <UART_SetConfig+0x21ac>)
 800ab26:	e014      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab28:	4b3e      	ldr	r3, [pc, #248]	; (800ac24 <UART_SetConfig+0x21b4>)
 800ab2a:	e012      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab2c:	4b3e      	ldr	r3, [pc, #248]	; (800ac28 <UART_SetConfig+0x21b8>)
 800ab2e:	e010      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab30:	4b3e      	ldr	r3, [pc, #248]	; (800ac2c <UART_SetConfig+0x21bc>)
 800ab32:	e00e      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab34:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <UART_SetConfig+0x21c0>)
 800ab36:	e00c      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab38:	4b3e      	ldr	r3, [pc, #248]	; (800ac34 <UART_SetConfig+0x21c4>)
 800ab3a:	e00a      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab3c:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <UART_SetConfig+0x21c8>)
 800ab3e:	e008      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab40:	4b3e      	ldr	r3, [pc, #248]	; (800ac3c <UART_SetConfig+0x21cc>)
 800ab42:	e006      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab44:	4b3e      	ldr	r3, [pc, #248]	; (800ac40 <UART_SetConfig+0x21d0>)
 800ab46:	e004      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab48:	4b3e      	ldr	r3, [pc, #248]	; (800ac44 <UART_SetConfig+0x21d4>)
 800ab4a:	e002      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab4c:	4b3e      	ldr	r3, [pc, #248]	; (800ac48 <UART_SetConfig+0x21d8>)
 800ab4e:	e000      	b.n	800ab52 <UART_SetConfig+0x20e2>
 800ab50:	4b32      	ldr	r3, [pc, #200]	; (800ac1c <UART_SetConfig+0x21ac>)
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6852      	ldr	r2, [r2, #4]
 800ab56:	0852      	lsrs	r2, r2, #1
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab66:	e0dd      	b.n	800ad24 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d046      	beq.n	800abfe <UART_SetConfig+0x218e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d040      	beq.n	800abfa <UART_SetConfig+0x218a>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d03a      	beq.n	800abf6 <UART_SetConfig+0x2186>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d034      	beq.n	800abf2 <UART_SetConfig+0x2182>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d02e      	beq.n	800abee <UART_SetConfig+0x217e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b05      	cmp	r3, #5
 800ab96:	d028      	beq.n	800abea <UART_SetConfig+0x217a>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b06      	cmp	r3, #6
 800ab9e:	d022      	beq.n	800abe6 <UART_SetConfig+0x2176>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	d01c      	beq.n	800abe2 <UART_SetConfig+0x2172>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	2b08      	cmp	r3, #8
 800abae:	d016      	beq.n	800abde <UART_SetConfig+0x216e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	2b09      	cmp	r3, #9
 800abb6:	d00f      	beq.n	800abd8 <UART_SetConfig+0x2168>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b0a      	cmp	r3, #10
 800abbe:	d008      	beq.n	800abd2 <UART_SetConfig+0x2162>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	2b0b      	cmp	r3, #11
 800abc6:	d102      	bne.n	800abce <UART_SetConfig+0x215e>
 800abc8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800abcc:	e018      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abce:	4b18      	ldr	r3, [pc, #96]	; (800ac30 <UART_SetConfig+0x21c0>)
 800abd0:	e016      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abd2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800abd6:	e013      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abd8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800abdc:	e010      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abde:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <UART_SetConfig+0x21dc>)
 800abe0:	e00e      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abe2:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <UART_SetConfig+0x21b0>)
 800abe4:	e00c      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abe6:	4b1a      	ldr	r3, [pc, #104]	; (800ac50 <UART_SetConfig+0x21e0>)
 800abe8:	e00a      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abea:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <UART_SetConfig+0x21e4>)
 800abec:	e008      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <UART_SetConfig+0x21b4>)
 800abf0:	e006      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abf2:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <UART_SetConfig+0x21e8>)
 800abf4:	e004      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <UART_SetConfig+0x21b8>)
 800abf8:	e002      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abfa:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <UART_SetConfig+0x21bc>)
 800abfc:	e000      	b.n	800ac00 <UART_SetConfig+0x2190>
 800abfe:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <UART_SetConfig+0x21c0>)
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6852      	ldr	r2, [r2, #4]
 800ac04:	0852      	lsrs	r2, r2, #1
 800ac06:	441a      	add	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac14:	e086      	b.n	800ad24 <UART_SetConfig+0x22b4>
 800ac16:	bf00      	nop
 800ac18:	58024400 	.word	0x58024400
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	0003d090 	.word	0x0003d090
 800ac24:	0007a120 	.word	0x0007a120
 800ac28:	000f4240 	.word	0x000f4240
 800ac2c:	001e8480 	.word	0x001e8480
 800ac30:	003d0900 	.word	0x003d0900
 800ac34:	00516155 	.word	0x00516155
 800ac38:	0061a800 	.word	0x0061a800
 800ac3c:	007a1200 	.word	0x007a1200
 800ac40:	00a2c2aa 	.word	0x00a2c2aa
 800ac44:	00f42400 	.word	0x00f42400
 800ac48:	01e84800 	.word	0x01e84800
 800ac4c:	0001e848 	.word	0x0001e848
 800ac50:	00051615 	.word	0x00051615
 800ac54:	00061a80 	.word	0x00061a80
 800ac58:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d04e      	beq.n	800ad02 <UART_SetConfig+0x2292>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d047      	beq.n	800acfc <UART_SetConfig+0x228c>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d040      	beq.n	800acf6 <UART_SetConfig+0x2286>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d039      	beq.n	800acf0 <UART_SetConfig+0x2280>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d032      	beq.n	800acea <UART_SetConfig+0x227a>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	d02b      	beq.n	800ace4 <UART_SetConfig+0x2274>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b06      	cmp	r3, #6
 800ac92:	d024      	beq.n	800acde <UART_SetConfig+0x226e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b07      	cmp	r3, #7
 800ac9a:	d01d      	beq.n	800acd8 <UART_SetConfig+0x2268>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d016      	beq.n	800acd2 <UART_SetConfig+0x2262>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b09      	cmp	r3, #9
 800acaa:	d00f      	beq.n	800accc <UART_SetConfig+0x225c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b0a      	cmp	r3, #10
 800acb2:	d008      	beq.n	800acc6 <UART_SetConfig+0x2256>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b0b      	cmp	r3, #11
 800acba:	d101      	bne.n	800acc0 <UART_SetConfig+0x2250>
 800acbc:	2380      	movs	r3, #128	; 0x80
 800acbe:	e022      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acc4:	e01f      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acca:	e01c      	b.n	800ad06 <UART_SetConfig+0x2296>
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	e019      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	e016      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acdc:	e013      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acde:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ace2:	e010      	b.n	800ad06 <UART_SetConfig+0x2296>
 800ace4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ace8:	e00d      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acee:	e00a      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acf0:	f241 5355 	movw	r3, #5461	; 0x1555
 800acf4:	e007      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acfa:	e004      	b.n	800ad06 <UART_SetConfig+0x2296>
 800acfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad00:	e001      	b.n	800ad06 <UART_SetConfig+0x2296>
 800ad02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6852      	ldr	r2, [r2, #4]
 800ad0a:	0852      	lsrs	r2, r2, #1
 800ad0c:	441a      	add	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad1a:	e003      	b.n	800ad24 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ad22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	2b0f      	cmp	r3, #15
 800ad28:	d908      	bls.n	800ad3c <UART_SetConfig+0x22cc>
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad30:	d204      	bcs.n	800ad3c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	e002      	b.n	800ad42 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ad5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3740      	adds	r7, #64	; 0x40
 800ad66:	46bd      	mov	sp, r7
 800ad68:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ad6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00a      	beq.n	800ad96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00a      	beq.n	800adb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00a      	beq.n	800adda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	f003 0308 	and.w	r3, r3, #8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae00:	f003 0310 	and.w	r3, r3, #16
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00a      	beq.n	800ae1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01a      	beq.n	800ae82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae6a:	d10a      	bne.n	800ae82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	605a      	str	r2, [r3, #4]
  }
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aec0:	f7f5 fc6c 	bl	800079c <HAL_GetTick>
 800aec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d10e      	bne.n	800aef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f82c 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e022      	b.n	800af38 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	d10e      	bne.n	800af1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f816 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e00c      	b.n	800af38 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2220      	movs	r2, #32
 800af22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	4613      	mov	r3, r2
 800af4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af50:	e062      	b.n	800b018 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af58:	d05e      	beq.n	800b018 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5a:	f7f5 fc1f 	bl	800079c <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	429a      	cmp	r2, r3
 800af68:	d302      	bcc.n	800af70 <UART_WaitOnFlagUntilTimeout+0x30>
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d11d      	bne.n	800afac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af7e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0201 	bic.w	r2, r2, #1
 800af8e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e045      	b.n	800b038 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0304 	and.w	r3, r3, #4
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02e      	beq.n	800b018 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc8:	d126      	bne.n	800b018 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afd2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afe2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689a      	ldr	r2, [r3, #8]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0201 	bic.w	r2, r2, #1
 800aff2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2220      	movs	r2, #32
 800b000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2220      	movs	r2, #32
 800b008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e00f      	b.n	800b038 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69da      	ldr	r2, [r3, #28]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4013      	ands	r3, r2
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	429a      	cmp	r2, r3
 800b026:	bf0c      	ite	eq
 800b028:	2301      	moveq	r3, #1
 800b02a:	2300      	movne	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	429a      	cmp	r2, r3
 800b034:	d08d      	beq.n	800af52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d101      	bne.n	800b056 <HAL_UARTEx_DisableFifoMode+0x16>
 800b052:	2302      	movs	r3, #2
 800b054:	e027      	b.n	800b0a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2224      	movs	r2, #36	; 0x24
 800b062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0201 	bic.w	r2, r2, #1
 800b07c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b084:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2220      	movs	r2, #32
 800b098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e02d      	b.n	800b126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2224      	movs	r2, #36	; 0x24
 800b0d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f850 	bl	800b1ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b142:	2302      	movs	r3, #2
 800b144:	e02d      	b.n	800b1a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f812 	bl	800b1ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b089      	sub	sp, #36	; 0x24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b1b4:	4a2f      	ldr	r2, [pc, #188]	; (800b274 <UARTEx_SetNbDataToProcess+0xc8>)
 800b1b6:	f107 0314 	add.w	r3, r7, #20
 800b1ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1be:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b1c2:	4a2d      	ldr	r2, [pc, #180]	; (800b278 <UARTEx_SetNbDataToProcess+0xcc>)
 800b1c4:	f107 030c 	add.w	r3, r7, #12
 800b1c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1cc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d108      	bne.n	800b1ea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1e8:	e03d      	b.n	800b266 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1ea:	2308      	movs	r3, #8
 800b1ec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1ee:	2308      	movs	r3, #8
 800b1f0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	0e5b      	lsrs	r3, r3, #25
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	f003 0307 	and.w	r3, r3, #7
 800b200:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	0f5b      	lsrs	r3, r3, #29
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 0307 	and.w	r3, r3, #7
 800b210:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b212:	7fbb      	ldrb	r3, [r7, #30]
 800b214:	7f3a      	ldrb	r2, [r7, #28]
 800b216:	f107 0120 	add.w	r1, r7, #32
 800b21a:	440a      	add	r2, r1
 800b21c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b220:	fb02 f303 	mul.w	r3, r2, r3
 800b224:	7f3a      	ldrb	r2, [r7, #28]
 800b226:	f107 0120 	add.w	r1, r7, #32
 800b22a:	440a      	add	r2, r1
 800b22c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b230:	fb93 f3f2 	sdiv	r3, r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b23c:	7ffb      	ldrb	r3, [r7, #31]
 800b23e:	7f7a      	ldrb	r2, [r7, #29]
 800b240:	f107 0120 	add.w	r1, r7, #32
 800b244:	440a      	add	r2, r1
 800b246:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
 800b24e:	7f7a      	ldrb	r2, [r7, #29]
 800b250:	f107 0120 	add.w	r1, r7, #32
 800b254:	440a      	add	r2, r1
 800b256:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b25a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b266:	bf00      	nop
 800b268:	3724      	adds	r7, #36	; 0x24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	0800e610 	.word	0x0800e610
 800b278:	0800e618 	.word	0x0800e618

0800b27c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	; 0x28
 800b280:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800b282:	f107 031c 	add.w	r3, r7, #28
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	605a      	str	r2, [r3, #4]
 800b28c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b28e:	463b      	mov	r3, r7
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	605a      	str	r2, [r3, #4]
 800b296:	609a      	str	r2, [r3, #8]
 800b298:	60da      	str	r2, [r3, #12]
 800b29a:	611a      	str	r2, [r3, #16]
 800b29c:	615a      	str	r2, [r3, #20]
 800b29e:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800b2a0:	4b2f      	ldr	r3, [pc, #188]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2a2:	4a30      	ldr	r2, [pc, #192]	; (800b364 <MX_ADC1_Init+0xe8>)
 800b2a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800b2a6:	4b2e      	ldr	r3, [pc, #184]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2a8:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800b2ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b2ae:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b2b4:	4b2a      	ldr	r3, [pc, #168]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b2ba:	4b29      	ldr	r3, [pc, #164]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2bc:	2204      	movs	r2, #4
 800b2be:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b2c0:	4b27      	ldr	r3, [pc, #156]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b2c6:	4b26      	ldr	r3, [pc, #152]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800b2cc:	4b24      	ldr	r3, [pc, #144]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b2d2:	4b23      	ldr	r3, [pc, #140]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b2d8:	4b21      	ldr	r3, [pc, #132]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b2de:	4b20      	ldr	r3, [pc, #128]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800b2e4:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b2ea:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b2fe:	4818      	ldr	r0, [pc, #96]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b300:	f7f5 fc82 	bl	8000c08 <HAL_ADC_Init>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800b30a:	f000 fb89 	bl	800ba20 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800b312:	f107 031c 	add.w	r3, r7, #28
 800b316:	4619      	mov	r1, r3
 800b318:	4811      	ldr	r0, [pc, #68]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b31a:	f7f6 feb7 	bl	800208c <HAL_ADCEx_MultiModeConfigChannel>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800b324:	f000 fb7c 	bl	800ba20 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <MX_ADC1_Init+0xec>)
 800b32a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b32c:	2306      	movs	r3, #6
 800b32e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800b330:	2305      	movs	r3, #5
 800b332:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b334:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b338:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b33a:	2304      	movs	r3, #4
 800b33c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b342:	463b      	mov	r3, r7
 800b344:	4619      	mov	r1, r3
 800b346:	4806      	ldr	r0, [pc, #24]	; (800b360 <MX_ADC1_Init+0xe4>)
 800b348:	f7f6 f924 	bl	8001594 <HAL_ADC_ConfigChannel>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800b352:	f000 fb65 	bl	800ba20 <Error_Handler>
  }

}
 800b356:	bf00      	nop
 800b358:	3728      	adds	r7, #40	; 0x28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	24000220 	.word	0x24000220
 800b364:	40022000 	.word	0x40022000
 800b368:	25b00200 	.word	0x25b00200

0800b36c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08a      	sub	sp, #40	; 0x28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	609a      	str	r2, [r3, #8]
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a34      	ldr	r2, [pc, #208]	; (800b45c <HAL_ADC_MspInit+0xf0>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d161      	bne.n	800b452 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b38e:	4b34      	ldr	r3, [pc, #208]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b394:	4a32      	ldr	r2, [pc, #200]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b396:	f043 0320 	orr.w	r3, r3, #32
 800b39a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b3a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	613b      	str	r3, [r7, #16]
 800b3aa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3ac:	4b2c      	ldr	r3, [pc, #176]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b3ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3b2:	4a2b      	ldr	r2, [pc, #172]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b3b4:	f043 0302 	orr.w	r3, r3, #2
 800b3b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3bc:	4b28      	ldr	r3, [pc, #160]	; (800b460 <HAL_ADC_MspInit+0xf4>)
 800b3be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3c2:	f003 0302 	and.w	r3, r3, #2
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_INP9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3d6:	f107 0314 	add.w	r3, r7, #20
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4821      	ldr	r0, [pc, #132]	; (800b464 <HAL_ADC_MspInit+0xf8>)
 800b3de:	f7f9 f917 	bl	8004610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800b3e2:	4b21      	ldr	r3, [pc, #132]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b3e4:	4a21      	ldr	r2, [pc, #132]	; (800b46c <HAL_ADC_MspInit+0x100>)
 800b3e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b3e8:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b3ea:	2209      	movs	r2, #9
 800b3ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b3ee:	4b1e      	ldr	r3, [pc, #120]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b3fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b402:	4b19      	ldr	r3, [pc, #100]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b40a:	4b17      	ldr	r3, [pc, #92]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b40c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b414:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b41a:	4b13      	ldr	r3, [pc, #76]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b420:	4b11      	ldr	r3, [pc, #68]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b422:	2200      	movs	r2, #0
 800b424:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b426:	4810      	ldr	r0, [pc, #64]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b428:	f7f7 f81a 	bl	8002460 <HAL_DMA_Init>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800b432:	f000 faf5 	bl	800ba20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a0b      	ldr	r2, [pc, #44]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b43a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b43c:	4a0a      	ldr	r2, [pc, #40]	; (800b468 <HAL_ADC_MspInit+0xfc>)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	2012      	movs	r0, #18
 800b448:	f7f6 ffd5 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b44c:	2012      	movs	r0, #18
 800b44e:	f7f6 ffec 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b452:	bf00      	nop
 800b454:	3728      	adds	r7, #40	; 0x28
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	40022000 	.word	0x40022000
 800b460:	58024400 	.word	0x58024400
 800b464:	58020400 	.word	0x58020400
 800b468:	24000284 	.word	0x24000284
 800b46c:	40020010 	.word	0x40020010

0800b470 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <MX_DMA_Init+0x3c>)
 800b478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b47c:	4a0b      	ldr	r2, [pc, #44]	; (800b4ac <MX_DMA_Init+0x3c>)
 800b47e:	f043 0301 	orr.w	r3, r3, #1
 800b482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <MX_DMA_Init+0x3c>)
 800b488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	607b      	str	r3, [r7, #4]
 800b492:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	200b      	movs	r0, #11
 800b49a:	f7f6 ffac 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b49e:	200b      	movs	r0, #11
 800b4a0:	f7f6 ffc3 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 800b4a4:	bf00      	nop
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	58024400 	.word	0x58024400

0800b4b0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4b6:	f107 0314 	add.w	r3, r7, #20
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	605a      	str	r2, [r3, #4]
 800b4c0:	609a      	str	r2, [r3, #8]
 800b4c2:	60da      	str	r2, [r3, #12]
 800b4c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4c6:	4b31      	ldr	r3, [pc, #196]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4cc:	4a2f      	ldr	r2, [pc, #188]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4ce:	f043 0304 	orr.w	r3, r3, #4
 800b4d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b4d6:	4b2d      	ldr	r3, [pc, #180]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	613b      	str	r3, [r7, #16]
 800b4e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b4e4:	4b29      	ldr	r3, [pc, #164]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4ea:	4a28      	ldr	r2, [pc, #160]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b4f4:	4b25      	ldr	r3, [pc, #148]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b4f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b502:	4b22      	ldr	r3, [pc, #136]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b508:	4a20      	ldr	r2, [pc, #128]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b50a:	f043 0302 	orr.w	r3, r3, #2
 800b50e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b512:	4b1e      	ldr	r3, [pc, #120]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	60bb      	str	r3, [r7, #8]
 800b51e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b520:	4b1a      	ldr	r3, [pc, #104]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b526:	4a19      	ldr	r2, [pc, #100]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b530:	4b16      	ldr	r3, [pc, #88]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b544:	4a11      	ldr	r2, [pc, #68]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <MX_GPIO_Init+0xdc>)
 800b550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	603b      	str	r3, [r7, #0]
 800b55a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800b55c:	2201      	movs	r2, #1
 800b55e:	211c      	movs	r1, #28
 800b560:	480b      	ldr	r0, [pc, #44]	; (800b590 <MX_GPIO_Init+0xe0>)
 800b562:	f7f9 fa05 	bl	8004970 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800b566:	231c      	movs	r3, #28
 800b568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b56a:	2301      	movs	r3, #1
 800b56c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b56e:	2301      	movs	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b572:	2300      	movs	r3, #0
 800b574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b576:	f107 0314 	add.w	r3, r7, #20
 800b57a:	4619      	mov	r1, r3
 800b57c:	4804      	ldr	r0, [pc, #16]	; (800b590 <MX_GPIO_Init+0xe0>)
 800b57e:	f7f9 f847 	bl	8004610 <HAL_GPIO_Init>

}
 800b582:	bf00      	nop
 800b584:	3728      	adds	r7, #40	; 0x28
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	58024400 	.word	0x58024400
 800b590:	58021800 	.word	0x58021800

0800b594 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800b598:	4b1b      	ldr	r3, [pc, #108]	; (800b608 <MX_I2C3_Init+0x74>)
 800b59a:	4a1c      	ldr	r2, [pc, #112]	; (800b60c <MX_I2C3_Init+0x78>)
 800b59c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 800b59e:	4b1a      	ldr	r3, [pc, #104]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5a0:	4a1b      	ldr	r2, [pc, #108]	; (800b610 <MX_I2C3_Init+0x7c>)
 800b5a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800b5a4:	4b18      	ldr	r3, [pc, #96]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b5aa:	4b17      	ldr	r3, [pc, #92]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b5b0:	4b15      	ldr	r3, [pc, #84]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800b5b6:	4b14      	ldr	r3, [pc, #80]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b5bc:	4b12      	ldr	r3, [pc, #72]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b5c2:	4b11      	ldr	r3, [pc, #68]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b5c8:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800b5ce:	480e      	ldr	r0, [pc, #56]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5d0:	f7f9 fa02 	bl	80049d8 <HAL_I2C_Init>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800b5da:	f000 fa21 	bl	800ba20 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4809      	ldr	r0, [pc, #36]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5e2:	f7f9 fe53 	bl	800528c <HAL_I2CEx_ConfigAnalogFilter>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800b5ec:	f000 fa18 	bl	800ba20 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	4805      	ldr	r0, [pc, #20]	; (800b608 <MX_I2C3_Init+0x74>)
 800b5f4:	f7f9 fe95 	bl	8005322 <HAL_I2CEx_ConfigDigitalFilter>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800b5fe:	f000 fa0f 	bl	800ba20 <Error_Handler>
  }

}
 800b602:	bf00      	nop
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	240002fc 	.word	0x240002fc
 800b60c:	40005c00 	.word	0x40005c00
 800b610:	307075b1 	.word	0x307075b1

0800b614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b61c:	f107 0314 	add.w	r3, r7, #20
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	605a      	str	r2, [r3, #4]
 800b626:	609a      	str	r2, [r3, #8]
 800b628:	60da      	str	r2, [r3, #12]
 800b62a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a1a      	ldr	r2, [pc, #104]	; (800b69c <HAL_I2C_MspInit+0x88>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d12e      	bne.n	800b694 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b636:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b63c:	4a18      	ldr	r2, [pc, #96]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b646:	4b16      	ldr	r3, [pc, #88]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800b654:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b65a:	2312      	movs	r3, #18
 800b65c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b662:	2300      	movs	r3, #0
 800b664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b666:	2304      	movs	r3, #4
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b66a:	f107 0314 	add.w	r3, r7, #20
 800b66e:	4619      	mov	r1, r3
 800b670:	480c      	ldr	r0, [pc, #48]	; (800b6a4 <HAL_I2C_MspInit+0x90>)
 800b672:	f7f8 ffcd 	bl	8004610 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b676:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b67c:	4a08      	ldr	r2, [pc, #32]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b67e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b686:	4b06      	ldr	r3, [pc, #24]	; (800b6a0 <HAL_I2C_MspInit+0x8c>)
 800b688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b68c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800b694:	bf00      	nop
 800b696:	3728      	adds	r7, #40	; 0x28
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	40005c00 	.word	0x40005c00
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	58021c00 	.word	0x58021c00

0800b6a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b6ae:	f7f4 ffef 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b6b2:	f000 f8cf 	bl	800b854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b6b6:	f7ff fefb 	bl	800b4b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800b6ba:	f7ff fed9 	bl	800b470 <MX_DMA_Init>
  MX_ADC1_Init();
 800b6be:	f7ff fddd 	bl	800b27c <MX_ADC1_Init>
  MX_I2C3_Init();
 800b6c2:	f7ff ff67 	bl	800b594 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800b6c6:	f000 fb93 	bl	800bdf0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800b6ca:	f000 fb19 	bl	800bd00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("System Go !!!\r\n");
 800b6ce:	4852      	ldr	r0, [pc, #328]	; (800b818 <main+0x170>)
 800b6d0:	f001 f942 	bl	800c958 <puts>
  HAL_ADC_Start_DMA(&hadc1, ADC_Value, ADC_CONVERTED_DATA_BUFFER_SIZE);
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	4951      	ldr	r1, [pc, #324]	; (800b81c <main+0x174>)
 800b6d8:	4851      	ldr	r0, [pc, #324]	; (800b820 <main+0x178>)
 800b6da:	f7f5 fc35 	bl	8000f48 <HAL_ADC_Start_DMA>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        Temperature_Humidity_Buffer[0] = TEMPERATURE;
 800b6de:	4b51      	ldr	r3, [pc, #324]	; (800b824 <main+0x17c>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 1, 100);
 800b6e4:	2364      	movs	r3, #100	; 0x64
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4a4e      	ldr	r2, [pc, #312]	; (800b824 <main+0x17c>)
 800b6ec:	2180      	movs	r1, #128	; 0x80
 800b6ee:	484e      	ldr	r0, [pc, #312]	; (800b828 <main+0x180>)
 800b6f0:	f7f9 fa02 	bl	8004af8 <HAL_I2C_Master_Transmit>
        HAL_Delay(20);
 800b6f4:	2014      	movs	r0, #20
 800b6f6:	f7f5 f85d 	bl	80007b4 <HAL_Delay>
        HAL_I2C_Master_Receive(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 2 ,100);
 800b6fa:	2364      	movs	r3, #100	; 0x64
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	2302      	movs	r3, #2
 800b700:	4a48      	ldr	r2, [pc, #288]	; (800b824 <main+0x17c>)
 800b702:	2180      	movs	r1, #128	; 0x80
 800b704:	4848      	ldr	r0, [pc, #288]	; (800b828 <main+0x180>)
 800b706:	f7f9 faeb 	bl	8004ce0 <HAL_I2C_Master_Receive>
        Temperature_T = Temperature_Humidity_Buffer[0] << 8 | Temperature_Humidity_Buffer[1];
 800b70a:	4b46      	ldr	r3, [pc, #280]	; (800b824 <main+0x17c>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	021b      	lsls	r3, r3, #8
 800b710:	b21a      	sxth	r2, r3
 800b712:	4b44      	ldr	r3, [pc, #272]	; (800b824 <main+0x17c>)
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	b21b      	sxth	r3, r3
 800b718:	4313      	orrs	r3, r2
 800b71a:	b21b      	sxth	r3, r3
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	4b43      	ldr	r3, [pc, #268]	; (800b82c <main+0x184>)
 800b720:	801a      	strh	r2, [r3, #0]
        Temperature_Read = (((float)Temperature_T / 65536) * 165.0) - 40.0;
 800b722:	4b42      	ldr	r3, [pc, #264]	; (800b82c <main+0x184>)
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b72e:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b830 <main+0x188>
 800b732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b73a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800b808 <main+0x160>
 800b73e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b742:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800b810 <main+0x168>
 800b746:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b74a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b74e:	4b39      	ldr	r3, [pc, #228]	; (800b834 <main+0x18c>)
 800b750:	edc3 7a00 	vstr	s15, [r3]
        printf("\r\nTemperature is: %.2f\r\n", Temperature_Read);
 800b754:	4b37      	ldr	r3, [pc, #220]	; (800b834 <main+0x18c>)
 800b756:	edd3 7a00 	vldr	s15, [r3]
 800b75a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b75e:	ec53 2b17 	vmov	r2, r3, d7
 800b762:	4835      	ldr	r0, [pc, #212]	; (800b838 <main+0x190>)
 800b764:	f001 f884 	bl	800c870 <iprintf>

        Temperature_Humidity_Buffer[0] = HUMIDITY;
 800b768:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <main+0x17c>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 1, 100);
 800b76e:	2364      	movs	r3, #100	; 0x64
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	2301      	movs	r3, #1
 800b774:	4a2b      	ldr	r2, [pc, #172]	; (800b824 <main+0x17c>)
 800b776:	2180      	movs	r1, #128	; 0x80
 800b778:	482b      	ldr	r0, [pc, #172]	; (800b828 <main+0x180>)
 800b77a:	f7f9 f9bd 	bl	8004af8 <HAL_I2C_Master_Transmit>
        HAL_Delay(20);
 800b77e:	2014      	movs	r0, #20
 800b780:	f7f5 f818 	bl	80007b4 <HAL_Delay>
        HAL_I2C_Master_Receive(&hi2c3, HDC1080_ADDRESS, Temperature_Humidity_Buffer, 2 ,100);
 800b784:	2364      	movs	r3, #100	; 0x64
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2302      	movs	r3, #2
 800b78a:	4a26      	ldr	r2, [pc, #152]	; (800b824 <main+0x17c>)
 800b78c:	2180      	movs	r1, #128	; 0x80
 800b78e:	4826      	ldr	r0, [pc, #152]	; (800b828 <main+0x180>)
 800b790:	f7f9 faa6 	bl	8004ce0 <HAL_I2C_Master_Receive>
        Humidity_H = Temperature_Humidity_Buffer[0] << 8 | Temperature_Humidity_Buffer[1];
 800b794:	4b23      	ldr	r3, [pc, #140]	; (800b824 <main+0x17c>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	021b      	lsls	r3, r3, #8
 800b79a:	b21a      	sxth	r2, r3
 800b79c:	4b21      	ldr	r3, [pc, #132]	; (800b824 <main+0x17c>)
 800b79e:	785b      	ldrb	r3, [r3, #1]
 800b7a0:	b21b      	sxth	r3, r3
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	b21b      	sxth	r3, r3
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	4b24      	ldr	r3, [pc, #144]	; (800b83c <main+0x194>)
 800b7aa:	801a      	strh	r2, [r3, #0]
        Humidity_Read = ((float)Humidity_H / 65536) * 100;
 800b7ac:	4b23      	ldr	r3, [pc, #140]	; (800b83c <main+0x194>)
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	ee07 3a90 	vmov	s15, r3
 800b7b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7b8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800b830 <main+0x188>
 800b7bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b840 <main+0x198>
 800b7c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7c8:	4b1e      	ldr	r3, [pc, #120]	; (800b844 <main+0x19c>)
 800b7ca:	edc3 7a00 	vstr	s15, [r3]
        printf("Humidity is: %.2f\r\n", Humidity_Read);
 800b7ce:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <main+0x19c>)
 800b7d0:	edd3 7a00 	vldr	s15, [r3]
 800b7d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7d8:	ec53 2b17 	vmov	r2, r3, d7
 800b7dc:	481a      	ldr	r0, [pc, #104]	; (800b848 <main+0x1a0>)
 800b7de:	f001 f847 	bl	800c870 <iprintf>
        printf("ADC_Value is: %lu\r\n\n", ADC_Value[0]);
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <main+0x174>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4818      	ldr	r0, [pc, #96]	; (800b84c <main+0x1a4>)
 800b7ea:	f001 f841 	bl	800c870 <iprintf>

        Main_loop++;
 800b7ee:	4b18      	ldr	r3, [pc, #96]	; (800b850 <main+0x1a8>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a16      	ldr	r2, [pc, #88]	; (800b850 <main+0x1a8>)
 800b7f6:	6013      	str	r3, [r2, #0]
        HAL_Delay(1000);
 800b7f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b7fc:	f7f4 ffda 	bl	80007b4 <HAL_Delay>
        Temperature_Humidity_Buffer[0] = TEMPERATURE;
 800b800:	e76d      	b.n	800b6de <main+0x36>
 800b802:	bf00      	nop
 800b804:	f3af 8000 	nop.w
 800b808:	00000000 	.word	0x00000000
 800b80c:	4064a000 	.word	0x4064a000
 800b810:	00000000 	.word	0x00000000
 800b814:	40440000 	.word	0x40440000
 800b818:	0800e620 	.word	0x0800e620
 800b81c:	2400021c 	.word	0x2400021c
 800b820:	24000220 	.word	0x24000220
 800b824:	24000204 	.word	0x24000204
 800b828:	240002fc 	.word	0x240002fc
 800b82c:	24000200 	.word	0x24000200
 800b830:	47800000 	.word	0x47800000
 800b834:	2400034c 	.word	0x2400034c
 800b838:	0800e630 	.word	0x0800e630
 800b83c:	24000202 	.word	0x24000202
 800b840:	42c80000 	.word	0x42c80000
 800b844:	24000348 	.word	0x24000348
 800b848:	0800e64c 	.word	0x0800e64c
 800b84c:	0800e660 	.word	0x0800e660
 800b850:	240001fc 	.word	0x240001fc

0800b854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b0cc      	sub	sp, #304	; 0x130
 800b858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b85a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b85e:	224c      	movs	r2, #76	; 0x4c
 800b860:	2100      	movs	r1, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fbc0 	bl	800bfe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b868:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b86c:	2220      	movs	r2, #32
 800b86e:	2100      	movs	r1, #0
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fbb9 	bl	800bfe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	23bc      	movs	r3, #188	; 0xbc
 800b87e:	461a      	mov	r2, r3
 800b880:	2100      	movs	r1, #0
 800b882:	f000 fbb1 	bl	800bfe8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800b886:	2002      	movs	r0, #2
 800b888:	f7f9 fd98 	bl	80053bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800b88c:	1d3b      	adds	r3, r7, #4
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	4b5f      	ldr	r3, [pc, #380]	; (800ba10 <SystemClock_Config+0x1bc>)
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	4a5e      	ldr	r2, [pc, #376]	; (800ba10 <SystemClock_Config+0x1bc>)
 800b898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b89c:	6193      	str	r3, [r2, #24]
 800b89e:	4b5c      	ldr	r3, [pc, #368]	; (800ba10 <SystemClock_Config+0x1bc>)
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800b8a6:	1d3b      	adds	r3, r7, #4
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	4b5a      	ldr	r3, [pc, #360]	; (800ba14 <SystemClock_Config+0x1c0>)
 800b8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ae:	4a59      	ldr	r2, [pc, #356]	; (800ba14 <SystemClock_Config+0x1c0>)
 800b8b0:	f043 0301 	orr.w	r3, r3, #1
 800b8b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8b6:	4b57      	ldr	r3, [pc, #348]	; (800ba14 <SystemClock_Config+0x1c0>)
 800b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ba:	f003 0201 	and.w	r2, r3, #1
 800b8be:	1d3b      	adds	r3, r7, #4
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	1d3b      	adds	r3, r7, #4
 800b8c4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b8c6:	bf00      	nop
 800b8c8:	4b51      	ldr	r3, [pc, #324]	; (800ba10 <SystemClock_Config+0x1bc>)
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d4:	d1f8      	bne.n	800b8c8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b8d6:	4b50      	ldr	r3, [pc, #320]	; (800ba18 <SystemClock_Config+0x1c4>)
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	4a4e      	ldr	r2, [pc, #312]	; (800ba18 <SystemClock_Config+0x1c4>)
 800b8e0:	f043 0302 	orr.w	r3, r3, #2
 800b8e4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b8ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800b900:	2305      	movs	r3, #5
 800b902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800b906:	23c0      	movs	r3, #192	; 0xc0
 800b908:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800b90c:	2302      	movs	r3, #2
 800b90e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800b912:	2302      	movs	r3, #2
 800b914:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b918:	2302      	movs	r3, #2
 800b91a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800b91e:	2308      	movs	r3, #8
 800b920:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b924:	2300      	movs	r3, #0
 800b926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b934:	4618      	mov	r0, r3
 800b936:	f7f9 fd7b 	bl	8005430 <HAL_RCC_OscConfig>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800b940:	f000 f86e 	bl	800ba20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b944:	233f      	movs	r3, #63	; 0x3f
 800b946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b94a:	2303      	movs	r3, #3
 800b94c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800b950:	2300      	movs	r3, #0
 800b952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800b956:	2308      	movs	r3, #8
 800b958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800b95c:	2340      	movs	r3, #64	; 0x40
 800b95e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800b962:	2340      	movs	r3, #64	; 0x40
 800b964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b96c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800b970:	2340      	movs	r3, #64	; 0x40
 800b972:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b976:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b97a:	2104      	movs	r1, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fa f92f 	bl	8005be0 <HAL_RCC_ClockConfig>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <SystemClock_Config+0x138>
  {
    Error_Handler();
 800b988:	f000 f84a 	bl	800ba20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 800b98c:	f107 0308 	add.w	r3, r7, #8
 800b990:	4a22      	ldr	r2, [pc, #136]	; (800ba1c <SystemClock_Config+0x1c8>)
 800b992:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800b994:	f107 0308 	add.w	r3, r7, #8
 800b998:	2202      	movs	r2, #2
 800b99a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800b99c:	f107 0308 	add.w	r3, r7, #8
 800b9a0:	220c      	movs	r2, #12
 800b9a2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800b9a4:	f107 0308 	add.w	r3, r7, #8
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800b9b4:	f107 0308 	add.w	r3, r7, #8
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800b9bc:	f107 0308 	add.w	r3, r7, #8
 800b9c0:	22c0      	movs	r2, #192	; 0xc0
 800b9c2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800b9c4:	f107 0308 	add.w	r3, r7, #8
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800b9cc:	f107 0308 	add.w	r3, r7, #8
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	2200      	movs	r2, #0
 800b9da:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800b9dc:	f107 0308 	add.w	r3, r7, #8
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b9f0:	f107 0308 	add.w	r3, r7, #8
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fa fc77 	bl	80062e8 <HAL_RCCEx_PeriphCLKConfig>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <SystemClock_Config+0x1b0>
  {
    Error_Handler();
 800ba00:	f000 f80e 	bl	800ba20 <Error_Handler>
  }
}
 800ba04:	bf00      	nop
 800ba06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	58024800 	.word	0x58024800
 800ba14:	58000400 	.word	0x58000400
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	00080009 	.word	0x00080009

0800ba20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ba24:	bf00      	nop
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
	...

0800ba30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba36:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <HAL_MspInit+0x30>)
 800ba38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba3c:	4a08      	ldr	r2, [pc, #32]	; (800ba60 <HAL_MspInit+0x30>)
 800ba3e:	f043 0302 	orr.w	r3, r3, #2
 800ba42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ba46:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <HAL_MspInit+0x30>)
 800ba48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	607b      	str	r3, [r7, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	58024400 	.word	0x58024400

0800ba64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ba68:	bf00      	nop
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ba72:	b480      	push	{r7}
 800ba74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ba76:	e7fe      	b.n	800ba76 <HardFault_Handler+0x4>

0800ba78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ba7c:	e7fe      	b.n	800ba7c <MemManage_Handler+0x4>

0800ba7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ba82:	e7fe      	b.n	800ba82 <BusFault_Handler+0x4>

0800ba84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ba88:	e7fe      	b.n	800ba88 <UsageFault_Handler+0x4>

0800ba8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ba8e:	bf00      	nop
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba9c:	bf00      	nop
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800baa6:	b480      	push	{r7}
 800baa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800baaa:	bf00      	nop
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bab8:	f7f4 fe5c 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800babc:	bf00      	nop
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bac4:	4802      	ldr	r0, [pc, #8]	; (800bad0 <DMA1_Stream0_IRQHandler+0x10>)
 800bac6:	f7f7 fa91 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800baca:	bf00      	nop
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	24000284 	.word	0x24000284

0800bad4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800bad8:	4802      	ldr	r0, [pc, #8]	; (800bae4 <ADC_IRQHandler+0x10>)
 800bada:	f7f5 faf9 	bl	80010d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800bade:	bf00      	nop
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	24000220 	.word	0x24000220

0800bae8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800baec:	4804      	ldr	r0, [pc, #16]	; (800bb00 <TIM3_IRQHandler+0x18>)
 800baee:	f7fc fada 	bl	80080a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOG, LED1_Pin|LED2_Pin|LED3_Pin);
 800baf2:	211c      	movs	r1, #28
 800baf4:	4803      	ldr	r0, [pc, #12]	; (800bb04 <TIM3_IRQHandler+0x1c>)
 800baf6:	f7f8 ff54 	bl	80049a2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 800bafa:	bf00      	nop
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	24000350 	.word	0x24000350
 800bb04:	58021800 	.word	0x58021800

0800bb08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb14:	2300      	movs	r3, #0
 800bb16:	617b      	str	r3, [r7, #20]
 800bb18:	e00a      	b.n	800bb30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bb1a:	f3af 8000 	nop.w
 800bb1e:	4601      	mov	r1, r0
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	60ba      	str	r2, [r7, #8]
 800bb26:	b2ca      	uxtb	r2, r1
 800bb28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	dbf0      	blt.n	800bb1a <_read+0x12>
	}

return len;
 800bb38:	687b      	ldr	r3, [r7, #4]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb4e:	2300      	movs	r3, #0
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	e009      	b.n	800bb68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	60ba      	str	r2, [r7, #8]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 f9dd 	bl	800bf1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	3301      	adds	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	dbf1      	blt.n	800bb54 <_write+0x12>
	}
	return len;
 800bb70:	687b      	ldr	r3, [r7, #4]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <_close>:

int _close(int file)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
	return -1;
 800bb82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b083      	sub	sp, #12
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bba2:	605a      	str	r2, [r3, #4]
	return 0;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <_isatty>:

int _isatty(int file)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
	return 1;
 800bbba:	2301      	movs	r3, #1
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
	return 0;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bbec:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <_sbrk+0x50>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <_sbrk+0x16>
		heap_end = &end;
 800bbf4:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <_sbrk+0x50>)
 800bbf6:	4a10      	ldr	r2, [pc, #64]	; (800bc38 <_sbrk+0x54>)
 800bbf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <_sbrk+0x50>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bc00:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <_sbrk+0x50>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4413      	add	r3, r2
 800bc08:	466a      	mov	r2, sp
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d907      	bls.n	800bc1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bc0e:	f000 f9c1 	bl	800bf94 <__errno>
 800bc12:	4602      	mov	r2, r0
 800bc14:	230c      	movs	r3, #12
 800bc16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bc18:	f04f 33ff 	mov.w	r3, #4294967295
 800bc1c:	e006      	b.n	800bc2c <_sbrk+0x48>
	}

	heap_end += incr;
 800bc1e:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <_sbrk+0x50>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4413      	add	r3, r2
 800bc26:	4a03      	ldr	r2, [pc, #12]	; (800bc34 <_sbrk+0x50>)
 800bc28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	2400020c 	.word	0x2400020c
 800bc38:	24000420 	.word	0x24000420

0800bc3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bc40:	4b29      	ldr	r3, [pc, #164]	; (800bce8 <SystemInit+0xac>)
 800bc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc46:	4a28      	ldr	r2, [pc, #160]	; (800bce8 <SystemInit+0xac>)
 800bc48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bc50:	4b26      	ldr	r3, [pc, #152]	; (800bcec <SystemInit+0xb0>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a25      	ldr	r2, [pc, #148]	; (800bcec <SystemInit+0xb0>)
 800bc56:	f043 0301 	orr.w	r3, r3, #1
 800bc5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bc5c:	4b23      	ldr	r3, [pc, #140]	; (800bcec <SystemInit+0xb0>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bc62:	4b22      	ldr	r3, [pc, #136]	; (800bcec <SystemInit+0xb0>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4921      	ldr	r1, [pc, #132]	; (800bcec <SystemInit+0xb0>)
 800bc68:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <SystemInit+0xb4>)
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bc6e:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <SystemInit+0xb0>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bc74:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <SystemInit+0xb0>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bc7a:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <SystemInit+0xb0>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <SystemInit+0xb0>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800bc86:	4b19      	ldr	r3, [pc, #100]	; (800bcec <SystemInit+0xb0>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <SystemInit+0xb0>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bc92:	4b16      	ldr	r3, [pc, #88]	; (800bcec <SystemInit+0xb0>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800bc98:	4b14      	ldr	r3, [pc, #80]	; (800bcec <SystemInit+0xb0>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bc9e:	4b13      	ldr	r3, [pc, #76]	; (800bcec <SystemInit+0xb0>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800bca4:	4b11      	ldr	r3, [pc, #68]	; (800bcec <SystemInit+0xb0>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bcaa:	4b10      	ldr	r3, [pc, #64]	; (800bcec <SystemInit+0xb0>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	; (800bcec <SystemInit+0xb0>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a0d      	ldr	r2, [pc, #52]	; (800bcec <SystemInit+0xb0>)
 800bcb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bcbc:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <SystemInit+0xb0>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	; (800bcf4 <SystemInit+0xb8>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <SystemInit+0xbc>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcce:	d202      	bcs.n	800bcd6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <SystemInit+0xc0>)
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bcd6:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <SystemInit+0xac>)
 800bcd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bcdc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bcde:	bf00      	nop
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	e000ed00 	.word	0xe000ed00
 800bcec:	58024400 	.word	0x58024400
 800bcf0:	eaf6ed7f 	.word	0xeaf6ed7f
 800bcf4:	5c001000 	.word	0x5c001000
 800bcf8:	ffff0000 	.word	0xffff0000
 800bcfc:	51008108 	.word	0x51008108

0800bd00 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bd06:	f107 0310 	add.w	r3, r7, #16
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	605a      	str	r2, [r3, #4]
 800bd10:	609a      	str	r2, [r3, #8]
 800bd12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd14:	1d3b      	adds	r3, r7, #4
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	605a      	str	r2, [r3, #4]
 800bd1c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800bd1e:	4b1e      	ldr	r3, [pc, #120]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd20:	4a1e      	ldr	r2, [pc, #120]	; (800bd9c <MX_TIM3_Init+0x9c>)
 800bd22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000-1;
 800bd24:	4b1c      	ldr	r3, [pc, #112]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd26:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800bd2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800bd32:	4b19      	ldr	r3, [pc, #100]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd34:	f242 720f 	movw	r2, #9999	; 0x270f
 800bd38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd3a:	4b17      	ldr	r3, [pc, #92]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd40:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800bd46:	4814      	ldr	r0, [pc, #80]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd48:	f7fc f982 	bl	8008050 <HAL_TIM_Base_Init>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800bd52:	f7ff fe65 	bl	800ba20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bd56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800bd5c:	f107 0310 	add.w	r3, r7, #16
 800bd60:	4619      	mov	r1, r3
 800bd62:	480d      	ldr	r0, [pc, #52]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd64:	f7fc fabe 	bl	80082e4 <HAL_TIM_ConfigClockSource>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800bd6e:	f7ff fe57 	bl	800ba20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bd72:	2300      	movs	r3, #0
 800bd74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bd7a:	1d3b      	adds	r3, r7, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4806      	ldr	r0, [pc, #24]	; (800bd98 <MX_TIM3_Init+0x98>)
 800bd80:	f7fc fcea 	bl	8008758 <HAL_TIMEx_MasterConfigSynchronization>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800bd8a:	f7ff fe49 	bl	800ba20 <Error_Handler>
  }

}
 800bd8e:	bf00      	nop
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	24000350 	.word	0x24000350
 800bd9c:	40000400 	.word	0x40000400

0800bda0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a0e      	ldr	r2, [pc, #56]	; (800bde8 <HAL_TIM_Base_MspInit+0x48>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d116      	bne.n	800bde0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bdb2:	4b0e      	ldr	r3, [pc, #56]	; (800bdec <HAL_TIM_Base_MspInit+0x4c>)
 800bdb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bdb8:	4a0c      	ldr	r2, [pc, #48]	; (800bdec <HAL_TIM_Base_MspInit+0x4c>)
 800bdba:	f043 0302 	orr.w	r3, r3, #2
 800bdbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bdc2:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <HAL_TIM_Base_MspInit+0x4c>)
 800bdc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	201d      	movs	r0, #29
 800bdd6:	f7f6 fb0e 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bdda:	201d      	movs	r0, #29
 800bddc:	f7f6 fb25 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	40000400 	.word	0x40000400
 800bdec:	58024400 	.word	0x58024400

0800bdf0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bdf4:	4b22      	ldr	r3, [pc, #136]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800bdf6:	4a23      	ldr	r2, [pc, #140]	; (800be84 <MX_USART1_UART_Init+0x94>)
 800bdf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800bdfa:	4b21      	ldr	r3, [pc, #132]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800bdfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800be02:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be04:	2200      	movs	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800be0e:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be10:	2200      	movs	r2, #0
 800be12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800be14:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be16:	220c      	movs	r2, #12
 800be18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be1a:	4b19      	ldr	r3, [pc, #100]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800be20:	4b17      	ldr	r3, [pc, #92]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be22:	2200      	movs	r2, #0
 800be24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be26:	4b16      	ldr	r3, [pc, #88]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be28:	2200      	movs	r2, #0
 800be2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800be2c:	4b14      	ldr	r3, [pc, #80]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be2e:	2200      	movs	r2, #0
 800be30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be32:	4b13      	ldr	r3, [pc, #76]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be34:	2200      	movs	r2, #0
 800be36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800be38:	4811      	ldr	r0, [pc, #68]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be3a:	f7fc fd33 	bl	80088a4 <HAL_UART_Init>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800be44:	f7ff fdec 	bl	800ba20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800be48:	2100      	movs	r1, #0
 800be4a:	480d      	ldr	r0, [pc, #52]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be4c:	f7ff f931 	bl	800b0b2 <HAL_UARTEx_SetTxFifoThreshold>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800be56:	f7ff fde3 	bl	800ba20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800be5a:	2100      	movs	r1, #0
 800be5c:	4808      	ldr	r0, [pc, #32]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be5e:	f7ff f966 	bl	800b12e <HAL_UARTEx_SetRxFifoThreshold>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800be68:	f7ff fdda 	bl	800ba20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800be6c:	4804      	ldr	r0, [pc, #16]	; (800be80 <MX_USART1_UART_Init+0x90>)
 800be6e:	f7ff f8e7 	bl	800b040 <HAL_UARTEx_DisableFifoMode>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800be78:	f7ff fdd2 	bl	800ba20 <Error_Handler>
  }

}
 800be7c:	bf00      	nop
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	24000390 	.word	0x24000390
 800be84:	40011000 	.word	0x40011000

0800be88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08a      	sub	sp, #40	; 0x28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be90:	f107 0314 	add.w	r3, r7, #20
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	605a      	str	r2, [r3, #4]
 800be9a:	609a      	str	r2, [r3, #8]
 800be9c:	60da      	str	r2, [r3, #12]
 800be9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1a      	ldr	r2, [pc, #104]	; (800bf10 <HAL_UART_MspInit+0x88>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d12e      	bne.n	800bf08 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800beaa:	4b1a      	ldr	r3, [pc, #104]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800beac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beb0:	4a18      	ldr	r2, [pc, #96]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800beb2:	f043 0310 	orr.w	r3, r3, #16
 800beb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800beba:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800bebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bec8:	4b12      	ldr	r3, [pc, #72]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800beca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bece:	4a11      	ldr	r2, [pc, #68]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800bed0:	f043 0301 	orr.w	r3, r3, #1
 800bed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bed8:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <HAL_UART_MspInit+0x8c>)
 800beda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800bee6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800beea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beec:	2302      	movs	r3, #2
 800beee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bef0:	2301      	movs	r3, #1
 800bef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bef4:	2300      	movs	r3, #0
 800bef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bef8:	2307      	movs	r3, #7
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800befc:	f107 0314 	add.w	r3, r7, #20
 800bf00:	4619      	mov	r1, r3
 800bf02:	4805      	ldr	r0, [pc, #20]	; (800bf18 <HAL_UART_MspInit+0x90>)
 800bf04:	f7f8 fb84 	bl	8004610 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800bf08:	bf00      	nop
 800bf0a:	3728      	adds	r7, #40	; 0x28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	40011000 	.word	0x40011000
 800bf14:	58024400 	.word	0x58024400
 800bf18:	58020000 	.word	0x58020000

0800bf1c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800bf24:	1d39      	adds	r1, r7, #4
 800bf26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4803      	ldr	r0, [pc, #12]	; (800bf3c <__io_putchar+0x20>)
 800bf2e:	f7fc fd09 	bl	8008944 <HAL_UART_Transmit>

  return ch;
 800bf32:	687b      	ldr	r3, [r7, #4]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	24000390 	.word	0x24000390

0800bf40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bf40:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bf78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bf44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bf46:	e003      	b.n	800bf50 <LoopCopyDataInit>

0800bf48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bf48:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bf4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bf4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bf4e:	3104      	adds	r1, #4

0800bf50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bf50:	480b      	ldr	r0, [pc, #44]	; (800bf80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bf52:	4b0c      	ldr	r3, [pc, #48]	; (800bf84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bf54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bf56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bf58:	d3f6      	bcc.n	800bf48 <CopyDataInit>
  ldr  r2, =_sbss
 800bf5a:	4a0b      	ldr	r2, [pc, #44]	; (800bf88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bf5c:	e002      	b.n	800bf64 <LoopFillZerobss>

0800bf5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bf5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bf60:	f842 3b04 	str.w	r3, [r2], #4

0800bf64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bf64:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bf66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bf68:	d3f9      	bcc.n	800bf5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bf6a:	f7ff fe67 	bl	800bc3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bf6e:	f000 f817 	bl	800bfa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bf72:	f7ff fb99 	bl	800b6a8 <main>
  bx  lr    
 800bf76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bf78:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800bf7c:	0800e960 	.word	0x0800e960
  ldr  r0, =_sdata
 800bf80:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800bf84:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 800bf88:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 800bf8c:	24000420 	.word	0x24000420

0800bf90 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bf90:	e7fe      	b.n	800bf90 <ADC3_IRQHandler>
	...

0800bf94 <__errno>:
 800bf94:	4b01      	ldr	r3, [pc, #4]	; (800bf9c <__errno+0x8>)
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	24000010 	.word	0x24000010

0800bfa0 <__libc_init_array>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	4e0d      	ldr	r6, [pc, #52]	; (800bfd8 <__libc_init_array+0x38>)
 800bfa4:	4c0d      	ldr	r4, [pc, #52]	; (800bfdc <__libc_init_array+0x3c>)
 800bfa6:	1ba4      	subs	r4, r4, r6
 800bfa8:	10a4      	asrs	r4, r4, #2
 800bfaa:	2500      	movs	r5, #0
 800bfac:	42a5      	cmp	r5, r4
 800bfae:	d109      	bne.n	800bfc4 <__libc_init_array+0x24>
 800bfb0:	4e0b      	ldr	r6, [pc, #44]	; (800bfe0 <__libc_init_array+0x40>)
 800bfb2:	4c0c      	ldr	r4, [pc, #48]	; (800bfe4 <__libc_init_array+0x44>)
 800bfb4:	f002 fb1e 	bl	800e5f4 <_init>
 800bfb8:	1ba4      	subs	r4, r4, r6
 800bfba:	10a4      	asrs	r4, r4, #2
 800bfbc:	2500      	movs	r5, #0
 800bfbe:	42a5      	cmp	r5, r4
 800bfc0:	d105      	bne.n	800bfce <__libc_init_array+0x2e>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfc8:	4798      	blx	r3
 800bfca:	3501      	adds	r5, #1
 800bfcc:	e7ee      	b.n	800bfac <__libc_init_array+0xc>
 800bfce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfd2:	4798      	blx	r3
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	e7f2      	b.n	800bfbe <__libc_init_array+0x1e>
 800bfd8:	0800e958 	.word	0x0800e958
 800bfdc:	0800e958 	.word	0x0800e958
 800bfe0:	0800e958 	.word	0x0800e958
 800bfe4:	0800e95c 	.word	0x0800e95c

0800bfe8 <memset>:
 800bfe8:	4402      	add	r2, r0
 800bfea:	4603      	mov	r3, r0
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d100      	bne.n	800bff2 <memset+0xa>
 800bff0:	4770      	bx	lr
 800bff2:	f803 1b01 	strb.w	r1, [r3], #1
 800bff6:	e7f9      	b.n	800bfec <memset+0x4>

0800bff8 <__cvt>:
 800bff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffa:	ed2d 8b02 	vpush	{d8}
 800bffe:	eeb0 8b40 	vmov.f64	d8, d0
 800c002:	b085      	sub	sp, #20
 800c004:	4617      	mov	r7, r2
 800c006:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c008:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c00a:	ee18 2a90 	vmov	r2, s17
 800c00e:	f025 0520 	bic.w	r5, r5, #32
 800c012:	2a00      	cmp	r2, #0
 800c014:	bfb6      	itet	lt
 800c016:	222d      	movlt	r2, #45	; 0x2d
 800c018:	2200      	movge	r2, #0
 800c01a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c01e:	2d46      	cmp	r5, #70	; 0x46
 800c020:	460c      	mov	r4, r1
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	d004      	beq.n	800c030 <__cvt+0x38>
 800c026:	2d45      	cmp	r5, #69	; 0x45
 800c028:	d100      	bne.n	800c02c <__cvt+0x34>
 800c02a:	3401      	adds	r4, #1
 800c02c:	2102      	movs	r1, #2
 800c02e:	e000      	b.n	800c032 <__cvt+0x3a>
 800c030:	2103      	movs	r1, #3
 800c032:	ab03      	add	r3, sp, #12
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	ab02      	add	r3, sp, #8
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	4622      	mov	r2, r4
 800c03c:	4633      	mov	r3, r6
 800c03e:	eeb0 0b48 	vmov.f64	d0, d8
 800c042:	f000 fddd 	bl	800cc00 <_dtoa_r>
 800c046:	2d47      	cmp	r5, #71	; 0x47
 800c048:	d101      	bne.n	800c04e <__cvt+0x56>
 800c04a:	07fb      	lsls	r3, r7, #31
 800c04c:	d51e      	bpl.n	800c08c <__cvt+0x94>
 800c04e:	2d46      	cmp	r5, #70	; 0x46
 800c050:	eb00 0304 	add.w	r3, r0, r4
 800c054:	d10c      	bne.n	800c070 <__cvt+0x78>
 800c056:	7802      	ldrb	r2, [r0, #0]
 800c058:	2a30      	cmp	r2, #48	; 0x30
 800c05a:	d107      	bne.n	800c06c <__cvt+0x74>
 800c05c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c064:	bf1c      	itt	ne
 800c066:	f1c4 0401 	rsbne	r4, r4, #1
 800c06a:	6034      	strne	r4, [r6, #0]
 800c06c:	6832      	ldr	r2, [r6, #0]
 800c06e:	4413      	add	r3, r2
 800c070:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	d007      	beq.n	800c08a <__cvt+0x92>
 800c07a:	2130      	movs	r1, #48	; 0x30
 800c07c:	9a03      	ldr	r2, [sp, #12]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d204      	bcs.n	800c08c <__cvt+0x94>
 800c082:	1c54      	adds	r4, r2, #1
 800c084:	9403      	str	r4, [sp, #12]
 800c086:	7011      	strb	r1, [r2, #0]
 800c088:	e7f8      	b.n	800c07c <__cvt+0x84>
 800c08a:	9303      	str	r3, [sp, #12]
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c090:	1a1b      	subs	r3, r3, r0
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	b005      	add	sp, #20
 800c096:	ecbd 8b02 	vpop	{d8}
 800c09a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c09c <__exponent>:
 800c09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	bfba      	itte	lt
 800c0a4:	4249      	neglt	r1, r1
 800c0a6:	232d      	movlt	r3, #45	; 0x2d
 800c0a8:	232b      	movge	r3, #43	; 0x2b
 800c0aa:	2909      	cmp	r1, #9
 800c0ac:	f804 2b02 	strb.w	r2, [r4], #2
 800c0b0:	7043      	strb	r3, [r0, #1]
 800c0b2:	dd20      	ble.n	800c0f6 <__exponent+0x5a>
 800c0b4:	f10d 0307 	add.w	r3, sp, #7
 800c0b8:	461f      	mov	r7, r3
 800c0ba:	260a      	movs	r6, #10
 800c0bc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c0c0:	fb06 1115 	mls	r1, r6, r5, r1
 800c0c4:	3130      	adds	r1, #48	; 0x30
 800c0c6:	2d09      	cmp	r5, #9
 800c0c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0cc:	f103 32ff 	add.w	r2, r3, #4294967295
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	dc09      	bgt.n	800c0e8 <__exponent+0x4c>
 800c0d4:	3130      	adds	r1, #48	; 0x30
 800c0d6:	3b02      	subs	r3, #2
 800c0d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c0dc:	42bb      	cmp	r3, r7
 800c0de:	4622      	mov	r2, r4
 800c0e0:	d304      	bcc.n	800c0ec <__exponent+0x50>
 800c0e2:	1a10      	subs	r0, r2, r0
 800c0e4:	b003      	add	sp, #12
 800c0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	e7e7      	b.n	800c0bc <__exponent+0x20>
 800c0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0f0:	f804 2b01 	strb.w	r2, [r4], #1
 800c0f4:	e7f2      	b.n	800c0dc <__exponent+0x40>
 800c0f6:	2330      	movs	r3, #48	; 0x30
 800c0f8:	4419      	add	r1, r3
 800c0fa:	7083      	strb	r3, [r0, #2]
 800c0fc:	1d02      	adds	r2, r0, #4
 800c0fe:	70c1      	strb	r1, [r0, #3]
 800c100:	e7ef      	b.n	800c0e2 <__exponent+0x46>
 800c102:	0000      	movs	r0, r0
 800c104:	0000      	movs	r0, r0
	...

0800c108 <_printf_float>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	b08d      	sub	sp, #52	; 0x34
 800c10e:	460c      	mov	r4, r1
 800c110:	4616      	mov	r6, r2
 800c112:	461f      	mov	r7, r3
 800c114:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c118:	4605      	mov	r5, r0
 800c11a:	f001 fc37 	bl	800d98c <_localeconv_r>
 800c11e:	f8d0 b000 	ldr.w	fp, [r0]
 800c122:	4658      	mov	r0, fp
 800c124:	f7f4 f8dc 	bl	80002e0 <strlen>
 800c128:	2300      	movs	r3, #0
 800c12a:	930a      	str	r3, [sp, #40]	; 0x28
 800c12c:	f8d8 3000 	ldr.w	r3, [r8]
 800c130:	9005      	str	r0, [sp, #20]
 800c132:	3307      	adds	r3, #7
 800c134:	f023 0307 	bic.w	r3, r3, #7
 800c138:	f103 0108 	add.w	r1, r3, #8
 800c13c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c140:	6822      	ldr	r2, [r4, #0]
 800c142:	f8c8 1000 	str.w	r1, [r8]
 800c146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c14a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c14e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800c3d8 <_printf_float+0x2d0>
 800c152:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c156:	eeb0 6bc0 	vabs.f64	d6, d0
 800c15a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c162:	dd24      	ble.n	800c1ae <_printf_float+0xa6>
 800c164:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16c:	d502      	bpl.n	800c174 <_printf_float+0x6c>
 800c16e:	232d      	movs	r3, #45	; 0x2d
 800c170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c174:	499a      	ldr	r1, [pc, #616]	; (800c3e0 <_printf_float+0x2d8>)
 800c176:	4b9b      	ldr	r3, [pc, #620]	; (800c3e4 <_printf_float+0x2dc>)
 800c178:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c17c:	bf8c      	ite	hi
 800c17e:	4688      	movhi	r8, r1
 800c180:	4698      	movls	r8, r3
 800c182:	f022 0204 	bic.w	r2, r2, #4
 800c186:	2303      	movs	r3, #3
 800c188:	6123      	str	r3, [r4, #16]
 800c18a:	6022      	str	r2, [r4, #0]
 800c18c:	f04f 0a00 	mov.w	sl, #0
 800c190:	9700      	str	r7, [sp, #0]
 800c192:	4633      	mov	r3, r6
 800c194:	aa0b      	add	r2, sp, #44	; 0x2c
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 f9e1 	bl	800c560 <_printf_common>
 800c19e:	3001      	adds	r0, #1
 800c1a0:	f040 8089 	bne.w	800c2b6 <_printf_float+0x1ae>
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	b00d      	add	sp, #52	; 0x34
 800c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ae:	eeb4 0b40 	vcmp.f64	d0, d0
 800c1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b6:	d702      	bvc.n	800c1be <_printf_float+0xb6>
 800c1b8:	498b      	ldr	r1, [pc, #556]	; (800c3e8 <_printf_float+0x2e0>)
 800c1ba:	4b8c      	ldr	r3, [pc, #560]	; (800c3ec <_printf_float+0x2e4>)
 800c1bc:	e7dc      	b.n	800c178 <_printf_float+0x70>
 800c1be:	6861      	ldr	r1, [r4, #4]
 800c1c0:	1c4b      	adds	r3, r1, #1
 800c1c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1c6:	ab0a      	add	r3, sp, #40	; 0x28
 800c1c8:	a809      	add	r0, sp, #36	; 0x24
 800c1ca:	d13b      	bne.n	800c244 <_printf_float+0x13c>
 800c1cc:	2106      	movs	r1, #6
 800c1ce:	6061      	str	r1, [r4, #4]
 800c1d0:	f04f 0c00 	mov.w	ip, #0
 800c1d4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c1d8:	e9cd 0900 	strd	r0, r9, [sp]
 800c1dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c1e0:	6022      	str	r2, [r4, #0]
 800c1e2:	6861      	ldr	r1, [r4, #4]
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f7ff ff07 	bl	800bff8 <__cvt>
 800c1ea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800c1ee:	2b47      	cmp	r3, #71	; 0x47
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	d109      	bne.n	800c208 <_printf_float+0x100>
 800c1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f6:	1cd8      	adds	r0, r3, #3
 800c1f8:	db02      	blt.n	800c200 <_printf_float+0xf8>
 800c1fa:	6862      	ldr	r2, [r4, #4]
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	dd47      	ble.n	800c290 <_printf_float+0x188>
 800c200:	f1a9 0902 	sub.w	r9, r9, #2
 800c204:	fa5f f989 	uxtb.w	r9, r9
 800c208:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c20e:	d824      	bhi.n	800c25a <_printf_float+0x152>
 800c210:	3901      	subs	r1, #1
 800c212:	464a      	mov	r2, r9
 800c214:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c218:	9109      	str	r1, [sp, #36]	; 0x24
 800c21a:	f7ff ff3f 	bl	800c09c <__exponent>
 800c21e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c220:	1813      	adds	r3, r2, r0
 800c222:	2a01      	cmp	r2, #1
 800c224:	4682      	mov	sl, r0
 800c226:	6123      	str	r3, [r4, #16]
 800c228:	dc02      	bgt.n	800c230 <_printf_float+0x128>
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	07d1      	lsls	r1, r2, #31
 800c22e:	d501      	bpl.n	800c234 <_printf_float+0x12c>
 800c230:	3301      	adds	r3, #1
 800c232:	6123      	str	r3, [r4, #16]
 800c234:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0a9      	beq.n	800c190 <_printf_float+0x88>
 800c23c:	232d      	movs	r3, #45	; 0x2d
 800c23e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c242:	e7a5      	b.n	800c190 <_printf_float+0x88>
 800c244:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800c248:	f000 8178 	beq.w	800c53c <_printf_float+0x434>
 800c24c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c250:	d1be      	bne.n	800c1d0 <_printf_float+0xc8>
 800c252:	2900      	cmp	r1, #0
 800c254:	d1bc      	bne.n	800c1d0 <_printf_float+0xc8>
 800c256:	2101      	movs	r1, #1
 800c258:	e7b9      	b.n	800c1ce <_printf_float+0xc6>
 800c25a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c25e:	d119      	bne.n	800c294 <_printf_float+0x18c>
 800c260:	2900      	cmp	r1, #0
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	dd0c      	ble.n	800c280 <_printf_float+0x178>
 800c266:	6121      	str	r1, [r4, #16]
 800c268:	b913      	cbnz	r3, 800c270 <_printf_float+0x168>
 800c26a:	6822      	ldr	r2, [r4, #0]
 800c26c:	07d2      	lsls	r2, r2, #31
 800c26e:	d502      	bpl.n	800c276 <_printf_float+0x16e>
 800c270:	3301      	adds	r3, #1
 800c272:	440b      	add	r3, r1
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	65a3      	str	r3, [r4, #88]	; 0x58
 800c27a:	f04f 0a00 	mov.w	sl, #0
 800c27e:	e7d9      	b.n	800c234 <_printf_float+0x12c>
 800c280:	b913      	cbnz	r3, 800c288 <_printf_float+0x180>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	07d0      	lsls	r0, r2, #31
 800c286:	d501      	bpl.n	800c28c <_printf_float+0x184>
 800c288:	3302      	adds	r3, #2
 800c28a:	e7f3      	b.n	800c274 <_printf_float+0x16c>
 800c28c:	2301      	movs	r3, #1
 800c28e:	e7f1      	b.n	800c274 <_printf_float+0x16c>
 800c290:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c298:	4293      	cmp	r3, r2
 800c29a:	db05      	blt.n	800c2a8 <_printf_float+0x1a0>
 800c29c:	6822      	ldr	r2, [r4, #0]
 800c29e:	6123      	str	r3, [r4, #16]
 800c2a0:	07d1      	lsls	r1, r2, #31
 800c2a2:	d5e8      	bpl.n	800c276 <_printf_float+0x16e>
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	e7e5      	b.n	800c274 <_printf_float+0x16c>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bfd4      	ite	le
 800c2ac:	f1c3 0302 	rsble	r3, r3, #2
 800c2b0:	2301      	movgt	r3, #1
 800c2b2:	4413      	add	r3, r2
 800c2b4:	e7de      	b.n	800c274 <_printf_float+0x16c>
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	055a      	lsls	r2, r3, #21
 800c2ba:	d407      	bmi.n	800c2cc <_printf_float+0x1c4>
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	4642      	mov	r2, r8
 800c2c0:	4631      	mov	r1, r6
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	47b8      	blx	r7
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d12a      	bne.n	800c320 <_printf_float+0x218>
 800c2ca:	e76b      	b.n	800c1a4 <_printf_float+0x9c>
 800c2cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c2d0:	f240 80de 	bls.w	800c490 <_printf_float+0x388>
 800c2d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c2d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e0:	d133      	bne.n	800c34a <_printf_float+0x242>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4a42      	ldr	r2, [pc, #264]	; (800c3f0 <_printf_float+0x2e8>)
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	47b8      	blx	r7
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	f43f af59 	beq.w	800c1a4 <_printf_float+0x9c>
 800c2f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	db02      	blt.n	800c300 <_printf_float+0x1f8>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	07d8      	lsls	r0, r3, #31
 800c2fe:	d50f      	bpl.n	800c320 <_printf_float+0x218>
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	465a      	mov	r2, fp
 800c304:	4631      	mov	r1, r6
 800c306:	4628      	mov	r0, r5
 800c308:	47b8      	blx	r7
 800c30a:	3001      	adds	r0, #1
 800c30c:	f43f af4a 	beq.w	800c1a4 <_printf_float+0x9c>
 800c310:	f04f 0800 	mov.w	r8, #0
 800c314:	f104 091a 	add.w	r9, r4, #26
 800c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c31a:	3b01      	subs	r3, #1
 800c31c:	4543      	cmp	r3, r8
 800c31e:	dc09      	bgt.n	800c334 <_printf_float+0x22c>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	079b      	lsls	r3, r3, #30
 800c324:	f100 8105 	bmi.w	800c532 <_printf_float+0x42a>
 800c328:	68e0      	ldr	r0, [r4, #12]
 800c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c32c:	4298      	cmp	r0, r3
 800c32e:	bfb8      	it	lt
 800c330:	4618      	movlt	r0, r3
 800c332:	e739      	b.n	800c1a8 <_printf_float+0xa0>
 800c334:	2301      	movs	r3, #1
 800c336:	464a      	mov	r2, r9
 800c338:	4631      	mov	r1, r6
 800c33a:	4628      	mov	r0, r5
 800c33c:	47b8      	blx	r7
 800c33e:	3001      	adds	r0, #1
 800c340:	f43f af30 	beq.w	800c1a4 <_printf_float+0x9c>
 800c344:	f108 0801 	add.w	r8, r8, #1
 800c348:	e7e6      	b.n	800c318 <_printf_float+0x210>
 800c34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dc2b      	bgt.n	800c3a8 <_printf_float+0x2a0>
 800c350:	2301      	movs	r3, #1
 800c352:	4a27      	ldr	r2, [pc, #156]	; (800c3f0 <_printf_float+0x2e8>)
 800c354:	4631      	mov	r1, r6
 800c356:	4628      	mov	r0, r5
 800c358:	47b8      	blx	r7
 800c35a:	3001      	adds	r0, #1
 800c35c:	f43f af22 	beq.w	800c1a4 <_printf_float+0x9c>
 800c360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c362:	b923      	cbnz	r3, 800c36e <_printf_float+0x266>
 800c364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c366:	b913      	cbnz	r3, 800c36e <_printf_float+0x266>
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	07d9      	lsls	r1, r3, #31
 800c36c:	d5d8      	bpl.n	800c320 <_printf_float+0x218>
 800c36e:	9b05      	ldr	r3, [sp, #20]
 800c370:	465a      	mov	r2, fp
 800c372:	4631      	mov	r1, r6
 800c374:	4628      	mov	r0, r5
 800c376:	47b8      	blx	r7
 800c378:	3001      	adds	r0, #1
 800c37a:	f43f af13 	beq.w	800c1a4 <_printf_float+0x9c>
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	f104 0a1a 	add.w	sl, r4, #26
 800c386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c388:	425b      	negs	r3, r3
 800c38a:	454b      	cmp	r3, r9
 800c38c:	dc01      	bgt.n	800c392 <_printf_float+0x28a>
 800c38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c390:	e795      	b.n	800c2be <_printf_float+0x1b6>
 800c392:	2301      	movs	r3, #1
 800c394:	4652      	mov	r2, sl
 800c396:	4631      	mov	r1, r6
 800c398:	4628      	mov	r0, r5
 800c39a:	47b8      	blx	r7
 800c39c:	3001      	adds	r0, #1
 800c39e:	f43f af01 	beq.w	800c1a4 <_printf_float+0x9c>
 800c3a2:	f109 0901 	add.w	r9, r9, #1
 800c3a6:	e7ee      	b.n	800c386 <_printf_float+0x27e>
 800c3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	bfa8      	it	ge
 800c3b0:	461a      	movge	r2, r3
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	4691      	mov	r9, r2
 800c3b6:	dd07      	ble.n	800c3c8 <_printf_float+0x2c0>
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4642      	mov	r2, r8
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f aeee 	beq.w	800c1a4 <_printf_float+0x9c>
 800c3c8:	f104 031a 	add.w	r3, r4, #26
 800c3cc:	f04f 0a00 	mov.w	sl, #0
 800c3d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	e017      	b.n	800c408 <_printf_float+0x300>
 800c3d8:	ffffffff 	.word	0xffffffff
 800c3dc:	7fefffff 	.word	0x7fefffff
 800c3e0:	0800e698 	.word	0x0800e698
 800c3e4:	0800e694 	.word	0x0800e694
 800c3e8:	0800e6a0 	.word	0x0800e6a0
 800c3ec:	0800e69c 	.word	0x0800e69c
 800c3f0:	0800e6a4 	.word	0x0800e6a4
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	9a07      	ldr	r2, [sp, #28]
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b8      	blx	r7
 800c3fe:	3001      	adds	r0, #1
 800c400:	f43f aed0 	beq.w	800c1a4 <_printf_float+0x9c>
 800c404:	f10a 0a01 	add.w	sl, sl, #1
 800c408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c40a:	9306      	str	r3, [sp, #24]
 800c40c:	eba3 0309 	sub.w	r3, r3, r9
 800c410:	4553      	cmp	r3, sl
 800c412:	dcef      	bgt.n	800c3f4 <_printf_float+0x2ec>
 800c414:	9b06      	ldr	r3, [sp, #24]
 800c416:	4498      	add	r8, r3
 800c418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c41c:	429a      	cmp	r2, r3
 800c41e:	db15      	blt.n	800c44c <_printf_float+0x344>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	07da      	lsls	r2, r3, #31
 800c424:	d412      	bmi.n	800c44c <_printf_float+0x344>
 800c426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c428:	9a06      	ldr	r2, [sp, #24]
 800c42a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c42c:	1a9a      	subs	r2, r3, r2
 800c42e:	eba3 0a01 	sub.w	sl, r3, r1
 800c432:	4592      	cmp	sl, r2
 800c434:	bfa8      	it	ge
 800c436:	4692      	movge	sl, r2
 800c438:	f1ba 0f00 	cmp.w	sl, #0
 800c43c:	dc0e      	bgt.n	800c45c <_printf_float+0x354>
 800c43e:	f04f 0800 	mov.w	r8, #0
 800c442:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c446:	f104 091a 	add.w	r9, r4, #26
 800c44a:	e019      	b.n	800c480 <_printf_float+0x378>
 800c44c:	9b05      	ldr	r3, [sp, #20]
 800c44e:	465a      	mov	r2, fp
 800c450:	4631      	mov	r1, r6
 800c452:	4628      	mov	r0, r5
 800c454:	47b8      	blx	r7
 800c456:	3001      	adds	r0, #1
 800c458:	d1e5      	bne.n	800c426 <_printf_float+0x31e>
 800c45a:	e6a3      	b.n	800c1a4 <_printf_float+0x9c>
 800c45c:	4653      	mov	r3, sl
 800c45e:	4642      	mov	r2, r8
 800c460:	4631      	mov	r1, r6
 800c462:	4628      	mov	r0, r5
 800c464:	47b8      	blx	r7
 800c466:	3001      	adds	r0, #1
 800c468:	d1e9      	bne.n	800c43e <_printf_float+0x336>
 800c46a:	e69b      	b.n	800c1a4 <_printf_float+0x9c>
 800c46c:	2301      	movs	r3, #1
 800c46e:	464a      	mov	r2, r9
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f ae94 	beq.w	800c1a4 <_printf_float+0x9c>
 800c47c:	f108 0801 	add.w	r8, r8, #1
 800c480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c484:	1a9b      	subs	r3, r3, r2
 800c486:	eba3 030a 	sub.w	r3, r3, sl
 800c48a:	4543      	cmp	r3, r8
 800c48c:	dcee      	bgt.n	800c46c <_printf_float+0x364>
 800c48e:	e747      	b.n	800c320 <_printf_float+0x218>
 800c490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c492:	2a01      	cmp	r2, #1
 800c494:	dc01      	bgt.n	800c49a <_printf_float+0x392>
 800c496:	07db      	lsls	r3, r3, #31
 800c498:	d539      	bpl.n	800c50e <_printf_float+0x406>
 800c49a:	2301      	movs	r3, #1
 800c49c:	4642      	mov	r2, r8
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	47b8      	blx	r7
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	f43f ae7d 	beq.w	800c1a4 <_printf_float+0x9c>
 800c4aa:	9b05      	ldr	r3, [sp, #20]
 800c4ac:	465a      	mov	r2, fp
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f108 0801 	add.w	r8, r8, #1
 800c4ba:	f43f ae73 	beq.w	800c1a4 <_printf_float+0x9c>
 800c4be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4d0:	d018      	beq.n	800c504 <_printf_float+0x3fc>
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d10e      	bne.n	800c4fc <_printf_float+0x3f4>
 800c4de:	e661      	b.n	800c1a4 <_printf_float+0x9c>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	464a      	mov	r2, r9
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	47b8      	blx	r7
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	f43f ae5a 	beq.w	800c1a4 <_printf_float+0x9c>
 800c4f0:	f108 0801 	add.w	r8, r8, #1
 800c4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	dcf1      	bgt.n	800c4e0 <_printf_float+0x3d8>
 800c4fc:	4653      	mov	r3, sl
 800c4fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c502:	e6dd      	b.n	800c2c0 <_printf_float+0x1b8>
 800c504:	f04f 0800 	mov.w	r8, #0
 800c508:	f104 091a 	add.w	r9, r4, #26
 800c50c:	e7f2      	b.n	800c4f4 <_printf_float+0x3ec>
 800c50e:	2301      	movs	r3, #1
 800c510:	e7df      	b.n	800c4d2 <_printf_float+0x3ca>
 800c512:	2301      	movs	r3, #1
 800c514:	464a      	mov	r2, r9
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	f43f ae41 	beq.w	800c1a4 <_printf_float+0x9c>
 800c522:	f108 0801 	add.w	r8, r8, #1
 800c526:	68e3      	ldr	r3, [r4, #12]
 800c528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c52a:	1a9b      	subs	r3, r3, r2
 800c52c:	4543      	cmp	r3, r8
 800c52e:	dcf0      	bgt.n	800c512 <_printf_float+0x40a>
 800c530:	e6fa      	b.n	800c328 <_printf_float+0x220>
 800c532:	f04f 0800 	mov.w	r8, #0
 800c536:	f104 0919 	add.w	r9, r4, #25
 800c53a:	e7f4      	b.n	800c526 <_printf_float+0x41e>
 800c53c:	2900      	cmp	r1, #0
 800c53e:	f43f ae8a 	beq.w	800c256 <_printf_float+0x14e>
 800c542:	f04f 0c00 	mov.w	ip, #0
 800c546:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c54a:	e9cd 0900 	strd	r0, r9, [sp]
 800c54e:	6022      	str	r2, [r4, #0]
 800c550:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c554:	4628      	mov	r0, r5
 800c556:	f7ff fd4f 	bl	800bff8 <__cvt>
 800c55a:	4680      	mov	r8, r0
 800c55c:	e64a      	b.n	800c1f4 <_printf_float+0xec>
 800c55e:	bf00      	nop

0800c560 <_printf_common>:
 800c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c564:	4691      	mov	r9, r2
 800c566:	461f      	mov	r7, r3
 800c568:	688a      	ldr	r2, [r1, #8]
 800c56a:	690b      	ldr	r3, [r1, #16]
 800c56c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c570:	4293      	cmp	r3, r2
 800c572:	bfb8      	it	lt
 800c574:	4613      	movlt	r3, r2
 800c576:	f8c9 3000 	str.w	r3, [r9]
 800c57a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c57e:	4606      	mov	r6, r0
 800c580:	460c      	mov	r4, r1
 800c582:	b112      	cbz	r2, 800c58a <_printf_common+0x2a>
 800c584:	3301      	adds	r3, #1
 800c586:	f8c9 3000 	str.w	r3, [r9]
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	0699      	lsls	r1, r3, #26
 800c58e:	bf42      	ittt	mi
 800c590:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c594:	3302      	addmi	r3, #2
 800c596:	f8c9 3000 	strmi.w	r3, [r9]
 800c59a:	6825      	ldr	r5, [r4, #0]
 800c59c:	f015 0506 	ands.w	r5, r5, #6
 800c5a0:	d107      	bne.n	800c5b2 <_printf_common+0x52>
 800c5a2:	f104 0a19 	add.w	sl, r4, #25
 800c5a6:	68e3      	ldr	r3, [r4, #12]
 800c5a8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5ac:	1a9b      	subs	r3, r3, r2
 800c5ae:	42ab      	cmp	r3, r5
 800c5b0:	dc28      	bgt.n	800c604 <_printf_common+0xa4>
 800c5b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c5b6:	6822      	ldr	r2, [r4, #0]
 800c5b8:	3300      	adds	r3, #0
 800c5ba:	bf18      	it	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	0692      	lsls	r2, r2, #26
 800c5c0:	d42d      	bmi.n	800c61e <_printf_common+0xbe>
 800c5c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	47c0      	blx	r8
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d020      	beq.n	800c612 <_printf_common+0xb2>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	68e5      	ldr	r5, [r4, #12]
 800c5d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c5d8:	f003 0306 	and.w	r3, r3, #6
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	bf08      	it	eq
 800c5e0:	1aad      	subeq	r5, r5, r2
 800c5e2:	68a3      	ldr	r3, [r4, #8]
 800c5e4:	6922      	ldr	r2, [r4, #16]
 800c5e6:	bf0c      	ite	eq
 800c5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5ec:	2500      	movne	r5, #0
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	bfc4      	itt	gt
 800c5f2:	1a9b      	subgt	r3, r3, r2
 800c5f4:	18ed      	addgt	r5, r5, r3
 800c5f6:	f04f 0900 	mov.w	r9, #0
 800c5fa:	341a      	adds	r4, #26
 800c5fc:	454d      	cmp	r5, r9
 800c5fe:	d11a      	bne.n	800c636 <_printf_common+0xd6>
 800c600:	2000      	movs	r0, #0
 800c602:	e008      	b.n	800c616 <_printf_common+0xb6>
 800c604:	2301      	movs	r3, #1
 800c606:	4652      	mov	r2, sl
 800c608:	4639      	mov	r1, r7
 800c60a:	4630      	mov	r0, r6
 800c60c:	47c0      	blx	r8
 800c60e:	3001      	adds	r0, #1
 800c610:	d103      	bne.n	800c61a <_printf_common+0xba>
 800c612:	f04f 30ff 	mov.w	r0, #4294967295
 800c616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61a:	3501      	adds	r5, #1
 800c61c:	e7c3      	b.n	800c5a6 <_printf_common+0x46>
 800c61e:	18e1      	adds	r1, r4, r3
 800c620:	1c5a      	adds	r2, r3, #1
 800c622:	2030      	movs	r0, #48	; 0x30
 800c624:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c628:	4422      	add	r2, r4
 800c62a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c62e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c632:	3302      	adds	r3, #2
 800c634:	e7c5      	b.n	800c5c2 <_printf_common+0x62>
 800c636:	2301      	movs	r3, #1
 800c638:	4622      	mov	r2, r4
 800c63a:	4639      	mov	r1, r7
 800c63c:	4630      	mov	r0, r6
 800c63e:	47c0      	blx	r8
 800c640:	3001      	adds	r0, #1
 800c642:	d0e6      	beq.n	800c612 <_printf_common+0xb2>
 800c644:	f109 0901 	add.w	r9, r9, #1
 800c648:	e7d8      	b.n	800c5fc <_printf_common+0x9c>
	...

0800c64c <_printf_i>:
 800c64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c650:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c654:	460c      	mov	r4, r1
 800c656:	7e09      	ldrb	r1, [r1, #24]
 800c658:	b085      	sub	sp, #20
 800c65a:	296e      	cmp	r1, #110	; 0x6e
 800c65c:	4617      	mov	r7, r2
 800c65e:	4606      	mov	r6, r0
 800c660:	4698      	mov	r8, r3
 800c662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c664:	f000 80b3 	beq.w	800c7ce <_printf_i+0x182>
 800c668:	d822      	bhi.n	800c6b0 <_printf_i+0x64>
 800c66a:	2963      	cmp	r1, #99	; 0x63
 800c66c:	d036      	beq.n	800c6dc <_printf_i+0x90>
 800c66e:	d80a      	bhi.n	800c686 <_printf_i+0x3a>
 800c670:	2900      	cmp	r1, #0
 800c672:	f000 80b9 	beq.w	800c7e8 <_printf_i+0x19c>
 800c676:	2958      	cmp	r1, #88	; 0x58
 800c678:	f000 8083 	beq.w	800c782 <_printf_i+0x136>
 800c67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c680:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c684:	e032      	b.n	800c6ec <_printf_i+0xa0>
 800c686:	2964      	cmp	r1, #100	; 0x64
 800c688:	d001      	beq.n	800c68e <_printf_i+0x42>
 800c68a:	2969      	cmp	r1, #105	; 0x69
 800c68c:	d1f6      	bne.n	800c67c <_printf_i+0x30>
 800c68e:	6820      	ldr	r0, [r4, #0]
 800c690:	6813      	ldr	r3, [r2, #0]
 800c692:	0605      	lsls	r5, r0, #24
 800c694:	f103 0104 	add.w	r1, r3, #4
 800c698:	d52a      	bpl.n	800c6f0 <_printf_i+0xa4>
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6011      	str	r1, [r2, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da03      	bge.n	800c6aa <_printf_i+0x5e>
 800c6a2:	222d      	movs	r2, #45	; 0x2d
 800c6a4:	425b      	negs	r3, r3
 800c6a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6aa:	486f      	ldr	r0, [pc, #444]	; (800c868 <_printf_i+0x21c>)
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	e039      	b.n	800c724 <_printf_i+0xd8>
 800c6b0:	2973      	cmp	r1, #115	; 0x73
 800c6b2:	f000 809d 	beq.w	800c7f0 <_printf_i+0x1a4>
 800c6b6:	d808      	bhi.n	800c6ca <_printf_i+0x7e>
 800c6b8:	296f      	cmp	r1, #111	; 0x6f
 800c6ba:	d020      	beq.n	800c6fe <_printf_i+0xb2>
 800c6bc:	2970      	cmp	r1, #112	; 0x70
 800c6be:	d1dd      	bne.n	800c67c <_printf_i+0x30>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	f043 0320 	orr.w	r3, r3, #32
 800c6c6:	6023      	str	r3, [r4, #0]
 800c6c8:	e003      	b.n	800c6d2 <_printf_i+0x86>
 800c6ca:	2975      	cmp	r1, #117	; 0x75
 800c6cc:	d017      	beq.n	800c6fe <_printf_i+0xb2>
 800c6ce:	2978      	cmp	r1, #120	; 0x78
 800c6d0:	d1d4      	bne.n	800c67c <_printf_i+0x30>
 800c6d2:	2378      	movs	r3, #120	; 0x78
 800c6d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6d8:	4864      	ldr	r0, [pc, #400]	; (800c86c <_printf_i+0x220>)
 800c6da:	e055      	b.n	800c788 <_printf_i+0x13c>
 800c6dc:	6813      	ldr	r3, [r2, #0]
 800c6de:	1d19      	adds	r1, r3, #4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6011      	str	r1, [r2, #0]
 800c6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e08c      	b.n	800c80a <_printf_i+0x1be>
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6011      	str	r1, [r2, #0]
 800c6f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6f8:	bf18      	it	ne
 800c6fa:	b21b      	sxthne	r3, r3
 800c6fc:	e7cf      	b.n	800c69e <_printf_i+0x52>
 800c6fe:	6813      	ldr	r3, [r2, #0]
 800c700:	6825      	ldr	r5, [r4, #0]
 800c702:	1d18      	adds	r0, r3, #4
 800c704:	6010      	str	r0, [r2, #0]
 800c706:	0628      	lsls	r0, r5, #24
 800c708:	d501      	bpl.n	800c70e <_printf_i+0xc2>
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	e002      	b.n	800c714 <_printf_i+0xc8>
 800c70e:	0668      	lsls	r0, r5, #25
 800c710:	d5fb      	bpl.n	800c70a <_printf_i+0xbe>
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	4854      	ldr	r0, [pc, #336]	; (800c868 <_printf_i+0x21c>)
 800c716:	296f      	cmp	r1, #111	; 0x6f
 800c718:	bf14      	ite	ne
 800c71a:	220a      	movne	r2, #10
 800c71c:	2208      	moveq	r2, #8
 800c71e:	2100      	movs	r1, #0
 800c720:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c724:	6865      	ldr	r5, [r4, #4]
 800c726:	60a5      	str	r5, [r4, #8]
 800c728:	2d00      	cmp	r5, #0
 800c72a:	f2c0 8095 	blt.w	800c858 <_printf_i+0x20c>
 800c72e:	6821      	ldr	r1, [r4, #0]
 800c730:	f021 0104 	bic.w	r1, r1, #4
 800c734:	6021      	str	r1, [r4, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d13d      	bne.n	800c7b6 <_printf_i+0x16a>
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	f040 808e 	bne.w	800c85c <_printf_i+0x210>
 800c740:	4665      	mov	r5, ip
 800c742:	2a08      	cmp	r2, #8
 800c744:	d10b      	bne.n	800c75e <_printf_i+0x112>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	07db      	lsls	r3, r3, #31
 800c74a:	d508      	bpl.n	800c75e <_printf_i+0x112>
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	6862      	ldr	r2, [r4, #4]
 800c750:	429a      	cmp	r2, r3
 800c752:	bfde      	ittt	le
 800c754:	2330      	movle	r3, #48	; 0x30
 800c756:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c75a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c75e:	ebac 0305 	sub.w	r3, ip, r5
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	f8cd 8000 	str.w	r8, [sp]
 800c768:	463b      	mov	r3, r7
 800c76a:	aa03      	add	r2, sp, #12
 800c76c:	4621      	mov	r1, r4
 800c76e:	4630      	mov	r0, r6
 800c770:	f7ff fef6 	bl	800c560 <_printf_common>
 800c774:	3001      	adds	r0, #1
 800c776:	d14d      	bne.n	800c814 <_printf_i+0x1c8>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	b005      	add	sp, #20
 800c77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c782:	4839      	ldr	r0, [pc, #228]	; (800c868 <_printf_i+0x21c>)
 800c784:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c788:	6813      	ldr	r3, [r2, #0]
 800c78a:	6821      	ldr	r1, [r4, #0]
 800c78c:	1d1d      	adds	r5, r3, #4
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6015      	str	r5, [r2, #0]
 800c792:	060a      	lsls	r2, r1, #24
 800c794:	d50b      	bpl.n	800c7ae <_printf_i+0x162>
 800c796:	07ca      	lsls	r2, r1, #31
 800c798:	bf44      	itt	mi
 800c79a:	f041 0120 	orrmi.w	r1, r1, #32
 800c79e:	6021      	strmi	r1, [r4, #0]
 800c7a0:	b91b      	cbnz	r3, 800c7aa <_printf_i+0x15e>
 800c7a2:	6822      	ldr	r2, [r4, #0]
 800c7a4:	f022 0220 	bic.w	r2, r2, #32
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	2210      	movs	r2, #16
 800c7ac:	e7b7      	b.n	800c71e <_printf_i+0xd2>
 800c7ae:	064d      	lsls	r5, r1, #25
 800c7b0:	bf48      	it	mi
 800c7b2:	b29b      	uxthmi	r3, r3
 800c7b4:	e7ef      	b.n	800c796 <_printf_i+0x14a>
 800c7b6:	4665      	mov	r5, ip
 800c7b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7bc:	fb02 3311 	mls	r3, r2, r1, r3
 800c7c0:	5cc3      	ldrb	r3, [r0, r3]
 800c7c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	d1f5      	bne.n	800c7b8 <_printf_i+0x16c>
 800c7cc:	e7b9      	b.n	800c742 <_printf_i+0xf6>
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	6825      	ldr	r5, [r4, #0]
 800c7d2:	6961      	ldr	r1, [r4, #20]
 800c7d4:	1d18      	adds	r0, r3, #4
 800c7d6:	6010      	str	r0, [r2, #0]
 800c7d8:	0628      	lsls	r0, r5, #24
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	d501      	bpl.n	800c7e2 <_printf_i+0x196>
 800c7de:	6019      	str	r1, [r3, #0]
 800c7e0:	e002      	b.n	800c7e8 <_printf_i+0x19c>
 800c7e2:	066a      	lsls	r2, r5, #25
 800c7e4:	d5fb      	bpl.n	800c7de <_printf_i+0x192>
 800c7e6:	8019      	strh	r1, [r3, #0]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	6123      	str	r3, [r4, #16]
 800c7ec:	4665      	mov	r5, ip
 800c7ee:	e7b9      	b.n	800c764 <_printf_i+0x118>
 800c7f0:	6813      	ldr	r3, [r2, #0]
 800c7f2:	1d19      	adds	r1, r3, #4
 800c7f4:	6011      	str	r1, [r2, #0]
 800c7f6:	681d      	ldr	r5, [r3, #0]
 800c7f8:	6862      	ldr	r2, [r4, #4]
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f7f3 fd77 	bl	80002f0 <memchr>
 800c802:	b108      	cbz	r0, 800c808 <_printf_i+0x1bc>
 800c804:	1b40      	subs	r0, r0, r5
 800c806:	6060      	str	r0, [r4, #4]
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	2300      	movs	r3, #0
 800c80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c812:	e7a7      	b.n	800c764 <_printf_i+0x118>
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	462a      	mov	r2, r5
 800c818:	4639      	mov	r1, r7
 800c81a:	4630      	mov	r0, r6
 800c81c:	47c0      	blx	r8
 800c81e:	3001      	adds	r0, #1
 800c820:	d0aa      	beq.n	800c778 <_printf_i+0x12c>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	079b      	lsls	r3, r3, #30
 800c826:	d413      	bmi.n	800c850 <_printf_i+0x204>
 800c828:	68e0      	ldr	r0, [r4, #12]
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	4298      	cmp	r0, r3
 800c82e:	bfb8      	it	lt
 800c830:	4618      	movlt	r0, r3
 800c832:	e7a3      	b.n	800c77c <_printf_i+0x130>
 800c834:	2301      	movs	r3, #1
 800c836:	464a      	mov	r2, r9
 800c838:	4639      	mov	r1, r7
 800c83a:	4630      	mov	r0, r6
 800c83c:	47c0      	blx	r8
 800c83e:	3001      	adds	r0, #1
 800c840:	d09a      	beq.n	800c778 <_printf_i+0x12c>
 800c842:	3501      	adds	r5, #1
 800c844:	68e3      	ldr	r3, [r4, #12]
 800c846:	9a03      	ldr	r2, [sp, #12]
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	42ab      	cmp	r3, r5
 800c84c:	dcf2      	bgt.n	800c834 <_printf_i+0x1e8>
 800c84e:	e7eb      	b.n	800c828 <_printf_i+0x1dc>
 800c850:	2500      	movs	r5, #0
 800c852:	f104 0919 	add.w	r9, r4, #25
 800c856:	e7f5      	b.n	800c844 <_printf_i+0x1f8>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1ac      	bne.n	800c7b6 <_printf_i+0x16a>
 800c85c:	7803      	ldrb	r3, [r0, #0]
 800c85e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c862:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c866:	e76c      	b.n	800c742 <_printf_i+0xf6>
 800c868:	0800e6a6 	.word	0x0800e6a6
 800c86c:	0800e6b7 	.word	0x0800e6b7

0800c870 <iprintf>:
 800c870:	b40f      	push	{r0, r1, r2, r3}
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <iprintf+0x2c>)
 800c874:	b513      	push	{r0, r1, r4, lr}
 800c876:	681c      	ldr	r4, [r3, #0]
 800c878:	b124      	cbz	r4, 800c884 <iprintf+0x14>
 800c87a:	69a3      	ldr	r3, [r4, #24]
 800c87c:	b913      	cbnz	r3, 800c884 <iprintf+0x14>
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fffa 	bl	800d878 <__sinit>
 800c884:	ab05      	add	r3, sp, #20
 800c886:	9a04      	ldr	r2, [sp, #16]
 800c888:	68a1      	ldr	r1, [r4, #8]
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	4620      	mov	r0, r4
 800c88e:	f001 fcbd 	bl	800e20c <_vfiprintf_r>
 800c892:	b002      	add	sp, #8
 800c894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c898:	b004      	add	sp, #16
 800c89a:	4770      	bx	lr
 800c89c:	24000010 	.word	0x24000010

0800c8a0 <_puts_r>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	460e      	mov	r6, r1
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	b118      	cbz	r0, 800c8b0 <_puts_r+0x10>
 800c8a8:	6983      	ldr	r3, [r0, #24]
 800c8aa:	b90b      	cbnz	r3, 800c8b0 <_puts_r+0x10>
 800c8ac:	f000 ffe4 	bl	800d878 <__sinit>
 800c8b0:	69ab      	ldr	r3, [r5, #24]
 800c8b2:	68ac      	ldr	r4, [r5, #8]
 800c8b4:	b913      	cbnz	r3, 800c8bc <_puts_r+0x1c>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 ffde 	bl	800d878 <__sinit>
 800c8bc:	4b23      	ldr	r3, [pc, #140]	; (800c94c <_puts_r+0xac>)
 800c8be:	429c      	cmp	r4, r3
 800c8c0:	d117      	bne.n	800c8f2 <_puts_r+0x52>
 800c8c2:	686c      	ldr	r4, [r5, #4]
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	071b      	lsls	r3, r3, #28
 800c8c8:	d51d      	bpl.n	800c906 <_puts_r+0x66>
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	b1db      	cbz	r3, 800c906 <_puts_r+0x66>
 800c8ce:	3e01      	subs	r6, #1
 800c8d0:	68a3      	ldr	r3, [r4, #8]
 800c8d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	60a3      	str	r3, [r4, #8]
 800c8da:	b9e9      	cbnz	r1, 800c918 <_puts_r+0x78>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	da2e      	bge.n	800c93e <_puts_r+0x9e>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	210a      	movs	r1, #10
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f000 f83f 	bl	800c968 <__swbuf_r>
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d011      	beq.n	800c912 <_puts_r+0x72>
 800c8ee:	200a      	movs	r0, #10
 800c8f0:	e011      	b.n	800c916 <_puts_r+0x76>
 800c8f2:	4b17      	ldr	r3, [pc, #92]	; (800c950 <_puts_r+0xb0>)
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	d101      	bne.n	800c8fc <_puts_r+0x5c>
 800c8f8:	68ac      	ldr	r4, [r5, #8]
 800c8fa:	e7e3      	b.n	800c8c4 <_puts_r+0x24>
 800c8fc:	4b15      	ldr	r3, [pc, #84]	; (800c954 <_puts_r+0xb4>)
 800c8fe:	429c      	cmp	r4, r3
 800c900:	bf08      	it	eq
 800c902:	68ec      	ldreq	r4, [r5, #12]
 800c904:	e7de      	b.n	800c8c4 <_puts_r+0x24>
 800c906:	4621      	mov	r1, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	f000 f87f 	bl	800ca0c <__swsetup_r>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0dd      	beq.n	800c8ce <_puts_r+0x2e>
 800c912:	f04f 30ff 	mov.w	r0, #4294967295
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	2b00      	cmp	r3, #0
 800c91a:	da04      	bge.n	800c926 <_puts_r+0x86>
 800c91c:	69a2      	ldr	r2, [r4, #24]
 800c91e:	429a      	cmp	r2, r3
 800c920:	dc06      	bgt.n	800c930 <_puts_r+0x90>
 800c922:	290a      	cmp	r1, #10
 800c924:	d004      	beq.n	800c930 <_puts_r+0x90>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	6022      	str	r2, [r4, #0]
 800c92c:	7019      	strb	r1, [r3, #0]
 800c92e:	e7cf      	b.n	800c8d0 <_puts_r+0x30>
 800c930:	4622      	mov	r2, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f818 	bl	800c968 <__swbuf_r>
 800c938:	3001      	adds	r0, #1
 800c93a:	d1c9      	bne.n	800c8d0 <_puts_r+0x30>
 800c93c:	e7e9      	b.n	800c912 <_puts_r+0x72>
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	200a      	movs	r0, #10
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	6022      	str	r2, [r4, #0]
 800c946:	7018      	strb	r0, [r3, #0]
 800c948:	e7e5      	b.n	800c916 <_puts_r+0x76>
 800c94a:	bf00      	nop
 800c94c:	0800e6f8 	.word	0x0800e6f8
 800c950:	0800e718 	.word	0x0800e718
 800c954:	0800e6d8 	.word	0x0800e6d8

0800c958 <puts>:
 800c958:	4b02      	ldr	r3, [pc, #8]	; (800c964 <puts+0xc>)
 800c95a:	4601      	mov	r1, r0
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	f7ff bf9f 	b.w	800c8a0 <_puts_r>
 800c962:	bf00      	nop
 800c964:	24000010 	.word	0x24000010

0800c968 <__swbuf_r>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	460e      	mov	r6, r1
 800c96c:	4614      	mov	r4, r2
 800c96e:	4605      	mov	r5, r0
 800c970:	b118      	cbz	r0, 800c97a <__swbuf_r+0x12>
 800c972:	6983      	ldr	r3, [r0, #24]
 800c974:	b90b      	cbnz	r3, 800c97a <__swbuf_r+0x12>
 800c976:	f000 ff7f 	bl	800d878 <__sinit>
 800c97a:	4b21      	ldr	r3, [pc, #132]	; (800ca00 <__swbuf_r+0x98>)
 800c97c:	429c      	cmp	r4, r3
 800c97e:	d12a      	bne.n	800c9d6 <__swbuf_r+0x6e>
 800c980:	686c      	ldr	r4, [r5, #4]
 800c982:	69a3      	ldr	r3, [r4, #24]
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	071a      	lsls	r2, r3, #28
 800c98a:	d52e      	bpl.n	800c9ea <__swbuf_r+0x82>
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	b363      	cbz	r3, 800c9ea <__swbuf_r+0x82>
 800c990:	6923      	ldr	r3, [r4, #16]
 800c992:	6820      	ldr	r0, [r4, #0]
 800c994:	1ac0      	subs	r0, r0, r3
 800c996:	6963      	ldr	r3, [r4, #20]
 800c998:	b2f6      	uxtb	r6, r6
 800c99a:	4283      	cmp	r3, r0
 800c99c:	4637      	mov	r7, r6
 800c99e:	dc04      	bgt.n	800c9aa <__swbuf_r+0x42>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f000 fefe 	bl	800d7a4 <_fflush_r>
 800c9a8:	bb28      	cbnz	r0, 800c9f6 <__swbuf_r+0x8e>
 800c9aa:	68a3      	ldr	r3, [r4, #8]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	60a3      	str	r3, [r4, #8]
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	6022      	str	r2, [r4, #0]
 800c9b6:	701e      	strb	r6, [r3, #0]
 800c9b8:	6963      	ldr	r3, [r4, #20]
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	4283      	cmp	r3, r0
 800c9be:	d004      	beq.n	800c9ca <__swbuf_r+0x62>
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	07db      	lsls	r3, r3, #31
 800c9c4:	d519      	bpl.n	800c9fa <__swbuf_r+0x92>
 800c9c6:	2e0a      	cmp	r6, #10
 800c9c8:	d117      	bne.n	800c9fa <__swbuf_r+0x92>
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f000 fee9 	bl	800d7a4 <_fflush_r>
 800c9d2:	b190      	cbz	r0, 800c9fa <__swbuf_r+0x92>
 800c9d4:	e00f      	b.n	800c9f6 <__swbuf_r+0x8e>
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <__swbuf_r+0x9c>)
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	d101      	bne.n	800c9e0 <__swbuf_r+0x78>
 800c9dc:	68ac      	ldr	r4, [r5, #8]
 800c9de:	e7d0      	b.n	800c982 <__swbuf_r+0x1a>
 800c9e0:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <__swbuf_r+0xa0>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	bf08      	it	eq
 800c9e6:	68ec      	ldreq	r4, [r5, #12]
 800c9e8:	e7cb      	b.n	800c982 <__swbuf_r+0x1a>
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f000 f80d 	bl	800ca0c <__swsetup_r>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d0cc      	beq.n	800c990 <__swbuf_r+0x28>
 800c9f6:	f04f 37ff 	mov.w	r7, #4294967295
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	0800e6f8 	.word	0x0800e6f8
 800ca04:	0800e718 	.word	0x0800e718
 800ca08:	0800e6d8 	.word	0x0800e6d8

0800ca0c <__swsetup_r>:
 800ca0c:	4b32      	ldr	r3, [pc, #200]	; (800cad8 <__swsetup_r+0xcc>)
 800ca0e:	b570      	push	{r4, r5, r6, lr}
 800ca10:	681d      	ldr	r5, [r3, #0]
 800ca12:	4606      	mov	r6, r0
 800ca14:	460c      	mov	r4, r1
 800ca16:	b125      	cbz	r5, 800ca22 <__swsetup_r+0x16>
 800ca18:	69ab      	ldr	r3, [r5, #24]
 800ca1a:	b913      	cbnz	r3, 800ca22 <__swsetup_r+0x16>
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f000 ff2b 	bl	800d878 <__sinit>
 800ca22:	4b2e      	ldr	r3, [pc, #184]	; (800cadc <__swsetup_r+0xd0>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	d10f      	bne.n	800ca48 <__swsetup_r+0x3c>
 800ca28:	686c      	ldr	r4, [r5, #4]
 800ca2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	0715      	lsls	r5, r2, #28
 800ca32:	d42c      	bmi.n	800ca8e <__swsetup_r+0x82>
 800ca34:	06d0      	lsls	r0, r2, #27
 800ca36:	d411      	bmi.n	800ca5c <__swsetup_r+0x50>
 800ca38:	2209      	movs	r2, #9
 800ca3a:	6032      	str	r2, [r6, #0]
 800ca3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	e03e      	b.n	800cac6 <__swsetup_r+0xba>
 800ca48:	4b25      	ldr	r3, [pc, #148]	; (800cae0 <__swsetup_r+0xd4>)
 800ca4a:	429c      	cmp	r4, r3
 800ca4c:	d101      	bne.n	800ca52 <__swsetup_r+0x46>
 800ca4e:	68ac      	ldr	r4, [r5, #8]
 800ca50:	e7eb      	b.n	800ca2a <__swsetup_r+0x1e>
 800ca52:	4b24      	ldr	r3, [pc, #144]	; (800cae4 <__swsetup_r+0xd8>)
 800ca54:	429c      	cmp	r4, r3
 800ca56:	bf08      	it	eq
 800ca58:	68ec      	ldreq	r4, [r5, #12]
 800ca5a:	e7e6      	b.n	800ca2a <__swsetup_r+0x1e>
 800ca5c:	0751      	lsls	r1, r2, #29
 800ca5e:	d512      	bpl.n	800ca86 <__swsetup_r+0x7a>
 800ca60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca62:	b141      	cbz	r1, 800ca76 <__swsetup_r+0x6a>
 800ca64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca68:	4299      	cmp	r1, r3
 800ca6a:	d002      	beq.n	800ca72 <__swsetup_r+0x66>
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f001 fafb 	bl	800e068 <_free_r>
 800ca72:	2300      	movs	r3, #0
 800ca74:	6363      	str	r3, [r4, #52]	; 0x34
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	6063      	str	r3, [r4, #4]
 800ca82:	6923      	ldr	r3, [r4, #16]
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	f043 0308 	orr.w	r3, r3, #8
 800ca8c:	81a3      	strh	r3, [r4, #12]
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	b94b      	cbnz	r3, 800caa6 <__swsetup_r+0x9a>
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca9c:	d003      	beq.n	800caa6 <__swsetup_r+0x9a>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4630      	mov	r0, r6
 800caa2:	f000 ffa5 	bl	800d9f0 <__smakebuf_r>
 800caa6:	89a2      	ldrh	r2, [r4, #12]
 800caa8:	f012 0301 	ands.w	r3, r2, #1
 800caac:	d00c      	beq.n	800cac8 <__swsetup_r+0xbc>
 800caae:	2300      	movs	r3, #0
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	6963      	ldr	r3, [r4, #20]
 800cab4:	425b      	negs	r3, r3
 800cab6:	61a3      	str	r3, [r4, #24]
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b953      	cbnz	r3, 800cad2 <__swsetup_r+0xc6>
 800cabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cac4:	d1ba      	bne.n	800ca3c <__swsetup_r+0x30>
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	0792      	lsls	r2, r2, #30
 800caca:	bf58      	it	pl
 800cacc:	6963      	ldrpl	r3, [r4, #20]
 800cace:	60a3      	str	r3, [r4, #8]
 800cad0:	e7f2      	b.n	800cab8 <__swsetup_r+0xac>
 800cad2:	2000      	movs	r0, #0
 800cad4:	e7f7      	b.n	800cac6 <__swsetup_r+0xba>
 800cad6:	bf00      	nop
 800cad8:	24000010 	.word	0x24000010
 800cadc:	0800e6f8 	.word	0x0800e6f8
 800cae0:	0800e718 	.word	0x0800e718
 800cae4:	0800e6d8 	.word	0x0800e6d8

0800cae8 <quorem>:
 800cae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	6903      	ldr	r3, [r0, #16]
 800caee:	690c      	ldr	r4, [r1, #16]
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	4680      	mov	r8, r0
 800caf4:	f2c0 8082 	blt.w	800cbfc <quorem+0x114>
 800caf8:	3c01      	subs	r4, #1
 800cafa:	f101 0714 	add.w	r7, r1, #20
 800cafe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cb02:	f100 0614 	add.w	r6, r0, #20
 800cb06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cb0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cb0e:	eb06 030c 	add.w	r3, r6, ip
 800cb12:	3501      	adds	r5, #1
 800cb14:	eb07 090c 	add.w	r9, r7, ip
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	fbb0 f5f5 	udiv	r5, r0, r5
 800cb1e:	b395      	cbz	r5, 800cb86 <quorem+0x9e>
 800cb20:	f04f 0a00 	mov.w	sl, #0
 800cb24:	4638      	mov	r0, r7
 800cb26:	46b6      	mov	lr, r6
 800cb28:	46d3      	mov	fp, sl
 800cb2a:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb2e:	b293      	uxth	r3, r2
 800cb30:	fb05 a303 	mla	r3, r5, r3, sl
 800cb34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	ebab 0303 	sub.w	r3, fp, r3
 800cb3e:	0c12      	lsrs	r2, r2, #16
 800cb40:	f8de b000 	ldr.w	fp, [lr]
 800cb44:	fb05 a202 	mla	r2, r5, r2, sl
 800cb48:	fa13 f38b 	uxtah	r3, r3, fp
 800cb4c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cb50:	fa1f fb82 	uxth.w	fp, r2
 800cb54:	f8de 2000 	ldr.w	r2, [lr]
 800cb58:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cb5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb66:	4581      	cmp	r9, r0
 800cb68:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cb6c:	f84e 3b04 	str.w	r3, [lr], #4
 800cb70:	d2db      	bcs.n	800cb2a <quorem+0x42>
 800cb72:	f856 300c 	ldr.w	r3, [r6, ip]
 800cb76:	b933      	cbnz	r3, 800cb86 <quorem+0x9e>
 800cb78:	9b01      	ldr	r3, [sp, #4]
 800cb7a:	3b04      	subs	r3, #4
 800cb7c:	429e      	cmp	r6, r3
 800cb7e:	461a      	mov	r2, r3
 800cb80:	d330      	bcc.n	800cbe4 <quorem+0xfc>
 800cb82:	f8c8 4010 	str.w	r4, [r8, #16]
 800cb86:	4640      	mov	r0, r8
 800cb88:	f001 f99a 	bl	800dec0 <__mcmp>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	db25      	blt.n	800cbdc <quorem+0xf4>
 800cb90:	3501      	adds	r5, #1
 800cb92:	4630      	mov	r0, r6
 800cb94:	f04f 0c00 	mov.w	ip, #0
 800cb98:	f857 2b04 	ldr.w	r2, [r7], #4
 800cb9c:	f8d0 e000 	ldr.w	lr, [r0]
 800cba0:	b293      	uxth	r3, r2
 800cba2:	ebac 0303 	sub.w	r3, ip, r3
 800cba6:	0c12      	lsrs	r2, r2, #16
 800cba8:	fa13 f38e 	uxtah	r3, r3, lr
 800cbac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbba:	45b9      	cmp	r9, r7
 800cbbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cbc0:	f840 3b04 	str.w	r3, [r0], #4
 800cbc4:	d2e8      	bcs.n	800cb98 <quorem+0xb0>
 800cbc6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cbca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cbce:	b92a      	cbnz	r2, 800cbdc <quorem+0xf4>
 800cbd0:	3b04      	subs	r3, #4
 800cbd2:	429e      	cmp	r6, r3
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	d30b      	bcc.n	800cbf0 <quorem+0x108>
 800cbd8:	f8c8 4010 	str.w	r4, [r8, #16]
 800cbdc:	4628      	mov	r0, r5
 800cbde:	b003      	add	sp, #12
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	3b04      	subs	r3, #4
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	d1ca      	bne.n	800cb82 <quorem+0x9a>
 800cbec:	3c01      	subs	r4, #1
 800cbee:	e7c5      	b.n	800cb7c <quorem+0x94>
 800cbf0:	6812      	ldr	r2, [r2, #0]
 800cbf2:	3b04      	subs	r3, #4
 800cbf4:	2a00      	cmp	r2, #0
 800cbf6:	d1ef      	bne.n	800cbd8 <quorem+0xf0>
 800cbf8:	3c01      	subs	r4, #1
 800cbfa:	e7ea      	b.n	800cbd2 <quorem+0xea>
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	e7ee      	b.n	800cbde <quorem+0xf6>

0800cc00 <_dtoa_r>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	ec57 6b10 	vmov	r6, r7, d0
 800cc08:	b095      	sub	sp, #84	; 0x54
 800cc0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc0c:	9108      	str	r1, [sp, #32]
 800cc0e:	4604      	mov	r4, r0
 800cc10:	920a      	str	r2, [sp, #40]	; 0x28
 800cc12:	9311      	str	r3, [sp, #68]	; 0x44
 800cc14:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800cc18:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cc1c:	b93d      	cbnz	r5, 800cc2e <_dtoa_r+0x2e>
 800cc1e:	2010      	movs	r0, #16
 800cc20:	f000 ff26 	bl	800da70 <malloc>
 800cc24:	6260      	str	r0, [r4, #36]	; 0x24
 800cc26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc2a:	6005      	str	r5, [r0, #0]
 800cc2c:	60c5      	str	r5, [r0, #12]
 800cc2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc30:	6819      	ldr	r1, [r3, #0]
 800cc32:	b151      	cbz	r1, 800cc4a <_dtoa_r+0x4a>
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	604a      	str	r2, [r1, #4]
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4093      	lsls	r3, r2
 800cc3c:	608b      	str	r3, [r1, #8]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 ff5d 	bl	800dafe <_Bfree>
 800cc44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	1e3b      	subs	r3, r7, #0
 800cc4c:	bfb9      	ittee	lt
 800cc4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cc52:	9303      	strlt	r3, [sp, #12]
 800cc54:	2300      	movge	r3, #0
 800cc56:	f8c8 3000 	strge.w	r3, [r8]
 800cc5a:	9d03      	ldr	r5, [sp, #12]
 800cc5c:	4bac      	ldr	r3, [pc, #688]	; (800cf10 <_dtoa_r+0x310>)
 800cc5e:	bfbc      	itt	lt
 800cc60:	2201      	movlt	r2, #1
 800cc62:	f8c8 2000 	strlt.w	r2, [r8]
 800cc66:	43ab      	bics	r3, r5
 800cc68:	d11b      	bne.n	800cca2 <_dtoa_r+0xa2>
 800cc6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc6c:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	9b02      	ldr	r3, [sp, #8]
 800cc74:	b923      	cbnz	r3, 800cc80 <_dtoa_r+0x80>
 800cc76:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cc7a:	2d00      	cmp	r5, #0
 800cc7c:	f000 84dd 	beq.w	800d63a <_dtoa_r+0xa3a>
 800cc80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cc82:	b953      	cbnz	r3, 800cc9a <_dtoa_r+0x9a>
 800cc84:	4ba3      	ldr	r3, [pc, #652]	; (800cf14 <_dtoa_r+0x314>)
 800cc86:	e020      	b.n	800ccca <_dtoa_r+0xca>
 800cc88:	4ba3      	ldr	r3, [pc, #652]	; (800cf18 <_dtoa_r+0x318>)
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc90:	6013      	str	r3, [r2, #0]
 800cc92:	9804      	ldr	r0, [sp, #16]
 800cc94:	b015      	add	sp, #84	; 0x54
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	4b9e      	ldr	r3, [pc, #632]	; (800cf14 <_dtoa_r+0x314>)
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	3303      	adds	r3, #3
 800cca0:	e7f5      	b.n	800cc8e <_dtoa_r+0x8e>
 800cca2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cca6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccae:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ccb2:	d10c      	bne.n	800ccce <_dtoa_r+0xce>
 800ccb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 84b9 	beq.w	800d634 <_dtoa_r+0xa34>
 800ccc2:	4b96      	ldr	r3, [pc, #600]	; (800cf1c <_dtoa_r+0x31c>)
 800ccc4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	e7e1      	b.n	800cc92 <_dtoa_r+0x92>
 800ccce:	a913      	add	r1, sp, #76	; 0x4c
 800ccd0:	aa12      	add	r2, sp, #72	; 0x48
 800ccd2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f001 f969 	bl	800dfae <__d2b>
 800ccdc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800cce0:	9001      	str	r0, [sp, #4]
 800cce2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cce4:	2e00      	cmp	r6, #0
 800cce6:	d046      	beq.n	800cd76 <_dtoa_r+0x176>
 800cce8:	9805      	ldr	r0, [sp, #20]
 800ccea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ccee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccf2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800ccf6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ccfa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800ccfe:	2700      	movs	r7, #0
 800cd00:	ee07 aa90 	vmov	s15, sl
 800cd04:	ec43 2b16 	vmov	d6, r2, r3
 800cd08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800cd0c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800cef8 <_dtoa_r+0x2f8>
 800cd10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cd14:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cd18:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800cf00 <_dtoa_r+0x300>
 800cd1c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cd20:	eeb0 7b46 	vmov.f64	d7, d6
 800cd24:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800cf08 <_dtoa_r+0x308>
 800cd28:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd2c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cd30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd38:	ee16 ba90 	vmov	fp, s13
 800cd3c:	d508      	bpl.n	800cd50 <_dtoa_r+0x150>
 800cd3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cd42:	eeb4 6b47 	vcmp.f64	d6, d7
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	bf18      	it	ne
 800cd4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cd50:	f1bb 0f16 	cmp.w	fp, #22
 800cd54:	d834      	bhi.n	800cdc0 <_dtoa_r+0x1c0>
 800cd56:	4b72      	ldr	r3, [pc, #456]	; (800cf20 <_dtoa_r+0x320>)
 800cd58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd5c:	ed93 7b00 	vldr	d7, [r3]
 800cd60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6c:	dd01      	ble.n	800cd72 <_dtoa_r+0x172>
 800cd6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd72:	2300      	movs	r3, #0
 800cd74:	e025      	b.n	800cdc2 <_dtoa_r+0x1c2>
 800cd76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd78:	eb01 0a03 	add.w	sl, r1, r3
 800cd7c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800cd80:	2b20      	cmp	r3, #32
 800cd82:	dd17      	ble.n	800cdb4 <_dtoa_r+0x1b4>
 800cd84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800cd88:	9a02      	ldr	r2, [sp, #8]
 800cd8a:	409d      	lsls	r5, r3
 800cd8c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800cd90:	fa22 f303 	lsr.w	r3, r2, r3
 800cd94:	432b      	orrs	r3, r5
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cd9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cda2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cda6:	9805      	ldr	r0, [sp, #20]
 800cda8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdac:	2701      	movs	r7, #1
 800cdae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800cdb2:	e7a5      	b.n	800cd00 <_dtoa_r+0x100>
 800cdb4:	9a02      	ldr	r2, [sp, #8]
 800cdb6:	f1c3 0320 	rsb	r3, r3, #32
 800cdba:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbe:	e7ea      	b.n	800cd96 <_dtoa_r+0x196>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	eba1 0a0a 	sub.w	sl, r1, sl
 800cdc6:	9310      	str	r3, [sp, #64]	; 0x40
 800cdc8:	f1ba 0301 	subs.w	r3, sl, #1
 800cdcc:	9307      	str	r3, [sp, #28]
 800cdce:	bf43      	ittte	mi
 800cdd0:	2300      	movmi	r3, #0
 800cdd2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800cdd6:	9307      	strmi	r3, [sp, #28]
 800cdd8:	f04f 0a00 	movpl.w	sl, #0
 800cddc:	f1bb 0f00 	cmp.w	fp, #0
 800cde0:	db19      	blt.n	800ce16 <_dtoa_r+0x216>
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cde8:	445b      	add	r3, fp
 800cdea:	9307      	str	r3, [sp, #28]
 800cdec:	f04f 0800 	mov.w	r8, #0
 800cdf0:	9b08      	ldr	r3, [sp, #32]
 800cdf2:	2b09      	cmp	r3, #9
 800cdf4:	d866      	bhi.n	800cec4 <_dtoa_r+0x2c4>
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	bfc4      	itt	gt
 800cdfa:	3b04      	subgt	r3, #4
 800cdfc:	9308      	strgt	r3, [sp, #32]
 800cdfe:	9b08      	ldr	r3, [sp, #32]
 800ce00:	f1a3 0302 	sub.w	r3, r3, #2
 800ce04:	bfcc      	ite	gt
 800ce06:	2500      	movgt	r5, #0
 800ce08:	2501      	movle	r5, #1
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d866      	bhi.n	800cedc <_dtoa_r+0x2dc>
 800ce0e:	e8df f003 	tbb	[pc, r3]
 800ce12:	5755      	.short	0x5755
 800ce14:	4909      	.short	0x4909
 800ce16:	2300      	movs	r3, #0
 800ce18:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ce1c:	f1cb 0800 	rsb	r8, fp, #0
 800ce20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce22:	e7e5      	b.n	800cdf0 <_dtoa_r+0x1f0>
 800ce24:	2301      	movs	r3, #1
 800ce26:	9309      	str	r3, [sp, #36]	; 0x24
 800ce28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd59      	ble.n	800cee2 <_dtoa_r+0x2e2>
 800ce2e:	9306      	str	r3, [sp, #24]
 800ce30:	4699      	mov	r9, r3
 800ce32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce34:	2200      	movs	r2, #0
 800ce36:	6072      	str	r2, [r6, #4]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	f102 0014 	add.w	r0, r2, #20
 800ce3e:	4298      	cmp	r0, r3
 800ce40:	6871      	ldr	r1, [r6, #4]
 800ce42:	d953      	bls.n	800ceec <_dtoa_r+0x2ec>
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fe26 	bl	800da96 <_Balloc>
 800ce4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce4c:	6030      	str	r0, [r6, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	f1b9 0f0e 	cmp.w	r9, #14
 800ce56:	f200 80c2 	bhi.w	800cfde <_dtoa_r+0x3de>
 800ce5a:	2d00      	cmp	r5, #0
 800ce5c:	f000 80bf 	beq.w	800cfde <_dtoa_r+0x3de>
 800ce60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce64:	f1bb 0f00 	cmp.w	fp, #0
 800ce68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ce6c:	f340 80e6 	ble.w	800d03c <_dtoa_r+0x43c>
 800ce70:	4a2b      	ldr	r2, [pc, #172]	; (800cf20 <_dtoa_r+0x320>)
 800ce72:	f00b 030f 	and.w	r3, fp, #15
 800ce76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce7a:	ed93 7b00 	vldr	d7, [r3]
 800ce7e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ce82:	06da      	lsls	r2, r3, #27
 800ce84:	f140 80d8 	bpl.w	800d038 <_dtoa_r+0x438>
 800ce88:	4a26      	ldr	r2, [pc, #152]	; (800cf24 <_dtoa_r+0x324>)
 800ce8a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ce8e:	ed92 6b08 	vldr	d6, [r2, #32]
 800ce92:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ce96:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce9a:	f003 030f 	and.w	r3, r3, #15
 800ce9e:	2203      	movs	r2, #3
 800cea0:	4920      	ldr	r1, [pc, #128]	; (800cf24 <_dtoa_r+0x324>)
 800cea2:	e04a      	b.n	800cf3a <_dtoa_r+0x33a>
 800cea4:	2301      	movs	r3, #1
 800cea6:	9309      	str	r3, [sp, #36]	; 0x24
 800cea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceaa:	445b      	add	r3, fp
 800ceac:	f103 0901 	add.w	r9, r3, #1
 800ceb0:	9306      	str	r3, [sp, #24]
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	bfb8      	it	lt
 800ceb8:	2301      	movlt	r3, #1
 800ceba:	e7ba      	b.n	800ce32 <_dtoa_r+0x232>
 800cebc:	2300      	movs	r3, #0
 800cebe:	e7b2      	b.n	800ce26 <_dtoa_r+0x226>
 800cec0:	2300      	movs	r3, #0
 800cec2:	e7f0      	b.n	800cea6 <_dtoa_r+0x2a6>
 800cec4:	2501      	movs	r5, #1
 800cec6:	2300      	movs	r3, #0
 800cec8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800cecc:	f04f 33ff 	mov.w	r3, #4294967295
 800ced0:	9306      	str	r3, [sp, #24]
 800ced2:	4699      	mov	r9, r3
 800ced4:	2200      	movs	r2, #0
 800ced6:	2312      	movs	r3, #18
 800ced8:	920a      	str	r2, [sp, #40]	; 0x28
 800ceda:	e7aa      	b.n	800ce32 <_dtoa_r+0x232>
 800cedc:	2301      	movs	r3, #1
 800cede:	9309      	str	r3, [sp, #36]	; 0x24
 800cee0:	e7f4      	b.n	800cecc <_dtoa_r+0x2cc>
 800cee2:	2301      	movs	r3, #1
 800cee4:	9306      	str	r3, [sp, #24]
 800cee6:	4699      	mov	r9, r3
 800cee8:	461a      	mov	r2, r3
 800ceea:	e7f5      	b.n	800ced8 <_dtoa_r+0x2d8>
 800ceec:	3101      	adds	r1, #1
 800ceee:	6071      	str	r1, [r6, #4]
 800cef0:	0052      	lsls	r2, r2, #1
 800cef2:	e7a2      	b.n	800ce3a <_dtoa_r+0x23a>
 800cef4:	f3af 8000 	nop.w
 800cef8:	636f4361 	.word	0x636f4361
 800cefc:	3fd287a7 	.word	0x3fd287a7
 800cf00:	8b60c8b3 	.word	0x8b60c8b3
 800cf04:	3fc68a28 	.word	0x3fc68a28
 800cf08:	509f79fb 	.word	0x509f79fb
 800cf0c:	3fd34413 	.word	0x3fd34413
 800cf10:	7ff00000 	.word	0x7ff00000
 800cf14:	0800e6d1 	.word	0x0800e6d1
 800cf18:	0800e6c8 	.word	0x0800e6c8
 800cf1c:	0800e6a5 	.word	0x0800e6a5
 800cf20:	0800e760 	.word	0x0800e760
 800cf24:	0800e738 	.word	0x0800e738
 800cf28:	07de      	lsls	r6, r3, #31
 800cf2a:	d504      	bpl.n	800cf36 <_dtoa_r+0x336>
 800cf2c:	ed91 6b00 	vldr	d6, [r1]
 800cf30:	3201      	adds	r2, #1
 800cf32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf36:	105b      	asrs	r3, r3, #1
 800cf38:	3108      	adds	r1, #8
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1f4      	bne.n	800cf28 <_dtoa_r+0x328>
 800cf3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cf46:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 80a7 	beq.w	800d0a0 <_dtoa_r+0x4a0>
 800cf52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cf56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf62:	f140 809d 	bpl.w	800d0a0 <_dtoa_r+0x4a0>
 800cf66:	f1b9 0f00 	cmp.w	r9, #0
 800cf6a:	f000 8099 	beq.w	800d0a0 <_dtoa_r+0x4a0>
 800cf6e:	9b06      	ldr	r3, [sp, #24]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	dd30      	ble.n	800cfd6 <_dtoa_r+0x3d6>
 800cf74:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cf78:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf80:	9d06      	ldr	r5, [sp, #24]
 800cf82:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cf86:	3201      	adds	r2, #1
 800cf88:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf8c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cf90:	ee07 2a90 	vmov	s15, r2
 800cf94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf98:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cf9c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800cfa0:	9a03      	ldr	r2, [sp, #12]
 800cfa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800cfaa:	2d00      	cmp	r5, #0
 800cfac:	d17b      	bne.n	800d0a6 <_dtoa_r+0x4a6>
 800cfae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cfb2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cfb6:	ec41 0b17 	vmov	d7, r0, r1
 800cfba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc2:	f300 8253 	bgt.w	800d46c <_dtoa_r+0x86c>
 800cfc6:	eeb1 7b47 	vneg.f64	d7, d7
 800cfca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd2:	f100 8249 	bmi.w	800d468 <_dtoa_r+0x868>
 800cfd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cfda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f2c0 8119 	blt.w	800d218 <_dtoa_r+0x618>
 800cfe6:	f1bb 0f0e 	cmp.w	fp, #14
 800cfea:	f300 8115 	bgt.w	800d218 <_dtoa_r+0x618>
 800cfee:	4bc3      	ldr	r3, [pc, #780]	; (800d2fc <_dtoa_r+0x6fc>)
 800cff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cff4:	ed93 6b00 	vldr	d6, [r3]
 800cff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f280 80ba 	bge.w	800d174 <_dtoa_r+0x574>
 800d000:	f1b9 0f00 	cmp.w	r9, #0
 800d004:	f300 80b6 	bgt.w	800d174 <_dtoa_r+0x574>
 800d008:	f040 822d 	bne.w	800d466 <_dtoa_r+0x866>
 800d00c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d010:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d014:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d018:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d020:	464d      	mov	r5, r9
 800d022:	464f      	mov	r7, r9
 800d024:	f280 8204 	bge.w	800d430 <_dtoa_r+0x830>
 800d028:	9b04      	ldr	r3, [sp, #16]
 800d02a:	9a04      	ldr	r2, [sp, #16]
 800d02c:	1c5e      	adds	r6, r3, #1
 800d02e:	2331      	movs	r3, #49	; 0x31
 800d030:	7013      	strb	r3, [r2, #0]
 800d032:	f10b 0b01 	add.w	fp, fp, #1
 800d036:	e1ff      	b.n	800d438 <_dtoa_r+0x838>
 800d038:	2202      	movs	r2, #2
 800d03a:	e731      	b.n	800cea0 <_dtoa_r+0x2a0>
 800d03c:	d02e      	beq.n	800d09c <_dtoa_r+0x49c>
 800d03e:	f1cb 0300 	rsb	r3, fp, #0
 800d042:	4aae      	ldr	r2, [pc, #696]	; (800d2fc <_dtoa_r+0x6fc>)
 800d044:	f003 010f 	and.w	r1, r3, #15
 800d048:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d04c:	ed92 7b00 	vldr	d7, [r2]
 800d050:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d054:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d058:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d05c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d060:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d064:	49a6      	ldr	r1, [pc, #664]	; (800d300 <_dtoa_r+0x700>)
 800d066:	111b      	asrs	r3, r3, #4
 800d068:	2000      	movs	r0, #0
 800d06a:	2202      	movs	r2, #2
 800d06c:	b93b      	cbnz	r3, 800d07e <_dtoa_r+0x47e>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f af6b 	beq.w	800cf4a <_dtoa_r+0x34a>
 800d074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d07c:	e765      	b.n	800cf4a <_dtoa_r+0x34a>
 800d07e:	07dd      	lsls	r5, r3, #31
 800d080:	d509      	bpl.n	800d096 <_dtoa_r+0x496>
 800d082:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d086:	ed91 7b00 	vldr	d7, [r1]
 800d08a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d08e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d092:	3201      	adds	r2, #1
 800d094:	2001      	movs	r0, #1
 800d096:	105b      	asrs	r3, r3, #1
 800d098:	3108      	adds	r1, #8
 800d09a:	e7e7      	b.n	800d06c <_dtoa_r+0x46c>
 800d09c:	2202      	movs	r2, #2
 800d09e:	e754      	b.n	800cf4a <_dtoa_r+0x34a>
 800d0a0:	465b      	mov	r3, fp
 800d0a2:	464d      	mov	r5, r9
 800d0a4:	e770      	b.n	800cf88 <_dtoa_r+0x388>
 800d0a6:	4a95      	ldr	r2, [pc, #596]	; (800d2fc <_dtoa_r+0x6fc>)
 800d0a8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d0ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b2:	ec41 0b17 	vmov	d7, r0, r1
 800d0b6:	b35a      	cbz	r2, 800d110 <_dtoa_r+0x510>
 800d0b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d0bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d0c0:	9e04      	ldr	r6, [sp, #16]
 800d0c2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d0c6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d0ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d0ce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d0d2:	ee14 2a90 	vmov	r2, s9
 800d0d6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d0da:	3230      	adds	r2, #48	; 0x30
 800d0dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d0e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e8:	f806 2b01 	strb.w	r2, [r6], #1
 800d0ec:	d43b      	bmi.n	800d166 <_dtoa_r+0x566>
 800d0ee:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d0f2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fa:	d472      	bmi.n	800d1e2 <_dtoa_r+0x5e2>
 800d0fc:	9a04      	ldr	r2, [sp, #16]
 800d0fe:	1ab2      	subs	r2, r6, r2
 800d100:	4295      	cmp	r5, r2
 800d102:	f77f af68 	ble.w	800cfd6 <_dtoa_r+0x3d6>
 800d106:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d10a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d10e:	e7de      	b.n	800d0ce <_dtoa_r+0x4ce>
 800d110:	9a04      	ldr	r2, [sp, #16]
 800d112:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d116:	1956      	adds	r6, r2, r5
 800d118:	4611      	mov	r1, r2
 800d11a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d11e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d122:	ee14 2a90 	vmov	r2, s9
 800d126:	3230      	adds	r2, #48	; 0x30
 800d128:	f801 2b01 	strb.w	r2, [r1], #1
 800d12c:	42b1      	cmp	r1, r6
 800d12e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d132:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d136:	d11a      	bne.n	800d16e <_dtoa_r+0x56e>
 800d138:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d13c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d140:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d148:	dc4b      	bgt.n	800d1e2 <_dtoa_r+0x5e2>
 800d14a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d14e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d156:	f57f af3e 	bpl.w	800cfd6 <_dtoa_r+0x3d6>
 800d15a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d15e:	2a30      	cmp	r2, #48	; 0x30
 800d160:	f106 31ff 	add.w	r1, r6, #4294967295
 800d164:	d001      	beq.n	800d16a <_dtoa_r+0x56a>
 800d166:	469b      	mov	fp, r3
 800d168:	e02a      	b.n	800d1c0 <_dtoa_r+0x5c0>
 800d16a:	460e      	mov	r6, r1
 800d16c:	e7f5      	b.n	800d15a <_dtoa_r+0x55a>
 800d16e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d172:	e7d4      	b.n	800d11e <_dtoa_r+0x51e>
 800d174:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d178:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d17c:	9e04      	ldr	r6, [sp, #16]
 800d17e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d182:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d186:	ee15 3a10 	vmov	r3, s10
 800d18a:	3330      	adds	r3, #48	; 0x30
 800d18c:	f806 3b01 	strb.w	r3, [r6], #1
 800d190:	9b04      	ldr	r3, [sp, #16]
 800d192:	1af3      	subs	r3, r6, r3
 800d194:	4599      	cmp	r9, r3
 800d196:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d19a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d19e:	d133      	bne.n	800d208 <_dtoa_r+0x608>
 800d1a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d1a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ac:	dc18      	bgt.n	800d1e0 <_dtoa_r+0x5e0>
 800d1ae:	eeb4 7b46 	vcmp.f64	d7, d6
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	d103      	bne.n	800d1c0 <_dtoa_r+0x5c0>
 800d1b8:	ee15 3a10 	vmov	r3, s10
 800d1bc:	07db      	lsls	r3, r3, #31
 800d1be:	d40f      	bmi.n	800d1e0 <_dtoa_r+0x5e0>
 800d1c0:	9901      	ldr	r1, [sp, #4]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 fc9b 	bl	800dafe <_Bfree>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d1cc:	7033      	strb	r3, [r6, #0]
 800d1ce:	f10b 0301 	add.w	r3, fp, #1
 800d1d2:	6013      	str	r3, [r2, #0]
 800d1d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f43f ad5b 	beq.w	800cc92 <_dtoa_r+0x92>
 800d1dc:	601e      	str	r6, [r3, #0]
 800d1de:	e558      	b.n	800cc92 <_dtoa_r+0x92>
 800d1e0:	465b      	mov	r3, fp
 800d1e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d1e6:	2939      	cmp	r1, #57	; 0x39
 800d1e8:	f106 32ff 	add.w	r2, r6, #4294967295
 800d1ec:	d106      	bne.n	800d1fc <_dtoa_r+0x5fc>
 800d1ee:	9904      	ldr	r1, [sp, #16]
 800d1f0:	4291      	cmp	r1, r2
 800d1f2:	d107      	bne.n	800d204 <_dtoa_r+0x604>
 800d1f4:	2230      	movs	r2, #48	; 0x30
 800d1f6:	700a      	strb	r2, [r1, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	460a      	mov	r2, r1
 800d1fc:	7811      	ldrb	r1, [r2, #0]
 800d1fe:	3101      	adds	r1, #1
 800d200:	7011      	strb	r1, [r2, #0]
 800d202:	e7b0      	b.n	800d166 <_dtoa_r+0x566>
 800d204:	4616      	mov	r6, r2
 800d206:	e7ec      	b.n	800d1e2 <_dtoa_r+0x5e2>
 800d208:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d20c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d214:	d1b3      	bne.n	800d17e <_dtoa_r+0x57e>
 800d216:	e7d3      	b.n	800d1c0 <_dtoa_r+0x5c0>
 800d218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d21a:	2a00      	cmp	r2, #0
 800d21c:	f000 808d 	beq.w	800d33a <_dtoa_r+0x73a>
 800d220:	9a08      	ldr	r2, [sp, #32]
 800d222:	2a01      	cmp	r2, #1
 800d224:	dc72      	bgt.n	800d30c <_dtoa_r+0x70c>
 800d226:	2f00      	cmp	r7, #0
 800d228:	d06c      	beq.n	800d304 <_dtoa_r+0x704>
 800d22a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d22e:	4645      	mov	r5, r8
 800d230:	4656      	mov	r6, sl
 800d232:	9a07      	ldr	r2, [sp, #28]
 800d234:	2101      	movs	r1, #1
 800d236:	441a      	add	r2, r3
 800d238:	4620      	mov	r0, r4
 800d23a:	449a      	add	sl, r3
 800d23c:	9207      	str	r2, [sp, #28]
 800d23e:	f000 fcfe 	bl	800dc3e <__i2b>
 800d242:	4607      	mov	r7, r0
 800d244:	2e00      	cmp	r6, #0
 800d246:	dd0b      	ble.n	800d260 <_dtoa_r+0x660>
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	dd08      	ble.n	800d260 <_dtoa_r+0x660>
 800d24e:	42b3      	cmp	r3, r6
 800d250:	9a07      	ldr	r2, [sp, #28]
 800d252:	bfa8      	it	ge
 800d254:	4633      	movge	r3, r6
 800d256:	ebaa 0a03 	sub.w	sl, sl, r3
 800d25a:	1af6      	subs	r6, r6, r3
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	9307      	str	r3, [sp, #28]
 800d260:	f1b8 0f00 	cmp.w	r8, #0
 800d264:	d01d      	beq.n	800d2a2 <_dtoa_r+0x6a2>
 800d266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d06a      	beq.n	800d342 <_dtoa_r+0x742>
 800d26c:	b18d      	cbz	r5, 800d292 <_dtoa_r+0x692>
 800d26e:	4639      	mov	r1, r7
 800d270:	462a      	mov	r2, r5
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fd82 	bl	800dd7c <__pow5mult>
 800d278:	9a01      	ldr	r2, [sp, #4]
 800d27a:	4601      	mov	r1, r0
 800d27c:	4607      	mov	r7, r0
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fce6 	bl	800dc50 <__multiply>
 800d284:	9901      	ldr	r1, [sp, #4]
 800d286:	900c      	str	r0, [sp, #48]	; 0x30
 800d288:	4620      	mov	r0, r4
 800d28a:	f000 fc38 	bl	800dafe <_Bfree>
 800d28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	ebb8 0205 	subs.w	r2, r8, r5
 800d296:	d004      	beq.n	800d2a2 <_dtoa_r+0x6a2>
 800d298:	9901      	ldr	r1, [sp, #4]
 800d29a:	4620      	mov	r0, r4
 800d29c:	f000 fd6e 	bl	800dd7c <__pow5mult>
 800d2a0:	9001      	str	r0, [sp, #4]
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f000 fcca 	bl	800dc3e <__i2b>
 800d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 81ca 	beq.w	800d648 <_dtoa_r+0xa48>
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f000 fd5f 	bl	800dd7c <__pow5mult>
 800d2be:	9b08      	ldr	r3, [sp, #32]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	dc44      	bgt.n	800d350 <_dtoa_r+0x750>
 800d2c6:	9b02      	ldr	r3, [sp, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d13c      	bne.n	800d346 <_dtoa_r+0x746>
 800d2cc:	9b03      	ldr	r3, [sp, #12]
 800d2ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d137      	bne.n	800d346 <_dtoa_r+0x746>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2dc:	0d1b      	lsrs	r3, r3, #20
 800d2de:	051b      	lsls	r3, r3, #20
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d033      	beq.n	800d34c <_dtoa_r+0x74c>
 800d2e4:	9b07      	ldr	r3, [sp, #28]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	f10a 0a01 	add.w	sl, sl, #1
 800d2ec:	9307      	str	r3, [sp, #28]
 800d2ee:	f04f 0801 	mov.w	r8, #1
 800d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2f4:	bb73      	cbnz	r3, 800d354 <_dtoa_r+0x754>
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	e034      	b.n	800d364 <_dtoa_r+0x764>
 800d2fa:	bf00      	nop
 800d2fc:	0800e760 	.word	0x0800e760
 800d300:	0800e738 	.word	0x0800e738
 800d304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d30a:	e790      	b.n	800d22e <_dtoa_r+0x62e>
 800d30c:	f109 35ff 	add.w	r5, r9, #4294967295
 800d310:	45a8      	cmp	r8, r5
 800d312:	bfbf      	itttt	lt
 800d314:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800d316:	eba5 0808 	sublt.w	r8, r5, r8
 800d31a:	4443      	addlt	r3, r8
 800d31c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800d31e:	bfb6      	itet	lt
 800d320:	46a8      	movlt	r8, r5
 800d322:	eba8 0505 	subge.w	r5, r8, r5
 800d326:	2500      	movlt	r5, #0
 800d328:	f1b9 0f00 	cmp.w	r9, #0
 800d32c:	bfb9      	ittee	lt
 800d32e:	ebaa 0609 	sublt.w	r6, sl, r9
 800d332:	2300      	movlt	r3, #0
 800d334:	4656      	movge	r6, sl
 800d336:	464b      	movge	r3, r9
 800d338:	e77b      	b.n	800d232 <_dtoa_r+0x632>
 800d33a:	4645      	mov	r5, r8
 800d33c:	4656      	mov	r6, sl
 800d33e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d340:	e780      	b.n	800d244 <_dtoa_r+0x644>
 800d342:	4642      	mov	r2, r8
 800d344:	e7a8      	b.n	800d298 <_dtoa_r+0x698>
 800d346:	f04f 0800 	mov.w	r8, #0
 800d34a:	e7d2      	b.n	800d2f2 <_dtoa_r+0x6f2>
 800d34c:	4698      	mov	r8, r3
 800d34e:	e7d0      	b.n	800d2f2 <_dtoa_r+0x6f2>
 800d350:	f04f 0800 	mov.w	r8, #0
 800d354:	692b      	ldr	r3, [r5, #16]
 800d356:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d35a:	6918      	ldr	r0, [r3, #16]
 800d35c:	f000 fc21 	bl	800dba2 <__hi0bits>
 800d360:	f1c0 0020 	rsb	r0, r0, #32
 800d364:	9b07      	ldr	r3, [sp, #28]
 800d366:	4418      	add	r0, r3
 800d368:	f010 001f 	ands.w	r0, r0, #31
 800d36c:	d047      	beq.n	800d3fe <_dtoa_r+0x7fe>
 800d36e:	f1c0 0320 	rsb	r3, r0, #32
 800d372:	2b04      	cmp	r3, #4
 800d374:	dd3b      	ble.n	800d3ee <_dtoa_r+0x7ee>
 800d376:	9b07      	ldr	r3, [sp, #28]
 800d378:	f1c0 001c 	rsb	r0, r0, #28
 800d37c:	4482      	add	sl, r0
 800d37e:	4406      	add	r6, r0
 800d380:	4403      	add	r3, r0
 800d382:	9307      	str	r3, [sp, #28]
 800d384:	f1ba 0f00 	cmp.w	sl, #0
 800d388:	dd05      	ble.n	800d396 <_dtoa_r+0x796>
 800d38a:	4652      	mov	r2, sl
 800d38c:	9901      	ldr	r1, [sp, #4]
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fd42 	bl	800de18 <__lshift>
 800d394:	9001      	str	r0, [sp, #4]
 800d396:	9b07      	ldr	r3, [sp, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dd05      	ble.n	800d3a8 <_dtoa_r+0x7a8>
 800d39c:	4629      	mov	r1, r5
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f000 fd39 	bl	800de18 <__lshift>
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3aa:	b353      	cbz	r3, 800d402 <_dtoa_r+0x802>
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	9801      	ldr	r0, [sp, #4]
 800d3b0:	f000 fd86 	bl	800dec0 <__mcmp>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	da24      	bge.n	800d402 <_dtoa_r+0x802>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	9901      	ldr	r1, [sp, #4]
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 fbb4 	bl	800db2c <__multadd>
 800d3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c6:	9001      	str	r0, [sp, #4]
 800d3c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 8142 	beq.w	800d656 <_dtoa_r+0xa56>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4639      	mov	r1, r7
 800d3d6:	220a      	movs	r2, #10
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 fba7 	bl	800db2c <__multadd>
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	4607      	mov	r7, r0
 800d3e4:	dc4b      	bgt.n	800d47e <_dtoa_r+0x87e>
 800d3e6:	9b08      	ldr	r3, [sp, #32]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	dd48      	ble.n	800d47e <_dtoa_r+0x87e>
 800d3ec:	e011      	b.n	800d412 <_dtoa_r+0x812>
 800d3ee:	d0c9      	beq.n	800d384 <_dtoa_r+0x784>
 800d3f0:	9a07      	ldr	r2, [sp, #28]
 800d3f2:	331c      	adds	r3, #28
 800d3f4:	441a      	add	r2, r3
 800d3f6:	449a      	add	sl, r3
 800d3f8:	441e      	add	r6, r3
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	e7c1      	b.n	800d382 <_dtoa_r+0x782>
 800d3fe:	4603      	mov	r3, r0
 800d400:	e7f6      	b.n	800d3f0 <_dtoa_r+0x7f0>
 800d402:	f1b9 0f00 	cmp.w	r9, #0
 800d406:	dc34      	bgt.n	800d472 <_dtoa_r+0x872>
 800d408:	9b08      	ldr	r3, [sp, #32]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	dd31      	ble.n	800d472 <_dtoa_r+0x872>
 800d40e:	f8cd 9018 	str.w	r9, [sp, #24]
 800d412:	9b06      	ldr	r3, [sp, #24]
 800d414:	b963      	cbnz	r3, 800d430 <_dtoa_r+0x830>
 800d416:	4629      	mov	r1, r5
 800d418:	2205      	movs	r2, #5
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fb86 	bl	800db2c <__multadd>
 800d420:	4601      	mov	r1, r0
 800d422:	4605      	mov	r5, r0
 800d424:	9801      	ldr	r0, [sp, #4]
 800d426:	f000 fd4b 	bl	800dec0 <__mcmp>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	f73f adfc 	bgt.w	800d028 <_dtoa_r+0x428>
 800d430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d432:	9e04      	ldr	r6, [sp, #16]
 800d434:	ea6f 0b03 	mvn.w	fp, r3
 800d438:	f04f 0900 	mov.w	r9, #0
 800d43c:	4629      	mov	r1, r5
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 fb5d 	bl	800dafe <_Bfree>
 800d444:	2f00      	cmp	r7, #0
 800d446:	f43f aebb 	beq.w	800d1c0 <_dtoa_r+0x5c0>
 800d44a:	f1b9 0f00 	cmp.w	r9, #0
 800d44e:	d005      	beq.n	800d45c <_dtoa_r+0x85c>
 800d450:	45b9      	cmp	r9, r7
 800d452:	d003      	beq.n	800d45c <_dtoa_r+0x85c>
 800d454:	4649      	mov	r1, r9
 800d456:	4620      	mov	r0, r4
 800d458:	f000 fb51 	bl	800dafe <_Bfree>
 800d45c:	4639      	mov	r1, r7
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fb4d 	bl	800dafe <_Bfree>
 800d464:	e6ac      	b.n	800d1c0 <_dtoa_r+0x5c0>
 800d466:	2500      	movs	r5, #0
 800d468:	462f      	mov	r7, r5
 800d46a:	e7e1      	b.n	800d430 <_dtoa_r+0x830>
 800d46c:	469b      	mov	fp, r3
 800d46e:	462f      	mov	r7, r5
 800d470:	e5da      	b.n	800d028 <_dtoa_r+0x428>
 800d472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d474:	f8cd 9018 	str.w	r9, [sp, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 80f3 	beq.w	800d664 <_dtoa_r+0xa64>
 800d47e:	2e00      	cmp	r6, #0
 800d480:	dd05      	ble.n	800d48e <_dtoa_r+0x88e>
 800d482:	4639      	mov	r1, r7
 800d484:	4632      	mov	r2, r6
 800d486:	4620      	mov	r0, r4
 800d488:	f000 fcc6 	bl	800de18 <__lshift>
 800d48c:	4607      	mov	r7, r0
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	d04c      	beq.n	800d52e <_dtoa_r+0x92e>
 800d494:	6879      	ldr	r1, [r7, #4]
 800d496:	4620      	mov	r0, r4
 800d498:	f000 fafd 	bl	800da96 <_Balloc>
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	3202      	adds	r2, #2
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	0092      	lsls	r2, r2, #2
 800d4a4:	f107 010c 	add.w	r1, r7, #12
 800d4a8:	300c      	adds	r0, #12
 800d4aa:	f000 fae9 	bl	800da80 <memcpy>
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 fcb0 	bl	800de18 <__lshift>
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	46b9      	mov	r9, r7
 800d4c4:	9307      	str	r3, [sp, #28]
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	9801      	ldr	r0, [sp, #4]
 800d4cc:	f7ff fb0c 	bl	800cae8 <quorem>
 800d4d0:	4649      	mov	r1, r9
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4d8:	9801      	ldr	r0, [sp, #4]
 800d4da:	f000 fcf1 	bl	800dec0 <__mcmp>
 800d4de:	463a      	mov	r2, r7
 800d4e0:	9002      	str	r0, [sp, #8]
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f000 fd05 	bl	800def4 <__mdiff>
 800d4ea:	68c3      	ldr	r3, [r0, #12]
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	bb03      	cbnz	r3, 800d532 <_dtoa_r+0x932>
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	9009      	str	r0, [sp, #36]	; 0x24
 800d4f4:	9801      	ldr	r0, [sp, #4]
 800d4f6:	f000 fce3 	bl	800dec0 <__mcmp>
 800d4fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	4611      	mov	r1, r2
 800d500:	4620      	mov	r0, r4
 800d502:	9309      	str	r3, [sp, #36]	; 0x24
 800d504:	f000 fafb 	bl	800dafe <_Bfree>
 800d508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50a:	b9a3      	cbnz	r3, 800d536 <_dtoa_r+0x936>
 800d50c:	9a08      	ldr	r2, [sp, #32]
 800d50e:	b992      	cbnz	r2, 800d536 <_dtoa_r+0x936>
 800d510:	9a07      	ldr	r2, [sp, #28]
 800d512:	b982      	cbnz	r2, 800d536 <_dtoa_r+0x936>
 800d514:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d518:	d029      	beq.n	800d56e <_dtoa_r+0x96e>
 800d51a:	9b02      	ldr	r3, [sp, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dd01      	ble.n	800d524 <_dtoa_r+0x924>
 800d520:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800d524:	f10a 0601 	add.w	r6, sl, #1
 800d528:	f88a 8000 	strb.w	r8, [sl]
 800d52c:	e786      	b.n	800d43c <_dtoa_r+0x83c>
 800d52e:	4638      	mov	r0, r7
 800d530:	e7c2      	b.n	800d4b8 <_dtoa_r+0x8b8>
 800d532:	2301      	movs	r3, #1
 800d534:	e7e3      	b.n	800d4fe <_dtoa_r+0x8fe>
 800d536:	9a02      	ldr	r2, [sp, #8]
 800d538:	2a00      	cmp	r2, #0
 800d53a:	db04      	blt.n	800d546 <_dtoa_r+0x946>
 800d53c:	d124      	bne.n	800d588 <_dtoa_r+0x988>
 800d53e:	9a08      	ldr	r2, [sp, #32]
 800d540:	bb12      	cbnz	r2, 800d588 <_dtoa_r+0x988>
 800d542:	9a07      	ldr	r2, [sp, #28]
 800d544:	bb02      	cbnz	r2, 800d588 <_dtoa_r+0x988>
 800d546:	2b00      	cmp	r3, #0
 800d548:	ddec      	ble.n	800d524 <_dtoa_r+0x924>
 800d54a:	2201      	movs	r2, #1
 800d54c:	9901      	ldr	r1, [sp, #4]
 800d54e:	4620      	mov	r0, r4
 800d550:	f000 fc62 	bl	800de18 <__lshift>
 800d554:	4629      	mov	r1, r5
 800d556:	9001      	str	r0, [sp, #4]
 800d558:	f000 fcb2 	bl	800dec0 <__mcmp>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	dc03      	bgt.n	800d568 <_dtoa_r+0x968>
 800d560:	d1e0      	bne.n	800d524 <_dtoa_r+0x924>
 800d562:	f018 0f01 	tst.w	r8, #1
 800d566:	d0dd      	beq.n	800d524 <_dtoa_r+0x924>
 800d568:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d56c:	d1d8      	bne.n	800d520 <_dtoa_r+0x920>
 800d56e:	2339      	movs	r3, #57	; 0x39
 800d570:	f10a 0601 	add.w	r6, sl, #1
 800d574:	f88a 3000 	strb.w	r3, [sl]
 800d578:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d57c:	2b39      	cmp	r3, #57	; 0x39
 800d57e:	f106 32ff 	add.w	r2, r6, #4294967295
 800d582:	d04c      	beq.n	800d61e <_dtoa_r+0xa1e>
 800d584:	3301      	adds	r3, #1
 800d586:	e051      	b.n	800d62c <_dtoa_r+0xa2c>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f10a 0601 	add.w	r6, sl, #1
 800d58e:	dd05      	ble.n	800d59c <_dtoa_r+0x99c>
 800d590:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d594:	d0eb      	beq.n	800d56e <_dtoa_r+0x96e>
 800d596:	f108 0801 	add.w	r8, r8, #1
 800d59a:	e7c5      	b.n	800d528 <_dtoa_r+0x928>
 800d59c:	9b04      	ldr	r3, [sp, #16]
 800d59e:	9a06      	ldr	r2, [sp, #24]
 800d5a0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800d5a4:	1af3      	subs	r3, r6, r3
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d021      	beq.n	800d5ee <_dtoa_r+0x9ee>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	220a      	movs	r2, #10
 800d5ae:	9901      	ldr	r1, [sp, #4]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f000 fabb 	bl	800db2c <__multadd>
 800d5b6:	45b9      	cmp	r9, r7
 800d5b8:	9001      	str	r0, [sp, #4]
 800d5ba:	f04f 0300 	mov.w	r3, #0
 800d5be:	f04f 020a 	mov.w	r2, #10
 800d5c2:	4649      	mov	r1, r9
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	d105      	bne.n	800d5d4 <_dtoa_r+0x9d4>
 800d5c8:	f000 fab0 	bl	800db2c <__multadd>
 800d5cc:	4681      	mov	r9, r0
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	46b2      	mov	sl, r6
 800d5d2:	e779      	b.n	800d4c8 <_dtoa_r+0x8c8>
 800d5d4:	f000 faaa 	bl	800db2c <__multadd>
 800d5d8:	4639      	mov	r1, r7
 800d5da:	4681      	mov	r9, r0
 800d5dc:	2300      	movs	r3, #0
 800d5de:	220a      	movs	r2, #10
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 faa3 	bl	800db2c <__multadd>
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	e7f2      	b.n	800d5d0 <_dtoa_r+0x9d0>
 800d5ea:	f04f 0900 	mov.w	r9, #0
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	9901      	ldr	r1, [sp, #4]
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 fc10 	bl	800de18 <__lshift>
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	9001      	str	r0, [sp, #4]
 800d5fc:	f000 fc60 	bl	800dec0 <__mcmp>
 800d600:	2800      	cmp	r0, #0
 800d602:	dcb9      	bgt.n	800d578 <_dtoa_r+0x978>
 800d604:	d102      	bne.n	800d60c <_dtoa_r+0xa0c>
 800d606:	f018 0f01 	tst.w	r8, #1
 800d60a:	d1b5      	bne.n	800d578 <_dtoa_r+0x978>
 800d60c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d610:	2b30      	cmp	r3, #48	; 0x30
 800d612:	f106 32ff 	add.w	r2, r6, #4294967295
 800d616:	f47f af11 	bne.w	800d43c <_dtoa_r+0x83c>
 800d61a:	4616      	mov	r6, r2
 800d61c:	e7f6      	b.n	800d60c <_dtoa_r+0xa0c>
 800d61e:	9b04      	ldr	r3, [sp, #16]
 800d620:	4293      	cmp	r3, r2
 800d622:	d105      	bne.n	800d630 <_dtoa_r+0xa30>
 800d624:	9a04      	ldr	r2, [sp, #16]
 800d626:	f10b 0b01 	add.w	fp, fp, #1
 800d62a:	2331      	movs	r3, #49	; 0x31
 800d62c:	7013      	strb	r3, [r2, #0]
 800d62e:	e705      	b.n	800d43c <_dtoa_r+0x83c>
 800d630:	4616      	mov	r6, r2
 800d632:	e7a1      	b.n	800d578 <_dtoa_r+0x978>
 800d634:	4b16      	ldr	r3, [pc, #88]	; (800d690 <_dtoa_r+0xa90>)
 800d636:	f7ff bb48 	b.w	800ccca <_dtoa_r+0xca>
 800d63a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f47f ab23 	bne.w	800cc88 <_dtoa_r+0x88>
 800d642:	4b14      	ldr	r3, [pc, #80]	; (800d694 <_dtoa_r+0xa94>)
 800d644:	f7ff bb41 	b.w	800ccca <_dtoa_r+0xca>
 800d648:	9b08      	ldr	r3, [sp, #32]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	f77f ae3b 	ble.w	800d2c6 <_dtoa_r+0x6c6>
 800d650:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d654:	e64f      	b.n	800d2f6 <_dtoa_r+0x6f6>
 800d656:	9b06      	ldr	r3, [sp, #24]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	dc03      	bgt.n	800d664 <_dtoa_r+0xa64>
 800d65c:	9b08      	ldr	r3, [sp, #32]
 800d65e:	2b02      	cmp	r3, #2
 800d660:	f73f aed7 	bgt.w	800d412 <_dtoa_r+0x812>
 800d664:	9e04      	ldr	r6, [sp, #16]
 800d666:	9801      	ldr	r0, [sp, #4]
 800d668:	4629      	mov	r1, r5
 800d66a:	f7ff fa3d 	bl	800cae8 <quorem>
 800d66e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d672:	f806 8b01 	strb.w	r8, [r6], #1
 800d676:	9b04      	ldr	r3, [sp, #16]
 800d678:	9a06      	ldr	r2, [sp, #24]
 800d67a:	1af3      	subs	r3, r6, r3
 800d67c:	429a      	cmp	r2, r3
 800d67e:	ddb4      	ble.n	800d5ea <_dtoa_r+0x9ea>
 800d680:	2300      	movs	r3, #0
 800d682:	220a      	movs	r2, #10
 800d684:	9901      	ldr	r1, [sp, #4]
 800d686:	4620      	mov	r0, r4
 800d688:	f000 fa50 	bl	800db2c <__multadd>
 800d68c:	9001      	str	r0, [sp, #4]
 800d68e:	e7ea      	b.n	800d666 <_dtoa_r+0xa66>
 800d690:	0800e6a4 	.word	0x0800e6a4
 800d694:	0800e6c8 	.word	0x0800e6c8

0800d698 <__sflush_r>:
 800d698:	898a      	ldrh	r2, [r1, #12]
 800d69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69e:	4605      	mov	r5, r0
 800d6a0:	0710      	lsls	r0, r2, #28
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	d458      	bmi.n	800d758 <__sflush_r+0xc0>
 800d6a6:	684b      	ldr	r3, [r1, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	dc05      	bgt.n	800d6b8 <__sflush_r+0x20>
 800d6ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dc02      	bgt.n	800d6b8 <__sflush_r+0x20>
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6ba:	2e00      	cmp	r6, #0
 800d6bc:	d0f9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6c4:	682f      	ldr	r7, [r5, #0]
 800d6c6:	6a21      	ldr	r1, [r4, #32]
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	d032      	beq.n	800d732 <__sflush_r+0x9a>
 800d6cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	075a      	lsls	r2, r3, #29
 800d6d2:	d505      	bpl.n	800d6e0 <__sflush_r+0x48>
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	1ac0      	subs	r0, r0, r3
 800d6d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6da:	b10b      	cbz	r3, 800d6e0 <__sflush_r+0x48>
 800d6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6de:	1ac0      	subs	r0, r0, r3
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	47b0      	blx	r6
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	d106      	bne.n	800d700 <__sflush_r+0x68>
 800d6f2:	6829      	ldr	r1, [r5, #0]
 800d6f4:	291d      	cmp	r1, #29
 800d6f6:	d848      	bhi.n	800d78a <__sflush_r+0xf2>
 800d6f8:	4a29      	ldr	r2, [pc, #164]	; (800d7a0 <__sflush_r+0x108>)
 800d6fa:	40ca      	lsrs	r2, r1
 800d6fc:	07d6      	lsls	r6, r2, #31
 800d6fe:	d544      	bpl.n	800d78a <__sflush_r+0xf2>
 800d700:	2200      	movs	r2, #0
 800d702:	6062      	str	r2, [r4, #4]
 800d704:	04d9      	lsls	r1, r3, #19
 800d706:	6922      	ldr	r2, [r4, #16]
 800d708:	6022      	str	r2, [r4, #0]
 800d70a:	d504      	bpl.n	800d716 <__sflush_r+0x7e>
 800d70c:	1c42      	adds	r2, r0, #1
 800d70e:	d101      	bne.n	800d714 <__sflush_r+0x7c>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	b903      	cbnz	r3, 800d716 <__sflush_r+0x7e>
 800d714:	6560      	str	r0, [r4, #84]	; 0x54
 800d716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d718:	602f      	str	r7, [r5, #0]
 800d71a:	2900      	cmp	r1, #0
 800d71c:	d0c9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d722:	4299      	cmp	r1, r3
 800d724:	d002      	beq.n	800d72c <__sflush_r+0x94>
 800d726:	4628      	mov	r0, r5
 800d728:	f000 fc9e 	bl	800e068 <_free_r>
 800d72c:	2000      	movs	r0, #0
 800d72e:	6360      	str	r0, [r4, #52]	; 0x34
 800d730:	e7c0      	b.n	800d6b4 <__sflush_r+0x1c>
 800d732:	2301      	movs	r3, #1
 800d734:	4628      	mov	r0, r5
 800d736:	47b0      	blx	r6
 800d738:	1c41      	adds	r1, r0, #1
 800d73a:	d1c8      	bne.n	800d6ce <__sflush_r+0x36>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c5      	beq.n	800d6ce <__sflush_r+0x36>
 800d742:	2b1d      	cmp	r3, #29
 800d744:	d001      	beq.n	800d74a <__sflush_r+0xb2>
 800d746:	2b16      	cmp	r3, #22
 800d748:	d101      	bne.n	800d74e <__sflush_r+0xb6>
 800d74a:	602f      	str	r7, [r5, #0]
 800d74c:	e7b1      	b.n	800d6b2 <__sflush_r+0x1a>
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	e7ad      	b.n	800d6b4 <__sflush_r+0x1c>
 800d758:	690f      	ldr	r7, [r1, #16]
 800d75a:	2f00      	cmp	r7, #0
 800d75c:	d0a9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d75e:	0793      	lsls	r3, r2, #30
 800d760:	680e      	ldr	r6, [r1, #0]
 800d762:	bf08      	it	eq
 800d764:	694b      	ldreq	r3, [r1, #20]
 800d766:	600f      	str	r7, [r1, #0]
 800d768:	bf18      	it	ne
 800d76a:	2300      	movne	r3, #0
 800d76c:	eba6 0807 	sub.w	r8, r6, r7
 800d770:	608b      	str	r3, [r1, #8]
 800d772:	f1b8 0f00 	cmp.w	r8, #0
 800d776:	dd9c      	ble.n	800d6b2 <__sflush_r+0x1a>
 800d778:	4643      	mov	r3, r8
 800d77a:	463a      	mov	r2, r7
 800d77c:	6a21      	ldr	r1, [r4, #32]
 800d77e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d780:	4628      	mov	r0, r5
 800d782:	47b0      	blx	r6
 800d784:	2800      	cmp	r0, #0
 800d786:	dc06      	bgt.n	800d796 <__sflush_r+0xfe>
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78e:	81a3      	strh	r3, [r4, #12]
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	e78e      	b.n	800d6b4 <__sflush_r+0x1c>
 800d796:	4407      	add	r7, r0
 800d798:	eba8 0800 	sub.w	r8, r8, r0
 800d79c:	e7e9      	b.n	800d772 <__sflush_r+0xda>
 800d79e:	bf00      	nop
 800d7a0:	20400001 	.word	0x20400001

0800d7a4 <_fflush_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	690b      	ldr	r3, [r1, #16]
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	b1db      	cbz	r3, 800d7e6 <_fflush_r+0x42>
 800d7ae:	b118      	cbz	r0, 800d7b8 <_fflush_r+0x14>
 800d7b0:	6983      	ldr	r3, [r0, #24]
 800d7b2:	b90b      	cbnz	r3, 800d7b8 <_fflush_r+0x14>
 800d7b4:	f000 f860 	bl	800d878 <__sinit>
 800d7b8:	4b0c      	ldr	r3, [pc, #48]	; (800d7ec <_fflush_r+0x48>)
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	d109      	bne.n	800d7d2 <_fflush_r+0x2e>
 800d7be:	686c      	ldr	r4, [r5, #4]
 800d7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c4:	b17b      	cbz	r3, 800d7e6 <_fflush_r+0x42>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ce:	f7ff bf63 	b.w	800d698 <__sflush_r>
 800d7d2:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <_fflush_r+0x4c>)
 800d7d4:	429c      	cmp	r4, r3
 800d7d6:	d101      	bne.n	800d7dc <_fflush_r+0x38>
 800d7d8:	68ac      	ldr	r4, [r5, #8]
 800d7da:	e7f1      	b.n	800d7c0 <_fflush_r+0x1c>
 800d7dc:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <_fflush_r+0x50>)
 800d7de:	429c      	cmp	r4, r3
 800d7e0:	bf08      	it	eq
 800d7e2:	68ec      	ldreq	r4, [r5, #12]
 800d7e4:	e7ec      	b.n	800d7c0 <_fflush_r+0x1c>
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800e6f8 	.word	0x0800e6f8
 800d7f0:	0800e718 	.word	0x0800e718
 800d7f4:	0800e6d8 	.word	0x0800e6d8

0800d7f8 <std>:
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	b510      	push	{r4, lr}
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d802:	6083      	str	r3, [r0, #8]
 800d804:	8181      	strh	r1, [r0, #12]
 800d806:	6643      	str	r3, [r0, #100]	; 0x64
 800d808:	81c2      	strh	r2, [r0, #14]
 800d80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d80e:	6183      	str	r3, [r0, #24]
 800d810:	4619      	mov	r1, r3
 800d812:	2208      	movs	r2, #8
 800d814:	305c      	adds	r0, #92	; 0x5c
 800d816:	f7fe fbe7 	bl	800bfe8 <memset>
 800d81a:	4b05      	ldr	r3, [pc, #20]	; (800d830 <std+0x38>)
 800d81c:	6263      	str	r3, [r4, #36]	; 0x24
 800d81e:	4b05      	ldr	r3, [pc, #20]	; (800d834 <std+0x3c>)
 800d820:	62a3      	str	r3, [r4, #40]	; 0x28
 800d822:	4b05      	ldr	r3, [pc, #20]	; (800d838 <std+0x40>)
 800d824:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d826:	4b05      	ldr	r3, [pc, #20]	; (800d83c <std+0x44>)
 800d828:	6224      	str	r4, [r4, #32]
 800d82a:	6323      	str	r3, [r4, #48]	; 0x30
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	bf00      	nop
 800d830:	0800e459 	.word	0x0800e459
 800d834:	0800e47b 	.word	0x0800e47b
 800d838:	0800e4b3 	.word	0x0800e4b3
 800d83c:	0800e4d7 	.word	0x0800e4d7

0800d840 <_cleanup_r>:
 800d840:	4901      	ldr	r1, [pc, #4]	; (800d848 <_cleanup_r+0x8>)
 800d842:	f000 b885 	b.w	800d950 <_fwalk_reent>
 800d846:	bf00      	nop
 800d848:	0800d7a5 	.word	0x0800d7a5

0800d84c <__sfmoreglue>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	1e4a      	subs	r2, r1, #1
 800d850:	2568      	movs	r5, #104	; 0x68
 800d852:	4355      	muls	r5, r2
 800d854:	460e      	mov	r6, r1
 800d856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d85a:	f000 fc53 	bl	800e104 <_malloc_r>
 800d85e:	4604      	mov	r4, r0
 800d860:	b140      	cbz	r0, 800d874 <__sfmoreglue+0x28>
 800d862:	2100      	movs	r1, #0
 800d864:	e9c0 1600 	strd	r1, r6, [r0]
 800d868:	300c      	adds	r0, #12
 800d86a:	60a0      	str	r0, [r4, #8]
 800d86c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d870:	f7fe fbba 	bl	800bfe8 <memset>
 800d874:	4620      	mov	r0, r4
 800d876:	bd70      	pop	{r4, r5, r6, pc}

0800d878 <__sinit>:
 800d878:	6983      	ldr	r3, [r0, #24]
 800d87a:	b510      	push	{r4, lr}
 800d87c:	4604      	mov	r4, r0
 800d87e:	bb33      	cbnz	r3, 800d8ce <__sinit+0x56>
 800d880:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d884:	6503      	str	r3, [r0, #80]	; 0x50
 800d886:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <__sinit+0x58>)
 800d888:	4a12      	ldr	r2, [pc, #72]	; (800d8d4 <__sinit+0x5c>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6282      	str	r2, [r0, #40]	; 0x28
 800d88e:	4298      	cmp	r0, r3
 800d890:	bf04      	itt	eq
 800d892:	2301      	moveq	r3, #1
 800d894:	6183      	streq	r3, [r0, #24]
 800d896:	f000 f81f 	bl	800d8d8 <__sfp>
 800d89a:	6060      	str	r0, [r4, #4]
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 f81b 	bl	800d8d8 <__sfp>
 800d8a2:	60a0      	str	r0, [r4, #8]
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 f817 	bl	800d8d8 <__sfp>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	60e0      	str	r0, [r4, #12]
 800d8ae:	2104      	movs	r1, #4
 800d8b0:	6860      	ldr	r0, [r4, #4]
 800d8b2:	f7ff ffa1 	bl	800d7f8 <std>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	2109      	movs	r1, #9
 800d8ba:	68a0      	ldr	r0, [r4, #8]
 800d8bc:	f7ff ff9c 	bl	800d7f8 <std>
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	2112      	movs	r1, #18
 800d8c4:	68e0      	ldr	r0, [r4, #12]
 800d8c6:	f7ff ff97 	bl	800d7f8 <std>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	61a3      	str	r3, [r4, #24]
 800d8ce:	bd10      	pop	{r4, pc}
 800d8d0:	0800e690 	.word	0x0800e690
 800d8d4:	0800d841 	.word	0x0800d841

0800d8d8 <__sfp>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	4b1b      	ldr	r3, [pc, #108]	; (800d948 <__sfp+0x70>)
 800d8dc:	681e      	ldr	r6, [r3, #0]
 800d8de:	69b3      	ldr	r3, [r6, #24]
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	b913      	cbnz	r3, 800d8ea <__sfp+0x12>
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff ffc7 	bl	800d878 <__sinit>
 800d8ea:	3648      	adds	r6, #72	; 0x48
 800d8ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	d503      	bpl.n	800d8fc <__sfp+0x24>
 800d8f4:	6833      	ldr	r3, [r6, #0]
 800d8f6:	b133      	cbz	r3, 800d906 <__sfp+0x2e>
 800d8f8:	6836      	ldr	r6, [r6, #0]
 800d8fa:	e7f7      	b.n	800d8ec <__sfp+0x14>
 800d8fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d900:	b16d      	cbz	r5, 800d91e <__sfp+0x46>
 800d902:	3468      	adds	r4, #104	; 0x68
 800d904:	e7f4      	b.n	800d8f0 <__sfp+0x18>
 800d906:	2104      	movs	r1, #4
 800d908:	4638      	mov	r0, r7
 800d90a:	f7ff ff9f 	bl	800d84c <__sfmoreglue>
 800d90e:	6030      	str	r0, [r6, #0]
 800d910:	2800      	cmp	r0, #0
 800d912:	d1f1      	bne.n	800d8f8 <__sfp+0x20>
 800d914:	230c      	movs	r3, #12
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	4604      	mov	r4, r0
 800d91a:	4620      	mov	r0, r4
 800d91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91e:	4b0b      	ldr	r3, [pc, #44]	; (800d94c <__sfp+0x74>)
 800d920:	6665      	str	r5, [r4, #100]	; 0x64
 800d922:	e9c4 5500 	strd	r5, r5, [r4]
 800d926:	60a5      	str	r5, [r4, #8]
 800d928:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d92c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d930:	2208      	movs	r2, #8
 800d932:	4629      	mov	r1, r5
 800d934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d938:	f7fe fb56 	bl	800bfe8 <memset>
 800d93c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d944:	e7e9      	b.n	800d91a <__sfp+0x42>
 800d946:	bf00      	nop
 800d948:	0800e690 	.word	0x0800e690
 800d94c:	ffff0001 	.word	0xffff0001

0800d950 <_fwalk_reent>:
 800d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d954:	4680      	mov	r8, r0
 800d956:	4689      	mov	r9, r1
 800d958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d95c:	2600      	movs	r6, #0
 800d95e:	b914      	cbnz	r4, 800d966 <_fwalk_reent+0x16>
 800d960:	4630      	mov	r0, r6
 800d962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d966:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d96a:	3f01      	subs	r7, #1
 800d96c:	d501      	bpl.n	800d972 <_fwalk_reent+0x22>
 800d96e:	6824      	ldr	r4, [r4, #0]
 800d970:	e7f5      	b.n	800d95e <_fwalk_reent+0xe>
 800d972:	89ab      	ldrh	r3, [r5, #12]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d907      	bls.n	800d988 <_fwalk_reent+0x38>
 800d978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d97c:	3301      	adds	r3, #1
 800d97e:	d003      	beq.n	800d988 <_fwalk_reent+0x38>
 800d980:	4629      	mov	r1, r5
 800d982:	4640      	mov	r0, r8
 800d984:	47c8      	blx	r9
 800d986:	4306      	orrs	r6, r0
 800d988:	3568      	adds	r5, #104	; 0x68
 800d98a:	e7ee      	b.n	800d96a <_fwalk_reent+0x1a>

0800d98c <_localeconv_r>:
 800d98c:	4b04      	ldr	r3, [pc, #16]	; (800d9a0 <_localeconv_r+0x14>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	6a18      	ldr	r0, [r3, #32]
 800d992:	4b04      	ldr	r3, [pc, #16]	; (800d9a4 <_localeconv_r+0x18>)
 800d994:	2800      	cmp	r0, #0
 800d996:	bf08      	it	eq
 800d998:	4618      	moveq	r0, r3
 800d99a:	30f0      	adds	r0, #240	; 0xf0
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	24000010 	.word	0x24000010
 800d9a4:	24000074 	.word	0x24000074

0800d9a8 <__swhatbuf_r>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	460e      	mov	r6, r1
 800d9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	b096      	sub	sp, #88	; 0x58
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	461d      	mov	r5, r3
 800d9b8:	da07      	bge.n	800d9ca <__swhatbuf_r+0x22>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	602b      	str	r3, [r5, #0]
 800d9be:	89b3      	ldrh	r3, [r6, #12]
 800d9c0:	061a      	lsls	r2, r3, #24
 800d9c2:	d410      	bmi.n	800d9e6 <__swhatbuf_r+0x3e>
 800d9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9c8:	e00e      	b.n	800d9e8 <__swhatbuf_r+0x40>
 800d9ca:	466a      	mov	r2, sp
 800d9cc:	f000 fdaa 	bl	800e524 <_fstat_r>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	dbf2      	blt.n	800d9ba <__swhatbuf_r+0x12>
 800d9d4:	9a01      	ldr	r2, [sp, #4]
 800d9d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9de:	425a      	negs	r2, r3
 800d9e0:	415a      	adcs	r2, r3
 800d9e2:	602a      	str	r2, [r5, #0]
 800d9e4:	e7ee      	b.n	800d9c4 <__swhatbuf_r+0x1c>
 800d9e6:	2340      	movs	r3, #64	; 0x40
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	6023      	str	r3, [r4, #0]
 800d9ec:	b016      	add	sp, #88	; 0x58
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}

0800d9f0 <__smakebuf_r>:
 800d9f0:	898b      	ldrh	r3, [r1, #12]
 800d9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9f4:	079d      	lsls	r5, r3, #30
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	d507      	bpl.n	800da0c <__smakebuf_r+0x1c>
 800d9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	2301      	movs	r3, #1
 800da06:	6163      	str	r3, [r4, #20]
 800da08:	b002      	add	sp, #8
 800da0a:	bd70      	pop	{r4, r5, r6, pc}
 800da0c:	ab01      	add	r3, sp, #4
 800da0e:	466a      	mov	r2, sp
 800da10:	f7ff ffca 	bl	800d9a8 <__swhatbuf_r>
 800da14:	9900      	ldr	r1, [sp, #0]
 800da16:	4605      	mov	r5, r0
 800da18:	4630      	mov	r0, r6
 800da1a:	f000 fb73 	bl	800e104 <_malloc_r>
 800da1e:	b948      	cbnz	r0, 800da34 <__smakebuf_r+0x44>
 800da20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da24:	059a      	lsls	r2, r3, #22
 800da26:	d4ef      	bmi.n	800da08 <__smakebuf_r+0x18>
 800da28:	f023 0303 	bic.w	r3, r3, #3
 800da2c:	f043 0302 	orr.w	r3, r3, #2
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	e7e3      	b.n	800d9fc <__smakebuf_r+0xc>
 800da34:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <__smakebuf_r+0x7c>)
 800da36:	62b3      	str	r3, [r6, #40]	; 0x28
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	6020      	str	r0, [r4, #0]
 800da3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da40:	81a3      	strh	r3, [r4, #12]
 800da42:	9b00      	ldr	r3, [sp, #0]
 800da44:	6163      	str	r3, [r4, #20]
 800da46:	9b01      	ldr	r3, [sp, #4]
 800da48:	6120      	str	r0, [r4, #16]
 800da4a:	b15b      	cbz	r3, 800da64 <__smakebuf_r+0x74>
 800da4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da50:	4630      	mov	r0, r6
 800da52:	f000 fd79 	bl	800e548 <_isatty_r>
 800da56:	b128      	cbz	r0, 800da64 <__smakebuf_r+0x74>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f023 0303 	bic.w	r3, r3, #3
 800da5e:	f043 0301 	orr.w	r3, r3, #1
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	431d      	orrs	r5, r3
 800da68:	81a5      	strh	r5, [r4, #12]
 800da6a:	e7cd      	b.n	800da08 <__smakebuf_r+0x18>
 800da6c:	0800d841 	.word	0x0800d841

0800da70 <malloc>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <malloc+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f000 bb45 	b.w	800e104 <_malloc_r>
 800da7a:	bf00      	nop
 800da7c:	24000010 	.word	0x24000010

0800da80 <memcpy>:
 800da80:	b510      	push	{r4, lr}
 800da82:	1e43      	subs	r3, r0, #1
 800da84:	440a      	add	r2, r1
 800da86:	4291      	cmp	r1, r2
 800da88:	d100      	bne.n	800da8c <memcpy+0xc>
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da94:	e7f7      	b.n	800da86 <memcpy+0x6>

0800da96 <_Balloc>:
 800da96:	b570      	push	{r4, r5, r6, lr}
 800da98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da9a:	4604      	mov	r4, r0
 800da9c:	460e      	mov	r6, r1
 800da9e:	b93d      	cbnz	r5, 800dab0 <_Balloc+0x1a>
 800daa0:	2010      	movs	r0, #16
 800daa2:	f7ff ffe5 	bl	800da70 <malloc>
 800daa6:	6260      	str	r0, [r4, #36]	; 0x24
 800daa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800daac:	6005      	str	r5, [r0, #0]
 800daae:	60c5      	str	r5, [r0, #12]
 800dab0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dab2:	68eb      	ldr	r3, [r5, #12]
 800dab4:	b183      	cbz	r3, 800dad8 <_Balloc+0x42>
 800dab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dabe:	b9b8      	cbnz	r0, 800daf0 <_Balloc+0x5a>
 800dac0:	2101      	movs	r1, #1
 800dac2:	fa01 f506 	lsl.w	r5, r1, r6
 800dac6:	1d6a      	adds	r2, r5, #5
 800dac8:	0092      	lsls	r2, r2, #2
 800daca:	4620      	mov	r0, r4
 800dacc:	f000 fabe 	bl	800e04c <_calloc_r>
 800dad0:	b160      	cbz	r0, 800daec <_Balloc+0x56>
 800dad2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dad6:	e00e      	b.n	800daf6 <_Balloc+0x60>
 800dad8:	2221      	movs	r2, #33	; 0x21
 800dada:	2104      	movs	r1, #4
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 fab5 	bl	800e04c <_calloc_r>
 800dae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dae4:	60e8      	str	r0, [r5, #12]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1e4      	bne.n	800dab6 <_Balloc+0x20>
 800daec:	2000      	movs	r0, #0
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	6802      	ldr	r2, [r0, #0]
 800daf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800daf6:	2300      	movs	r3, #0
 800daf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dafc:	e7f7      	b.n	800daee <_Balloc+0x58>

0800dafe <_Bfree>:
 800dafe:	b570      	push	{r4, r5, r6, lr}
 800db00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db02:	4606      	mov	r6, r0
 800db04:	460d      	mov	r5, r1
 800db06:	b93c      	cbnz	r4, 800db18 <_Bfree+0x1a>
 800db08:	2010      	movs	r0, #16
 800db0a:	f7ff ffb1 	bl	800da70 <malloc>
 800db0e:	6270      	str	r0, [r6, #36]	; 0x24
 800db10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db14:	6004      	str	r4, [r0, #0]
 800db16:	60c4      	str	r4, [r0, #12]
 800db18:	b13d      	cbz	r5, 800db2a <_Bfree+0x2c>
 800db1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db1c:	686a      	ldr	r2, [r5, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db24:	6029      	str	r1, [r5, #0]
 800db26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db2a:	bd70      	pop	{r4, r5, r6, pc}

0800db2c <__multadd>:
 800db2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db30:	690d      	ldr	r5, [r1, #16]
 800db32:	461f      	mov	r7, r3
 800db34:	4606      	mov	r6, r0
 800db36:	460c      	mov	r4, r1
 800db38:	f101 0c14 	add.w	ip, r1, #20
 800db3c:	2300      	movs	r3, #0
 800db3e:	f8dc 0000 	ldr.w	r0, [ip]
 800db42:	b281      	uxth	r1, r0
 800db44:	fb02 7101 	mla	r1, r2, r1, r7
 800db48:	0c0f      	lsrs	r7, r1, #16
 800db4a:	0c00      	lsrs	r0, r0, #16
 800db4c:	fb02 7000 	mla	r0, r2, r0, r7
 800db50:	b289      	uxth	r1, r1
 800db52:	3301      	adds	r3, #1
 800db54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800db58:	429d      	cmp	r5, r3
 800db5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800db5e:	f84c 1b04 	str.w	r1, [ip], #4
 800db62:	dcec      	bgt.n	800db3e <__multadd+0x12>
 800db64:	b1d7      	cbz	r7, 800db9c <__multadd+0x70>
 800db66:	68a3      	ldr	r3, [r4, #8]
 800db68:	42ab      	cmp	r3, r5
 800db6a:	dc12      	bgt.n	800db92 <__multadd+0x66>
 800db6c:	6861      	ldr	r1, [r4, #4]
 800db6e:	4630      	mov	r0, r6
 800db70:	3101      	adds	r1, #1
 800db72:	f7ff ff90 	bl	800da96 <_Balloc>
 800db76:	6922      	ldr	r2, [r4, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	f104 010c 	add.w	r1, r4, #12
 800db7e:	4680      	mov	r8, r0
 800db80:	0092      	lsls	r2, r2, #2
 800db82:	300c      	adds	r0, #12
 800db84:	f7ff ff7c 	bl	800da80 <memcpy>
 800db88:	4621      	mov	r1, r4
 800db8a:	4630      	mov	r0, r6
 800db8c:	f7ff ffb7 	bl	800dafe <_Bfree>
 800db90:	4644      	mov	r4, r8
 800db92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db96:	3501      	adds	r5, #1
 800db98:	615f      	str	r7, [r3, #20]
 800db9a:	6125      	str	r5, [r4, #16]
 800db9c:	4620      	mov	r0, r4
 800db9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dba2 <__hi0bits>:
 800dba2:	0c02      	lsrs	r2, r0, #16
 800dba4:	0412      	lsls	r2, r2, #16
 800dba6:	4603      	mov	r3, r0
 800dba8:	b9b2      	cbnz	r2, 800dbd8 <__hi0bits+0x36>
 800dbaa:	0403      	lsls	r3, r0, #16
 800dbac:	2010      	movs	r0, #16
 800dbae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dbb2:	bf04      	itt	eq
 800dbb4:	021b      	lsleq	r3, r3, #8
 800dbb6:	3008      	addeq	r0, #8
 800dbb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dbbc:	bf04      	itt	eq
 800dbbe:	011b      	lsleq	r3, r3, #4
 800dbc0:	3004      	addeq	r0, #4
 800dbc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dbc6:	bf04      	itt	eq
 800dbc8:	009b      	lsleq	r3, r3, #2
 800dbca:	3002      	addeq	r0, #2
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	db06      	blt.n	800dbde <__hi0bits+0x3c>
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	d503      	bpl.n	800dbdc <__hi0bits+0x3a>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	4770      	bx	lr
 800dbd8:	2000      	movs	r0, #0
 800dbda:	e7e8      	b.n	800dbae <__hi0bits+0xc>
 800dbdc:	2020      	movs	r0, #32
 800dbde:	4770      	bx	lr

0800dbe0 <__lo0bits>:
 800dbe0:	6803      	ldr	r3, [r0, #0]
 800dbe2:	f013 0207 	ands.w	r2, r3, #7
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	d00b      	beq.n	800dc02 <__lo0bits+0x22>
 800dbea:	07da      	lsls	r2, r3, #31
 800dbec:	d423      	bmi.n	800dc36 <__lo0bits+0x56>
 800dbee:	0798      	lsls	r0, r3, #30
 800dbf0:	bf49      	itett	mi
 800dbf2:	085b      	lsrmi	r3, r3, #1
 800dbf4:	089b      	lsrpl	r3, r3, #2
 800dbf6:	2001      	movmi	r0, #1
 800dbf8:	600b      	strmi	r3, [r1, #0]
 800dbfa:	bf5c      	itt	pl
 800dbfc:	600b      	strpl	r3, [r1, #0]
 800dbfe:	2002      	movpl	r0, #2
 800dc00:	4770      	bx	lr
 800dc02:	b298      	uxth	r0, r3
 800dc04:	b9a8      	cbnz	r0, 800dc32 <__lo0bits+0x52>
 800dc06:	0c1b      	lsrs	r3, r3, #16
 800dc08:	2010      	movs	r0, #16
 800dc0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc0e:	bf04      	itt	eq
 800dc10:	0a1b      	lsreq	r3, r3, #8
 800dc12:	3008      	addeq	r0, #8
 800dc14:	071a      	lsls	r2, r3, #28
 800dc16:	bf04      	itt	eq
 800dc18:	091b      	lsreq	r3, r3, #4
 800dc1a:	3004      	addeq	r0, #4
 800dc1c:	079a      	lsls	r2, r3, #30
 800dc1e:	bf04      	itt	eq
 800dc20:	089b      	lsreq	r3, r3, #2
 800dc22:	3002      	addeq	r0, #2
 800dc24:	07da      	lsls	r2, r3, #31
 800dc26:	d402      	bmi.n	800dc2e <__lo0bits+0x4e>
 800dc28:	085b      	lsrs	r3, r3, #1
 800dc2a:	d006      	beq.n	800dc3a <__lo0bits+0x5a>
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	600b      	str	r3, [r1, #0]
 800dc30:	4770      	bx	lr
 800dc32:	4610      	mov	r0, r2
 800dc34:	e7e9      	b.n	800dc0a <__lo0bits+0x2a>
 800dc36:	2000      	movs	r0, #0
 800dc38:	4770      	bx	lr
 800dc3a:	2020      	movs	r0, #32
 800dc3c:	4770      	bx	lr

0800dc3e <__i2b>:
 800dc3e:	b510      	push	{r4, lr}
 800dc40:	460c      	mov	r4, r1
 800dc42:	2101      	movs	r1, #1
 800dc44:	f7ff ff27 	bl	800da96 <_Balloc>
 800dc48:	2201      	movs	r2, #1
 800dc4a:	6144      	str	r4, [r0, #20]
 800dc4c:	6102      	str	r2, [r0, #16]
 800dc4e:	bd10      	pop	{r4, pc}

0800dc50 <__multiply>:
 800dc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	4614      	mov	r4, r2
 800dc56:	690a      	ldr	r2, [r1, #16]
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	bfb8      	it	lt
 800dc5e:	460b      	movlt	r3, r1
 800dc60:	4688      	mov	r8, r1
 800dc62:	bfbc      	itt	lt
 800dc64:	46a0      	movlt	r8, r4
 800dc66:	461c      	movlt	r4, r3
 800dc68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc78:	eb07 0609 	add.w	r6, r7, r9
 800dc7c:	42b3      	cmp	r3, r6
 800dc7e:	bfb8      	it	lt
 800dc80:	3101      	addlt	r1, #1
 800dc82:	f7ff ff08 	bl	800da96 <_Balloc>
 800dc86:	f100 0514 	add.w	r5, r0, #20
 800dc8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dc8e:	462b      	mov	r3, r5
 800dc90:	2200      	movs	r2, #0
 800dc92:	4573      	cmp	r3, lr
 800dc94:	d316      	bcc.n	800dcc4 <__multiply+0x74>
 800dc96:	f104 0214 	add.w	r2, r4, #20
 800dc9a:	f108 0114 	add.w	r1, r8, #20
 800dc9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dca2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	9b00      	ldr	r3, [sp, #0]
 800dcaa:	9201      	str	r2, [sp, #4]
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d80c      	bhi.n	800dcca <__multiply+0x7a>
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	dd03      	ble.n	800dcbc <__multiply+0x6c>
 800dcb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d05d      	beq.n	800dd78 <__multiply+0x128>
 800dcbc:	6106      	str	r6, [r0, #16]
 800dcbe:	b003      	add	sp, #12
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	f843 2b04 	str.w	r2, [r3], #4
 800dcc8:	e7e3      	b.n	800dc92 <__multiply+0x42>
 800dcca:	f8b2 b000 	ldrh.w	fp, [r2]
 800dcce:	f1bb 0f00 	cmp.w	fp, #0
 800dcd2:	d023      	beq.n	800dd1c <__multiply+0xcc>
 800dcd4:	4689      	mov	r9, r1
 800dcd6:	46ac      	mov	ip, r5
 800dcd8:	f04f 0800 	mov.w	r8, #0
 800dcdc:	f859 4b04 	ldr.w	r4, [r9], #4
 800dce0:	f8dc a000 	ldr.w	sl, [ip]
 800dce4:	b2a3      	uxth	r3, r4
 800dce6:	fa1f fa8a 	uxth.w	sl, sl
 800dcea:	fb0b a303 	mla	r3, fp, r3, sl
 800dcee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dcf2:	f8dc 4000 	ldr.w	r4, [ip]
 800dcf6:	4443      	add	r3, r8
 800dcf8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dcfc:	fb0b 840a 	mla	r4, fp, sl, r8
 800dd00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dd04:	46e2      	mov	sl, ip
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd0c:	454f      	cmp	r7, r9
 800dd0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd12:	f84a 3b04 	str.w	r3, [sl], #4
 800dd16:	d82b      	bhi.n	800dd70 <__multiply+0x120>
 800dd18:	f8cc 8004 	str.w	r8, [ip, #4]
 800dd1c:	9b01      	ldr	r3, [sp, #4]
 800dd1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dd22:	3204      	adds	r2, #4
 800dd24:	f1ba 0f00 	cmp.w	sl, #0
 800dd28:	d020      	beq.n	800dd6c <__multiply+0x11c>
 800dd2a:	682b      	ldr	r3, [r5, #0]
 800dd2c:	4689      	mov	r9, r1
 800dd2e:	46a8      	mov	r8, r5
 800dd30:	f04f 0b00 	mov.w	fp, #0
 800dd34:	f8b9 c000 	ldrh.w	ip, [r9]
 800dd38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dd3c:	fb0a 440c 	mla	r4, sl, ip, r4
 800dd40:	445c      	add	r4, fp
 800dd42:	46c4      	mov	ip, r8
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd4a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd4e:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dd56:	0c1b      	lsrs	r3, r3, #16
 800dd58:	fb0a b303 	mla	r3, sl, r3, fp
 800dd5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dd60:	454f      	cmp	r7, r9
 800dd62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dd66:	d805      	bhi.n	800dd74 <__multiply+0x124>
 800dd68:	f8c8 3004 	str.w	r3, [r8, #4]
 800dd6c:	3504      	adds	r5, #4
 800dd6e:	e79b      	b.n	800dca8 <__multiply+0x58>
 800dd70:	46d4      	mov	ip, sl
 800dd72:	e7b3      	b.n	800dcdc <__multiply+0x8c>
 800dd74:	46e0      	mov	r8, ip
 800dd76:	e7dd      	b.n	800dd34 <__multiply+0xe4>
 800dd78:	3e01      	subs	r6, #1
 800dd7a:	e799      	b.n	800dcb0 <__multiply+0x60>

0800dd7c <__pow5mult>:
 800dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	4615      	mov	r5, r2
 800dd82:	f012 0203 	ands.w	r2, r2, #3
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	d007      	beq.n	800dd9c <__pow5mult+0x20>
 800dd8c:	3a01      	subs	r2, #1
 800dd8e:	4c21      	ldr	r4, [pc, #132]	; (800de14 <__pow5mult+0x98>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd96:	f7ff fec9 	bl	800db2c <__multadd>
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	10ad      	asrs	r5, r5, #2
 800dd9e:	d035      	beq.n	800de0c <__pow5mult+0x90>
 800dda0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dda2:	b93c      	cbnz	r4, 800ddb4 <__pow5mult+0x38>
 800dda4:	2010      	movs	r0, #16
 800dda6:	f7ff fe63 	bl	800da70 <malloc>
 800ddaa:	6270      	str	r0, [r6, #36]	; 0x24
 800ddac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddb0:	6004      	str	r4, [r0, #0]
 800ddb2:	60c4      	str	r4, [r0, #12]
 800ddb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddbc:	b94c      	cbnz	r4, 800ddd2 <__pow5mult+0x56>
 800ddbe:	f240 2171 	movw	r1, #625	; 0x271
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f7ff ff3b 	bl	800dc3e <__i2b>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddce:	4604      	mov	r4, r0
 800ddd0:	6003      	str	r3, [r0, #0]
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	07eb      	lsls	r3, r5, #31
 800ddd8:	d50a      	bpl.n	800ddf0 <__pow5mult+0x74>
 800ddda:	4639      	mov	r1, r7
 800dddc:	4622      	mov	r2, r4
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ff36 	bl	800dc50 <__multiply>
 800dde4:	4639      	mov	r1, r7
 800dde6:	4681      	mov	r9, r0
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff fe88 	bl	800dafe <_Bfree>
 800ddee:	464f      	mov	r7, r9
 800ddf0:	106d      	asrs	r5, r5, #1
 800ddf2:	d00b      	beq.n	800de0c <__pow5mult+0x90>
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	b938      	cbnz	r0, 800de08 <__pow5mult+0x8c>
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f7ff ff27 	bl	800dc50 <__multiply>
 800de02:	6020      	str	r0, [r4, #0]
 800de04:	f8c0 8000 	str.w	r8, [r0]
 800de08:	4604      	mov	r4, r0
 800de0a:	e7e4      	b.n	800ddd6 <__pow5mult+0x5a>
 800de0c:	4638      	mov	r0, r7
 800de0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de12:	bf00      	nop
 800de14:	0800e828 	.word	0x0800e828

0800de18 <__lshift>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	460c      	mov	r4, r1
 800de1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	6849      	ldr	r1, [r1, #4]
 800de26:	eb0a 0903 	add.w	r9, sl, r3
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	4607      	mov	r7, r0
 800de2e:	4616      	mov	r6, r2
 800de30:	f109 0501 	add.w	r5, r9, #1
 800de34:	42ab      	cmp	r3, r5
 800de36:	db32      	blt.n	800de9e <__lshift+0x86>
 800de38:	4638      	mov	r0, r7
 800de3a:	f7ff fe2c 	bl	800da96 <_Balloc>
 800de3e:	2300      	movs	r3, #0
 800de40:	4680      	mov	r8, r0
 800de42:	f100 0114 	add.w	r1, r0, #20
 800de46:	461a      	mov	r2, r3
 800de48:	4553      	cmp	r3, sl
 800de4a:	db2b      	blt.n	800dea4 <__lshift+0x8c>
 800de4c:	6920      	ldr	r0, [r4, #16]
 800de4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de52:	f104 0314 	add.w	r3, r4, #20
 800de56:	f016 021f 	ands.w	r2, r6, #31
 800de5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de62:	d025      	beq.n	800deb0 <__lshift+0x98>
 800de64:	f1c2 0e20 	rsb	lr, r2, #32
 800de68:	2000      	movs	r0, #0
 800de6a:	681e      	ldr	r6, [r3, #0]
 800de6c:	468a      	mov	sl, r1
 800de6e:	4096      	lsls	r6, r2
 800de70:	4330      	orrs	r0, r6
 800de72:	f84a 0b04 	str.w	r0, [sl], #4
 800de76:	f853 0b04 	ldr.w	r0, [r3], #4
 800de7a:	459c      	cmp	ip, r3
 800de7c:	fa20 f00e 	lsr.w	r0, r0, lr
 800de80:	d814      	bhi.n	800deac <__lshift+0x94>
 800de82:	6048      	str	r0, [r1, #4]
 800de84:	b108      	cbz	r0, 800de8a <__lshift+0x72>
 800de86:	f109 0502 	add.w	r5, r9, #2
 800de8a:	3d01      	subs	r5, #1
 800de8c:	4638      	mov	r0, r7
 800de8e:	f8c8 5010 	str.w	r5, [r8, #16]
 800de92:	4621      	mov	r1, r4
 800de94:	f7ff fe33 	bl	800dafe <_Bfree>
 800de98:	4640      	mov	r0, r8
 800de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9e:	3101      	adds	r1, #1
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	e7c7      	b.n	800de34 <__lshift+0x1c>
 800dea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dea8:	3301      	adds	r3, #1
 800deaa:	e7cd      	b.n	800de48 <__lshift+0x30>
 800deac:	4651      	mov	r1, sl
 800deae:	e7dc      	b.n	800de6a <__lshift+0x52>
 800deb0:	3904      	subs	r1, #4
 800deb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800deba:	459c      	cmp	ip, r3
 800debc:	d8f9      	bhi.n	800deb2 <__lshift+0x9a>
 800debe:	e7e4      	b.n	800de8a <__lshift+0x72>

0800dec0 <__mcmp>:
 800dec0:	6903      	ldr	r3, [r0, #16]
 800dec2:	690a      	ldr	r2, [r1, #16]
 800dec4:	1a9b      	subs	r3, r3, r2
 800dec6:	b530      	push	{r4, r5, lr}
 800dec8:	d10c      	bne.n	800dee4 <__mcmp+0x24>
 800deca:	0092      	lsls	r2, r2, #2
 800decc:	3014      	adds	r0, #20
 800dece:	3114      	adds	r1, #20
 800ded0:	1884      	adds	r4, r0, r2
 800ded2:	4411      	add	r1, r2
 800ded4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ded8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dedc:	4295      	cmp	r5, r2
 800dede:	d003      	beq.n	800dee8 <__mcmp+0x28>
 800dee0:	d305      	bcc.n	800deee <__mcmp+0x2e>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4618      	mov	r0, r3
 800dee6:	bd30      	pop	{r4, r5, pc}
 800dee8:	42a0      	cmp	r0, r4
 800deea:	d3f3      	bcc.n	800ded4 <__mcmp+0x14>
 800deec:	e7fa      	b.n	800dee4 <__mcmp+0x24>
 800deee:	f04f 33ff 	mov.w	r3, #4294967295
 800def2:	e7f7      	b.n	800dee4 <__mcmp+0x24>

0800def4 <__mdiff>:
 800def4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def8:	460d      	mov	r5, r1
 800defa:	4607      	mov	r7, r0
 800defc:	4611      	mov	r1, r2
 800defe:	4628      	mov	r0, r5
 800df00:	4614      	mov	r4, r2
 800df02:	f7ff ffdd 	bl	800dec0 <__mcmp>
 800df06:	1e06      	subs	r6, r0, #0
 800df08:	d108      	bne.n	800df1c <__mdiff+0x28>
 800df0a:	4631      	mov	r1, r6
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff fdc2 	bl	800da96 <_Balloc>
 800df12:	2301      	movs	r3, #1
 800df14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800df18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1c:	bfa4      	itt	ge
 800df1e:	4623      	movge	r3, r4
 800df20:	462c      	movge	r4, r5
 800df22:	4638      	mov	r0, r7
 800df24:	6861      	ldr	r1, [r4, #4]
 800df26:	bfa6      	itte	ge
 800df28:	461d      	movge	r5, r3
 800df2a:	2600      	movge	r6, #0
 800df2c:	2601      	movlt	r6, #1
 800df2e:	f7ff fdb2 	bl	800da96 <_Balloc>
 800df32:	692b      	ldr	r3, [r5, #16]
 800df34:	60c6      	str	r6, [r0, #12]
 800df36:	6926      	ldr	r6, [r4, #16]
 800df38:	f105 0914 	add.w	r9, r5, #20
 800df3c:	f104 0214 	add.w	r2, r4, #20
 800df40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800df44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800df48:	f100 0514 	add.w	r5, r0, #20
 800df4c:	f04f 0e00 	mov.w	lr, #0
 800df50:	f852 ab04 	ldr.w	sl, [r2], #4
 800df54:	f859 4b04 	ldr.w	r4, [r9], #4
 800df58:	fa1e f18a 	uxtah	r1, lr, sl
 800df5c:	b2a3      	uxth	r3, r4
 800df5e:	1ac9      	subs	r1, r1, r3
 800df60:	0c23      	lsrs	r3, r4, #16
 800df62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800df66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800df6a:	b289      	uxth	r1, r1
 800df6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800df70:	45c8      	cmp	r8, r9
 800df72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800df76:	4694      	mov	ip, r2
 800df78:	f845 3b04 	str.w	r3, [r5], #4
 800df7c:	d8e8      	bhi.n	800df50 <__mdiff+0x5c>
 800df7e:	45bc      	cmp	ip, r7
 800df80:	d304      	bcc.n	800df8c <__mdiff+0x98>
 800df82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800df86:	b183      	cbz	r3, 800dfaa <__mdiff+0xb6>
 800df88:	6106      	str	r6, [r0, #16]
 800df8a:	e7c5      	b.n	800df18 <__mdiff+0x24>
 800df8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df90:	fa1e f381 	uxtah	r3, lr, r1
 800df94:	141a      	asrs	r2, r3, #16
 800df96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfa0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dfa4:	f845 3b04 	str.w	r3, [r5], #4
 800dfa8:	e7e9      	b.n	800df7e <__mdiff+0x8a>
 800dfaa:	3e01      	subs	r6, #1
 800dfac:	e7e9      	b.n	800df82 <__mdiff+0x8e>

0800dfae <__d2b>:
 800dfae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfb2:	460e      	mov	r6, r1
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	ec59 8b10 	vmov	r8, r9, d0
 800dfba:	4615      	mov	r5, r2
 800dfbc:	f7ff fd6b 	bl	800da96 <_Balloc>
 800dfc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfca:	bb34      	cbnz	r4, 800e01a <__d2b+0x6c>
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	f1b8 0300 	subs.w	r3, r8, #0
 800dfd2:	d027      	beq.n	800e024 <__d2b+0x76>
 800dfd4:	a802      	add	r0, sp, #8
 800dfd6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dfda:	f7ff fe01 	bl	800dbe0 <__lo0bits>
 800dfde:	9900      	ldr	r1, [sp, #0]
 800dfe0:	b1f0      	cbz	r0, 800e020 <__d2b+0x72>
 800dfe2:	9a01      	ldr	r2, [sp, #4]
 800dfe4:	f1c0 0320 	rsb	r3, r0, #32
 800dfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfec:	430b      	orrs	r3, r1
 800dfee:	40c2      	lsrs	r2, r0
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	9201      	str	r2, [sp, #4]
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	61bb      	str	r3, [r7, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bf14      	ite	ne
 800dffc:	2102      	movne	r1, #2
 800dffe:	2101      	moveq	r1, #1
 800e000:	6139      	str	r1, [r7, #16]
 800e002:	b1c4      	cbz	r4, 800e036 <__d2b+0x88>
 800e004:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e008:	4404      	add	r4, r0
 800e00a:	6034      	str	r4, [r6, #0]
 800e00c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e010:	6028      	str	r0, [r5, #0]
 800e012:	4638      	mov	r0, r7
 800e014:	b003      	add	sp, #12
 800e016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e01e:	e7d5      	b.n	800dfcc <__d2b+0x1e>
 800e020:	6179      	str	r1, [r7, #20]
 800e022:	e7e7      	b.n	800dff4 <__d2b+0x46>
 800e024:	a801      	add	r0, sp, #4
 800e026:	f7ff fddb 	bl	800dbe0 <__lo0bits>
 800e02a:	9b01      	ldr	r3, [sp, #4]
 800e02c:	617b      	str	r3, [r7, #20]
 800e02e:	2101      	movs	r1, #1
 800e030:	6139      	str	r1, [r7, #16]
 800e032:	3020      	adds	r0, #32
 800e034:	e7e5      	b.n	800e002 <__d2b+0x54>
 800e036:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e03a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e03e:	6030      	str	r0, [r6, #0]
 800e040:	6918      	ldr	r0, [r3, #16]
 800e042:	f7ff fdae 	bl	800dba2 <__hi0bits>
 800e046:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e04a:	e7e1      	b.n	800e010 <__d2b+0x62>

0800e04c <_calloc_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	fb02 f401 	mul.w	r4, r2, r1
 800e052:	4621      	mov	r1, r4
 800e054:	f000 f856 	bl	800e104 <_malloc_r>
 800e058:	4605      	mov	r5, r0
 800e05a:	b118      	cbz	r0, 800e064 <_calloc_r+0x18>
 800e05c:	4622      	mov	r2, r4
 800e05e:	2100      	movs	r1, #0
 800e060:	f7fd ffc2 	bl	800bfe8 <memset>
 800e064:	4628      	mov	r0, r5
 800e066:	bd38      	pop	{r3, r4, r5, pc}

0800e068 <_free_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4605      	mov	r5, r0
 800e06c:	2900      	cmp	r1, #0
 800e06e:	d045      	beq.n	800e0fc <_free_r+0x94>
 800e070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e074:	1f0c      	subs	r4, r1, #4
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfb8      	it	lt
 800e07a:	18e4      	addlt	r4, r4, r3
 800e07c:	f000 fa98 	bl	800e5b0 <__malloc_lock>
 800e080:	4a1f      	ldr	r2, [pc, #124]	; (800e100 <_free_r+0x98>)
 800e082:	6813      	ldr	r3, [r2, #0]
 800e084:	4610      	mov	r0, r2
 800e086:	b933      	cbnz	r3, 800e096 <_free_r+0x2e>
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	6014      	str	r4, [r2, #0]
 800e08c:	4628      	mov	r0, r5
 800e08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e092:	f000 ba8e 	b.w	800e5b2 <__malloc_unlock>
 800e096:	42a3      	cmp	r3, r4
 800e098:	d90c      	bls.n	800e0b4 <_free_r+0x4c>
 800e09a:	6821      	ldr	r1, [r4, #0]
 800e09c:	1862      	adds	r2, r4, r1
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	bf04      	itt	eq
 800e0a2:	681a      	ldreq	r2, [r3, #0]
 800e0a4:	685b      	ldreq	r3, [r3, #4]
 800e0a6:	6063      	str	r3, [r4, #4]
 800e0a8:	bf04      	itt	eq
 800e0aa:	1852      	addeq	r2, r2, r1
 800e0ac:	6022      	streq	r2, [r4, #0]
 800e0ae:	6004      	str	r4, [r0, #0]
 800e0b0:	e7ec      	b.n	800e08c <_free_r+0x24>
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	685a      	ldr	r2, [r3, #4]
 800e0b6:	b10a      	cbz	r2, 800e0bc <_free_r+0x54>
 800e0b8:	42a2      	cmp	r2, r4
 800e0ba:	d9fa      	bls.n	800e0b2 <_free_r+0x4a>
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	1858      	adds	r0, r3, r1
 800e0c0:	42a0      	cmp	r0, r4
 800e0c2:	d10b      	bne.n	800e0dc <_free_r+0x74>
 800e0c4:	6820      	ldr	r0, [r4, #0]
 800e0c6:	4401      	add	r1, r0
 800e0c8:	1858      	adds	r0, r3, r1
 800e0ca:	4282      	cmp	r2, r0
 800e0cc:	6019      	str	r1, [r3, #0]
 800e0ce:	d1dd      	bne.n	800e08c <_free_r+0x24>
 800e0d0:	6810      	ldr	r0, [r2, #0]
 800e0d2:	6852      	ldr	r2, [r2, #4]
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	4401      	add	r1, r0
 800e0d8:	6019      	str	r1, [r3, #0]
 800e0da:	e7d7      	b.n	800e08c <_free_r+0x24>
 800e0dc:	d902      	bls.n	800e0e4 <_free_r+0x7c>
 800e0de:	230c      	movs	r3, #12
 800e0e0:	602b      	str	r3, [r5, #0]
 800e0e2:	e7d3      	b.n	800e08c <_free_r+0x24>
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	1821      	adds	r1, r4, r0
 800e0e8:	428a      	cmp	r2, r1
 800e0ea:	bf04      	itt	eq
 800e0ec:	6811      	ldreq	r1, [r2, #0]
 800e0ee:	6852      	ldreq	r2, [r2, #4]
 800e0f0:	6062      	str	r2, [r4, #4]
 800e0f2:	bf04      	itt	eq
 800e0f4:	1809      	addeq	r1, r1, r0
 800e0f6:	6021      	streq	r1, [r4, #0]
 800e0f8:	605c      	str	r4, [r3, #4]
 800e0fa:	e7c7      	b.n	800e08c <_free_r+0x24>
 800e0fc:	bd38      	pop	{r3, r4, r5, pc}
 800e0fe:	bf00      	nop
 800e100:	24000210 	.word	0x24000210

0800e104 <_malloc_r>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	1ccd      	adds	r5, r1, #3
 800e108:	f025 0503 	bic.w	r5, r5, #3
 800e10c:	3508      	adds	r5, #8
 800e10e:	2d0c      	cmp	r5, #12
 800e110:	bf38      	it	cc
 800e112:	250c      	movcc	r5, #12
 800e114:	2d00      	cmp	r5, #0
 800e116:	4606      	mov	r6, r0
 800e118:	db01      	blt.n	800e11e <_malloc_r+0x1a>
 800e11a:	42a9      	cmp	r1, r5
 800e11c:	d903      	bls.n	800e126 <_malloc_r+0x22>
 800e11e:	230c      	movs	r3, #12
 800e120:	6033      	str	r3, [r6, #0]
 800e122:	2000      	movs	r0, #0
 800e124:	bd70      	pop	{r4, r5, r6, pc}
 800e126:	f000 fa43 	bl	800e5b0 <__malloc_lock>
 800e12a:	4a21      	ldr	r2, [pc, #132]	; (800e1b0 <_malloc_r+0xac>)
 800e12c:	6814      	ldr	r4, [r2, #0]
 800e12e:	4621      	mov	r1, r4
 800e130:	b991      	cbnz	r1, 800e158 <_malloc_r+0x54>
 800e132:	4c20      	ldr	r4, [pc, #128]	; (800e1b4 <_malloc_r+0xb0>)
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	b91b      	cbnz	r3, 800e140 <_malloc_r+0x3c>
 800e138:	4630      	mov	r0, r6
 800e13a:	f000 f97d 	bl	800e438 <_sbrk_r>
 800e13e:	6020      	str	r0, [r4, #0]
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f000 f978 	bl	800e438 <_sbrk_r>
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	d124      	bne.n	800e196 <_malloc_r+0x92>
 800e14c:	230c      	movs	r3, #12
 800e14e:	6033      	str	r3, [r6, #0]
 800e150:	4630      	mov	r0, r6
 800e152:	f000 fa2e 	bl	800e5b2 <__malloc_unlock>
 800e156:	e7e4      	b.n	800e122 <_malloc_r+0x1e>
 800e158:	680b      	ldr	r3, [r1, #0]
 800e15a:	1b5b      	subs	r3, r3, r5
 800e15c:	d418      	bmi.n	800e190 <_malloc_r+0x8c>
 800e15e:	2b0b      	cmp	r3, #11
 800e160:	d90f      	bls.n	800e182 <_malloc_r+0x7e>
 800e162:	600b      	str	r3, [r1, #0]
 800e164:	50cd      	str	r5, [r1, r3]
 800e166:	18cc      	adds	r4, r1, r3
 800e168:	4630      	mov	r0, r6
 800e16a:	f000 fa22 	bl	800e5b2 <__malloc_unlock>
 800e16e:	f104 000b 	add.w	r0, r4, #11
 800e172:	1d23      	adds	r3, r4, #4
 800e174:	f020 0007 	bic.w	r0, r0, #7
 800e178:	1ac3      	subs	r3, r0, r3
 800e17a:	d0d3      	beq.n	800e124 <_malloc_r+0x20>
 800e17c:	425a      	negs	r2, r3
 800e17e:	50e2      	str	r2, [r4, r3]
 800e180:	e7d0      	b.n	800e124 <_malloc_r+0x20>
 800e182:	428c      	cmp	r4, r1
 800e184:	684b      	ldr	r3, [r1, #4]
 800e186:	bf16      	itet	ne
 800e188:	6063      	strne	r3, [r4, #4]
 800e18a:	6013      	streq	r3, [r2, #0]
 800e18c:	460c      	movne	r4, r1
 800e18e:	e7eb      	b.n	800e168 <_malloc_r+0x64>
 800e190:	460c      	mov	r4, r1
 800e192:	6849      	ldr	r1, [r1, #4]
 800e194:	e7cc      	b.n	800e130 <_malloc_r+0x2c>
 800e196:	1cc4      	adds	r4, r0, #3
 800e198:	f024 0403 	bic.w	r4, r4, #3
 800e19c:	42a0      	cmp	r0, r4
 800e19e:	d005      	beq.n	800e1ac <_malloc_r+0xa8>
 800e1a0:	1a21      	subs	r1, r4, r0
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f000 f948 	bl	800e438 <_sbrk_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d0cf      	beq.n	800e14c <_malloc_r+0x48>
 800e1ac:	6025      	str	r5, [r4, #0]
 800e1ae:	e7db      	b.n	800e168 <_malloc_r+0x64>
 800e1b0:	24000210 	.word	0x24000210
 800e1b4:	24000214 	.word	0x24000214

0800e1b8 <__sfputc_r>:
 800e1b8:	6893      	ldr	r3, [r2, #8]
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	b410      	push	{r4}
 800e1c0:	6093      	str	r3, [r2, #8]
 800e1c2:	da08      	bge.n	800e1d6 <__sfputc_r+0x1e>
 800e1c4:	6994      	ldr	r4, [r2, #24]
 800e1c6:	42a3      	cmp	r3, r4
 800e1c8:	db01      	blt.n	800e1ce <__sfputc_r+0x16>
 800e1ca:	290a      	cmp	r1, #10
 800e1cc:	d103      	bne.n	800e1d6 <__sfputc_r+0x1e>
 800e1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1d2:	f7fe bbc9 	b.w	800c968 <__swbuf_r>
 800e1d6:	6813      	ldr	r3, [r2, #0]
 800e1d8:	1c58      	adds	r0, r3, #1
 800e1da:	6010      	str	r0, [r2, #0]
 800e1dc:	7019      	strb	r1, [r3, #0]
 800e1de:	4608      	mov	r0, r1
 800e1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <__sfputs_r>:
 800e1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	460f      	mov	r7, r1
 800e1ec:	4614      	mov	r4, r2
 800e1ee:	18d5      	adds	r5, r2, r3
 800e1f0:	42ac      	cmp	r4, r5
 800e1f2:	d101      	bne.n	800e1f8 <__sfputs_r+0x12>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e007      	b.n	800e208 <__sfputs_r+0x22>
 800e1f8:	463a      	mov	r2, r7
 800e1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff ffda 	bl	800e1b8 <__sfputc_r>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d1f3      	bne.n	800e1f0 <__sfputs_r+0xa>
 800e208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e20c <_vfiprintf_r>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	460c      	mov	r4, r1
 800e212:	b09d      	sub	sp, #116	; 0x74
 800e214:	4617      	mov	r7, r2
 800e216:	461d      	mov	r5, r3
 800e218:	4606      	mov	r6, r0
 800e21a:	b118      	cbz	r0, 800e224 <_vfiprintf_r+0x18>
 800e21c:	6983      	ldr	r3, [r0, #24]
 800e21e:	b90b      	cbnz	r3, 800e224 <_vfiprintf_r+0x18>
 800e220:	f7ff fb2a 	bl	800d878 <__sinit>
 800e224:	4b7c      	ldr	r3, [pc, #496]	; (800e418 <_vfiprintf_r+0x20c>)
 800e226:	429c      	cmp	r4, r3
 800e228:	d158      	bne.n	800e2dc <_vfiprintf_r+0xd0>
 800e22a:	6874      	ldr	r4, [r6, #4]
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	0718      	lsls	r0, r3, #28
 800e230:	d55e      	bpl.n	800e2f0 <_vfiprintf_r+0xe4>
 800e232:	6923      	ldr	r3, [r4, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d05b      	beq.n	800e2f0 <_vfiprintf_r+0xe4>
 800e238:	2300      	movs	r3, #0
 800e23a:	9309      	str	r3, [sp, #36]	; 0x24
 800e23c:	2320      	movs	r3, #32
 800e23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e242:	2330      	movs	r3, #48	; 0x30
 800e244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e248:	9503      	str	r5, [sp, #12]
 800e24a:	f04f 0b01 	mov.w	fp, #1
 800e24e:	46b8      	mov	r8, r7
 800e250:	4645      	mov	r5, r8
 800e252:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e256:	b10b      	cbz	r3, 800e25c <_vfiprintf_r+0x50>
 800e258:	2b25      	cmp	r3, #37	; 0x25
 800e25a:	d154      	bne.n	800e306 <_vfiprintf_r+0xfa>
 800e25c:	ebb8 0a07 	subs.w	sl, r8, r7
 800e260:	d00b      	beq.n	800e27a <_vfiprintf_r+0x6e>
 800e262:	4653      	mov	r3, sl
 800e264:	463a      	mov	r2, r7
 800e266:	4621      	mov	r1, r4
 800e268:	4630      	mov	r0, r6
 800e26a:	f7ff ffbc 	bl	800e1e6 <__sfputs_r>
 800e26e:	3001      	adds	r0, #1
 800e270:	f000 80c2 	beq.w	800e3f8 <_vfiprintf_r+0x1ec>
 800e274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e276:	4453      	add	r3, sl
 800e278:	9309      	str	r3, [sp, #36]	; 0x24
 800e27a:	f898 3000 	ldrb.w	r3, [r8]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 80ba 	beq.w	800e3f8 <_vfiprintf_r+0x1ec>
 800e284:	2300      	movs	r3, #0
 800e286:	f04f 32ff 	mov.w	r2, #4294967295
 800e28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	9307      	str	r3, [sp, #28]
 800e292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e296:	931a      	str	r3, [sp, #104]	; 0x68
 800e298:	46a8      	mov	r8, r5
 800e29a:	2205      	movs	r2, #5
 800e29c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e2a0:	485e      	ldr	r0, [pc, #376]	; (800e41c <_vfiprintf_r+0x210>)
 800e2a2:	f7f2 f825 	bl	80002f0 <memchr>
 800e2a6:	9b04      	ldr	r3, [sp, #16]
 800e2a8:	bb78      	cbnz	r0, 800e30a <_vfiprintf_r+0xfe>
 800e2aa:	06d9      	lsls	r1, r3, #27
 800e2ac:	bf44      	itt	mi
 800e2ae:	2220      	movmi	r2, #32
 800e2b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e2b4:	071a      	lsls	r2, r3, #28
 800e2b6:	bf44      	itt	mi
 800e2b8:	222b      	movmi	r2, #43	; 0x2b
 800e2ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e2be:	782a      	ldrb	r2, [r5, #0]
 800e2c0:	2a2a      	cmp	r2, #42	; 0x2a
 800e2c2:	d02a      	beq.n	800e31a <_vfiprintf_r+0x10e>
 800e2c4:	9a07      	ldr	r2, [sp, #28]
 800e2c6:	46a8      	mov	r8, r5
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	250a      	movs	r5, #10
 800e2cc:	4641      	mov	r1, r8
 800e2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d2:	3b30      	subs	r3, #48	; 0x30
 800e2d4:	2b09      	cmp	r3, #9
 800e2d6:	d969      	bls.n	800e3ac <_vfiprintf_r+0x1a0>
 800e2d8:	b360      	cbz	r0, 800e334 <_vfiprintf_r+0x128>
 800e2da:	e024      	b.n	800e326 <_vfiprintf_r+0x11a>
 800e2dc:	4b50      	ldr	r3, [pc, #320]	; (800e420 <_vfiprintf_r+0x214>)
 800e2de:	429c      	cmp	r4, r3
 800e2e0:	d101      	bne.n	800e2e6 <_vfiprintf_r+0xda>
 800e2e2:	68b4      	ldr	r4, [r6, #8]
 800e2e4:	e7a2      	b.n	800e22c <_vfiprintf_r+0x20>
 800e2e6:	4b4f      	ldr	r3, [pc, #316]	; (800e424 <_vfiprintf_r+0x218>)
 800e2e8:	429c      	cmp	r4, r3
 800e2ea:	bf08      	it	eq
 800e2ec:	68f4      	ldreq	r4, [r6, #12]
 800e2ee:	e79d      	b.n	800e22c <_vfiprintf_r+0x20>
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7fe fb8a 	bl	800ca0c <__swsetup_r>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d09d      	beq.n	800e238 <_vfiprintf_r+0x2c>
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	b01d      	add	sp, #116	; 0x74
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	46a8      	mov	r8, r5
 800e308:	e7a2      	b.n	800e250 <_vfiprintf_r+0x44>
 800e30a:	4a44      	ldr	r2, [pc, #272]	; (800e41c <_vfiprintf_r+0x210>)
 800e30c:	1a80      	subs	r0, r0, r2
 800e30e:	fa0b f000 	lsl.w	r0, fp, r0
 800e312:	4318      	orrs	r0, r3
 800e314:	9004      	str	r0, [sp, #16]
 800e316:	4645      	mov	r5, r8
 800e318:	e7be      	b.n	800e298 <_vfiprintf_r+0x8c>
 800e31a:	9a03      	ldr	r2, [sp, #12]
 800e31c:	1d11      	adds	r1, r2, #4
 800e31e:	6812      	ldr	r2, [r2, #0]
 800e320:	9103      	str	r1, [sp, #12]
 800e322:	2a00      	cmp	r2, #0
 800e324:	db01      	blt.n	800e32a <_vfiprintf_r+0x11e>
 800e326:	9207      	str	r2, [sp, #28]
 800e328:	e004      	b.n	800e334 <_vfiprintf_r+0x128>
 800e32a:	4252      	negs	r2, r2
 800e32c:	f043 0302 	orr.w	r3, r3, #2
 800e330:	9207      	str	r2, [sp, #28]
 800e332:	9304      	str	r3, [sp, #16]
 800e334:	f898 3000 	ldrb.w	r3, [r8]
 800e338:	2b2e      	cmp	r3, #46	; 0x2e
 800e33a:	d10e      	bne.n	800e35a <_vfiprintf_r+0x14e>
 800e33c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e340:	2b2a      	cmp	r3, #42	; 0x2a
 800e342:	d138      	bne.n	800e3b6 <_vfiprintf_r+0x1aa>
 800e344:	9b03      	ldr	r3, [sp, #12]
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	9203      	str	r2, [sp, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	bfb8      	it	lt
 800e350:	f04f 33ff 	movlt.w	r3, #4294967295
 800e354:	f108 0802 	add.w	r8, r8, #2
 800e358:	9305      	str	r3, [sp, #20]
 800e35a:	4d33      	ldr	r5, [pc, #204]	; (800e428 <_vfiprintf_r+0x21c>)
 800e35c:	f898 1000 	ldrb.w	r1, [r8]
 800e360:	2203      	movs	r2, #3
 800e362:	4628      	mov	r0, r5
 800e364:	f7f1 ffc4 	bl	80002f0 <memchr>
 800e368:	b140      	cbz	r0, 800e37c <_vfiprintf_r+0x170>
 800e36a:	2340      	movs	r3, #64	; 0x40
 800e36c:	1b40      	subs	r0, r0, r5
 800e36e:	fa03 f000 	lsl.w	r0, r3, r0
 800e372:	9b04      	ldr	r3, [sp, #16]
 800e374:	4303      	orrs	r3, r0
 800e376:	f108 0801 	add.w	r8, r8, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	f898 1000 	ldrb.w	r1, [r8]
 800e380:	482a      	ldr	r0, [pc, #168]	; (800e42c <_vfiprintf_r+0x220>)
 800e382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e386:	2206      	movs	r2, #6
 800e388:	f108 0701 	add.w	r7, r8, #1
 800e38c:	f7f1 ffb0 	bl	80002f0 <memchr>
 800e390:	2800      	cmp	r0, #0
 800e392:	d037      	beq.n	800e404 <_vfiprintf_r+0x1f8>
 800e394:	4b26      	ldr	r3, [pc, #152]	; (800e430 <_vfiprintf_r+0x224>)
 800e396:	bb1b      	cbnz	r3, 800e3e0 <_vfiprintf_r+0x1d4>
 800e398:	9b03      	ldr	r3, [sp, #12]
 800e39a:	3307      	adds	r3, #7
 800e39c:	f023 0307 	bic.w	r3, r3, #7
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a6:	444b      	add	r3, r9
 800e3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3aa:	e750      	b.n	800e24e <_vfiprintf_r+0x42>
 800e3ac:	fb05 3202 	mla	r2, r5, r2, r3
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	4688      	mov	r8, r1
 800e3b4:	e78a      	b.n	800e2cc <_vfiprintf_r+0xc0>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f108 0801 	add.w	r8, r8, #1
 800e3bc:	9305      	str	r3, [sp, #20]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	250a      	movs	r5, #10
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3c8:	3a30      	subs	r2, #48	; 0x30
 800e3ca:	2a09      	cmp	r2, #9
 800e3cc:	d903      	bls.n	800e3d6 <_vfiprintf_r+0x1ca>
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d0c3      	beq.n	800e35a <_vfiprintf_r+0x14e>
 800e3d2:	9105      	str	r1, [sp, #20]
 800e3d4:	e7c1      	b.n	800e35a <_vfiprintf_r+0x14e>
 800e3d6:	fb05 2101 	mla	r1, r5, r1, r2
 800e3da:	2301      	movs	r3, #1
 800e3dc:	4680      	mov	r8, r0
 800e3de:	e7f0      	b.n	800e3c2 <_vfiprintf_r+0x1b6>
 800e3e0:	ab03      	add	r3, sp, #12
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	4622      	mov	r2, r4
 800e3e6:	4b13      	ldr	r3, [pc, #76]	; (800e434 <_vfiprintf_r+0x228>)
 800e3e8:	a904      	add	r1, sp, #16
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7fd fe8c 	bl	800c108 <_printf_float>
 800e3f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e3f4:	4681      	mov	r9, r0
 800e3f6:	d1d5      	bne.n	800e3a4 <_vfiprintf_r+0x198>
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	065b      	lsls	r3, r3, #25
 800e3fc:	f53f af7e 	bmi.w	800e2fc <_vfiprintf_r+0xf0>
 800e400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e402:	e77d      	b.n	800e300 <_vfiprintf_r+0xf4>
 800e404:	ab03      	add	r3, sp, #12
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4622      	mov	r2, r4
 800e40a:	4b0a      	ldr	r3, [pc, #40]	; (800e434 <_vfiprintf_r+0x228>)
 800e40c:	a904      	add	r1, sp, #16
 800e40e:	4630      	mov	r0, r6
 800e410:	f7fe f91c 	bl	800c64c <_printf_i>
 800e414:	e7ec      	b.n	800e3f0 <_vfiprintf_r+0x1e4>
 800e416:	bf00      	nop
 800e418:	0800e6f8 	.word	0x0800e6f8
 800e41c:	0800e834 	.word	0x0800e834
 800e420:	0800e718 	.word	0x0800e718
 800e424:	0800e6d8 	.word	0x0800e6d8
 800e428:	0800e83a 	.word	0x0800e83a
 800e42c:	0800e83e 	.word	0x0800e83e
 800e430:	0800c109 	.word	0x0800c109
 800e434:	0800e1e7 	.word	0x0800e1e7

0800e438 <_sbrk_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	4c06      	ldr	r4, [pc, #24]	; (800e454 <_sbrk_r+0x1c>)
 800e43c:	2300      	movs	r3, #0
 800e43e:	4605      	mov	r5, r0
 800e440:	4608      	mov	r0, r1
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	f7fd fbce 	bl	800bbe4 <_sbrk>
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	d102      	bne.n	800e452 <_sbrk_r+0x1a>
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	b103      	cbz	r3, 800e452 <_sbrk_r+0x1a>
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	2400041c 	.word	0x2400041c

0800e458 <__sread>:
 800e458:	b510      	push	{r4, lr}
 800e45a:	460c      	mov	r4, r1
 800e45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e460:	f000 f8a8 	bl	800e5b4 <_read_r>
 800e464:	2800      	cmp	r0, #0
 800e466:	bfab      	itete	ge
 800e468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e46a:	89a3      	ldrhlt	r3, [r4, #12]
 800e46c:	181b      	addge	r3, r3, r0
 800e46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e472:	bfac      	ite	ge
 800e474:	6563      	strge	r3, [r4, #84]	; 0x54
 800e476:	81a3      	strhlt	r3, [r4, #12]
 800e478:	bd10      	pop	{r4, pc}

0800e47a <__swrite>:
 800e47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47e:	461f      	mov	r7, r3
 800e480:	898b      	ldrh	r3, [r1, #12]
 800e482:	05db      	lsls	r3, r3, #23
 800e484:	4605      	mov	r5, r0
 800e486:	460c      	mov	r4, r1
 800e488:	4616      	mov	r6, r2
 800e48a:	d505      	bpl.n	800e498 <__swrite+0x1e>
 800e48c:	2302      	movs	r3, #2
 800e48e:	2200      	movs	r2, #0
 800e490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e494:	f000 f868 	bl	800e568 <_lseek_r>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4a2:	81a3      	strh	r3, [r4, #12]
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	463b      	mov	r3, r7
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ae:	f000 b817 	b.w	800e4e0 <_write_r>

0800e4b2 <__sseek>:
 800e4b2:	b510      	push	{r4, lr}
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ba:	f000 f855 	bl	800e568 <_lseek_r>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	bf15      	itete	ne
 800e4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4ce:	81a3      	strheq	r3, [r4, #12]
 800e4d0:	bf18      	it	ne
 800e4d2:	81a3      	strhne	r3, [r4, #12]
 800e4d4:	bd10      	pop	{r4, pc}

0800e4d6 <__sclose>:
 800e4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4da:	f000 b813 	b.w	800e504 <_close_r>
	...

0800e4e0 <_write_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4c07      	ldr	r4, [pc, #28]	; (800e500 <_write_r+0x20>)
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	6022      	str	r2, [r4, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f7fd fb27 	bl	800bb42 <_write>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d102      	bne.n	800e4fe <_write_r+0x1e>
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	b103      	cbz	r3, 800e4fe <_write_r+0x1e>
 800e4fc:	602b      	str	r3, [r5, #0]
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	2400041c 	.word	0x2400041c

0800e504 <_close_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4c06      	ldr	r4, [pc, #24]	; (800e520 <_close_r+0x1c>)
 800e508:	2300      	movs	r3, #0
 800e50a:	4605      	mov	r5, r0
 800e50c:	4608      	mov	r0, r1
 800e50e:	6023      	str	r3, [r4, #0]
 800e510:	f7fd fb33 	bl	800bb7a <_close>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d102      	bne.n	800e51e <_close_r+0x1a>
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	b103      	cbz	r3, 800e51e <_close_r+0x1a>
 800e51c:	602b      	str	r3, [r5, #0]
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	2400041c 	.word	0x2400041c

0800e524 <_fstat_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4c07      	ldr	r4, [pc, #28]	; (800e544 <_fstat_r+0x20>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4605      	mov	r5, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	f7fd fb2e 	bl	800bb92 <_fstat>
 800e536:	1c43      	adds	r3, r0, #1
 800e538:	d102      	bne.n	800e540 <_fstat_r+0x1c>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	b103      	cbz	r3, 800e540 <_fstat_r+0x1c>
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	bd38      	pop	{r3, r4, r5, pc}
 800e542:	bf00      	nop
 800e544:	2400041c 	.word	0x2400041c

0800e548 <_isatty_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4c06      	ldr	r4, [pc, #24]	; (800e564 <_isatty_r+0x1c>)
 800e54c:	2300      	movs	r3, #0
 800e54e:	4605      	mov	r5, r0
 800e550:	4608      	mov	r0, r1
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	f7fd fb2d 	bl	800bbb2 <_isatty>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_isatty_r+0x1a>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_isatty_r+0x1a>
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	2400041c 	.word	0x2400041c

0800e568 <_lseek_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4c07      	ldr	r4, [pc, #28]	; (800e588 <_lseek_r+0x20>)
 800e56c:	4605      	mov	r5, r0
 800e56e:	4608      	mov	r0, r1
 800e570:	4611      	mov	r1, r2
 800e572:	2200      	movs	r2, #0
 800e574:	6022      	str	r2, [r4, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f7fd fb26 	bl	800bbc8 <_lseek>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_lseek_r+0x1e>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	b103      	cbz	r3, 800e586 <_lseek_r+0x1e>
 800e584:	602b      	str	r3, [r5, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	2400041c 	.word	0x2400041c

0800e58c <__ascii_mbtowc>:
 800e58c:	b082      	sub	sp, #8
 800e58e:	b901      	cbnz	r1, 800e592 <__ascii_mbtowc+0x6>
 800e590:	a901      	add	r1, sp, #4
 800e592:	b142      	cbz	r2, 800e5a6 <__ascii_mbtowc+0x1a>
 800e594:	b14b      	cbz	r3, 800e5aa <__ascii_mbtowc+0x1e>
 800e596:	7813      	ldrb	r3, [r2, #0]
 800e598:	600b      	str	r3, [r1, #0]
 800e59a:	7812      	ldrb	r2, [r2, #0]
 800e59c:	1c10      	adds	r0, r2, #0
 800e59e:	bf18      	it	ne
 800e5a0:	2001      	movne	r0, #1
 800e5a2:	b002      	add	sp, #8
 800e5a4:	4770      	bx	lr
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	e7fb      	b.n	800e5a2 <__ascii_mbtowc+0x16>
 800e5aa:	f06f 0001 	mvn.w	r0, #1
 800e5ae:	e7f8      	b.n	800e5a2 <__ascii_mbtowc+0x16>

0800e5b0 <__malloc_lock>:
 800e5b0:	4770      	bx	lr

0800e5b2 <__malloc_unlock>:
 800e5b2:	4770      	bx	lr

0800e5b4 <_read_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4c07      	ldr	r4, [pc, #28]	; (800e5d4 <_read_r+0x20>)
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	4608      	mov	r0, r1
 800e5bc:	4611      	mov	r1, r2
 800e5be:	2200      	movs	r2, #0
 800e5c0:	6022      	str	r2, [r4, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	f7fd faa0 	bl	800bb08 <_read>
 800e5c8:	1c43      	adds	r3, r0, #1
 800e5ca:	d102      	bne.n	800e5d2 <_read_r+0x1e>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	b103      	cbz	r3, 800e5d2 <_read_r+0x1e>
 800e5d0:	602b      	str	r3, [r5, #0]
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	2400041c 	.word	0x2400041c

0800e5d8 <__ascii_wctomb>:
 800e5d8:	b149      	cbz	r1, 800e5ee <__ascii_wctomb+0x16>
 800e5da:	2aff      	cmp	r2, #255	; 0xff
 800e5dc:	bf85      	ittet	hi
 800e5de:	238a      	movhi	r3, #138	; 0x8a
 800e5e0:	6003      	strhi	r3, [r0, #0]
 800e5e2:	700a      	strbls	r2, [r1, #0]
 800e5e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5e8:	bf98      	it	ls
 800e5ea:	2001      	movls	r0, #1
 800e5ec:	4770      	bx	lr
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4770      	bx	lr
	...

0800e5f4 <_init>:
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	bf00      	nop
 800e5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fa:	bc08      	pop	{r3}
 800e5fc:	469e      	mov	lr, r3
 800e5fe:	4770      	bx	lr

0800e600 <_fini>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	bf00      	nop
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr
