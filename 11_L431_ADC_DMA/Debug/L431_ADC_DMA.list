
L431_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003194  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003360  08003360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003374  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003374  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a38c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a76  00000000  00000000  0002a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021134  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a77  00000000  00000000  0004e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbe4b  00000000  00000000  00056b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012296e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  001229ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003308 	.word	0x08003308

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003308 	.word	0x08003308

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f001 f91c 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 f80d 	bl	80001fc <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f002 ffa3 	bl	8003138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <HAL_InitTick+0x68>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d022      	beq.n	8000256 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <HAL_InitTick+0x6c>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <HAL_InitTick+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f001 f92a 	bl	800147e <HAL_SYSTICK_Config>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d10f      	bne.n	8000250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b0f      	cmp	r3, #15
 8000234:	d809      	bhi.n	800024a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000236:	2200      	movs	r2, #0
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	f04f 30ff 	mov.w	r0, #4294967295
 800023e:	f001 f8f4 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x70>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	e007      	b.n	800025a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800024a:	2301      	movs	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e004      	b.n	800025a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e001      	b.n	800025a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800025a:	7bfb      	ldrb	r3, [r7, #15]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x1c>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4413      	add	r3, r2
 800027e:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x1c>)
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000028 	.word	0x20000028
 8000290:	20000004 	.word	0x20000004

08000294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <HAL_GetTick+0x14>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	431a      	orrs	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	609a      	str	r2, [r3, #8]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	609a      	str	r2, [r3, #8]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000314:	b490      	push	{r4, r7}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3360      	adds	r3, #96	; 0x60
 8000326:	461a      	mov	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000330:	6822      	ldr	r2, [r4, #0]
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <LL_ADC_SetOffset+0x40>)
 8000334:	4013      	ands	r3, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	4313      	orrs	r3, r2
 8000342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000346:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bc90      	pop	{r4, r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	03fff000 	.word	0x03fff000

08000358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000358:	b490      	push	{r4, r7}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3360      	adds	r3, #96	; 0x60
 8000366:	461a      	mov	r2, r3
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000370:	6823      	ldr	r3, [r4, #0]
 8000372:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bc90      	pop	{r4, r7}
 800037e:	4770      	bx	lr

08000380 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000380:	b490      	push	{r4, r7}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3360      	adds	r3, #96	; 0x60
 8000390:	461a      	mov	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4413      	add	r3, r2
 8000398:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800039a:	6823      	ldr	r3, [r4, #0]
 800039c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc90      	pop	{r4, r7}
 80003ae:	4770      	bx	lr

080003b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d101      	bne.n	80003c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80003c4:	2301      	movs	r3, #1
 80003c6:	e000      	b.n	80003ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003d6:	b490      	push	{r4, r7}
 80003d8:	b084      	sub	sp, #16
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3330      	adds	r3, #48	; 0x30
 80003e6:	461a      	mov	r2, r3
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	f003 030c 	and.w	r3, r3, #12
 80003f2:	4413      	add	r3, r2
 80003f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003f6:	6822      	ldr	r2, [r4, #0]
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	f003 031f 	and.w	r3, r3, #31
 80003fe:	211f      	movs	r1, #31
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	0e9b      	lsrs	r3, r3, #26
 800040c:	f003 011f 	and.w	r1, r3, #31
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	f003 031f 	and.w	r3, r3, #31
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	4313      	orrs	r3, r2
 800041c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bc90      	pop	{r4, r7}
 8000426:	4770      	bx	lr

08000428 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000428:	b490      	push	{r4, r7}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3314      	adds	r3, #20
 8000438:	461a      	mov	r2, r3
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	0e5b      	lsrs	r3, r3, #25
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	4413      	add	r3, r2
 8000446:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000448:	6822      	ldr	r2, [r4, #0]
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	0d1b      	lsrs	r3, r3, #20
 800044e:	f003 031f 	and.w	r3, r3, #31
 8000452:	2107      	movs	r1, #7
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	401a      	ands	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	0d1b      	lsrs	r3, r3, #20
 8000460:	f003 031f 	and.w	r3, r3, #31
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bc90      	pop	{r4, r7}
 8000476:	4770      	bx	lr

08000478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000490:	43db      	mvns	r3, r3
 8000492:	401a      	ands	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f003 0318 	and.w	r3, r3, #24
 800049a:	4908      	ldr	r1, [pc, #32]	; (80004bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800049c:	40d9      	lsrs	r1, r3
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	400b      	ands	r3, r1
 80004a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004a6:	431a      	orrs	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	0007ffff 	.word	0x0007ffff

080004c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80004d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	6093      	str	r3, [r2, #8]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80004f8:	d101      	bne.n	80004fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800051c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000520:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000548:	d101      	bne.n	800054e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800056c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000570:	f043 0201 	orr.w	r2, r3, #1
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b01      	cmp	r3, #1
 8000596:	d101      	bne.n	800059c <LL_ADC_IsEnabled+0x18>
 8000598:	2301      	movs	r3, #1
 800059a:	e000      	b.n	800059e <LL_ADC_IsEnabled+0x1a>
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005be:	f043 0204 	orr.w	r2, r3, #4
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d101      	bne.n	80005ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	2b08      	cmp	r3, #8
 800060a:	d101      	bne.n	8000610 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e12a      	b.n	8000890 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000644:	2b00      	cmp	r3, #0
 8000646:	d109      	bne.n	800065c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f002 fc1f 	bl	8002e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff3f 	bl	80004e4 <LL_ADC_IsDeepPowerDownEnabled>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff25 	bl	80004c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff5a 	bl	8000534 <LL_ADC_IsInternalRegulatorEnabled>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d113      	bne.n	80006ae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff3e 	bl	800050c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000690:	4b81      	ldr	r3, [pc, #516]	; (8000898 <HAL_ADC_Init+0x278>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	099b      	lsrs	r3, r3, #6
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <HAL_ADC_Init+0x27c>)
 8000698:	fba2 2303 	umull	r2, r3, r2, r3
 800069c:	099b      	lsrs	r3, r3, #6
 800069e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80006a0:	e002      	b.n	80006a8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f9      	bne.n	80006a2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff3e 	bl	8000534 <LL_ADC_IsInternalRegulatorEnabled>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10d      	bne.n	80006da <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006c2:	f043 0210 	orr.w	r2, r3, #16
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f043 0201 	orr.w	r2, r3, #1
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff77 	bl	80005d2 <LL_ADC_REG_IsConversionOngoing>
 80006e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f040 80c5 	bne.w	800087e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f040 80c1 	bne.w	800087e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000700:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000704:	f043 0202 	orr.w	r2, r3, #2
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff37 	bl	8000584 <LL_ADC_IsEnabled>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10b      	bne.n	8000734 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800071c:	4860      	ldr	r0, [pc, #384]	; (80008a0 <HAL_ADC_Init+0x280>)
 800071e:	f7ff ff31 	bl	8000584 <LL_ADC_IsEnabled>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4619      	mov	r1, r3
 800072e:	485d      	ldr	r0, [pc, #372]	; (80008a4 <HAL_ADC_Init+0x284>)
 8000730:	f7ff fdbc 	bl	80002ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7e5b      	ldrb	r3, [r3, #25]
 8000738:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800073e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000744:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800074a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000752:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000754:	4313      	orrs	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d106      	bne.n	8000770 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	3b01      	subs	r3, #1
 8000768:	045b      	lsls	r3, r3, #17
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	4313      	orrs	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	2b00      	cmp	r3, #0
 8000776:	d009      	beq.n	800078c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000784:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	4313      	orrs	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <HAL_ADC_Init+0x288>)
 8000794:	4013      	ands	r3, r2
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	69b9      	ldr	r1, [r7, #24]
 800079c:	430b      	orrs	r3, r1
 800079e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff14 	bl	80005d2 <LL_ADC_REG_IsConversionOngoing>
 80007aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff21 	bl	80005f8 <LL_ADC_INJ_IsConversionOngoing>
 80007b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d13d      	bne.n	800083a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d13a      	bne.n	800083a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80007c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80007d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80007d2:	4313      	orrs	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007e0:	f023 0302 	bic.w	r3, r3, #2
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	69b9      	ldr	r1, [r7, #24]
 80007ea:	430b      	orrs	r3, r1
 80007ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d118      	bne.n	800082a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800080e:	4311      	orrs	r1, r2
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000814:	4311      	orrs	r1, r2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800081a:	430a      	orrs	r2, r1
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	e007      	b.n	800083a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f022 0201 	bic.w	r2, r2, #1
 8000838:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10c      	bne.n	800085c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f023 010f 	bic.w	r1, r3, #15
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	430a      	orrs	r2, r1
 8000858:	631a      	str	r2, [r3, #48]	; 0x30
 800085a:	e007      	b.n	800086c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f022 020f 	bic.w	r2, r2, #15
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000870:	f023 0303 	bic.w	r3, r3, #3
 8000874:	f043 0201 	orr.w	r2, r3, #1
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	655a      	str	r2, [r3, #84]	; 0x54
 800087c:	e007      	b.n	800088e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000882:	f043 0210 	orr.w	r2, r3, #16
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800088e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000008 	.word	0x20000008
 800089c:	053e2d63 	.word	0x053e2d63
 80008a0:	50040000 	.word	0x50040000
 80008a4:	50040300 	.word	0x50040300
 80008a8:	fff0c007 	.word	0xfff0c007

080008ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe88 	bl	80005d2 <LL_ADC_REG_IsConversionOngoing>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d167      	bne.n	8000998 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d101      	bne.n	80008d6 <HAL_ADC_Start_DMA+0x2a>
 80008d2:	2302      	movs	r3, #2
 80008d4:	e063      	b.n	800099e <HAL_ADC_Start_DMA+0xf2>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f000 fbda 	bl	8001098 <ADC_Enable>
 80008e4:	4603      	mov	r3, r0
 80008e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d14f      	bne.n	800098e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008f6:	f023 0301 	bic.w	r3, r3, #1
 80008fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f023 0206 	bic.w	r2, r3, #6
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	659a      	str	r2, [r3, #88]	; 0x58
 800091a:	e002      	b.n	8000922 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <HAL_ADC_Start_DMA+0xfc>)
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <HAL_ADC_Start_DMA+0x100>)
 8000930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <HAL_ADC_Start_DMA+0x104>)
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	221c      	movs	r2, #28
 8000940:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0210 	orr.w	r2, r2, #16
 8000958:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3340      	adds	r3, #64	; 0x40
 8000974:	4619      	mov	r1, r3
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f000 fe45 	bl	8001608 <HAL_DMA_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe0f 	bl	80005aa <LL_ADC_REG_StartConversion>
 800098c:	e006      	b.n	800099c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000996:	e001      	b.n	800099c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000998:	2302      	movs	r3, #2
 800099a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800099c:	7dfb      	ldrb	r3, [r7, #23]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800114d 	.word	0x0800114d
 80009ac:	08001225 	.word	0x08001225
 80009b0:	08001241 	.word	0x08001241

080009b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0a6      	sub	sp, #152	; 0x98
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d101      	bne.n	8000a12 <HAL_ADC_ConfigChannel+0x22>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e338      	b.n	8001084 <HAL_ADC_ConfigChannel+0x694>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fdd7 	bl	80005d2 <LL_ADC_REG_IsConversionOngoing>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 831d 	bne.w	8001066 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d824      	bhi.n	8000a7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	3b02      	subs	r3, #2
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d81b      	bhi.n	8000a76 <HAL_ADC_ConfigChannel+0x86>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <HAL_ADC_ConfigChannel+0x54>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a55 	.word	0x08000a55
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a6d 	.word	0x08000a6d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	220c      	movs	r2, #12
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	e011      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2212      	movs	r2, #18
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	e00d      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2218      	movs	r2, #24
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	e009      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	e004      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2206      	movs	r2, #6
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	e000      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000a7e:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6859      	ldr	r1, [r3, #4]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f7ff fca2 	bl	80003d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd9b 	bl	80005d2 <LL_ADC_REG_IsConversionOngoing>
 8000a9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fda7 	bl	80005f8 <LL_ADC_INJ_IsConversionOngoing>
 8000aaa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8148 	bne.w	8000d48 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f040 8143 	bne.w	8000d48 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f7ff fcaa 	bl	8000428 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d00a      	beq.n	8000b0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6919      	ldr	r1, [r3, #16]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b06:	f7ff fc05 	bl	8000314 <LL_ADC_SetOffset>
 8000b0a:	e11d      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fc20 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10a      	bne.n	8000b38 <HAL_ADC_ConfigChannel+0x148>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fc15 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	0e9b      	lsrs	r3, r3, #26
 8000b32:	f003 021f 	and.w	r2, r3, #31
 8000b36:	e012      	b.n	8000b5e <HAL_ADC_ConfigChannel+0x16e>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc0a 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b4e:	fa93 f3a3 	rbit	r3, r3
 8000b52:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x186>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0e9b      	lsrs	r3, r3, #26
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	e00a      	b.n	8000b8c <HAL_ADC_ConfigChannel+0x19c>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b7e:	fa93 f3a3 	rbit	r3, r3
 8000b82:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b86:	fab3 f383 	clz	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d106      	bne.n	8000b9e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fbf1 	bl	8000380 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fbd7 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10a      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x1da>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbcc 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	0e9b      	lsrs	r3, r3, #26
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	e010      	b.n	8000bec <HAL_ADC_ConfigChannel+0x1fc>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fbc1 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <HAL_ADC_ConfigChannel+0x214>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	0e9b      	lsrs	r3, r3, #26
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	e00a      	b.n	8000c1a <HAL_ADC_ConfigChannel+0x22a>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d106      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fbaa 	bl	8000380 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb90 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10a      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x268>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2102      	movs	r1, #2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fb85 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	0e9b      	lsrs	r3, r3, #26
 8000c52:	f003 021f 	and.w	r2, r3, #31
 8000c56:	e010      	b.n	8000c7a <HAL_ADC_ConfigChannel+0x28a>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fb7a 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d105      	bne.n	8000c92 <HAL_ADC_ConfigChannel+0x2a2>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0e9b      	lsrs	r3, r3, #26
 8000c8c:	f003 031f 	and.w	r3, r3, #31
 8000c90:	e00a      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x2b8>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d106      	bne.n	8000cba <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb63 	bl	8000380 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb49 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10a      	bne.n	8000ce6 <HAL_ADC_ConfigChannel+0x2f6>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb3e 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	0e9b      	lsrs	r3, r3, #26
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	e010      	b.n	8000d08 <HAL_ADC_ConfigChannel+0x318>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2103      	movs	r1, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb33 	bl	8000358 <LL_ADC_GetOffsetChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf8:	fa93 f3a3 	rbit	r3, r3
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	fab3 f383 	clz	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x330>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0e9b      	lsrs	r3, r3, #26
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	e00a      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x346>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d106      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2103      	movs	r1, #3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fb1c 	bl	8000380 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc19 	bl	8000584 <LL_ADC_IsEnabled>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f040 810c 	bne.w	8000f72 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	461a      	mov	r2, r3
 8000d68:	f7ff fb86 	bl	8000478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4aa8      	ldr	r2, [pc, #672]	; (8001014 <HAL_ADC_ConfigChannel+0x624>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	f040 80fd 	bne.w	8000f72 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x3b0>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0e9b      	lsrs	r3, r3, #26
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	2b09      	cmp	r3, #9
 8000d96:	bf94      	ite	ls
 8000d98:	2301      	movls	r3, #1
 8000d9a:	2300      	movhi	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	e012      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x3d6>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000da8:	fa93 f3a3 	rbit	r3, r3
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	f003 031f 	and.w	r3, r3, #31
 8000dbc:	2b09      	cmp	r3, #9
 8000dbe:	bf94      	ite	ls
 8000dc0:	2301      	movls	r3, #1
 8000dc2:	2300      	movhi	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d064      	beq.n	8000e94 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d107      	bne.n	8000de6 <HAL_ADC_ConfigChannel+0x3f6>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	0e9b      	lsrs	r3, r3, #26
 8000ddc:	3301      	adds	r3, #1
 8000dde:	069b      	lsls	r3, r3, #26
 8000de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000de4:	e00e      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x414>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	069b      	lsls	r3, r3, #26
 8000e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x434>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0e9b      	lsrs	r3, r3, #26
 8000e16:	3301      	adds	r3, #1
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	e010      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x456>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	ea42 0103 	orr.w	r1, r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10a      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x47c>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0e9b      	lsrs	r3, r3, #26
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f003 021f 	and.w	r2, r3, #31
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	051b      	lsls	r3, r3, #20
 8000e6a:	e011      	b.n	8000e90 <HAL_ADC_ConfigChannel+0x4a0>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	fab3 f383 	clz	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e90:	430b      	orrs	r3, r1
 8000e92:	e069      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d107      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x4c0>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0e9b      	lsrs	r3, r3, #26
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	069b      	lsls	r3, r3, #26
 8000eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eae:	e00e      	b.n	8000ece <HAL_ADC_ConfigChannel+0x4de>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	61fb      	str	r3, [r7, #28]
  return result;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fab3 f383 	clz	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	069b      	lsls	r3, r3, #26
 8000eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <HAL_ADC_ConfigChannel+0x4fe>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0e9b      	lsrs	r3, r3, #26
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	e010      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x520>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	617b      	str	r3, [r7, #20]
  return result;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	ea42 0103 	orr.w	r1, r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10d      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x54c>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0e9b      	lsrs	r3, r3, #26
 8000f26:	3301      	adds	r3, #1
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	3b1e      	subs	r3, #30
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	e014      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x576>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	60fb      	str	r3, [r7, #12]
  return result;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b1e      	subs	r3, #30
 8000f60:	051b      	lsls	r3, r3, #20
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f66:	430b      	orrs	r3, r1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	6892      	ldr	r2, [r2, #8]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fa5b 	bl	8000428 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_ADC_ConfigChannel+0x628>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d07c      	beq.n	8001078 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f7e:	4827      	ldr	r0, [pc, #156]	; (800101c <HAL_ADC_ConfigChannel+0x62c>)
 8000f80:	f7ff f9ba 	bl	80002f8 <LL_ADC_GetCommonPathInternalCh>
 8000f84:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_ADC_ConfigChannel+0x630>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d126      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x5f0>
 8000f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d120      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a20      	ldr	r2, [pc, #128]	; (8001024 <HAL_ADC_ConfigChannel+0x634>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d167      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <HAL_ADC_ConfigChannel+0x62c>)
 8000fb4:	f7ff f98d 	bl	80002d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_ADC_ConfigChannel+0x638>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_ADC_ConfigChannel+0x63c>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	099a      	lsrs	r2, r3, #6
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fde:	e04b      	b.n	8001078 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <HAL_ADC_ConfigChannel+0x640>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d124      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x644>
 8000fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11e      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_ADC_ConfigChannel+0x634>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001008:	4619      	mov	r1, r3
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <HAL_ADC_ConfigChannel+0x62c>)
 800100c:	f7ff f961 	bl	80002d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001010:	e032      	b.n	8001078 <HAL_ADC_ConfigChannel+0x688>
 8001012:	bf00      	nop
 8001014:	407f0000 	.word	0x407f0000
 8001018:	80080000 	.word	0x80080000
 800101c:	50040300 	.word	0x50040300
 8001020:	c7520000 	.word	0xc7520000
 8001024:	50040000 	.word	0x50040000
 8001028:	20000008 	.word	0x20000008
 800102c:	053e2d63 	.word	0x053e2d63
 8001030:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_ADC_ConfigChannel+0x69c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11c      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800103e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_ADC_ConfigChannel+0x6a0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d111      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <HAL_ADC_ConfigChannel+0x6a4>)
 8001060:	f7ff f937 	bl	80002d2 <LL_ADC_SetCommonPathInternalCh>
 8001064:	e008      	b.n	8001078 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106a:	f043 0220 	orr.w	r2, r3, #32
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001080:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001084:	4618      	mov	r0, r3
 8001086:	3798      	adds	r7, #152	; 0x98
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	80000001 	.word	0x80000001
 8001090:	50040000 	.word	0x50040000
 8001094:	50040300 	.word	0x50040300

08001098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa6d 	bl	8000584 <LL_ADC_IsEnabled>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d146      	bne.n	800113e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <ADC_Enable+0xb0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00d      	beq.n	80010da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e032      	b.n	8001140 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa3c 	bl	800055c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80010e4:	f7ff f8d6 	bl	8000294 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80010ea:	e021      	b.n	8001130 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa47 	bl	8000584 <LL_ADC_IsEnabled>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa2b 	bl	800055c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001106:	f7ff f8c5 	bl	8000294 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d90d      	bls.n	8001130 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001118:	f043 0210 	orr.w	r2, r3, #16
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e007      	b.n	8001140 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d1d6      	bne.n	80010ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	8000003f 	.word	0x8000003f

0800114c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001162:	2b00      	cmp	r3, #0
 8001164:	d14b      	bne.n	80011fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f913 	bl	80003b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d032      	beq.n	80011f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d12b      	bne.n	80011f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d11f      	bne.n	80011f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
 80011c2:	e018      	b.n	80011f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d111      	bne.n	80011f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d105      	bne.n	80011f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fbdc 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80011fc:	e00e      	b.n	800121c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff fbe6 	bl	80009dc <HAL_ADC_ErrorCallback>
}
 8001210:	e004      	b.n	800121c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fbc8 	bl	80009c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f043 0204 	orr.w	r2, r3, #4
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fbb8 	bl	80009dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e098      	b.n	80015dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_DMA_Init+0x150>)
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d80f      	bhi.n	80014d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <HAL_DMA_Init+0x154>)
 80014be:	4413      	add	r3, r2
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_DMA_Init+0x158>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	009a      	lsls	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_DMA_Init+0x15c>)
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
 80014d4:	e00e      	b.n	80014f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_DMA_Init+0x160>)
 80014de:	4413      	add	r3, r2
 80014e0:	4a43      	ldr	r2, [pc, #268]	; (80015f0 <HAL_DMA_Init+0x158>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_DMA_Init+0x164>)
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800150a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800150e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800154e:	d039      	beq.n	80015c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_DMA_Init+0x15c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11a      	bne.n	8001590 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_DMA_Init+0x168>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 031c 	and.w	r3, r3, #28
 8001566:	210f      	movs	r1, #15
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	4924      	ldr	r1, [pc, #144]	; (8001600 <HAL_DMA_Init+0x168>)
 8001570:	4013      	ands	r3, r2
 8001572:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_DMA_Init+0x168>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f003 031c 	and.w	r3, r3, #28
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	491d      	ldr	r1, [pc, #116]	; (8001600 <HAL_DMA_Init+0x168>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
 800158e:	e019      	b.n	80015c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_DMA_Init+0x16c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f003 031c 	and.w	r3, r3, #28
 800159c:	210f      	movs	r1, #15
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4917      	ldr	r1, [pc, #92]	; (8001604 <HAL_DMA_Init+0x16c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_DMA_Init+0x16c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 031c 	and.w	r3, r3, #28
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	4911      	ldr	r1, [pc, #68]	; (8001604 <HAL_DMA_Init+0x16c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40020407 	.word	0x40020407
 80015ec:	bffdfff8 	.word	0xbffdfff8
 80015f0:	cccccccd 	.word	0xcccccccd
 80015f4:	40020000 	.word	0x40020000
 80015f8:	bffdfbf8 	.word	0xbffdfbf8
 80015fc:	40020400 	.word	0x40020400
 8001600:	400200a8 	.word	0x400200a8
 8001604:	400204a8 	.word	0x400204a8

08001608 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Start_IT+0x20>
 8001624:	2302      	movs	r3, #2
 8001626:	e04b      	b.n	80016c0 <HAL_DMA_Start_IT+0xb8>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d13a      	bne.n	80016b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f8e0 	bl	8001826 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 020e 	orr.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e00f      	b.n	80016a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 020a 	orr.w	r2, r2, #10
 800169e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e005      	b.n	80016be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
 80016bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	2204      	movs	r2, #4
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d026      	beq.n	8001742 <HAL_DMA_IRQHandler+0x7a>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d021      	beq.n	8001742 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 021c 	and.w	r2, r3, #28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2104      	movs	r1, #4
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	2b00      	cmp	r3, #0
 8001736:	d071      	beq.n	800181c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001740:	e06c      	b.n	800181c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 031c 	and.w	r3, r3, #28
 800174a:	2202      	movs	r2, #2
 800174c:	409a      	lsls	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d02e      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xec>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d029      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10b      	bne.n	8001786 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 020a 	bic.w	r2, r2, #10
 800177c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 021c 	and.w	r2, r3, #28
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2102      	movs	r1, #2
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d038      	beq.n	800181c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017b2:	e033      	b.n	800181c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f003 031c 	and.w	r3, r3, #28
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02a      	beq.n	800181e <HAL_DMA_IRQHandler+0x156>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d025      	beq.n	800181e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020e 	bic.w	r2, r2, #14
 80017e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 021c 	and.w	r2, r3, #28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800181c:	bf00      	nop
 800181e:	bf00      	nop
}
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f003 021c 	and.w	r2, r3, #28
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b10      	cmp	r3, #16
 8001856:	d108      	bne.n	800186a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001868:	e007      	b.n	800187a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	60da      	str	r2, [r3, #12]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e154      	b.n	8001b42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8146 	beq.w	8001b3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x38>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b12      	cmp	r3, #18
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	6939      	ldr	r1, [r7, #16]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d00b      	beq.n	800195c <HAL_GPIO_Init+0xd4>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001950:	2b11      	cmp	r3, #17
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b12      	cmp	r3, #18
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 0201 	and.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a0 	beq.w	8001b3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fc:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6613      	str	r3, [r2, #96]	; 0x60
 8001a08:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a14:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3e:	d019      	beq.n	8001a74 <HAL_GPIO_Init+0x1ec>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x2e0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1e8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x2e4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a47      	ldr	r2, [pc, #284]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1dc>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e008      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a64:	2307      	movs	r3, #7
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a74:	2300      	movs	r3, #0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a86:	4937      	ldr	r1, [pc, #220]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae2:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f aea3 	bne.w	8001898 <HAL_GPIO_Init+0x10>
  }
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000c00 	.word	0x48000c00
 8001b74:	48001000 	.word	0x48001000
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba6:	d130      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb4:	d038      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2232      	movs	r2, #50	; 0x32
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	e002      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f2      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c04:	d110      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e00f      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d007      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e3db      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4ba4      	ldr	r3, [pc, #656]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80e1 	beq.w	8001e3a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4a>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	f040 8088 	bne.w	8001d96 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f040 8084 	bne.w	8001d96 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8e:	4b96      	ldr	r3, [pc, #600]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e3b3      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x7c>
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_OscConfig+0x88>
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d223      	bcs.n	8001d18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fd0f 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e394      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	497a      	ldr	r1, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4975      	ldr	r1, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
 8001d16:	e022      	b.n	8001d5e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a72      	ldr	r2, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	496d      	ldr	r1, [pc, #436]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4968      	ldr	r1, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fcd2 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e357      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5e:	f000 fc41 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a5f      	ldr	r2, [pc, #380]	; (8001eec <HAL_RCC_OscConfig+0x2a8>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x2b0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fa3a 	bl	80001fc <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d052      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	e33b      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d032      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fa73 	bl	8000294 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db2:	f7fe fa6f 	bl	8000294 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e324      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	493f      	ldr	r1, [pc, #252]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	493a      	ldr	r1, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	e01a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fa40 	bl	8000294 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7fe fa3c 	bl	8000294 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2f1      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1d4>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d074      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x214>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d10e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d064      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2ea>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d160      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2ce      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x244>
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x280>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x268>
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x280>
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe f9e2 	bl	8000294 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed2:	e011      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe f9de 	bl	8000294 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d90a      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e293      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003320 	.word	0x08003320
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef8:	4bae      	ldr	r3, [pc, #696]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0e7      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x290>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe f9c5 	bl	8000294 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7fe f9c1 	bl	8000294 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e276      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f20:	4ba4      	ldr	r3, [pc, #656]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ca>
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d060      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x30a>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d119      	bne.n	8001f7c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4e:	4b99      	ldr	r3, [pc, #612]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x322>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e253      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	498f      	ldr	r1, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7a:	e040      	b.n	8001ffe <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a8a      	ldr	r2, [pc, #552]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe f980 	bl	8000294 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7fe f97c 	bl	8000294 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e231      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	061b      	lsls	r3, r3, #24
 8001fc4:	497b      	ldr	r1, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fcc:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a78      	ldr	r2, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe f95c 	bl	8000294 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe f958 	bl	8000294 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e20d      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01c      	beq.n	800204c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002018:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7fe f937 	bl	8000294 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7fe f933 	bl	8000294 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1e8      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203c:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ef      	beq.n	800202a <HAL_RCC_OscConfig+0x3e6>
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe f91a 	bl	8000294 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe f916 	bl	8000294 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1cb      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002076:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ef      	bne.n	8002064 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a5 	beq.w	80021dc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x574>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x574>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_RCC_OscConfig+0x574>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe f8dd 	bl	8000294 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe f8d9 	bl	8000294 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e18e      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_OscConfig+0x574>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_RCC_OscConfig+0x4d2>
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002114:	e024      	b.n	8002160 <HAL_RCC_OscConfig+0x51c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b05      	cmp	r3, #5
 800211c:	d110      	bne.n	8002140 <HAL_RCC_OscConfig+0x4fc>
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213e:	e00f      	b.n	8002160 <HAL_RCC_OscConfig+0x51c>
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d016      	beq.n	8002196 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7fe f894 	bl	8000294 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7fe f890 	bl	8000294 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e143      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x570>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ed      	beq.n	8002170 <HAL_RCC_OscConfig+0x52c>
 8002194:	e019      	b.n	80021ca <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe f87d 	bl	8000294 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe f879 	bl	8000294 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d905      	bls.n	80021bc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e12c      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021bc:	4b96      	ldr	r3, [pc, #600]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e9      	bne.n	800219e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b91      	ldr	r3, [pc, #580]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a90      	ldr	r2, [pc, #576]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03c      	beq.n	8002262 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f0:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80021f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f6:	4a88      	ldr	r2, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe f848 	bl	8000294 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002208:	f7fe f844 	bl	8000294 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0f9      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800221a:	4b7f      	ldr	r3, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800221c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCC_OscConfig+0x5c4>
 8002228:	e01b      	b.n	8002262 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800222a:	4b7b      	ldr	r3, [pc, #492]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002230:	4a79      	ldr	r2, [pc, #484]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe f82b 	bl	8000294 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002242:	f7fe f827 	bl	8000294 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0dc      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002254:	4b70      	ldr	r3, [pc, #448]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ef      	bne.n	8002242 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80d0 	beq.w	800240c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	f000 808d 	beq.w	800238e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	2b02      	cmp	r3, #2
 800227a:	d15a      	bne.n	8002332 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe f804 	bl	8000294 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe f800 	bl	8000294 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b5      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ae:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x7d8>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022be:	3a01      	subs	r2, #1
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022c8:	0212      	lsls	r2, r2, #8
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d0:	0852      	lsrs	r2, r2, #1
 80022d2:	3a01      	subs	r2, #1
 80022d4:	0552      	lsls	r2, r2, #21
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022dc:	0852      	lsrs	r2, r2, #1
 80022de:	3a01      	subs	r2, #1
 80022e0:	0652      	lsls	r2, r2, #25
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e8:	06d2      	lsls	r2, r2, #27
 80022ea:	430a      	orrs	r2, r1
 80022ec:	494a      	ldr	r1, [pc, #296]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f2:	4b49      	ldr	r3, [pc, #292]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a48      	ldr	r2, [pc, #288]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 80022f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a45      	ldr	r2, [pc, #276]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002308:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fd ffc3 	bl	8000294 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7fd ffbf 	bl	8000294 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e074      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x6ce>
 8002330:	e06c      	b.n	800240c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a38      	ldr	r2, [pc, #224]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a32      	ldr	r2, [pc, #200]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002350:	f023 0303 	bic.w	r3, r3, #3
 8002354:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800235c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fd ff95 	bl	8000294 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7fd ff91 	bl	8000294 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e046      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x72a>
 800238c:	e03e      	b.n	800240c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e039      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_RCC_OscConfig+0x7d4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d12c      	bne.n	8002408 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	3b01      	subs	r3, #1
 80023ba:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d123      	bne.n	8002408 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d11b      	bne.n	8002408 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d113      	bne.n	8002408 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	019d808c 	.word	0x019d808c

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4961      	ldr	r1, [pc, #388]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04c      	beq.n	800250a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d121      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e09e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e092      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e086      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	493f      	ldr	r1, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fd fedb 	bl	8000294 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fd fed7 	bl	8000294 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e066      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 020c 	and.w	r2, r3, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d210      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e036      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002596:	f000 f825 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800259a:	4601      	mov	r1, r0
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	fa21 f303 	lsr.w	r3, r1, r3
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fe1e 	bl	80001fc <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c4:	7afb      	ldrb	r3, [r7, #11]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08003320 	.word	0x08003320
 80025dc:	20000008 	.word	0x20000008
 80025e0:	20000000 	.word	0x20000000

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d121      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d11e      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e005      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002654:	e00a      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d102      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e004      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d101      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800266a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d133      	bne.n	80026da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xa4>
 8002682:	2b03      	cmp	r3, #3
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0xaa>
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800268a:	617b      	str	r3, [r7, #20]
      break;
 800268c:	e005      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002690:	617b      	str	r3, [r7, #20]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	617b      	str	r3, [r7, #20]
      break;
 8002698:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	3301      	adds	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	fb02 f203 	mul.w	r2, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026da:	69bb      	ldr	r3, [r7, #24]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3724      	adds	r7, #36	; 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08003330 	.word	0x08003330
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	017d7840 	.word	0x017d7840

080026f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002710:	f7ff fa34 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 8002714:	6178      	str	r0, [r7, #20]
 8002716:	e014      	b.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff fa24 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d10b      	bne.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d919      	bls.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2ba0      	cmp	r3, #160	; 0xa0
 8002754:	d902      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002756:	2302      	movs	r3, #2
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e013      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e010      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d902      	bls.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002768:	2303      	movs	r3, #3
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e00a      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d102      	bne.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e004      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d101      	bne.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0207 	bic.w	r2, r3, #7
 800278c:	4909      	ldr	r1, [pc, #36]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c0:	2300      	movs	r3, #0
 80027c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027dc:	d005      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027e8:	e00f      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027ea:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f6:	e00c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f9f0 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	74fb      	strb	r3, [r7, #19]
      break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002818:	4b51      	ldr	r3, [pc, #324]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	494e      	ldr	r1, [pc, #312]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 809e 	beq.w	800297e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002846:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a39      	ldr	r2, [pc, #228]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002884:	f7fd fd06 	bl	8000294 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fd fd02 	bl	8000294 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	74fb      	strb	r3, [r7, #19]
        break;
 800289e:	e005      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d15a      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01e      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d019      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028fa:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fd fcc2 	bl	8000294 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fd fcbe 	bl	8000294 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d902      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	74fb      	strb	r3, [r7, #19]
            break;
 800292a:	e006      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ec      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4904      	ldr	r1, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002956:	e009      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
 800295c:	e006      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296c:	7c7b      	ldrb	r3, [r7, #17]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b9b      	ldr	r3, [pc, #620]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	4a9a      	ldr	r2, [pc, #616]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f023 0203 	bic.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4991      	ldr	r1, [pc, #580]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ac:	4b8c      	ldr	r3, [pc, #560]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 020c 	bic.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	4989      	ldr	r1, [pc, #548]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ce:	4b84      	ldr	r3, [pc, #528]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	4980      	ldr	r1, [pc, #512]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f0:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4978      	ldr	r1, [pc, #480]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a12:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	496f      	ldr	r1, [pc, #444]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4967      	ldr	r1, [pc, #412]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a56:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	495e      	ldr	r1, [pc, #376]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	4956      	ldr	r1, [pc, #344]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	494d      	ldr	r1, [pc, #308]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d028      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002abc:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	4945      	ldr	r1, [pc, #276]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ada:	d106      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e011      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f872 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d028      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b28:	492d      	ldr	r1, [pc, #180]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b44:	60d3      	str	r3, [r2, #12]
 8002b46:	e011      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f843 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	4916      	ldr	r1, [pc, #88]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f820 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf2:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfe:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
       ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c16:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
       ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d044      	beq.n	8002cb4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e041      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d00c      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x6e>
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d013      	beq.n	8002c64 <RCCEx_PLLSAI1_Config+0x80>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d120      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11d      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e01a      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c52:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c62:	e013      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c64:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c80:	e006      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      break;
 8002c86:	e004      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c90:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	430b      	orrs	r3, r1
 8002cae:	4944      	ldr	r1, [pc, #272]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d17c      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc6:	f7fd fae5 	bl	8000294 <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ccc:	e009      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cce:	f7fd fae1 	bl	8000294 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce0:	e005      	b.n	8002cee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ef      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d15f      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d110      	bne.n	8002d1c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	0211      	lsls	r1, r2, #8
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	06d2      	lsls	r2, r2, #27
 8002d12:	430a      	orrs	r2, r1
 8002d14:	492a      	ldr	r1, [pc, #168]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	610b      	str	r3, [r1, #16]
 8002d1a:	e027      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d112      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6892      	ldr	r2, [r2, #8]
 8002d32:	0211      	lsls	r1, r2, #8
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6912      	ldr	r2, [r2, #16]
 8002d38:	0852      	lsrs	r2, r2, #1
 8002d3a:	3a01      	subs	r2, #1
 8002d3c:	0552      	lsls	r2, r2, #21
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	491f      	ldr	r1, [pc, #124]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]
 8002d46:	e011      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6892      	ldr	r2, [r2, #8]
 8002d58:	0211      	lsls	r1, r2, #8
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6952      	ldr	r2, [r2, #20]
 8002d5e:	0852      	lsrs	r2, r2, #1
 8002d60:	3a01      	subs	r2, #1
 8002d62:	0652      	lsls	r2, r2, #25
 8002d64:	430a      	orrs	r2, r1
 8002d66:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fd fa8c 	bl	8000294 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d7e:	e009      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d80:	f7fd fa88 	bl	8000294 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d902      	bls.n	8002d94 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	73fb      	strb	r3, [r7, #15]
          break;
 8002d92:	e005      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ef      	beq.n	8002d80 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dca:	463b      	mov	r3, r7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
 8002dd8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002ddc:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <MX_ADC1_Init+0xc0>)
 8002dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002dea:	2208      	movs	r2, #8
 8002dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002df4:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e3c:	4810      	ldr	r0, [pc, #64]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e3e:	f7fd fbef 	bl	8000620 <HAL_ADC_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002e48:	f000 f96e 	bl	8003128 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_ADC1_Init+0xc4>)
 8002e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e50:	2306      	movs	r3, #6
 8002e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e58:	237f      	movs	r3, #127	; 0x7f
 8002e5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 18;
 8002e60:	2312      	movs	r3, #18
 8002e62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e64:	463b      	mov	r3, r7
 8002e66:	4619      	mov	r1, r3
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_ADC1_Init+0xbc>)
 8002e6a:	f7fd fdc1 	bl	80009f0 <HAL_ADC_ConfigChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002e74:	f000 f958 	bl	8003128 <Error_Handler>
  }

}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000002c 	.word	0x2000002c
 8002e84:	50040000 	.word	0x50040000
 8002e88:	1d500080 	.word	0x1d500080

08002e8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_ADC_MspInit+0xcc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d14f      	bne.n	8002f4e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_ADC_MspInit+0xd0>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ee2:	230b      	movs	r3, #11
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef4:	f7fe fcc8 	bl	8001888 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002efa:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <HAL_ADC_MspInit+0xd8>)
 8002efc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f32:	480b      	ldr	r0, [pc, #44]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f34:	f7fe fab0 	bl	8001498 <HAL_DMA_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8002f3e:	f000 f8f3 	bl	8003128 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <HAL_ADC_MspInit+0xd4>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	50040000 	.word	0x50040000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	20000090 	.word	0x20000090
 8002f64:	40020008 	.word	0x40020008

08002f68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_DMA_Init+0x38>)
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <MX_DMA_Init+0x38>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6493      	str	r3, [r2, #72]	; 0x48
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_DMA_Init+0x38>)
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	200b      	movs	r0, #11
 8002f8c:	f7fe fa4d 	bl	800142a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f90:	200b      	movs	r0, #11
 8002f92:	f7fe fa66 	bl	8001462 <HAL_NVIC_EnableIRQ>

}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_GPIO_Init+0x5c>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]

}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003008:	f7fd f8e0 	bl	80001cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800300c:	f000 f810 	bl	8003030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003010:	f7ff ffc8 	bl	8002fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003014:	f7ff ffa8 	bl	8002f68 <MX_DMA_Init>
  MX_ADC1_Init();
 8003018:	f7ff fed4 	bl	8002dc4 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_ADC_Start_DMA(&hadc1, ADC_Value, 1);
 800301c:	2201      	movs	r2, #1
 800301e:	4902      	ldr	r1, [pc, #8]	; (8003028 <main+0x24>)
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <main+0x28>)
 8003022:	f7fd fc43 	bl	80008ac <HAL_ADC_Start_DMA>
 8003026:	e7f9      	b.n	800301c <main+0x18>
 8003028:	200000d8 	.word	0x200000d8
 800302c:	2000002c 	.word	0x2000002c

08003030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0ae      	sub	sp, #184	; 0xb8
 8003034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003036:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800303a:	2244      	movs	r2, #68	; 0x44
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f95a 	bl	80032f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003044:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	225c      	movs	r2, #92	; 0x5c
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f94c 	bl	80032f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003060:	2301      	movs	r3, #1
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003070:	2303      	movs	r3, #3
 8003072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003076:	2305      	movs	r3, #5
 8003078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 800307c:	2320      	movs	r3, #32
 800307e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003082:	2307      	movs	r3, #7
 8003084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800308e:	2302      	movs	r3, #2
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003094:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fdd3 	bl	8001c44 <HAL_RCC_OscConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80030a4:	f000 f840 	bl	8003128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a8:	230f      	movs	r3, #15
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ac:	2303      	movs	r3, #3
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030b8:	2300      	movs	r3, #0
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80030c0:	2104      	movs	r1, #4
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f9ac 	bl	8002420 <HAL_RCC_ClockConfig>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80030ce:	f000 f82b 	bl	8003128 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80030d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030dc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80030de:	2303      	movs	r3, #3
 80030e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80030e2:	2305      	movs	r3, #5
 80030e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 80030e6:	230e      	movs	r3, #14
 80030e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80030ea:	2307      	movs	r3, #7
 80030ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80030ee:	2302      	movs	r3, #2
 80030f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80030f2:	2308      	movs	r3, #8
 80030f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80030f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fb5a 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800310a:	f000 f80d 	bl	8003128 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800310e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003112:	f7fe fd41 	bl	8001b98 <HAL_PWREx_ControlVoltageScaling>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800311c:	f000 f804 	bl	8003128 <Error_Handler>
  }
}
 8003120:	bf00      	nop
 8003122:	37b8      	adds	r7, #184	; 0xb8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_MspInit+0x44>)
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_MspInit+0x44>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6613      	str	r3, [r2, #96]	; 0x60
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_MspInit+0x44>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_MspInit+0x44>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_MspInit+0x44>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_MspInit+0x44>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000

08003180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <HardFault_Handler+0x4>

08003194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <MemManage_Handler+0x4>

0800319a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <BusFault_Handler+0x4>

080031a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <UsageFault_Handler+0x4>

080031a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d4:	f7fd f84c 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA1_Channel1_IRQHandler+0x10>)
 80031e2:	f7fe fa71 	bl	80016c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000090 	.word	0x20000090

080031f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <SystemInit+0x64>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <SystemInit+0x64>)
 80031fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <SystemInit+0x68>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <SystemInit+0x68>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <SystemInit+0x68>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <SystemInit+0x68>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <SystemInit+0x68>)
 800321c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003220:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003224:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <SystemInit+0x68>)
 8003228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800322c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <SystemInit+0x68>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <SystemInit+0x68>)
 8003234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <SystemInit+0x68>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SystemInit+0x64>)
 8003242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003246:	609a      	str	r2, [r3, #8]
#endif
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00
 8003258:	40021000 	.word	0x40021000

0800325c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800325c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003294 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003260:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003262:	e003      	b.n	800326c <LoopCopyDataInit>

08003264 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003266:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003268:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800326a:	3104      	adds	r1, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <LoopForever+0xa>)
	ldr	r3, =_edata
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003270:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003272:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003274:	d3f6      	bcc.n	8003264 <CopyDataInit>
	ldr	r2, =_sbss
 8003276:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003278:	e002      	b.n	8003280 <LoopFillZerobss>

0800327a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800327a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800327c:	f842 3b04 	str.w	r3, [r2], #4

08003280 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <LoopForever+0x16>)
	cmp	r2, r3
 8003282:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003284:	d3f9      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003286:	f7ff ffb3 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328a:	f000 f811 	bl	80032b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800328e:	f7ff feb9 	bl	8003004 <main>

08003292 <LoopForever>:

LoopForever:
    b LoopForever
 8003292:	e7fe      	b.n	8003292 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003294:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003298:	08003368 	.word	0x08003368
	ldr	r0, =_sdata
 800329c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032a0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80032a4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80032a8:	200000dc 	.word	0x200000dc

080032ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC1_IRQHandler>
	...

080032b0 <__libc_init_array>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4e0d      	ldr	r6, [pc, #52]	; (80032e8 <__libc_init_array+0x38>)
 80032b4:	4c0d      	ldr	r4, [pc, #52]	; (80032ec <__libc_init_array+0x3c>)
 80032b6:	1ba4      	subs	r4, r4, r6
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	2500      	movs	r5, #0
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d109      	bne.n	80032d4 <__libc_init_array+0x24>
 80032c0:	4e0b      	ldr	r6, [pc, #44]	; (80032f0 <__libc_init_array+0x40>)
 80032c2:	4c0c      	ldr	r4, [pc, #48]	; (80032f4 <__libc_init_array+0x44>)
 80032c4:	f000 f820 	bl	8003308 <_init>
 80032c8:	1ba4      	subs	r4, r4, r6
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	2500      	movs	r5, #0
 80032ce:	42a5      	cmp	r5, r4
 80032d0:	d105      	bne.n	80032de <__libc_init_array+0x2e>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d8:	4798      	blx	r3
 80032da:	3501      	adds	r5, #1
 80032dc:	e7ee      	b.n	80032bc <__libc_init_array+0xc>
 80032de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032e2:	4798      	blx	r3
 80032e4:	3501      	adds	r5, #1
 80032e6:	e7f2      	b.n	80032ce <__libc_init_array+0x1e>
 80032e8:	08003360 	.word	0x08003360
 80032ec:	08003360 	.word	0x08003360
 80032f0:	08003360 	.word	0x08003360
 80032f4:	08003364 	.word	0x08003364

080032f8 <memset>:
 80032f8:	4402      	add	r2, r0
 80032fa:	4603      	mov	r3, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	f803 1b01 	strb.w	r1, [r3], #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
