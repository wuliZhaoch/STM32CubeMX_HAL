
L431_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002084  08002084  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002084  08002084  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002084  08002084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800208c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002098  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a534  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001755  00000000  00000000  0002a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020151  00000000  00000000  0002d120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081f2  00000000  00000000  0004d271  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3f97  00000000  00000000  00055463  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001193fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  00119478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800202c 	.word	0x0800202c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800202c 	.word	0x0800202c

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f938 	bl	800044c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 f80d 	bl	80001fc <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f001 fdb7 	bl	8001d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <HAL_InitTick+0x68>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d022      	beq.n	8000256 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <HAL_InitTick+0x6c>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <HAL_InitTick+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f946 	bl	80004b6 <HAL_SYSTICK_Config>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d10f      	bne.n	8000250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b0f      	cmp	r3, #15
 8000234:	d809      	bhi.n	800024a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000236:	2200      	movs	r2, #0
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	f04f 30ff 	mov.w	r0, #4294967295
 800023e:	f000 f910 	bl	8000462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x70>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	e007      	b.n	800025a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800024a:	2301      	movs	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e004      	b.n	800025a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e001      	b.n	800025a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800025a:	7bfb      	ldrb	r3, [r7, #15]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x1c>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4413      	add	r3, r2
 800027e:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x1c>)
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000028 	.word	0x20000028
 8000290:	20000004 	.word	0x20000004

08000294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <HAL_GetTick+0x14>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	db0b      	blt.n	800033a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 021f 	and.w	r2, r3, #31
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <__NVIC_EnableIRQ+0x38>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e100 	.word	0xe000e100

0800034c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	db0a      	blt.n	8000376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	490c      	ldr	r1, [pc, #48]	; (8000398 <__NVIC_SetPriority+0x4c>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	0112      	lsls	r2, r2, #4
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	440b      	add	r3, r1
 8000370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000374:	e00a      	b.n	800038c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4908      	ldr	r1, [pc, #32]	; (800039c <__NVIC_SetPriority+0x50>)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	3b04      	subs	r3, #4
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	b2d2      	uxtb	r2, r2
 8000388:	440b      	add	r3, r1
 800038a:	761a      	strb	r2, [r3, #24]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	e000e100 	.word	0xe000e100
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	f04f 32ff 	mov.w	r2, #4294967295
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	43da      	mvns	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	401a      	ands	r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43d9      	mvns	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	4313      	orrs	r3, r2
         );
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3724      	adds	r7, #36	; 0x24
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
	...

08000408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000418:	d301      	bcc.n	800041e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041a:	2301      	movs	r3, #1
 800041c:	e00f      	b.n	800043e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <SysTick_Config+0x40>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3b01      	subs	r3, #1
 8000424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000426:	210f      	movs	r1, #15
 8000428:	f04f 30ff 	mov.w	r0, #4294967295
 800042c:	f7ff ff8e 	bl	800034c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <SysTick_Config+0x40>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <SysTick_Config+0x40>)
 8000438:	2207      	movs	r2, #7
 800043a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	e000e010 	.word	0xe000e010

0800044c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff29 	bl	80002ac <__NVIC_SetPriorityGrouping>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	4603      	mov	r3, r0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
 800046e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000474:	f7ff ff3e 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 8000478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	68b9      	ldr	r1, [r7, #8]
 800047e:	6978      	ldr	r0, [r7, #20]
 8000480:	f7ff ff8e 	bl	80003a0 <NVIC_EncodePriority>
 8000484:	4602      	mov	r2, r0
 8000486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff5d 	bl	800034c <__NVIC_SetPriority>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff31 	bl	8000310 <__NVIC_EnableIRQ>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff ffa2 	bl	8000408 <SysTick_Config>
 80004c4:	4603      	mov	r3, r0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004de:	e154      	b.n	800078a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	f000 8146 	beq.w	8000784 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d003      	beq.n	8000508 <HAL_GPIO_Init+0x38>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b12      	cmp	r3, #18
 8000506:	d123      	bne.n	8000550 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	08da      	lsrs	r2, r3, #3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3208      	adds	r2, #8
 8000510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000514:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	220f      	movs	r2, #15
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	4013      	ands	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	691a      	ldr	r2, [r3, #16]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	4313      	orrs	r3, r2
 8000540:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	08da      	lsrs	r2, r3, #3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3208      	adds	r2, #8
 800054a:	6939      	ldr	r1, [r7, #16]
 800054c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2203      	movs	r2, #3
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f003 0203 	and.w	r2, r3, #3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	4313      	orrs	r3, r2
 800057c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d00b      	beq.n	80005a4 <HAL_GPIO_Init+0xd4>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d007      	beq.n	80005a4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000598:	2b11      	cmp	r3, #17
 800059a:	d003      	beq.n	80005a4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2b12      	cmp	r3, #18
 80005a2:	d130      	bne.n	8000606 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2203      	movs	r2, #3
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80005da:	2201      	movs	r2, #1
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	4013      	ands	r3, r2
 80005e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	f003 0201 	and.w	r2, r3, #1
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	2203      	movs	r2, #3
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	4013      	ands	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	4313      	orrs	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80a0 	beq.w	8000784 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000644:	4b58      	ldr	r3, [pc, #352]	; (80007a8 <HAL_GPIO_Init+0x2d8>)
 8000646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000648:	4a57      	ldr	r2, [pc, #348]	; (80007a8 <HAL_GPIO_Init+0x2d8>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6613      	str	r3, [r2, #96]	; 0x60
 8000650:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <HAL_GPIO_Init+0x2d8>)
 8000652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800065c:	4a53      	ldr	r2, [pc, #332]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	3302      	adds	r3, #2
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	220f      	movs	r2, #15
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000686:	d019      	beq.n	80006bc <HAL_GPIO_Init+0x1ec>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <HAL_GPIO_Init+0x2e0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d013      	beq.n	80006b8 <HAL_GPIO_Init+0x1e8>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a48      	ldr	r2, [pc, #288]	; (80007b4 <HAL_GPIO_Init+0x2e4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d00d      	beq.n	80006b4 <HAL_GPIO_Init+0x1e4>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a47      	ldr	r2, [pc, #284]	; (80007b8 <HAL_GPIO_Init+0x2e8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d007      	beq.n	80006b0 <HAL_GPIO_Init+0x1e0>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a46      	ldr	r2, [pc, #280]	; (80007bc <HAL_GPIO_Init+0x2ec>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d101      	bne.n	80006ac <HAL_GPIO_Init+0x1dc>
 80006a8:	2304      	movs	r3, #4
 80006aa:	e008      	b.n	80006be <HAL_GPIO_Init+0x1ee>
 80006ac:	2307      	movs	r3, #7
 80006ae:	e006      	b.n	80006be <HAL_GPIO_Init+0x1ee>
 80006b0:	2303      	movs	r3, #3
 80006b2:	e004      	b.n	80006be <HAL_GPIO_Init+0x1ee>
 80006b4:	2302      	movs	r3, #2
 80006b6:	e002      	b.n	80006be <HAL_GPIO_Init+0x1ee>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <HAL_GPIO_Init+0x1ee>
 80006bc:	2300      	movs	r3, #0
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	f002 0203 	and.w	r2, r2, #3
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	4093      	lsls	r3, r2
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006ce:	4937      	ldr	r1, [pc, #220]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	3302      	adds	r3, #2
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000700:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43db      	mvns	r3, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800072a:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	43db      	mvns	r3, r3
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000754:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	43db      	mvns	r3, r3
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	4013      	ands	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	fa22 f303 	lsr.w	r3, r2, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	f47f aea3 	bne.w	80004e0 <HAL_GPIO_Init+0x10>
  }
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000
 80007b0:	48000400 	.word	0x48000400
 80007b4:	48000800 	.word	0x48000800
 80007b8:	48000c00 	.word	0x48000c00
 80007bc:	48001000 	.word	0x48001000
 80007c0:	40010400 	.word	0x40010400

080007c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	787b      	ldrb	r3, [r7, #1]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007e0:	e002      	b.n	80007e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	4013      	ands	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000812:	e002      	b.n	800081a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000814:	887a      	ldrh	r2, [r7, #2]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	619a      	str	r2, [r3, #24]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_PWREx_GetVoltageRange+0x18>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40007000 	.word	0x40007000

08000844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000852:	d130      	bne.n	80008b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800085c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000860:	d038      	beq.n	80008d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800086c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2232      	movs	r2, #50	; 0x32
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	0c9b      	lsrs	r3, r3, #18
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000888:	e002      	b.n	8000890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3b01      	subs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089c:	d102      	bne.n	80008a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f2      	bne.n	800088a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b0:	d110      	bne.n	80008d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e00f      	b.n	80008d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c2:	d007      	beq.n	80008d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40007000 	.word	0x40007000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	431bde83 	.word	0x431bde83

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e3db      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000902:	4ba4      	ldr	r3, [pc, #656]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800090c:	4ba1      	ldr	r3, [pc, #644]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80e1 	beq.w	8000ae6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <HAL_RCC_OscConfig+0x4a>
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	2b0c      	cmp	r3, #12
 800092e:	f040 8088 	bne.w	8000a42 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b01      	cmp	r3, #1
 8000936:	f040 8084 	bne.w	8000a42 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800093a:	4b96      	ldr	r3, [pc, #600]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <HAL_RCC_OscConfig+0x62>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e3b3      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a1a      	ldr	r2, [r3, #32]
 8000956:	4b8f      	ldr	r3, [pc, #572]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <HAL_RCC_OscConfig+0x7c>
 8000962:	4b8c      	ldr	r3, [pc, #560]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800096a:	e005      	b.n	8000978 <HAL_RCC_OscConfig+0x88>
 800096c:	4b89      	ldr	r3, [pc, #548]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 800096e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000978:	4293      	cmp	r3, r2
 800097a:	d223      	bcs.n	80009c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fd0f 	bl	80013a4 <RCC_SetFlashLatencyFromMSIRange>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e394      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000990:	4b80      	ldr	r3, [pc, #512]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a7f      	ldr	r2, [pc, #508]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b7d      	ldr	r3, [pc, #500]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a1b      	ldr	r3, [r3, #32]
 80009a8:	497a      	ldr	r1, [pc, #488]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009aa:	4313      	orrs	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	4975      	ldr	r1, [pc, #468]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009be:	4313      	orrs	r3, r2
 80009c0:	604b      	str	r3, [r1, #4]
 80009c2:	e022      	b.n	8000a0a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009c4:	4b73      	ldr	r3, [pc, #460]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a72      	ldr	r2, [pc, #456]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b70      	ldr	r3, [pc, #448]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	496d      	ldr	r1, [pc, #436]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009de:	4313      	orrs	r3, r2
 80009e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009e2:	4b6c      	ldr	r3, [pc, #432]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	4968      	ldr	r1, [pc, #416]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 80009f2:	4313      	orrs	r3, r2
 80009f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fcd2 	bl	80013a4 <RCC_SetFlashLatencyFromMSIRange>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e357      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a0a:	f000 fc41 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	4a5f      	ldr	r2, [pc, #380]	; (8000b98 <HAL_RCC_OscConfig+0x2a8>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	fa21 f303 	lsr.w	r3, r1, r3
 8000a26:	4a5d      	ldr	r2, [pc, #372]	; (8000b9c <HAL_RCC_OscConfig+0x2ac>)
 8000a28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <HAL_RCC_OscConfig+0x2b0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fbe4 	bl	80001fc <HAL_InitTick>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d052      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	e33b      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d032      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a4a:	4b52      	ldr	r3, [pc, #328]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a56:	f7ff fc1d 	bl	8000294 <HAL_GetTick>
 8000a5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a5c:	e008      	b.n	8000a70 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fc19 	bl	8000294 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d901      	bls.n	8000a70 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e324      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a70:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f0      	beq.n	8000a5e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a7c:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	493f      	ldr	r1, [pc, #252]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a96:	4313      	orrs	r3, r2
 8000a98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	604b      	str	r3, [r1, #4]
 8000aae:	e01a      	b.n	8000ae6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000ab6:	f023 0301 	bic.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000abc:	f7ff fbea 	bl	8000294 <HAL_GetTick>
 8000ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ac2:	e008      	b.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ac4:	f7ff fbe6 	bl	8000294 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d901      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e2f1      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f0      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1d4>
 8000ae2:	e000      	b.n	8000ae6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ae4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d074      	beq.n	8000bdc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d005      	beq.n	8000b04 <HAL_RCC_OscConfig+0x214>
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b0c      	cmp	r3, #12
 8000afc:	d10e      	bne.n	8000b1c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d10b      	bne.n	8000b1c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d064      	beq.n	8000bda <HAL_RCC_OscConfig+0x2ea>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d160      	bne.n	8000bda <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e2ce      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b24:	d106      	bne.n	8000b34 <HAL_RCC_OscConfig+0x244>
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e01d      	b.n	8000b70 <HAL_RCC_OscConfig+0x280>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0x268>
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e00b      	b.n	8000b70 <HAL_RCC_OscConfig+0x280>
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_RCC_OscConfig+0x2a4>)
 8000b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01c      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b78:	f7ff fb8c 	bl	8000294 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b7e:	e011      	b.n	8000ba4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fb88 	bl	8000294 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b64      	cmp	r3, #100	; 0x64
 8000b8c:	d90a      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e293      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	08002044 	.word	0x08002044
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ba4:	4bae      	ldr	r3, [pc, #696]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e7      	beq.n	8000b80 <HAL_RCC_OscConfig+0x290>
 8000bb0:	e014      	b.n	8000bdc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fb6f 	bl	8000294 <HAL_GetTick>
 8000bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fb6b 	bl	8000294 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e276      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bcc:	4ba4      	ldr	r3, [pc, #656]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f0      	bne.n	8000bba <HAL_RCC_OscConfig+0x2ca>
 8000bd8:	e000      	b.n	8000bdc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d060      	beq.n	8000caa <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d005      	beq.n	8000bfa <HAL_RCC_OscConfig+0x30a>
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2b0c      	cmp	r3, #12
 8000bf2:	d119      	bne.n	8000c28 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d116      	bne.n	8000c28 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bfa:	4b99      	ldr	r3, [pc, #612]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d005      	beq.n	8000c12 <HAL_RCC_OscConfig+0x322>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e253      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c12:	4b93      	ldr	r3, [pc, #588]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	061b      	lsls	r3, r3, #24
 8000c20:	498f      	ldr	r1, [pc, #572]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c22:	4313      	orrs	r3, r2
 8000c24:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c26:	e040      	b.n	8000caa <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d023      	beq.n	8000c78 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c30:	4b8b      	ldr	r3, [pc, #556]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a8a      	ldr	r2, [pc, #552]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fb2a 	bl	8000294 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c44:	f7ff fb26 	bl	8000294 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e231      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b7f      	ldr	r3, [pc, #508]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	061b      	lsls	r3, r3, #24
 8000c70:	497b      	ldr	r1, [pc, #492]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	604b      	str	r3, [r1, #4]
 8000c76:	e018      	b.n	8000caa <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c78:	4b79      	ldr	r3, [pc, #484]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a78      	ldr	r2, [pc, #480]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c84:	f7ff fb06 	bl	8000294 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fb02 	bl	8000294 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e20d      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c9e:	4b70      	ldr	r3, [pc, #448]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f0      	bne.n	8000c8c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d03c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d01c      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cbe:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cc4:	4a66      	ldr	r2, [pc, #408]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cce:	f7ff fae1 	bl	8000294 <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fadd 	bl	8000294 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e1e8      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ce8:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0ef      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x3e6>
 8000cf6:	e01b      	b.n	8000d30 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf8:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cfe:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d08:	f7ff fac4 	bl	8000294 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fac0 	bl	8000294 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e1cb      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d22:	4b4f      	ldr	r3, [pc, #316]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a5 	beq.w	8000e88 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <HAL_RCC_OscConfig+0x574>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <HAL_RCC_OscConfig+0x574>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <HAL_RCC_OscConfig+0x574>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fa87 	bl	8000294 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff fa83 	bl	8000294 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e18e      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_RCC_OscConfig+0x574>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x4d2>
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000db6:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dc0:	e024      	b.n	8000e0c <HAL_RCC_OscConfig+0x51c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d110      	bne.n	8000dec <HAL_RCC_OscConfig+0x4fc>
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x51c>
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d016      	beq.n	8000e42 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e14:	f7ff fa3e 	bl	8000294 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e1a:	e00a      	b.n	8000e32 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fa3a 	bl	8000294 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e143      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_RCC_OscConfig+0x570>)
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0ed      	beq.n	8000e1c <HAL_RCC_OscConfig+0x52c>
 8000e40:	e019      	b.n	8000e76 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e42:	f7ff fa27 	bl	8000294 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e48:	e00e      	b.n	8000e68 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fa23 	bl	8000294 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d905      	bls.n	8000e68 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e12c      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e68:	4b96      	ldr	r3, [pc, #600]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1e9      	bne.n	8000e4a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e76:	7ffb      	ldrb	r3, [r7, #31]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d105      	bne.n	8000e88 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7c:	4b91      	ldr	r3, [pc, #580]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0320 	and.w	r3, r3, #32
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d03c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01c      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e9c:	4b89      	ldr	r3, [pc, #548]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ea2:	4a88      	ldr	r2, [pc, #544]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eac:	f7ff f9f2 	bl	8000294 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eb4:	f7ff f9ee 	bl	8000294 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e0f9      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000ec6:	4b7f      	ldr	r3, [pc, #508]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0ef      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x5c4>
 8000ed4:	e01b      	b.n	8000f0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000edc:	4a79      	ldr	r2, [pc, #484]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee6:	f7ff f9d5 	bl	8000294 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eee:	f7ff f9d1 	bl	8000294 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e0dc      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f00:	4b70      	ldr	r3, [pc, #448]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ef      	bne.n	8000eee <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80d0 	beq.w	80010b8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b0c      	cmp	r3, #12
 8000f1c:	f000 808d 	beq.w	800103a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d15a      	bne.n	8000fde <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a65      	ldr	r2, [pc, #404]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff f9ae 	bl	8000294 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff f9aa 	bl	8000294 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e0b5      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <HAL_RCC_OscConfig+0x7d8>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f74:	0212      	lsls	r2, r2, #8
 8000f76:	4311      	orrs	r1, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f7c:	0852      	lsrs	r2, r2, #1
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	0552      	lsls	r2, r2, #21
 8000f82:	4311      	orrs	r1, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f88:	0852      	lsrs	r2, r2, #1
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	0652      	lsls	r2, r2, #25
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f94:	06d2      	lsls	r2, r2, #27
 8000f96:	430a      	orrs	r2, r1
 8000f98:	494a      	ldr	r1, [pc, #296]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	f7ff f96d 	bl	8000294 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff f969 	bl	8000294 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e074      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x6ce>
 8000fdc:	e06c      	b.n	80010b8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fe8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8000ffc:	f023 0303 	bic.w	r3, r3, #3
 8001000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8001008:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800100c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001010:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff f93f 	bl	8000294 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff f93b 	bl	8000294 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e046      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x72a>
 8001038:	e03e      	b.n	80010b8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e039      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_RCC_OscConfig+0x7d4>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	429a      	cmp	r2, r3
 8001058:	d12c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	3b01      	subs	r3, #1
 8001066:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001068:	429a      	cmp	r2, r3
 800106a:	d123      	bne.n	80010b4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d11b      	bne.n	80010b4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001088:	429a      	cmp	r2, r3
 800108a:	d113      	bne.n	80010b4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	3b01      	subs	r3, #1
 800109a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800109c:	429a      	cmp	r2, r3
 800109e:	d109      	bne.n	80010b4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	3b01      	subs	r3, #1
 80010ae:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	019d808c 	.word	0x019d808c

080010cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0c8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d910      	bls.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4961      	ldr	r1, [pc, #388]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b5f      	ldr	r3, [pc, #380]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0b0      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d04c      	beq.n	80011b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d107      	bne.n	8001134 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d121      	bne.n	8001174 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e09e      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d107      	bne.n	800114c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d115      	bne.n	8001174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e092      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e086      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e07e      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001174:	4b42      	ldr	r3, [pc, #264]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 0203 	bic.w	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	493f      	ldr	r1, [pc, #252]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001186:	f7ff f885 	bl	8000294 <HAL_GetTick>
 800118a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118e:	f7ff f881 	bl	8000294 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e066      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 020c 	and.w	r2, r3, #12
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d1eb      	bne.n	800118e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	492c      	ldr	r1, [pc, #176]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d210      	bcs.n	8001204 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 0207 	bic.w	r2, r3, #7
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1b0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e036      	b.n	8001272 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4918      	ldr	r1, [pc, #96]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4910      	ldr	r1, [pc, #64]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001242:	f000 f825 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 8001246:	4601      	mov	r1, r0
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_ClockConfig+0x1b4>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	fa21 f303 	lsr.w	r3, r1, r3
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffc8 	bl	80001fc <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001270:	7afb      	ldrb	r3, [r7, #11]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	40021000 	.word	0x40021000
 8001284:	08002044 	.word	0x08002044
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000

08001290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x34>
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d121      	bne.n	8001302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d11e      	bne.n	8001302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 80012d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e005      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80012ec:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <HAL_RCC_GetSysClockFreq+0x108>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10d      	bne.n	8001318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d102      	bne.n	800130e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_GetSysClockFreq+0x10c>)
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	e004      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d101      	bne.n	8001318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d133      	bne.n	8001386 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d002      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0xa4>
 800132e:	2b03      	cmp	r3, #3
 8001330:	d003      	beq.n	800133a <HAL_RCC_GetSysClockFreq+0xaa>
 8001332:	e005      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001336:	617b      	str	r3, [r7, #20]
      break;
 8001338:	e005      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800133c:	617b      	str	r3, [r7, #20]
      break;
 800133e:	e002      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	617b      	str	r3, [r7, #20]
      break;
 8001344:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	3301      	adds	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	fb02 f203 	mul.w	r2, r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_GetSysClockFreq+0x104>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0e5b      	lsrs	r3, r3, #25
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	3301      	adds	r3, #1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001386:	69bb      	ldr	r3, [r7, #24]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	08002054 	.word	0x08002054
 800139c:	00f42400 	.word	0x00f42400
 80013a0:	017d7840 	.word	0x017d7840

080013a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80013bc:	f7ff fa34 	bl	8000828 <HAL_PWREx_GetVoltageRange>
 80013c0:	6178      	str	r0, [r7, #20]
 80013c2:	e014      	b.n	80013ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	4a24      	ldr	r2, [pc, #144]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6593      	str	r3, [r2, #88]	; 0x58
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80013dc:	f7ff fa24 	bl	8000828 <HAL_PWREx_GetVoltageRange>
 80013e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f4:	d10b      	bne.n	800140e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b80      	cmp	r3, #128	; 0x80
 80013fa:	d919      	bls.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001400:	d902      	bls.n	8001408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001402:	2302      	movs	r3, #2
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	e013      	b.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	e010      	b.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b80      	cmp	r3, #128	; 0x80
 8001412:	d902      	bls.n	800141a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001414:	2303      	movs	r3, #3
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e00a      	b.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b80      	cmp	r3, #128	; 0x80
 800141e:	d102      	bne.n	8001426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	e004      	b.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b70      	cmp	r3, #112	; 0x70
 800142a:	d101      	bne.n	8001430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0207 	bic.w	r2, r3, #7
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	d001      	beq.n	8001452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e01d      	b.n	80014b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fd54 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f000 fa3e 	bl	8001924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_TIM_Base_Start_IT+0x50>)
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d00b      	beq.n	80014fe <HAL_TIM_Base_Start_IT+0x42>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d007      	beq.n	80014fe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	00010007 	.word	0x00010007

08001510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d122      	bne.n	800156c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	d11b      	bne.n	800156c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 0202 	mvn.w	r2, #2
 800153c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f9c8 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 8001558:	e005      	b.n	8001566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f9ba 	bl	80018d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f9cb 	bl	80018fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b04      	cmp	r3, #4
 8001578:	d122      	bne.n	80015c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b04      	cmp	r3, #4
 8001586:	d11b      	bne.n	80015c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f06f 0204 	mvn.w	r2, #4
 8001590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f99e 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 80015ac:	e005      	b.n	80015ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f990 	bl	80018d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f9a1 	bl	80018fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d122      	bne.n	8001614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d11b      	bne.n	8001614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 0208 	mvn.w	r2, #8
 80015e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f974 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 8001600:	e005      	b.n	800160e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f966 	bl	80018d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f977 	bl	80018fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b10      	cmp	r3, #16
 8001620:	d122      	bne.n	8001668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b10      	cmp	r3, #16
 800162e:	d11b      	bne.n	8001668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0210 	mvn.w	r2, #16
 8001638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2208      	movs	r2, #8
 800163e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f94a 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 8001654:	e005      	b.n	8001662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f93c 	bl	80018d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f94d 	bl	80018fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10e      	bne.n	8001694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f06f 0201 	mvn.w	r2, #1
 800168c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f916 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	2b80      	cmp	r3, #128	; 0x80
 80016a0:	d10e      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d107      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa90 	bl	8001be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ce:	d10e      	bne.n	80016ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	2b80      	cmp	r3, #128	; 0x80
 80016dc:	d107      	bne.n	80016ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fa83 	bl	8001bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d10e      	bne.n	800171a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	2b40      	cmp	r3, #64	; 0x40
 8001708:	d107      	bne.n	800171a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8fb 	bl	8001910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d10e      	bne.n	8001746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	2b20      	cmp	r3, #32
 8001734:	d107      	bne.n	8001746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f06f 0220 	mvn.w	r2, #32
 800173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa43 	bl	8001bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_TIM_ConfigClockSource+0x18>
 8001762:	2302      	movs	r3, #2
 8001764:	e0a8      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x16a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001788:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001790:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d067      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0x124>
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	d80b      	bhi.n	80017be <HAL_TIM_ConfigClockSource+0x70>
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d073      	beq.n	8001892 <HAL_TIM_ConfigClockSource+0x144>
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d802      	bhi.n	80017b4 <HAL_TIM_ConfigClockSource+0x66>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06f      	beq.n	8001892 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80017b2:	e078      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d06c      	beq.n	8001892 <HAL_TIM_ConfigClockSource+0x144>
 80017b8:	2b30      	cmp	r3, #48	; 0x30
 80017ba:	d06a      	beq.n	8001892 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80017bc:	e073      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80017be:	2b70      	cmp	r3, #112	; 0x70
 80017c0:	d00d      	beq.n	80017de <HAL_TIM_ConfigClockSource+0x90>
 80017c2:	2b70      	cmp	r3, #112	; 0x70
 80017c4:	d804      	bhi.n	80017d0 <HAL_TIM_ConfigClockSource+0x82>
 80017c6:	2b50      	cmp	r3, #80	; 0x50
 80017c8:	d033      	beq.n	8001832 <HAL_TIM_ConfigClockSource+0xe4>
 80017ca:	2b60      	cmp	r3, #96	; 0x60
 80017cc:	d041      	beq.n	8001852 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80017ce:	e06a      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80017d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d4:	d066      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0x156>
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017da:	d017      	beq.n	800180c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80017dc:	e063      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f000 f977 	bl	8001ae0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001800:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	609a      	str	r2, [r3, #8]
      break;
 800180a:	e04c      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f000 f960 	bl	8001ae0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800182e:	609a      	str	r2, [r3, #8]
      break;
 8001830:	e039      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	461a      	mov	r2, r3
 8001840:	f000 f8d4 	bl	80019ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2150      	movs	r1, #80	; 0x50
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f92d 	bl	8001aaa <TIM_ITRx_SetConfig>
      break;
 8001850:	e029      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	461a      	mov	r2, r3
 8001860:	f000 f8f3 	bl	8001a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2160      	movs	r1, #96	; 0x60
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f91d 	bl	8001aaa <TIM_ITRx_SetConfig>
      break;
 8001870:	e019      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	f000 f8b4 	bl	80019ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2140      	movs	r1, #64	; 0x40
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f90d 	bl	8001aaa <TIM_ITRx_SetConfig>
      break;
 8001890:	e009      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f000 f904 	bl	8001aaa <TIM_ITRx_SetConfig>
      break;
 80018a2:	e000      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80018a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <TIM_Base_SetConfig+0xbc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <TIM_Base_SetConfig+0x20>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001942:	d108      	bne.n	8001956 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <TIM_Base_SetConfig+0xbc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00b      	beq.n	8001976 <TIM_Base_SetConfig+0x52>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d007      	beq.n	8001976 <TIM_Base_SetConfig+0x52>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <TIM_Base_SetConfig+0xc0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d003      	beq.n	8001976 <TIM_Base_SetConfig+0x52>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <TIM_Base_SetConfig+0xc4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d108      	bne.n	8001988 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <TIM_Base_SetConfig+0xbc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <TIM_Base_SetConfig+0xa0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <TIM_Base_SetConfig+0xc0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <TIM_Base_SetConfig+0xa0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <TIM_Base_SetConfig+0xc4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d103      	bne.n	80019cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	615a      	str	r2, [r3, #20]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40014000 	.word	0x40014000
 80019e8:	40014400 	.word	0x40014400

080019ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f023 0201 	bic.w	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f023 030a 	bic.w	r3, r3, #10
 8001a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	621a      	str	r2, [r3, #32]
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f023 0210 	bic.w	r2, r3, #16
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	031b      	lsls	r3, r3, #12
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	621a      	str	r2, [r3, #32]
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f043 0307 	orr.w	r3, r3, #7
 8001acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	021a      	lsls	r2, r3, #8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	609a      	str	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e040      	b.n	8001bba <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d108      	bne.n	8001b74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b8c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40012c00 	.word	0x40012c00

08001bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2110      	movs	r1, #16
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6e:	f7fe fda9 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001c72:	2310      	movs	r3, #16
 8001c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f7fe fc20 	bl	80004d0 <HAL_GPIO_Init>

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca0:	f7fe fa94 	bl	80001cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca4:	f000 f805 	bl	8001cb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca8:	f7ff ffae 	bl	8001c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cac:	f000 f8ee 	bl	8001e8c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <main+0x14>

08001cb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b096      	sub	sp, #88	; 0x58
 8001cb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2244      	movs	r2, #68	; 0x44
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f9ab 	bl	800201c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001cea:	2320      	movs	r3, #32
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fdf6 	bl	80008f0 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001d0a:	f000 f821 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2303      	movs	r3, #3
 8001d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	2104      	movs	r1, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9d0 	bl	80010cc <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d32:	f000 f80d 	bl	8001d50 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d3a:	f7fe fd83 	bl	8000844 <HAL_PWREx_ControlVoltageScaling>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d44:	f000 f804 	bl	8001d50 <Error_Handler>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3758      	adds	r7, #88	; 0x58
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_MspInit+0x44>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_MspInit+0x44>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_MspInit+0x44>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x44>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x44>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x44>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfc:	f7fe fa38 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
     HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001e08:	2110      	movs	r1, #16
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f7fe fcf1 	bl	80007f4 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e12:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM2_IRQHandler+0x18>)
 8001e14:	f7ff fb7c 	bl	8001510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000002c 	.word	0x2000002c

08001e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <SystemInit+0x64>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <SystemInit+0x64>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <SystemInit+0x68>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <SystemInit+0x68>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <SystemInit+0x68>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <SystemInit+0x68>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <SystemInit+0x68>)
 8001e4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <SystemInit+0x68>)
 8001e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <SystemInit+0x68>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <SystemInit+0x68>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <SystemInit+0x68>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SystemInit+0x64>)
 8001e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e76:	609a      	str	r2, [r3, #8]
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	40021000 	.word	0x40021000

08001e8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001eb4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001eb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001ec2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed4:	4817      	ldr	r0, [pc, #92]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001ed6:	f7ff fac5 	bl	8001464 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ee0:	f7ff ff36 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4810      	ldr	r0, [pc, #64]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001ef2:	f7ff fc2c 	bl	800174e <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001efc:	f7ff ff28 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001f0e:	f7ff fe07 	bl	8001b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f18:	f7ff ff1a 	bl	8001d50 <Error_Handler>
  }
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_TIM2_Init+0xa8>)
 8001f1e:	f7ff facd 	bl	80014bc <HAL_TIM_Base_Start_IT>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f28:	f7ff ff12 	bl	8001d50 <Error_Handler>
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000002c 	.word	0x2000002c

08001f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d113      	bne.n	8001f72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_TIM_Base_MspInit+0x44>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_TIM_Base_MspInit+0x44>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_TIM_Base_MspInit+0x44>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	201c      	movs	r0, #28
 8001f68:	f7fe fa7b 	bl	8000462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f6c:	201c      	movs	r0, #28
 8001f6e:	f7fe fa94 	bl	800049a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
	ldr	r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <LoopForever+0x16>)
	cmp	r2, r3
 8001fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ff39 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f000 f811 	bl	8001fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7ff fe73 	bl	8001c9c <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001fbc:	0800208c 	.word	0x0800208c
	ldr	r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001fc8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001fcc:	2000006c 	.word	0x2000006c

08001fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_IRQHandler>
	...

08001fd4 <__libc_init_array>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	4e0d      	ldr	r6, [pc, #52]	; (800200c <__libc_init_array+0x38>)
 8001fd8:	4c0d      	ldr	r4, [pc, #52]	; (8002010 <__libc_init_array+0x3c>)
 8001fda:	1ba4      	subs	r4, r4, r6
 8001fdc:	10a4      	asrs	r4, r4, #2
 8001fde:	2500      	movs	r5, #0
 8001fe0:	42a5      	cmp	r5, r4
 8001fe2:	d109      	bne.n	8001ff8 <__libc_init_array+0x24>
 8001fe4:	4e0b      	ldr	r6, [pc, #44]	; (8002014 <__libc_init_array+0x40>)
 8001fe6:	4c0c      	ldr	r4, [pc, #48]	; (8002018 <__libc_init_array+0x44>)
 8001fe8:	f000 f820 	bl	800202c <_init>
 8001fec:	1ba4      	subs	r4, r4, r6
 8001fee:	10a4      	asrs	r4, r4, #2
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	42a5      	cmp	r5, r4
 8001ff4:	d105      	bne.n	8002002 <__libc_init_array+0x2e>
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ffc:	4798      	blx	r3
 8001ffe:	3501      	adds	r5, #1
 8002000:	e7ee      	b.n	8001fe0 <__libc_init_array+0xc>
 8002002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002006:	4798      	blx	r3
 8002008:	3501      	adds	r5, #1
 800200a:	e7f2      	b.n	8001ff2 <__libc_init_array+0x1e>
 800200c:	08002084 	.word	0x08002084
 8002010:	08002084 	.word	0x08002084
 8002014:	08002084 	.word	0x08002084
 8002018:	08002088 	.word	0x08002088

0800201c <memset>:
 800201c:	4402      	add	r2, r0
 800201e:	4603      	mov	r3, r0
 8002020:	4293      	cmp	r3, r2
 8002022:	d100      	bne.n	8002026 <memset+0xa>
 8002024:	4770      	bx	lr
 8002026:	f803 1b01 	strb.w	r1, [r3], #1
 800202a:	e7f9      	b.n	8002020 <memset+0x4>

0800202c <_init>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr

08002038 <_fini>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	bf00      	nop
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr
