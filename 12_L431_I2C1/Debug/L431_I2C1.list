
L431_I2C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002090  08002090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002090  08002090  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002090  08002090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002090  08002090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002094  08002094  00012094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080020a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080020a4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a011  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a0  00000000  00000000  0002a04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f7b4  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085d0  00000000  00000000  0004c21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc5b6  00000000  00000000  000547ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ec  00000000  00000000  00110e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002038 	.word	0x08002038

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002038 	.word	0x08002038

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f91a 	bl	8000410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 f80d 	bl	80001fc <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f001 fe45 	bl	8001e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <HAL_InitTick+0x68>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d022      	beq.n	8000256 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <HAL_InitTick+0x6c>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <HAL_InitTick+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f91a 	bl	800045e <HAL_SYSTICK_Config>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d10f      	bne.n	8000250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b0f      	cmp	r3, #15
 8000234:	d809      	bhi.n	800024a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000236:	2200      	movs	r2, #0
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	f04f 30ff 	mov.w	r0, #4294967295
 800023e:	f000 f8f2 	bl	8000426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x70>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	e007      	b.n	800025a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800024a:	2301      	movs	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e004      	b.n	800025a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e001      	b.n	800025a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800025a:	7bfb      	ldrb	r3, [r7, #15]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x1c>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4413      	add	r3, r2
 800027e:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x1c>)
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000028 	.word	0x20000028
 8000290:	20000004 	.word	0x20000004

08000294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <HAL_GetTick+0x14>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	db0a      	blt.n	800033a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	490c      	ldr	r1, [pc, #48]	; (800035c <__NVIC_SetPriority+0x4c>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000338:	e00a      	b.n	8000350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <__NVIC_SetPriority+0x50>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 030f 	and.w	r3, r3, #15
 8000346:	3b04      	subs	r3, #4
 8000348:	0112      	lsls	r2, r2, #4
 800034a:	b2d2      	uxtb	r2, r2
 800034c:	440b      	add	r3, r1
 800034e:	761a      	strb	r2, [r3, #24]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000e100 	.word	0xe000e100
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	f1c3 0307 	rsb	r3, r3, #7
 800037e:	2b04      	cmp	r3, #4
 8000380:	bf28      	it	cs
 8000382:	2304      	movcs	r3, #4
 8000384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3304      	adds	r3, #4
 800038a:	2b06      	cmp	r3, #6
 800038c:	d902      	bls.n	8000394 <NVIC_EncodePriority+0x30>
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3b03      	subs	r3, #3
 8000392:	e000      	b.n	8000396 <NVIC_EncodePriority+0x32>
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 32ff 	mov.w	r2, #4294967295
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	43da      	mvns	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	401a      	ands	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ac:	f04f 31ff 	mov.w	r1, #4294967295
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43d9      	mvns	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	4313      	orrs	r3, r2
         );
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003dc:	d301      	bcc.n	80003e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003de:	2301      	movs	r3, #1
 80003e0:	e00f      	b.n	8000402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <SysTick_Config+0x40>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ea:	210f      	movs	r1, #15
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f7ff ff8e 	bl	8000310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <SysTick_Config+0x40>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fa:	4b04      	ldr	r3, [pc, #16]	; (800040c <SysTick_Config+0x40>)
 80003fc:	2207      	movs	r2, #7
 80003fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	e000e010 	.word	0xe000e010

08000410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff47 	bl	80002ac <__NVIC_SetPriorityGrouping>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	4603      	mov	r3, r0
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000438:	f7ff ff5c 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 800043c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	68b9      	ldr	r1, [r7, #8]
 8000442:	6978      	ldr	r0, [r7, #20]
 8000444:	f7ff ff8e 	bl	8000364 <NVIC_EncodePriority>
 8000448:	4602      	mov	r2, r0
 800044a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff5d 	bl	8000310 <__NVIC_SetPriority>
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ffb0 	bl	80003cc <SysTick_Config>
 800046c:	4603      	mov	r3, r0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000486:	e154      	b.n	8000732 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	f000 8146 	beq.w	800072c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d003      	beq.n	80004b0 <HAL_GPIO_Init+0x38>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2b12      	cmp	r3, #18
 80004ae:	d123      	bne.n	80004f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	08da      	lsrs	r2, r3, #3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3208      	adds	r2, #8
 80004b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	f003 0307 	and.w	r3, r3, #7
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	220f      	movs	r2, #15
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	691a      	ldr	r2, [r3, #16]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	08da      	lsrs	r2, r3, #3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3208      	adds	r2, #8
 80004f2:	6939      	ldr	r1, [r7, #16]
 80004f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	2203      	movs	r2, #3
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	43db      	mvns	r3, r3
 800050a:	693a      	ldr	r2, [r7, #16]
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f003 0203 	and.w	r2, r3, #3
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	4313      	orrs	r3, r2
 8000524:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d00b      	beq.n	800054c <HAL_GPIO_Init+0xd4>
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d007      	beq.n	800054c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000540:	2b11      	cmp	r3, #17
 8000542:	d003      	beq.n	800054c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2b12      	cmp	r3, #18
 800054a:	d130      	bne.n	80005ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2203      	movs	r2, #3
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4313      	orrs	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000582:	2201      	movs	r2, #1
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	4013      	ands	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	091b      	lsrs	r3, r3, #4
 8000598:	f003 0201 	and.w	r2, r3, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2203      	movs	r2, #3
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 80a0 	beq.w	800072c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ec:	4b58      	ldr	r3, [pc, #352]	; (8000750 <HAL_GPIO_Init+0x2d8>)
 80005ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f0:	4a57      	ldr	r2, [pc, #348]	; (8000750 <HAL_GPIO_Init+0x2d8>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6613      	str	r3, [r2, #96]	; 0x60
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <HAL_GPIO_Init+0x2d8>)
 80005fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000604:	4a53      	ldr	r2, [pc, #332]	; (8000754 <HAL_GPIO_Init+0x2dc>)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	3302      	adds	r3, #2
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	f003 0303 	and.w	r3, r3, #3
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	220f      	movs	r2, #15
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800062e:	d019      	beq.n	8000664 <HAL_GPIO_Init+0x1ec>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a49      	ldr	r2, [pc, #292]	; (8000758 <HAL_GPIO_Init+0x2e0>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d013      	beq.n	8000660 <HAL_GPIO_Init+0x1e8>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a48      	ldr	r2, [pc, #288]	; (800075c <HAL_GPIO_Init+0x2e4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d00d      	beq.n	800065c <HAL_GPIO_Init+0x1e4>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a47      	ldr	r2, [pc, #284]	; (8000760 <HAL_GPIO_Init+0x2e8>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d007      	beq.n	8000658 <HAL_GPIO_Init+0x1e0>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a46      	ldr	r2, [pc, #280]	; (8000764 <HAL_GPIO_Init+0x2ec>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d101      	bne.n	8000654 <HAL_GPIO_Init+0x1dc>
 8000650:	2304      	movs	r3, #4
 8000652:	e008      	b.n	8000666 <HAL_GPIO_Init+0x1ee>
 8000654:	2307      	movs	r3, #7
 8000656:	e006      	b.n	8000666 <HAL_GPIO_Init+0x1ee>
 8000658:	2303      	movs	r3, #3
 800065a:	e004      	b.n	8000666 <HAL_GPIO_Init+0x1ee>
 800065c:	2302      	movs	r3, #2
 800065e:	e002      	b.n	8000666 <HAL_GPIO_Init+0x1ee>
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <HAL_GPIO_Init+0x1ee>
 8000664:	2300      	movs	r3, #0
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	f002 0203 	and.w	r2, r2, #3
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	4093      	lsls	r3, r2
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	4313      	orrs	r3, r2
 8000674:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000676:	4937      	ldr	r1, [pc, #220]	; (8000754 <HAL_GPIO_Init+0x2dc>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	3302      	adds	r3, #2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	43db      	mvns	r3, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80006a8:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	43db      	mvns	r3, r3
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80006fc:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	43db      	mvns	r3, r3
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	4013      	ands	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4313      	orrs	r3, r2
 8000724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_GPIO_Init+0x2f0>)
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	fa22 f303 	lsr.w	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	f47f aea3 	bne.w	8000488 <HAL_GPIO_Init+0x10>
  }
}
 8000742:	bf00      	nop
 8000744:	371c      	adds	r7, #28
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800
 8000760:	48000c00 	.word	0x48000c00
 8000764:	48001000 	.word	0x48001000
 8000768:	40010400 	.word	0x40010400

0800076c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e081      	b.n	8000882 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d106      	bne.n	8000798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f001 fab0 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2224      	movs	r2, #36	; 0x24
 800079c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f022 0201 	bic.w	r2, r2, #1
 80007ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d107      	bne.n	80007e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	e006      	b.n	80007f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689a      	ldr	r2, [r3, #8]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80007f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d104      	bne.n	8000806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	6812      	ldr	r2, [r2, #0]
 8000810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	ea42 0103 	orr.w	r1, r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	021a      	lsls	r2, r3, #8
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	430a      	orrs	r2, r1
 8000842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69d9      	ldr	r1, [r3, #28]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2220      	movs	r2, #32
 800086e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b20      	cmp	r3, #32
 800089e:	d138      	bne.n	8000912 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d101      	bne.n	80008ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80008aa:	2302      	movs	r3, #2
 80008ac:	e032      	b.n	8000914 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2224      	movs	r2, #36	; 0x24
 80008ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f022 0201 	bic.w	r2, r2, #1
 80008cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f042 0201 	orr.w	r2, r2, #1
 80008fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2220      	movs	r2, #32
 8000902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000912:	2302      	movs	r3, #2
  }
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b20      	cmp	r3, #32
 8000934:	d139      	bne.n	80009aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800093c:	2b01      	cmp	r3, #1
 800093e:	d101      	bne.n	8000944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000940:	2302      	movs	r3, #2
 8000942:	e033      	b.n	80009ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2224      	movs	r2, #36	; 0x24
 8000950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0201 	bic.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2220      	movs	r2, #32
 800099a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80009aa:	2302      	movs	r3, #2
  }
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40007000 	.word	0x40007000

080009d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e2:	d130      	bne.n	8000a46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009f0:	d038      	beq.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2232      	movs	r2, #50	; 0x32
 8000a08:	fb02 f303 	mul.w	r3, r2, r3
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a18:	e002      	b.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a2c:	d102      	bne.n	8000a34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f2      	bne.n	8000a1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a40:	d110      	bne.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e00f      	b.n	8000a66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a52:	d007      	beq.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a5c:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40007000 	.word	0x40007000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	431bde83 	.word	0x431bde83

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e3db      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a92:	4ba4      	ldr	r3, [pc, #656]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f003 030c 	and.w	r3, r3, #12
 8000a9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a9c:	4ba1      	ldr	r3, [pc, #644]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 80e1 	beq.w	8000c76 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <HAL_RCC_OscConfig+0x4a>
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	f040 8088 	bne.w	8000bd2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	f040 8084 	bne.w	8000bd2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000aca:	4b96      	ldr	r3, [pc, #600]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d005      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x62>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e3b3      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a1a      	ldr	r2, [r3, #32]
 8000ae6:	4b8f      	ldr	r3, [pc, #572]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <HAL_RCC_OscConfig+0x7c>
 8000af2:	4b8c      	ldr	r3, [pc, #560]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000afa:	e005      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
 8000afc:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d223      	bcs.n	8000b54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fd0f 	bl	8001534 <RCC_SetFlashLatencyFromMSIRange>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e394      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b20:	4b80      	ldr	r3, [pc, #512]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a7f      	ldr	r2, [pc, #508]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	497a      	ldr	r1, [pc, #488]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b3e:	4b79      	ldr	r3, [pc, #484]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	4975      	ldr	r1, [pc, #468]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	604b      	str	r3, [r1, #4]
 8000b52:	e022      	b.n	8000b9a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b54:	4b73      	ldr	r3, [pc, #460]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a72      	ldr	r2, [pc, #456]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b70      	ldr	r3, [pc, #448]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	496d      	ldr	r1, [pc, #436]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b72:	4b6c      	ldr	r3, [pc, #432]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4968      	ldr	r1, [pc, #416]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fcd2 	bl	8001534 <RCC_SetFlashLatencyFromMSIRange>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e357      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b9a:	f000 fc41 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <HAL_RCC_OscConfig+0x2a8>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bb6:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bba:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <HAL_RCC_OscConfig+0x2b0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb1c 	bl	80001fc <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d052      	beq.n	8000c74 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	e33b      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d032      	beq.n	8000c40 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bda:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb55 	bl	8000294 <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bee:	f7ff fb51 	bl	8000294 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e324      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c00:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f0      	beq.n	8000bee <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c0c:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	493f      	ldr	r1, [pc, #252]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	493a      	ldr	r1, [pc, #232]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	604b      	str	r3, [r1, #4]
 8000c3e:	e01a      	b.n	8000c76 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c40:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a37      	ldr	r2, [pc, #220]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c46:	f023 0301 	bic.w	r3, r3, #1
 8000c4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fb22 	bl	8000294 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c54:	f7ff fb1e 	bl	8000294 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e2f1      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x1d4>
 8000c72:	e000      	b.n	8000c76 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d074      	beq.n	8000d6c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d005      	beq.n	8000c94 <HAL_RCC_OscConfig+0x214>
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b0c      	cmp	r3, #12
 8000c8c:	d10e      	bne.n	8000cac <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d10b      	bne.n	8000cac <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d064      	beq.n	8000d6a <HAL_RCC_OscConfig+0x2ea>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d160      	bne.n	8000d6a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e2ce      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d106      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x244>
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0x280>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x268>
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0x280>
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_RCC_OscConfig+0x2a4>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d01c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d08:	f7ff fac4 	bl	8000294 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d0e:	e011      	b.n	8000d34 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fac0 	bl	8000294 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d90a      	bls.n	8000d34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e293      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	08002050 	.word	0x08002050
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d34:	4bae      	ldr	r3, [pc, #696]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0e7      	beq.n	8000d10 <HAL_RCC_OscConfig+0x290>
 8000d40:	e014      	b.n	8000d6c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d42:	f7ff faa7 	bl	8000294 <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4a:	f7ff faa3 	bl	8000294 <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b64      	cmp	r3, #100	; 0x64
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e276      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d5c:	4ba4      	ldr	r3, [pc, #656]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f0      	bne.n	8000d4a <HAL_RCC_OscConfig+0x2ca>
 8000d68:	e000      	b.n	8000d6c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d060      	beq.n	8000e3a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x30a>
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b0c      	cmp	r3, #12
 8000d82:	d119      	bne.n	8000db8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d8a:	4b99      	ldr	r3, [pc, #612]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x322>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e253      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b93      	ldr	r3, [pc, #588]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	498f      	ldr	r1, [pc, #572]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000db6:	e040      	b.n	8000e3a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a8a      	ldr	r2, [pc, #552]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fa62 	bl	8000294 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fa5e 	bl	8000294 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e231      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000de6:	4b82      	ldr	r3, [pc, #520]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	061b      	lsls	r3, r3, #24
 8000e00:	497b      	ldr	r1, [pc, #492]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
 8000e06:	e018      	b.n	8000e3a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e08:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a78      	ldr	r2, [pc, #480]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fa3e 	bl	8000294 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fa3a 	bl	8000294 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e20d      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e2e:	4b70      	ldr	r3, [pc, #448]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e54:	4a66      	ldr	r2, [pc, #408]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fa19 	bl	8000294 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fa15 	bl	8000294 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1e8      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e78:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0ef      	beq.n	8000e66 <HAL_RCC_OscConfig+0x3e6>
 8000e86:	e01b      	b.n	8000ec0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e88:	4b59      	ldr	r3, [pc, #356]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e8e:	4a58      	ldr	r2, [pc, #352]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff f9fc 	bl	8000294 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff f9f8 	bl	8000294 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1cb      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000eb2:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1ef      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a5 	beq.w	8001018 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ed2:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10d      	bne.n	8000efa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	4a43      	ldr	r2, [pc, #268]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eea:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_RCC_OscConfig+0x574>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d118      	bne.n	8000f38 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <HAL_RCC_OscConfig+0x574>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a3a      	ldr	r2, [pc, #232]	; (8000ff4 <HAL_RCC_OscConfig+0x574>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff f9bf 	bl	8000294 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1a:	f7ff f9bb 	bl	8000294 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e18e      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <HAL_RCC_OscConfig+0x574>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f0      	beq.n	8000f1a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_RCC_OscConfig+0x4d2>
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f46:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f50:	e024      	b.n	8000f9c <HAL_RCC_OscConfig+0x51c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d110      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4fc>
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f7a:	e00f      	b.n	8000f9c <HAL_RCC_OscConfig+0x51c>
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d016      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa4:	f7ff f976 	bl	8000294 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000faa:	e00a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fac:	f7ff f972 	bl	8000294 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e143      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x570>)
 8000fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ed      	beq.n	8000fac <HAL_RCC_OscConfig+0x52c>
 8000fd0:	e019      	b.n	8001006 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd2:	f7ff f95f 	bl	8000294 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fd8:	e00e      	b.n	8000ff8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f7ff f95b 	bl	8000294 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d905      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e12c      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ff8:	4b96      	ldr	r3, [pc, #600]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8000ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e9      	bne.n	8000fda <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100c:	4b91      	ldr	r3, [pc, #580]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	4a90      	ldr	r2, [pc, #576]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001016:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b00      	cmp	r3, #0
 8001022:	d03c      	beq.n	800109e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01c      	beq.n	8001066 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800102c:	4b89      	ldr	r3, [pc, #548]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800102e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001032:	4a88      	ldr	r2, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff f92a 	bl	8000294 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001044:	f7ff f926 	bl	8000294 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e0f9      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ef      	beq.n	8001044 <HAL_RCC_OscConfig+0x5c4>
 8001064:	e01b      	b.n	800109e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001066:	4b7b      	ldr	r3, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800106c:	4a79      	ldr	r2, [pc, #484]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff f90d 	bl	8000294 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800107e:	f7ff f909 	bl	8000294 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e0dc      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001090:	4b70      	ldr	r3, [pc, #448]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1ef      	bne.n	800107e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80d0 	beq.w	8001248 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	f000 808d 	beq.w	80011ca <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d15a      	bne.n	800116e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b8:	4b66      	ldr	r3, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a65      	ldr	r2, [pc, #404]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80010be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff f8e6 	bl	8000294 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff f8e2 	bl	8000294 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e0b5      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x7d8>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010fa:	3a01      	subs	r2, #1
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	4311      	orrs	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001104:	0212      	lsls	r2, r2, #8
 8001106:	4311      	orrs	r1, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800110c:	0852      	lsrs	r2, r2, #1
 800110e:	3a01      	subs	r2, #1
 8001110:	0552      	lsls	r2, r2, #21
 8001112:	4311      	orrs	r1, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001118:	0852      	lsrs	r2, r2, #1
 800111a:	3a01      	subs	r2, #1
 800111c:	0652      	lsls	r2, r2, #25
 800111e:	4311      	orrs	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001124:	06d2      	lsls	r2, r2, #27
 8001126:	430a      	orrs	r2, r1
 8001128:	494a      	ldr	r1, [pc, #296]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001138:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001144:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff f8a5 	bl	8000294 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff f8a1 	bl	8000294 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e074      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x6ce>
 800116c:	e06c      	b.n	8001248 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a38      	ldr	r2, [pc, #224]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001178:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a32      	ldr	r2, [pc, #200]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 800118c:	f023 0303 	bic.w	r3, r3, #3
 8001190:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 8001198:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800119c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff f877 	bl	8000294 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff f873 	bl	8000294 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e046      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x72a>
 80011c8:	e03e      	b.n	8001248 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e039      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_RCC_OscConfig+0x7d4>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d12c      	bne.n	8001244 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	3b01      	subs	r3, #1
 80011f6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d123      	bne.n	8001244 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001208:	429a      	cmp	r2, r3
 800120a:	d11b      	bne.n	8001244 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001218:	429a      	cmp	r2, r3
 800121a:	d113      	bne.n	8001244 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	3b01      	subs	r3, #1
 800122a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800122c:	429a      	cmp	r2, r3
 800122e:	d109      	bne.n	8001244 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	3b01      	subs	r3, #1
 800123e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	019d808c 	.word	0x019d808c

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0c8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b66      	ldr	r3, [pc, #408]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d910      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4961      	ldr	r1, [pc, #388]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b0      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d04c      	beq.n	8001346 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d107      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b4:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d121      	bne.n	8001304 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e09e      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d115      	bne.n	8001304 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e092      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e086      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e07e      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 0203 	bic.w	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	493f      	ldr	r1, [pc, #252]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001316:	f7fe ffbd 	bl	8000294 <HAL_GetTick>
 800131a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131c:	e00a      	b.n	8001334 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131e:	f7fe ffb9 	bl	8000294 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e066      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 020c 	and.w	r2, r3, #12
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	429a      	cmp	r2, r3
 8001344:	d1eb      	bne.n	800131e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	492c      	ldr	r1, [pc, #176]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d210      	bcs.n	8001394 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0207 	bic.w	r2, r3, #7
 800137a:	4924      	ldr	r1, [pc, #144]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1b0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e036      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4918      	ldr	r1, [pc, #96]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4910      	ldr	r1, [pc, #64]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d2:	f000 f825 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013d6:	4601      	mov	r1, r0
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_RCC_ClockConfig+0x1b4>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	fa21 f303 	lsr.w	r3, r1, r3
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff00 	bl	80001fc <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001400:	7afb      	ldrb	r3, [r7, #11]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000
 8001410:	40021000 	.word	0x40021000
 8001414:	08002050 	.word	0x08002050
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x34>
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d121      	bne.n	8001492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d11e      	bne.n	8001492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e005      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_RCC_GetSysClockFreq+0x108>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10d      	bne.n	80014a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d102      	bne.n	800149e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_GetSysClockFreq+0x10c>)
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	e004      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_GetSysClockFreq+0x110>)
 80014a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d133      	bne.n	8001516 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0xaa>
 80014c2:	e005      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_RCC_GetSysClockFreq+0x10c>)
 80014c6:	617b      	str	r3, [r7, #20]
      break;
 80014c8:	e005      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCC_GetSysClockFreq+0x110>)
 80014cc:	617b      	str	r3, [r7, #20]
      break;
 80014ce:	e002      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	617b      	str	r3, [r7, #20]
      break;
 80014d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	3301      	adds	r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_GetSysClockFreq+0x104>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0e5b      	lsrs	r3, r3, #25
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001516:	69bb      	ldr	r3, [r7, #24]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3724      	adds	r7, #36	; 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	08002060 	.word	0x08002060
 800152c:	00f42400 	.word	0x00f42400
 8001530:	017d7840 	.word	0x017d7840

08001534 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800154c:	f7ff fa34 	bl	80009b8 <HAL_PWREx_GetVoltageRange>
 8001550:	6178      	str	r0, [r7, #20]
 8001552:	e014      	b.n	800157e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	4a24      	ldr	r2, [pc, #144]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6593      	str	r3, [r2, #88]	; 0x58
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800156c:	f7ff fa24 	bl	80009b8 <HAL_PWREx_GetVoltageRange>
 8001570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001584:	d10b      	bne.n	800159e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b80      	cmp	r3, #128	; 0x80
 800158a:	d919      	bls.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2ba0      	cmp	r3, #160	; 0xa0
 8001590:	d902      	bls.n	8001598 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001592:	2302      	movs	r3, #2
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	e013      	b.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001598:	2301      	movs	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	e010      	b.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b80      	cmp	r3, #128	; 0x80
 80015a2:	d902      	bls.n	80015aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80015a4:	2303      	movs	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	e00a      	b.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b80      	cmp	r3, #128	; 0x80
 80015ae:	d102      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e004      	b.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b70      	cmp	r3, #112	; 0x70
 80015ba:	d101      	bne.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015bc:	2301      	movs	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 0207 	bic.w	r2, r3, #7
 80015c8:	4909      	ldr	r1, [pc, #36]	; (80015f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d001      	beq.n	80015e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40022000 	.word	0x40022000

080015f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80015fc:	2300      	movs	r3, #0
 80015fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001600:	2300      	movs	r3, #0
 8001602:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160c:	2b00      	cmp	r3, #0
 800160e:	d02f      	beq.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001618:	d005      	beq.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800161a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800161e:	d015      	beq.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001624:	e00f      	b.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	4a5c      	ldr	r2, [pc, #368]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001632:	e00c      	b.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f9f0 	bl	8001a20 <RCCEx_PLLSAI1_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001644:	e003      	b.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	74fb      	strb	r3, [r7, #19]
      break;
 800164a:	e000      	b.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800164c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10b      	bne.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	494e      	ldr	r1, [pc, #312]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001664:	4313      	orrs	r3, r2
 8001666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800166a:	e001      	b.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 809e 	beq.w	80017ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00d      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6593      	str	r3, [r2, #88]	; 0x58
 80016a4:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a39      	ldr	r2, [pc, #228]	; (80017a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016c0:	f7fe fde8 	bl	8000294 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80016c6:	e009      	b.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7fe fde4 	bl	8000294 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d902      	bls.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	74fb      	strb	r3, [r7, #19]
        break;
 80016da:	e005      	b.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ef      	beq.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80016e8:	7cfb      	ldrb	r3, [r7, #19]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d15a      	bne.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01e      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	429a      	cmp	r2, r3
 8001708:	d019      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001714:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d016      	beq.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7fe fda4 	bl	8000294 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174e:	e00b      	b.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7fe fda0 	bl	8000294 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d902      	bls.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	74fb      	strb	r3, [r7, #19]
            break;
 8001766:	e006      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ec      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001776:	7cfb      	ldrb	r3, [r7, #19]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10b      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4904      	ldr	r1, [pc, #16]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800178c:	4313      	orrs	r3, r2
 800178e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001792:	e009      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	74bb      	strb	r3, [r7, #18]
 8001798:	e006      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017a4:	7cfb      	ldrb	r3, [r7, #19]
 80017a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a8:	7c7b      	ldrb	r3, [r7, #17]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b9b      	ldr	r3, [pc, #620]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a9a      	ldr	r2, [pc, #616]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017c6:	4b95      	ldr	r3, [pc, #596]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017cc:	f023 0203 	bic.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4991      	ldr	r1, [pc, #580]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017e8:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	f023 020c 	bic.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	4989      	ldr	r1, [pc, #548]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800180c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001810:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	4980      	ldr	r1, [pc, #512]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800181a:	4313      	orrs	r3, r2
 800181c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800182c:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	4978      	ldr	r1, [pc, #480]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800183c:	4313      	orrs	r3, r2
 800183e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	496f      	ldr	r1, [pc, #444]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00a      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4967      	ldr	r1, [pc, #412]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001892:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	495e      	ldr	r1, [pc, #376]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	4956      	ldr	r1, [pc, #344]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d028      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018f8:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	4945      	ldr	r1, [pc, #276]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001916:	d106      	bne.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a3f      	ldr	r2, [pc, #252]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800191e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001922:	60d3      	str	r3, [r2, #12]
 8001924:	e011      	b.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800192e:	d10c      	bne.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	2101      	movs	r1, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f872 	bl	8001a20 <RCCEx_PLLSAI1_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	492d      	ldr	r1, [pc, #180]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001974:	d106      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800197c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001980:	60d3      	str	r3, [r2, #12]
 8001982:	e011      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	2101      	movs	r1, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f843 	bl	8001a20 <RCCEx_PLLSAI1_Config>
 800199a:	4603      	mov	r3, r0
 800199c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800199e:	7cfb      	ldrb	r3, [r7, #19]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d2:	d10c      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	2102      	movs	r1, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f820 	bl	8001a20 <RCCEx_PLLSAI1_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80019fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	4904      	ldr	r1, [pc, #16]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d018      	beq.n	8001a6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a3a:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d10d      	bne.n	8001a66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
       ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d044      	beq.n	8001af0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e041      	b.n	8001af0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d00c      	beq.n	8001a8e <RCCEx_PLLSAI1_Config+0x6e>
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d013      	beq.n	8001aa0 <RCCEx_PLLSAI1_Config+0x80>
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d120      	bne.n	8001abe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001a7c:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11d      	bne.n	8001ac4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a8c:	e01a      	b.n	8001ac4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9e:	e013      	b.n	8001ac8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001aa0:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001abc:	e006      	b.n	8001acc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac2:	e004      	b.n	8001ace <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ac4:	bf00      	nop
 8001ac6:	e002      	b.n	8001ace <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ac8:	bf00      	nop
 8001aca:	e000      	b.n	8001ace <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001acc:	bf00      	nop
    }

    if(status == HAL_OK)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ad4:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	4944      	ldr	r1, [pc, #272]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d17c      	bne.n	8001bf0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a40      	ldr	r2, [pc, #256]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001afc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b02:	f7fe fbc7 	bl	8000294 <HAL_GetTick>
 8001b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001b08:	e009      	b.n	8001b1e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b0a:	f7fe fbc3 	bl	8000294 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d902      	bls.n	8001b1e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	73fb      	strb	r3, [r7, #15]
        break;
 8001b1c:	e005      	b.n	8001b2a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d15f      	bne.n	8001bf0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d110      	bne.n	8001b58 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6892      	ldr	r2, [r2, #8]
 8001b46:	0211      	lsls	r1, r2, #8
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68d2      	ldr	r2, [r2, #12]
 8001b4c:	06d2      	lsls	r2, r2, #27
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	492a      	ldr	r1, [pc, #168]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	610b      	str	r3, [r1, #16]
 8001b56:	e027      	b.n	8001ba8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d112      	bne.n	8001b84 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6892      	ldr	r2, [r2, #8]
 8001b6e:	0211      	lsls	r1, r2, #8
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6912      	ldr	r2, [r2, #16]
 8001b74:	0852      	lsrs	r2, r2, #1
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0552      	lsls	r2, r2, #21
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	491f      	ldr	r1, [pc, #124]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	610b      	str	r3, [r1, #16]
 8001b82:	e011      	b.n	8001ba8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6892      	ldr	r2, [r2, #8]
 8001b94:	0211      	lsls	r1, r2, #8
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6952      	ldr	r2, [r2, #20]
 8001b9a:	0852      	lsrs	r2, r2, #1
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	0652      	lsls	r2, r2, #25
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	4916      	ldr	r1, [pc, #88]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7fe fb6e 	bl	8000294 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bba:	e009      	b.n	8001bd0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001bbc:	f7fe fb6a 	bl	8000294 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d902      	bls.n	8001bd0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8001bce:	e005      	b.n	8001bdc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ef      	beq.n	8001bbc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4904      	ldr	r1, [pc, #16]	; (8001bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_GPIO_Init+0x74>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <MX_I2C2_Init+0x78>)
 8001c80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <MX_I2C2_Init+0x7c>)
 8001c86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_I2C2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_I2C2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cb2:	480e      	ldr	r0, [pc, #56]	; (8001cec <MX_I2C2_Init+0x74>)
 8001cb4:	f7fe fd5a 	bl	800076c <HAL_I2C_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cbe:	f000 f8d5 	bl	8001e6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <MX_I2C2_Init+0x74>)
 8001cc6:	f7fe fde0 	bl	800088a <HAL_I2CEx_ConfigAnalogFilter>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cd0:	f000 f8cc 	bl	8001e6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_I2C2_Init+0x74>)
 8001cd8:	f7fe fe22 	bl	8000920 <HAL_I2CEx_ConfigDigitalFilter>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f000 f8c3 	bl	8001e6c <Error_Handler>
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000002c 	.word	0x2000002c
 8001cf0:	40005800 	.word	0x40005800
 8001cf4:	10909cec 	.word	0x10909cec

08001cf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_I2C_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d128      	bne.n	8001d6c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d32:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d38:	2312      	movs	r3, #18
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d44:	2304      	movs	r3, #4
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_I2C_MspInit+0x84>)
 8001d50:	f7fe fb92 	bl	8000478 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40005800 	.word	0x40005800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d84:	f7fe fa22 	bl	80001cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d88:	f000 f805 	bl	8001d96 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8c:	f7ff ff38 	bl	8001c00 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001d90:	f7ff ff72 	bl	8001c78 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <main+0x14>

08001d96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b0ae      	sub	sp, #184	; 0xb8
 8001d9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001da0:	2244      	movs	r2, #68	; 0x44
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f93f 	bl	8002028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001daa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	225c      	movs	r2, #92	; 0x5c
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f931 	bl	8002028 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001ddc:	2305      	movs	r3, #5
 8001dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001de2:	2320      	movs	r3, #32
 8001de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001de8:	2307      	movs	r3, #7
 8001dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe3e 	bl	8000a80 <HAL_RCC_OscConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001e0a:	f000 f82f 	bl	8001e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0e:	230f      	movs	r3, #15
 8001e10:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	2303      	movs	r3, #3
 8001e14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e26:	2104      	movs	r1, #4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fa17 	bl	800125c <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e34:	f000 f81a 	bl	8001e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fbd6 	bl	80015f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001e4e:	f000 f80d 	bl	8001e6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e56:	f7fe fdbd 	bl	80009d4 <HAL_PWREx_ControlVoltageScaling>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001e60:	f000 f804 	bl	8001e6c <Error_Handler>
  }
}
 8001e64:	bf00      	nop
 8001e66:	37b8      	adds	r7, #184	; 0xb8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f7fe f9aa 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <SystemInit+0x64>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <SystemInit+0x64>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <SystemInit+0x68>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <SystemInit+0x68>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <SystemInit+0x68>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <SystemInit+0x68>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <SystemInit+0x68>)
 8001f4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <SystemInit+0x68>)
 8001f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <SystemInit+0x68>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <SystemInit+0x68>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <SystemInit+0x68>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SystemInit+0x64>)
 8001f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f76:	609a      	str	r2, [r3, #8]
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	40021000 	.word	0x40021000

08001f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f92:	e003      	b.n	8001f9c <LoopCopyDataInit>

08001f94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f9a:	3104      	adds	r1, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fa4:	d3f6      	bcc.n	8001f94 <CopyDataInit>
	ldr	r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fa8:	e002      	b.n	8001fb0 <LoopFillZerobss>

08001faa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001faa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fac:	f842 3b04 	str.w	r3, [r2], #4

08001fb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fb4:	d3f9      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fb6:	f7ff ffb3 	bl	8001f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f000 f811 	bl	8001fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fbe:	f7ff fedf 	bl	8001d80 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001fc8:	08002098 	.word	0x08002098
	ldr	r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fd0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001fd4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001fd8:	20000078 	.word	0x20000078

08001fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_IRQHandler>
	...

08001fe0 <__libc_init_array>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	4e0d      	ldr	r6, [pc, #52]	; (8002018 <__libc_init_array+0x38>)
 8001fe4:	4c0d      	ldr	r4, [pc, #52]	; (800201c <__libc_init_array+0x3c>)
 8001fe6:	1ba4      	subs	r4, r4, r6
 8001fe8:	10a4      	asrs	r4, r4, #2
 8001fea:	2500      	movs	r5, #0
 8001fec:	42a5      	cmp	r5, r4
 8001fee:	d109      	bne.n	8002004 <__libc_init_array+0x24>
 8001ff0:	4e0b      	ldr	r6, [pc, #44]	; (8002020 <__libc_init_array+0x40>)
 8001ff2:	4c0c      	ldr	r4, [pc, #48]	; (8002024 <__libc_init_array+0x44>)
 8001ff4:	f000 f820 	bl	8002038 <_init>
 8001ff8:	1ba4      	subs	r4, r4, r6
 8001ffa:	10a4      	asrs	r4, r4, #2
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	42a5      	cmp	r5, r4
 8002000:	d105      	bne.n	800200e <__libc_init_array+0x2e>
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002008:	4798      	blx	r3
 800200a:	3501      	adds	r5, #1
 800200c:	e7ee      	b.n	8001fec <__libc_init_array+0xc>
 800200e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002012:	4798      	blx	r3
 8002014:	3501      	adds	r5, #1
 8002016:	e7f2      	b.n	8001ffe <__libc_init_array+0x1e>
 8002018:	08002090 	.word	0x08002090
 800201c:	08002090 	.word	0x08002090
 8002020:	08002090 	.word	0x08002090
 8002024:	08002094 	.word	0x08002094

08002028 <memset>:
 8002028:	4402      	add	r2, r0
 800202a:	4603      	mov	r3, r0
 800202c:	4293      	cmp	r3, r2
 800202e:	d100      	bne.n	8002032 <memset+0xa>
 8002030:	4770      	bx	lr
 8002032:	f803 1b01 	strb.w	r1, [r3], #1
 8002036:	e7f9      	b.n	800202c <memset+0x4>

08002038 <_init>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	bf00      	nop
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr

08002044 <_fini>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	bf00      	nop
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr
